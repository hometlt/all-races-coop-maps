<?xml version="1.0" encoding="utf-8"?>
<TriggerData>
    <Root>
        <Item Type="CustomScript" Id="65B1853B"/>
    </Root>
    <Element Type="CustomScript" Id="65B1853B">
        <ScriptCode>
            //==================================================================================================
            // 
            // Generated Map Script
            // 
            // Name:   RTC 2017: Dylarian Shipyards
            // 
            //==================================================================================================
            include &quot;TriggerLibs/NativeLib&quot;
            include &quot;TriggerLibs/SwarmLib&quot;
            include &quot;LibCOMI&quot;
            
            //--------------------------------------------------------------------------------------------------
            // Library Initialization
            //--------------------------------------------------------------------------------------------------
            void InitLibs () {
                libNtve_InitLib();
                libHots_InitLib();
                libCOMI_InitLib();
            }
            
            //--------------------------------------------------------------------------------------------------
            // Constants
            //--------------------------------------------------------------------------------------------------
            const int gv_pLAYER_01_USER = 1;
            const int gv_pLAYER_02_USER = 2;
            const int gv_pLAYER_03_ENEMY = 3;
            const int gv_pLAYER_04_ENEMY = 4;
            const int gv_pLAYER_05_PILOT = 5;
            
            //--------------------------------------------------------------------------------------------------
            // Global Variables
            //--------------------------------------------------------------------------------------------------
            playergroup gv_enemyGroup;
            unitgroup[5] gv_pilot;
            unitgroup gv_escort;
            unit[5] gv_crate;
            unit[5] gv_hybrid;
            timer gv_objectiveTimer;
            int gv_objectiveTimerWindow;
            timer gv_defenseTimer;
            int gv_defenseTimerWindow;
            int gv_area;
            int gv_battlecruiserCount;
            int gv_deadPilot;
            int[6] gv_pilotMarker;
            unitgroup[3] gv_acquiredBattlecruisers;
            int[11] gv_pilotObjectiveMarkers;
            int gv_remainingPilot;
            int gv_destroyedLoki;
            int[3] gv_lokiPIng;
            point gv_victoryCompletePan;
            point gv_attackWaveA_Wave05Path;
            region[3][11] gv_attackSpawn;
            int gv_objectiveKillHybridNemesis;
            int gv_objectiveBattlecruisersAcquired;
            int gv_objectiveRescuePilot;
            int gv_objectivePreventTimerExpire;
            int gv_objectiveDestroyLoki;
            
            void InitGlobals () {
                int init_i;
            
                gv_enemyGroup = PlayerGroupEmpty();
                for (init_i = 0; init_i &lt;= 4; init_i += 1) {
                    gv_pilot[init_i] = UnitGroupEmpty();
                }
                gv_escort = UnitGroupEmpty();
                gv_objectiveTimer = TimerCreate();
                gv_objectiveTimerWindow = c_timerWindowNone;
                gv_defenseTimer = TimerCreate();
                gv_defenseTimerWindow = c_timerWindowNone;
                for (init_i = 0; init_i &lt;= 5; init_i += 1) {
                    gv_pilotMarker[init_i] = c_invalidPingId;
                }
                for (init_i = 0; init_i &lt;= 2; init_i += 1) {
                    gv_acquiredBattlecruisers[init_i] = UnitGroupEmpty();
                }
                for (init_i = 0; init_i &lt;= 10; init_i += 1) {
                    gv_pilotObjectiveMarkers[init_i] = c_invalidPingId;
                }
                gv_remainingPilot = 16;
                for (init_i = 0; init_i &lt;= 2; init_i += 1) {
                    gv_lokiPIng[init_i] = c_invalidPingId;
                }
                gv_objectiveKillHybridNemesis = c_invalidObjectiveId;
                gv_objectiveBattlecruisersAcquired = c_invalidObjectiveId;
                gv_objectiveRescuePilot = c_invalidObjectiveId;
                gv_objectivePreventTimerExpire = c_invalidObjectiveId;
                gv_objectiveDestroyLoki = c_invalidObjectiveId;
            }
            
            //--------------------------------------------------------------------------------------------------
            // Global Function Declarations
            //--------------------------------------------------------------------------------------------------
            void gf_RunMissionEvent (trigger lp_missionEventTrigger, fixed lp_missionEventTime);
            void gf_BridgeOpen (unit lp_bridge);
            void gf_PathPing ();
            void gf_PilotMoving ();
            void gf_BattlecruiserOperational (unit lp_battlecruiser);
            point gf_AttackWaveSpawn ();
            void gf_RunAttackWaveatMissionTime (trigger lp_attackWave, fixed lp_time);
            
            //--------------------------------------------------------------------------------------------------
            // Trigger Variables
            //--------------------------------------------------------------------------------------------------
            trigger gt_Init01LoadData;
            trigger gt_Init02Players;
            trigger gt_Init03LoadingComplete;
            trigger gt_Init04Technology;
            trigger gt_Init05Units;
            trigger gt_Init06MusicSound;
            trigger gt_Init07Environment;
            trigger gt_Init08Difficulties;
            trigger gt_DebugCantFail;
            trigger gt_StartGameQ;
            trigger gt_ObjectiveTimerWindowFirstHybirdCaptured;
            trigger gt_SecondHybridCaptured;
            trigger gt_ThirdHybridCaptured;
            trigger gt_ForthHybridCaptured;
            trigger gt_HybirdAttacked;
            trigger gt_DefenseTimerWindow;
            trigger gt_DefenseAI;
            trigger gt_DefenseTimerExpired;
            trigger gt_PilotDead;
            trigger gt_PilotCheck;
            trigger gt_PilotCheckFinal;
            trigger gt_BC01;
            trigger gt_BCOperational01;
            trigger gt_BC02;
            trigger gt_BCOperational02;
            trigger gt_BC03;
            trigger gt_BCOperational03;
            trigger gt_BC04;
            trigger gt_BCOperational04;
            trigger gt_BC05;
            trigger gt_BCOperational05;
            trigger gt_BC06;
            trigger gt_BCOperational06;
            trigger gt_BC07;
            trigger gt_BCOperational07;
            trigger gt_BC08;
            trigger gt_BCOperational08;
            trigger gt_BC09;
            trigger gt_BCOperational09;
            trigger gt_BC10;
            trigger gt_BCOperational10;
            trigger gt_BC11;
            trigger gt_BCOperational11;
            trigger gt_BC12;
            trigger gt_BCOperational12;
            trigger gt_BC13;
            trigger gt_BCOperational13;
            trigger gt_BC14;
            trigger gt_BCOperational14;
            trigger gt_BC15;
            trigger gt_BCOperational15;
            trigger gt_BCOperational16;
            trigger gt_UpdatePilotCount;
            trigger gt_UpdateBattlecruisersCount;
            trigger gt_HybridNemesisDefeat;
            trigger gt_BattlecruiserDefeat;
            trigger gt_LokiLeftDisover;
            trigger gt_LokiRightDisover;
            trigger gt_LokiBehavior;
            trigger gt_LokiDestroyed;
            trigger gt_EnemyAttackingQ;
            trigger gt_LokiQ;
            trigger gt_LokiDisoveredQ;
            trigger gt_DefeatPrimaryObjectiveFailed;
            trigger gt_VictoryPrimaryObjectiveComplete;
            trigger gt_VictorySequence;
            trigger gt_VictoryFanfareQ;
            trigger gt_Victory;
            trigger gt_Defeat;
            trigger gt_StartAI;
            trigger gt_SetupAttackWaveSpawn;
            trigger gt_AIAttackWaves;
            trigger gt_AttackWave01;
            trigger gt_AttackWave02;
            trigger gt_AttackWave03;
            trigger gt_AttackWave04;
            trigger gt_AttackWave05;
            trigger gt_AttackWave06;
            trigger gt_AttackWave07;
            trigger gt_ObjectiveKillHybridNemesisCreate;
            trigger gt_ObjectiveKillHybridNemesisComplete;
            trigger gt_ObjectiveKillHybridNemesisUpdate;
            trigger gt_ObjectiveKillHybridNemesisFailed;
            trigger gt_ObjectiveBattlecruisersAcquiredCreate;
            trigger gt_ObjectiveBattlecruisersAcquiredComplete;
            trigger gt_ObjectiveBattlecruisersAcquiredUpdate;
            trigger gt_ObjectiveBattlecruisersAcquiredFailed;
            trigger gt_ObjectiveRescuePilotCreate;
            trigger gt_ObjectiveRescuePilotComplete;
            trigger gt_ObjectiveRescuePilotUpdate;
            trigger gt_ObjectiveRescuePilotFailed;
            trigger gt_ObjectivePreventTimerExpireCreate;
            trigger gt_ObjectivePreventTimerExpireComplete;
            trigger gt_ObjectivePreventTimerExpireUpdate;
            trigger gt_ObjectivePreventTimerExpireFailed;
            trigger gt_ObjectiveDestroyLokiCreate;
            trigger gt_ObjectiveDestroyLokiComplete;
            trigger gt_ObjectiveDestroyLokiUpdate;
            trigger gt_ObjectiveDestroyLokiFailed;
            
            //--------------------------------------------------------------------------------------------------
            // Global Functions
            //--------------------------------------------------------------------------------------------------
            trigger auto_gf_RunMissionEvent_Trigger = null;
            trigger auto_gf_RunMissionEvent_lp_missionEventTrigger;
            fixed auto_gf_RunMissionEvent_lp_missionEventTime;
            
            void gf_RunMissionEvent (trigger lp_missionEventTrigger, fixed lp_missionEventTime) {
                auto_gf_RunMissionEvent_lp_missionEventTrigger = lp_missionEventTrigger;
                auto_gf_RunMissionEvent_lp_missionEventTime = lp_missionEventTime;
            
                if (auto_gf_RunMissionEvent_Trigger == null) {
                    auto_gf_RunMissionEvent_Trigger = TriggerCreate(&quot;auto_gf_RunMissionEvent_TriggerFunc&quot;);
                }
            
                TriggerExecute(auto_gf_RunMissionEvent_Trigger, false, false);
            }
            
            bool auto_gf_RunMissionEvent_TriggerFunc (bool testConds, bool runActions) {
                trigger lp_missionEventTrigger = auto_gf_RunMissionEvent_lp_missionEventTrigger;
                fixed lp_missionEventTime = auto_gf_RunMissionEvent_lp_missionEventTime;
            
                // Implementation
                while (!((GameGetMissionTime() &gt;= lp_missionEventTime))) {
                    Wait(0.5, c_timeAI);
                }
                if ((libCOMI_gf_GameIsOver() == false)) {
                    TriggerExecute(lp_missionEventTrigger, true, false);
                }
            
                return true;
            }
            
            trigger auto_gf_BridgeOpen_Trigger = null;
            unit auto_gf_BridgeOpen_lp_bridge;
            
            void gf_BridgeOpen (unit lp_bridge) {
                auto_gf_BridgeOpen_lp_bridge = lp_bridge;
            
                if (auto_gf_BridgeOpen_Trigger == null) {
                    auto_gf_BridgeOpen_Trigger = TriggerCreate(&quot;auto_gf_BridgeOpen_TriggerFunc&quot;);
                }
            
                TriggerExecute(auto_gf_BridgeOpen_Trigger, false, false);
            }
            
            bool auto_gf_BridgeOpen_TriggerFunc (bool testConds, bool runActions) {
                unit lp_bridge = auto_gf_BridgeOpen_lp_bridge;
            
                string autoBAEF9A9B_val;
            
                // Implementation
                autoBAEF9A9B_val = UnitGetType(lp_bridge);
                if (autoBAEF9A9B_val == &quot;ExtendingBridgeNELong8&quot;) {
                    UnitIssueOrder(lp_bridge, Order(AbilityCommand(&quot;ExtendingBridgeNELong8Out&quot;, 0)), c_orderQueueReplace);
                }
                else if (autoBAEF9A9B_val == &quot;ExtendingBridgeNELong82&quot;) {
                    UnitIssueOrder(lp_bridge, Order(AbilityCommand(&quot;ExtendingBridgeNELong8Out2&quot;, 0)), c_orderQueueReplace);
                }
                else if (autoBAEF9A9B_val == &quot;ExtendingBridgeNWLong82&quot;) {
                    UnitIssueOrder(lp_bridge, Order(AbilityCommand(&quot;ExtendingBridgeNWLong8Out2&quot;, 0)), c_orderQueueReplace);
                }
                else if (autoBAEF9A9B_val == &quot;ExtendingBridgeNWLong8&quot;) {
                    UnitIssueOrder(lp_bridge, Order(AbilityCommand(&quot;ExtendingBridgeNWLong8Out&quot;, 0)), c_orderQueueReplace);
                }
                else if (autoBAEF9A9B_val == &quot;ExtendingBridgeNWWide8&quot;) {
                    UnitIssueOrder(lp_bridge, Order(AbilityCommand(&quot;ExtendingBridgeNWWide8Out&quot;, 0)), c_orderQueueReplace);
                }
                else if (autoBAEF9A9B_val == &quot;ExtendingBridgeNWShort8&quot;) {
                    UnitIssueOrder(lp_bridge, Order(AbilityCommand(&quot;ExtendingBridgeNWShort8Out&quot;, 0)), c_orderQueueReplace);
                }
                else {
                }
                return true;
            }
            
            trigger auto_gf_PathPing_Trigger = null;
            
            void gf_PathPing () {
                if (auto_gf_PathPing_Trigger == null) {
                    auto_gf_PathPing_Trigger = TriggerCreate(&quot;auto_gf_PathPing_TriggerFunc&quot;);
                }
            
                TriggerExecute(auto_gf_PathPing_Trigger, false, false);
            }
            
            bool auto_gf_PathPing_TriggerFunc (bool testConds, bool runActions) {
                int auto30C4BD5D_val;
                int autoB01FF03F_ae;
                int autoB01FF03F_ai;
                int auto4F88F7C0_ae;
                int auto4F88F7C0_ai;
                int auto4211939D_ae;
                int auto4211939D_ai;
                int auto90C10752_ae;
                int auto90C10752_ai;
            
                // Variable Declarations
                int lv_i;
            
                // Variable Initialization
            
                // Implementation
                auto30C4BD5D_val = gv_area;
                if (auto30C4BD5D_val == 1) {
                    autoB01FF03F_ae = 13;
                    autoB01FF03F_ai = 1;
                    lv_i = 1;
                    for ( ; ( (autoB01FF03F_ai &gt;= 0 &amp;&amp; lv_i &lt;= autoB01FF03F_ae) || (autoB01FF03F_ai &lt;= 0 &amp;&amp; lv_i &gt;= autoB01FF03F_ae) ) ; lv_i += autoB01FF03F_ai ) {
                        PingCreate(PlayerGroupAll(), &quot;PingArrow&quot;, PointFromName((&quot;Path1-&quot; + IntToString(lv_i))), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 8.0);
                        PingSetScale(PingLastCreated(), 0.65);
                        Wait(0.1, c_timeReal);
                    }
                }
                else if (auto30C4BD5D_val == 2) {
                    auto4F88F7C0_ae = 7;
                    auto4F88F7C0_ai = 1;
                    lv_i = 1;
                    for ( ; ( (auto4F88F7C0_ai &gt;= 0 &amp;&amp; lv_i &lt;= auto4F88F7C0_ae) || (auto4F88F7C0_ai &lt;= 0 &amp;&amp; lv_i &gt;= auto4F88F7C0_ae) ) ; lv_i += auto4F88F7C0_ai ) {
                        PingCreate(PlayerGroupAll(), &quot;PingArrow&quot;, PointFromName((&quot;Path2-&quot; + IntToString(lv_i))), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 8.0);
                        PingSetScale(PingLastCreated(), 0.65);
                        Wait(0.1, c_timeReal);
                    }
                }
                else if (auto30C4BD5D_val == 3) {
                    auto4211939D_ae = 4;
                    auto4211939D_ai = 1;
                    lv_i = 1;
                    for ( ; ( (auto4211939D_ai &gt;= 0 &amp;&amp; lv_i &lt;= auto4211939D_ae) || (auto4211939D_ai &lt;= 0 &amp;&amp; lv_i &gt;= auto4211939D_ae) ) ; lv_i += auto4211939D_ai ) {
                        PingCreate(PlayerGroupAll(), &quot;PingArrow&quot;, PointFromName((&quot;Path3-&quot; + IntToString(lv_i))), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 8.0);
                        PingSetScale(PingLastCreated(), 0.65);
                        Wait(0.1, c_timeReal);
                    }
                }
                else if (auto30C4BD5D_val == 4) {
                    auto90C10752_ae = 16;
                    auto90C10752_ai = 1;
                    lv_i = 1;
                    for ( ; ( (auto90C10752_ai &gt;= 0 &amp;&amp; lv_i &lt;= auto90C10752_ae) || (auto90C10752_ai &lt;= 0 &amp;&amp; lv_i &gt;= auto90C10752_ae) ) ; lv_i += auto90C10752_ai ) {
                        PingCreate(PlayerGroupAll(), &quot;PingArrow&quot;, PointFromName((&quot;Path4-&quot; + IntToString(lv_i))), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 8.0);
                        PingSetScale(PingLastCreated(), 0.65);
                        Wait(0.0625, c_timeReal);
                    }
                }
                else {
                }
                return true;
            }
            
            trigger auto_gf_PilotMoving_Trigger = null;
            
            void gf_PilotMoving () {
                if (auto_gf_PilotMoving_Trigger == null) {
                    auto_gf_PilotMoving_Trigger = TriggerCreate(&quot;auto_gf_PilotMoving_TriggerFunc&quot;);
                }
            
                TriggerExecute(auto_gf_PilotMoving_Trigger, false, false);
            }
            
            bool auto_gf_PilotMoving_TriggerFunc (bool testConds, bool runActions) {
                int auto89978156_val;
            
                // Variable Declarations
                unit[3] lv_transport;
            
                // Variable Initialization
            
                // Implementation
                auto89978156_val = gv_area;
                if (auto89978156_val == 1) {
                    UnitGroupIssueOrder(gv_pilot[1], OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), PointFromId(694544353)), c_orderQueueReplace);
                    Wait(4.0, c_timeGame);
                    UnitGroupIssueOrder(gv_pilot[1], OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), PointFromId(284327334)), c_orderQueueReplace);
                    while (!((UnitGroupCount(UnitGroup(&quot;Civilian&quot;, c_playerAny, RegionCircle(PointFromId(284327334), 0.5), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0), c_unitCountAlive) &gt;= 1))) {
                        Wait(0.25, c_timeGame);
                    }
                    UnitGroupIssueOrder(gv_pilot[1], OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), PointFromId(605525808)), c_orderQueueReplace);
                    while (!((UnitGroupCount(UnitGroup(&quot;Civilian&quot;, c_playerAny, RegionCircle(PointFromId(605525808), 0.5), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0), c_unitCountAlive) &gt;= 1))) {
                        Wait(0.25, c_timeGame);
                    }
                    UnitGroupIssueOrder(gv_pilot[1], OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), PointFromId(142425344)), c_orderQueueReplace);
                    while (!((UnitGroupCount(UnitGroup(&quot;Civilian&quot;, c_playerAny, RegionCircle(PointFromId(142425344), 0.5), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0), c_unitCountAlive) &gt;= 1))) {
                        Wait(0.25, c_timeGame);
                    }
                    UnitGroupIssueOrder(gv_pilot[1], OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), PointFromId(1802789996)), c_orderQueueReplace);
                    while (!((UnitGroupCount(UnitGroup(&quot;Civilian&quot;, c_playerAny, RegionCircle(PointFromId(1802789996), 1.0), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0), c_unitCountAlive) &gt;= 1))) {
                        Wait(0.25, c_timeGame);
                    }
                    UnitGroupIssueOrder(gv_pilot[1], OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), PointFromId(563158157)), c_orderQueueReplace);
                }
                else if (auto89978156_val == 2) {
                    UnitGroupIssueOrder(gv_pilot[2], OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), PointFromId(1148643058)), c_orderQueueReplace);
                    Wait(4.0, c_timeGame);
                    UnitGroupIssueOrder(gv_pilot[2], OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), PointFromId(444138782)), c_orderQueueReplace);
                }
                else if (auto89978156_val == 3) {
                    UnitGroupIssueOrder(gv_pilot[3], OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), PointFromId(81436461)), c_orderQueueReplace);
                    Wait(4.0, c_timeGame);
                    UnitGroupIssueOrder(gv_pilot[3], OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), PointFromId(1142185248)), c_orderQueueReplace);
                }
                else if (auto89978156_val == 4) {
                    UnitGroupIssueOrder(gv_pilot[4], OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), PointFromId(976075528)), c_orderQueueReplace);
                    Wait(4.0, c_timeGame);
                    UnitGroupIssueOrder(gv_pilot[4], OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), PointFromId(1898638614)), c_orderQueueReplace);
                    while (!((UnitGroupCount(UnitGroup(&quot;Civilian&quot;, c_playerAny, RegionCircle(PointFromId(1898638614), 0.5), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0), c_unitCountAlive) &gt;= 1))) {
                        Wait(0.25, c_timeGame);
                    }
                    UnitGroupLoopBegin(libNtve_gf_ConvertUnitToUnitGroup(UnitGroupRandomUnit(gv_pilot[4], c_unitCountAlive)));
                    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                        UnitGroupRemove(gv_pilot[4], UnitGroupLoopCurrent());
                        UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), PointFromId(553999862)), c_orderQueueReplace);
                    }
                    UnitGroupLoopEnd();
                    UnitGroupLoopBegin(libNtve_gf_ConvertUnitToUnitGroup(UnitGroupRandomUnit(gv_pilot[4], c_unitCountAlive)));
                    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                        UnitGroupRemove(gv_pilot[4], UnitGroupLoopCurrent());
                        UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), PointFromId(553999862)), c_orderQueueReplace);
                    }
                    UnitGroupLoopEnd();
                    UnitGroupLoopBegin(libNtve_gf_ConvertUnitToUnitGroup(UnitGroupRandomUnit(gv_pilot[4], c_unitCountAlive)));
                    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                        UnitGroupRemove(gv_pilot[4], UnitGroupLoopCurrent());
                        UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), PointFromId(14908365)), c_orderQueueReplace);
                    }
                    UnitGroupLoopEnd();
                    UnitGroupLoopBegin(libNtve_gf_ConvertUnitToUnitGroup(UnitGroupRandomUnit(gv_pilot[4], c_unitCountAlive)));
                    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                        UnitGroupRemove(gv_pilot[4], UnitGroupLoopCurrent());
                        UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), PointFromId(14908365)), c_orderQueueReplace);
                    }
                    UnitGroupLoopEnd();
                }
                else {
                }
                return true;
            }
            
            trigger auto_gf_BattlecruiserOperational_Trigger = null;
            unit auto_gf_BattlecruiserOperational_lp_battlecruiser;
            
            void gf_BattlecruiserOperational (unit lp_battlecruiser) {
                auto_gf_BattlecruiserOperational_lp_battlecruiser = lp_battlecruiser;
            
                if (auto_gf_BattlecruiserOperational_Trigger == null) {
                    auto_gf_BattlecruiserOperational_Trigger = TriggerCreate(&quot;auto_gf_BattlecruiserOperational_TriggerFunc&quot;);
                }
            
                TriggerExecute(auto_gf_BattlecruiserOperational_Trigger, false, false);
            }
            
            bool auto_gf_BattlecruiserOperational_TriggerFunc (bool testConds, bool runActions) {
                unit lp_battlecruiser = auto_gf_BattlecruiserOperational_lp_battlecruiser;
            
                // Implementation
                UnitSetTeamColorIndex(lp_battlecruiser, 13);
                Wait(0.5, c_timeGame);
                UnitIssueOrder(lp_battlecruiser, OrderTargetingPoint(AbilityCommand(&quot;Hyperjump&quot;, 0), RegionRandomPoint(RegionFromId(33))), c_orderQueueReplace);
                Wait(2.0, c_timeGame);
                libNtve_gf_MakeUnitInvulnerable(lp_battlecruiser, false);
                return true;
            }
            
            point gf_AttackWaveSpawn () {
                int auto9A2E02E3_ae;
                int auto9A2E02E3_ai;
            
                // Variable Declarations
                int lv_mapSide;
                int lv_spawnLocationIter;
            
                // Variable Initialization
            
                // Implementation
                lv_mapSide = RandomInt(gv_pLAYER_01_USER, gv_pLAYER_02_USER);
                auto9A2E02E3_ae = 10;
                auto9A2E02E3_ai = 1;
                lv_spawnLocationIter = 1;
                for ( ; ( (auto9A2E02E3_ai &gt;= 0 &amp;&amp; lv_spawnLocationIter &lt;= auto9A2E02E3_ae) || (auto9A2E02E3_ai &lt;= 0 &amp;&amp; lv_spawnLocationIter &gt;= auto9A2E02E3_ae) ) ; lv_spawnLocationIter += auto9A2E02E3_ai ) {
                    if ((UnitGroupCount(UnitGroupAlliance(gv_pLAYER_01_USER, c_unitAllianceEnemy, gv_attackSpawn[lv_mapSide][lv_spawnLocationIter], UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0), c_unitCountAlive) &gt; RandomInt(2, 5))) {
                        return RegionGetCenter(gv_attackSpawn[lv_mapSide][lv_spawnLocationIter]);
                    }
            
                }
                return RegionGetCenter(RegionFromId(57));
            }
            
            trigger auto_gf_RunAttackWaveatMissionTime_Trigger = null;
            trigger auto_gf_RunAttackWaveatMissionTime_lp_attackWave;
            fixed auto_gf_RunAttackWaveatMissionTime_lp_time;
            
            void gf_RunAttackWaveatMissionTime (trigger lp_attackWave, fixed lp_time) {
                auto_gf_RunAttackWaveatMissionTime_lp_attackWave = lp_attackWave;
                auto_gf_RunAttackWaveatMissionTime_lp_time = lp_time;
            
                if (auto_gf_RunAttackWaveatMissionTime_Trigger == null) {
                    auto_gf_RunAttackWaveatMissionTime_Trigger = TriggerCreate(&quot;auto_gf_RunAttackWaveatMissionTime_TriggerFunc&quot;);
                }
            
                TriggerExecute(auto_gf_RunAttackWaveatMissionTime_Trigger, false, false);
            }
            
            bool auto_gf_RunAttackWaveatMissionTime_TriggerFunc (bool testConds, bool runActions) {
                trigger lp_attackWave = auto_gf_RunAttackWaveatMissionTime_lp_attackWave;
                fixed lp_time = auto_gf_RunAttackWaveatMissionTime_lp_time;
            
                // Implementation
                while (!((lp_time &lt;= GameGetMissionTime()))) {
                    Wait(0.3, c_timeAI);
                }
                if ((libCOMI_gf_GameIsOver() == false)) {
                    TriggerExecute(lp_attackWave, true, false);
                }
            
                return true;
            }
            
            //--------------------------------------------------------------------------------------------------
            // Trigger: Init 01 Load Data
            //--------------------------------------------------------------------------------------------------
            bool gt_Init01LoadData_Func (bool testConds, bool runActions) {
                playergroup auto0B258D10_g;
                int auto0B258D10_p;
                string auto834F8A5E_val;
            
                // Variable Declarations
                int lv_indexPlayer;
            
                // Variable Initialization
            
                // Actions
                if (!runActions) {
                    return true;
                }
            
                libCOMI_gf_LoadCoopMission(&quot;COOP_Placeholder&quot;, gt_Init03LoadingComplete);
                return true;
            }
            
            //--------------------------------------------------------------------------------------------------
            void gt_Init01LoadData_Init () {
                gt_Init01LoadData = TriggerCreate(&quot;gt_Init01LoadData_Func&quot;);
                TriggerAddEventMapInit(gt_Init01LoadData);
            }
            
            //--------------------------------------------------------------------------------------------------
            // Trigger: Init 02 Players
            //--------------------------------------------------------------------------------------------------
            bool gt_Init02Players_Func (bool testConds, bool runActions) {
                string auto4AE0A196_val;
                playergroup autoE0EF2853_g;
                int autoE0EF2853_p;
                playergroup autoB969537F_g;
                int autoB969537F_p;
            
                // Variable Declarations
                int lv_playerIterEnemy;
                int lv_playerIterAlly;
            
                // Variable Initialization
            
                // Actions
                if (!runActions) {
                    return true;
                }
            
                auto4AE0A196_val = GameAttributeGameValue(&quot;[bnet:local/0.0/357801]2&quot;);
                if (auto4AE0A196_val == &quot;0001&quot;) {
                    PlayerSetDifficulty(gv_pLAYER_03_ENEMY, 1);
                    PlayerSetDifficulty(gv_pLAYER_04_ENEMY, 1);
                }
                else if (auto4AE0A196_val == &quot;0002&quot;) {
                    PlayerSetDifficulty(gv_pLAYER_03_ENEMY, 2);
                    PlayerSetDifficulty(gv_pLAYER_04_ENEMY, 2);
                }
                else if (auto4AE0A196_val == &quot;0003&quot;) {
                    PlayerSetDifficulty(gv_pLAYER_03_ENEMY, 3);
                    PlayerSetDifficulty(gv_pLAYER_04_ENEMY, 3);
                }
                else if (auto4AE0A196_val == &quot;0004&quot;) {
                    PlayerSetDifficulty(gv_pLAYER_03_ENEMY, 4);
                    PlayerSetDifficulty(gv_pLAYER_04_ENEMY, 4);
                }
                else {
                }
                libNtve_gf_SetPlayerGroupAlliance(libCOMI_gf_HumanPlayers(), libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
                PlayerGroupLoopBegin(libCOMI_gf_HumanPlayers());
                for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                    libNtve_gf_SetAlliance(1, gv_pLAYER_05_PILOT, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
                }
                PlayerGroupLoopEnd();
                PlayerGroupAdd(gv_enemyGroup, gv_pLAYER_03_ENEMY);
                PlayerGroupAdd(gv_enemyGroup, gv_pLAYER_04_ENEMY);
                libNtve_gf_SetPlayerGroupAlliance(gv_enemyGroup, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
                PlayerGroupLoopBegin(gv_enemyGroup);
                for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                    libNtve_gf_SetAlliance(PlayerGroupLoopCurrent(), gv_pLAYER_05_PILOT, libNtve_ge_AllianceSetting_Enemy);
                }
                PlayerGroupLoopEnd();
                autoE0EF2853_g = gv_enemyGroup; 
                autoE0EF2853_p = 1;
                for ( ; autoE0EF2853_p &lt;= PlayerGroupCount(autoE0EF2853_g) ; autoE0EF2853_p += BoolToInt(lv_playerIterEnemy == PlayerGroupPlayer(autoE0EF2853_g, autoE0EF2853_p)) ) {
                    lv_playerIterEnemy = PlayerGroupPlayer(autoE0EF2853_g, autoE0EF2853_p);
                    PlayerSetState(lv_playerIterEnemy, c_playerStateMineralCostIgnored, true);
                    PlayerSetState(lv_playerIterEnemy, c_playerStateVespeneCostIgnored, true);
                    PlayerSetState(lv_playerIterEnemy, c_playerStateFoodIgnored, true);
                    PlayerSetColorIndex(lv_playerIterEnemy, libCOMI_gf_EnemyPlayerColor(), true);
                    autoB969537F_g = libCOMI_gf_HumanPlayers();
                    autoB969537F_p = 1;
                    for ( ; autoB969537F_p &lt;= PlayerGroupCount(autoB969537F_g) ; autoB969537F_p += BoolToInt(lv_playerIterAlly == PlayerGroupPlayer(autoB969537F_g, autoB969537F_p)) ) {
                        lv_playerIterAlly = PlayerGroupPlayer(autoB969537F_g, autoB969537F_p);
                        libNtve_gf_SetAlliance(lv_playerIterAlly, lv_playerIterEnemy, libNtve_ge_AllianceSetting_Enemy);
                    }
                }
                PlayerSetAlliance(gv_pLAYER_03_ENEMY, c_allianceIdPower, gv_pLAYER_04_ENEMY, true);
                PlayerSetAlliance(gv_pLAYER_04_ENEMY, c_allianceIdPower, gv_pLAYER_03_ENEMY, true);
                return true;
            }
            
            //--------------------------------------------------------------------------------------------------
            void gt_Init02Players_Init () {
                gt_Init02Players = TriggerCreate(&quot;gt_Init02Players_Func&quot;);
            }
            
            //--------------------------------------------------------------------------------------------------
            // Trigger: Init 03 Loading Complete
            //--------------------------------------------------------------------------------------------------
            bool gt_Init03LoadingComplete_Func (bool testConds, bool runActions) {
                TriggerExecute(gt_Init02Players, true, false);
                TriggerExecute(gt_Init04Technology, true, false);
                TriggerExecute(gt_Init05Units, true, false);
                TriggerExecute(gt_Init06MusicSound, true, false);
                TriggerExecute(gt_Init07Environment, true, false);
                TriggerExecute(gt_Init08Difficulties, true, false);
                TriggerExecute(gt_StartAI, true, false);
                TriggerExecute(gt_StartGameQ, true, false);
                return true;
            }
            
            //--------------------------------------------------------------------------------------------------
            void gt_Init03LoadingComplete_Init () {
                gt_Init03LoadingComplete = TriggerCreate(&quot;gt_Init03LoadingComplete_Func&quot;);
            }
            
            //--------------------------------------------------------------------------------------------------
            // Trigger: Init 04 Technology
            //--------------------------------------------------------------------------------------------------
            bool gt_Init04Technology_Func (bool testConds, bool runActions) {
                return true;
            }
            
            //--------------------------------------------------------------------------------------------------
            void gt_Init04Technology_Init () {
                gt_Init04Technology = TriggerCreate(&quot;gt_Init04Technology_Func&quot;);
            }
            
            //--------------------------------------------------------------------------------------------------
            // Trigger: Init 05 Units
            //--------------------------------------------------------------------------------------------------
            bool gt_Init05Units_Func (bool testConds, bool runActions) {
                int auto9F1DEAD3_ae;
                int auto9F1DEAD3_ai;
            
                // Variable Declarations
                int lv_count;
            
                // Variable Initialization
            
                // Actions
                if (!runActions) {
                    return true;
                }
            
            
                UnitBehaviorAddPlayer(UnitFromId(370698803), &quot;LokiDocked&quot;, 0, 1);
                libNtve_gf_MakeUnitInvulnerable(UnitFromId(370698803), true);
                UnitBehaviorAddPlayer(UnitFromId(442268028), &quot;LokiDocked&quot;, 0, 1);
                libNtve_gf_MakeUnitInvulnerable(UnitFromId(442268028), true);
                gv_pilot[1] = UnitGroupFromId(1);
                gv_pilot[2] = UnitGroupFromId(2);
                gv_pilot[3] = UnitGroupFromId(3);
                gv_pilot[4] = UnitGroupFromId(4);
                gv_crate[1] = UnitFromId(1078753059);
                gv_crate[2] = UnitFromId(2115453375);
                gv_crate[3] = UnitFromId(354739075);
                gv_crate[4] = UnitFromId(1154949970);
                gv_hybrid[1] = UnitFromId(598706537);
                gv_hybrid[2] = UnitFromId(2042893580);
                gv_hybrid[3] = UnitFromId(1623103881);
                gv_hybrid[4] = UnitFromId(1516601535);
                auto9F1DEAD3_ae = 4;
                auto9F1DEAD3_ai = 1;
                lv_count = 1;
                for ( ; ( (auto9F1DEAD3_ai &gt;= 0 &amp;&amp; lv_count &lt;= auto9F1DEAD3_ae) || (auto9F1DEAD3_ai &lt;= 0 &amp;&amp; lv_count &gt;= auto9F1DEAD3_ae) ) ; lv_count += auto9F1DEAD3_ai ) {
                    libNtve_gf_PauseUnit(gv_hybrid[lv_count], true);
                    libNtve_gf_ShowHideUnit(gv_hybrid[lv_count], false);
                }
                UnitGroupLoopBegin(UnitGroup(&quot;Bunker&quot;, c_playerAny, RegionFromId(14), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0));
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    UnitCargoCreate(UnitGroupLoopCurrent(), &quot;Marine&quot;, 4);
                }
                UnitGroupLoopEnd();
                UnitGroupLoopBegin(UnitGroup(&quot;Bunker&quot;, c_playerAny, RegionFromId(15), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0));
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    UnitCargoCreate(UnitGroupLoopCurrent(), &quot;Marine&quot;, 6);
                }
                UnitGroupLoopEnd();
                UnitGroupLoopBegin(UnitGroup(&quot;Bunker&quot;, c_playerAny, RegionFromId(16), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0));
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    UnitCargoCreate(UnitGroupLoopCurrent(), &quot;WarPig&quot;, 6);
                }
                UnitGroupLoopEnd();
                UnitGroupLoopBegin(UnitGroup(&quot;Bunker&quot;, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0));
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    UnitCargoCreate(UnitGroupLoopCurrent(), &quot;WarPig&quot;, 6);
                }
                UnitGroupLoopEnd();
                UnitGroupLoopBegin(UnitGroup(&quot;Civilian&quot;, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0));
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    libNtve_gf_MakeUnitInvulnerable(UnitGroupLoopCurrent(), true);
                }
                UnitGroupLoopEnd();
                UnitGroupLoopBegin(UnitGroup(&quot;Battlecruiser&quot;, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0));
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    libNtve_gf_MakeUnitInvulnerable(UnitGroupLoopCurrent(), true);
                    UnitSetTeamColorIndex(UnitGroupLoopCurrent(), 2);
                }
                UnitGroupLoopEnd();
                UnitGroupLoopBegin(UnitGroup(&quot;UmojanLabZergCratesUnit&quot;, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0));
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    libNtve_gf_MakeUnitInvulnerable(UnitGroupLoopCurrent(), true);
                    UnitSetState(UnitGroupLoopCurrent(), c_unitStateSelectable, false);
                }
                UnitGroupLoopEnd();
                return true;
            }
            
            //--------------------------------------------------------------------------------------------------
            void gt_Init05Units_Init () {
                gt_Init05Units = TriggerCreate(&quot;gt_Init05Units_Func&quot;);
            }
            
            //--------------------------------------------------------------------------------------------------
            // Trigger: Init 06 Music/Sound
            //--------------------------------------------------------------------------------------------------
            bool gt_Init06MusicSound_Func (bool testConds, bool runActions) {
                return true;
            }
            
            //--------------------------------------------------------------------------------------------------
            void gt_Init06MusicSound_Init () {
                gt_Init06MusicSound = TriggerCreate(&quot;gt_Init06MusicSound_Func&quot;);
            }
            
            //--------------------------------------------------------------------------------------------------
            // Trigger: Init 07 Environment
            //--------------------------------------------------------------------------------------------------
            bool gt_Init07Environment_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
            
                GameTimeOfDaySet(&quot;08:00:00&quot;);
                VisExploreArea(gv_pLAYER_01_USER, RegionFromId(49), true, false);
                VisExploreArea(gv_pLAYER_02_USER, RegionFromId(49), true, false);
                return true;
            }
            
            //--------------------------------------------------------------------------------------------------
            void gt_Init07Environment_Init () {
                gt_Init07Environment = TriggerCreate(&quot;gt_Init07Environment_Func&quot;);
            }
            
            //--------------------------------------------------------------------------------------------------
            // Trigger: Init 08 Difficulties
            //--------------------------------------------------------------------------------------------------
            bool gt_Init08Difficulties_Func (bool testConds, bool runActions) {
                // Variable Declarations
                fixed lv_bonusObjectiveLife;
                fixed lv_mainObjectiveLife;
            
                // Variable Initialization
            
                // Actions
                if (!runActions) {
                    return true;
                }
            
                if (((PlayerDifficulty(1) &lt;= 2) == true)) {
                    UnitGroupLoopBegin(UnitGroup(&quot;Liberator&quot;, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0));
                    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                        libNtve_gf_ReplaceUnit(UnitGroupLoopCurrent(), &quot;Wraith&quot;, libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
                    }
                    UnitGroupLoopEnd();
                    UnitRemove(UnitFromId(2125712944));
                    UnitRemove(UnitFromId(1960655132));
                    UnitRemove(UnitFromId(1633870306));
                    UnitRemove(UnitFromId(1221886118));
                    UnitRemove(UnitFromId(860661149));
                    UnitRemove(UnitFromId(299802369));
                    UnitRemove(UnitFromId(32595478));
                }
            
                if (((PlayerDifficulty(1) == 1) == true)) {
                    UnitRemove(UnitFromId(270106430));
                    UnitRemove(UnitFromId(1180787198));
                    UnitRemove(UnitFromId(259092002));
                    UnitRemove(UnitFromId(595100879));
                    UnitRemove(UnitFromId(1055701721));
                    UnitRemove(UnitFromId(2118978229));
                    UnitRemove(UnitFromId(788933864));
                    UnitRemove(UnitFromId(966657404));
                    UnitRemove(UnitFromId(489581531));
                    UnitRemove(UnitFromId(324769899));
                    UnitRemove(UnitFromId(1427915298));
                    UnitRemove(UnitFromId(766210478));
                }
            
                if ((libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_01_USER) == 4)) {
                }
            
                if ((libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_02_USER) == 4)) {
                }
            
                return true;
            }
            
            //--------------------------------------------------------------------------------------------------
            void gt_Init08Difficulties_Init () {
                gt_Init08Difficulties = TriggerCreate(&quot;gt_Init08Difficulties_Func&quot;);
            }
            
            //--------------------------------------------------------------------------------------------------
            // Trigger: Debug - Can&apos;t Fail
            //--------------------------------------------------------------------------------------------------
            bool gt_DebugCantFail_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((GameCheatsEnabled(c_gameCheatCategoryPublic) == true))) {
                        return false;
                    }
            
                    if (!((libCOMI_gf_GameIsOver() == false))) {
                        return false;
                    }
            
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
            
                // Actions
                if (!runActions) {
                    return true;
                }
            
                PlayerModifyPropertyFixed(gv_pLAYER_01_USER, c_playerPropDamageTakenPercent, c_playerPropOperSetTo, 0.0);
                PlayerModifyPropertyFixed(gv_pLAYER_02_USER, c_playerPropDamageTakenPercent, c_playerPropOperSetTo, 0.0);
                TriggerEnable(gt_DefeatPrimaryObjectiveFailed, false);
                return true;
            }
            
            //--------------------------------------------------------------------------------------------------
            void gt_DebugCantFail_Init () {
                gt_DebugCantFail = TriggerCreate(&quot;gt_DebugCantFail_Func&quot;);
                TriggerAddEventChatMessage(gt_DebugCantFail, c_playerAny, &quot;cantfail&quot;, false);
            }
            
            //--------------------------------------------------------------------------------------------------
            // Trigger: Start Game Q
            //--------------------------------------------------------------------------------------------------
            bool gt_StartGameQ_Func (bool testConds, bool runActions) {
                // Variable Declarations
                region lv_enemyBase;
            
                // Variable Initialization
            
                // Actions
                if (!runActions) {
                    return true;
                }
            
                UIAlertPoint(&quot;Trigger&quot;, gv_pLAYER_01_USER, StringExternal(&quot;Param/Value/068743D5&quot;), null, PlayerStartLocation(gv_pLAYER_01_USER));
                UIAlertPoint(&quot;Trigger&quot;, gv_pLAYER_02_USER, StringExternal(&quot;Param/Value/187E0E6E&quot;), null, PlayerStartLocation(gv_pLAYER_02_USER));
                CameraSetBounds(PlayerGroupAll(), RegionFromId(34), true);
                Wait(7.0, c_timeReal);
                TriggerQueueEnter();
                TriggerExecute(gt_ObjectiveRescuePilotCreate, true, true);
                TriggerExecute(gt_ObjectiveBattlecruisersAcquiredCreate, true, true);
                Wait(2.0, c_timeGame);
                Wait(2.0, c_timeGame);
                libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
                libCOMI_gf_SendMissionTransmission(&quot;PrimaryObjectiveRevealed&quot;, true, -1);
                libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
                TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromModel(&quot;ValerianEx1Portrait&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), &quot;ValerianEx1Portrait&quot;, &quot;Talk&quot;, null, StringExternal(&quot;Param/Value/5D49D696&quot;), StringExternal(&quot;Param/Value/3BF019B5&quot;), 10.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
                TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromModel(&quot;ValerianEx1Portrait&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), &quot;ValerianEx1Portrait&quot;, &quot;Talk&quot;, null, StringExternal(&quot;Param/Value/8ADCB563&quot;), StringExternal(&quot;Param/Value/30A7508A&quot;), 10.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
                TriggerQueueExit();
                return true;
            }
            
            //--------------------------------------------------------------------------------------------------
            void gt_StartGameQ_Init () {
                gt_StartGameQ = TriggerCreate(&quot;gt_StartGameQ_Func&quot;);
            }
            
            //--------------------------------------------------------------------------------------------------
            // Trigger: Objective Timer Window - First Hybird Captured
            //--------------------------------------------------------------------------------------------------
            bool gt_ObjectiveTimerWindowFirstHybirdCaptured_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
            
                TriggerEnable(TriggerGetCurrent(), false);
                libCOMI_gf_WaitForMissionTransmission();
                libNtve_gf_ShowHideUnit(gv_hybrid[1], true);
                libNtve_gf_CreateModelAtPoint(&quot;HybridWarpInEffect&quot;, UnitGetPosition(gv_hybrid[1]));
                libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_hybrid[1]), &quot;Channel&quot;, &quot;Stand Angry&quot;, c_animFlagPlayForever, c_animTimeDefault);
                UnitCreateEffectUnit(gv_crate[1], &quot;SoulChannelCreatePersistent&quot;, gv_hybrid[1]);
                libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_Primary, UnitGetPosition(gv_crate[1]), StringExternal(&quot;Param/Value/947B1A3D&quot;));
                gv_pilotObjectiveMarkers[1] = PingLastCreated();
                TriggerExecute(gt_ObjectivePreventTimerExpireCreate, true, true);
                TimerStart(gv_objectiveTimer, (8.0 * 60.0), false, c_timeGame);
                libCOMI_gf_TimerWindowCreate(gv_objectiveTimer, StringExternal(&quot;Param/Value/AFD0FF28&quot;), true, false);
                gv_objectiveTimerWindow = TimerWindowLastCreated();
                if (((PlayerDifficulty(1) &lt;= 3) == true)) {
                    PlayerCreateEffectPoint(gv_pLAYER_05_PILOT, &quot;ScannerSweep&quot;, UnitGetPosition(gv_hybrid[1]));
                }
            
                TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromModel(&quot;ValerianEx1Portrait&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), &quot;ValerianEx1Portrait&quot;, &quot;Talk&quot;, null, StringExternal(&quot;Param/Value/617A39E4&quot;), StringExternal(&quot;Param/Value/F6EE0F4C&quot;), 6.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
                while ((libCOMI_gf_GameIsOver() == false)) {
                    TriggerExecute(gt_ObjectivePreventTimerExpireUpdate, true, false);
                    Wait(0.5, c_timeGame);
                }
                return true;
            }
            
            //--------------------------------------------------------------------------------------------------
            void gt_ObjectiveTimerWindowFirstHybirdCaptured_Init () {
                gt_ObjectiveTimerWindowFirstHybirdCaptured = TriggerCreate(&quot;gt_ObjectiveTimerWindowFirstHybirdCaptured_Func&quot;);
                TriggerAddEventTimeElapsed(gt_ObjectiveTimerWindowFirstHybirdCaptured, (4.0 * 60.0), c_timeGame);
            }
            
            //--------------------------------------------------------------------------------------------------
            // Trigger: Second Hybrid Captured
            //--------------------------------------------------------------------------------------------------
            bool gt_SecondHybridCaptured_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
            
                // Actions
                if (!runActions) {
                    return true;
                }
            
                TriggerEnable(TriggerGetCurrent(), false);
                libCOMI_gf_WaitForMissionTransmission();
                TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromModel(&quot;ValerianEx1Portrait&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), &quot;ValerianEx1Portrait&quot;, &quot;Talk&quot;, null, StringExternal(&quot;Param/Value/EBB25823&quot;), StringExternal(&quot;Param/Value/169BC621&quot;), 4.0, c_transmissionDurationAdd, false, c_maxPlayers, false);
                libNtve_gf_ShowHideUnit(gv_hybrid[2], true);
                libNtve_gf_CreateModelAtPoint(&quot;HybridWarpInEffect&quot;, UnitGetPosition(gv_hybrid[2]));
                libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_hybrid[2]), &quot;Channel&quot;, &quot;Stand Angry&quot;, c_animFlagPlayForever, c_animTimeDefault);
                libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_Primary, UnitGetPosition(gv_crate[2]), StringExternal(&quot;Param/Value/2F84EA19&quot;));
                gv_pilotObjectiveMarkers[2] = PingLastCreated();
                if (((PlayerDifficulty(1) &lt;= 3) == true)) {
                    PlayerCreateEffectPoint(gv_pLAYER_05_PILOT, &quot;ScannerSweep&quot;, UnitGetPosition(gv_hybrid[2]));
                }
            
                return true;
            }
            
            //--------------------------------------------------------------------------------------------------
            void gt_SecondHybridCaptured_Init () {
                gt_SecondHybridCaptured = TriggerCreate(&quot;gt_SecondHybridCaptured_Func&quot;);
                TriggerAddEventTimeElapsed(gt_SecondHybridCaptured, (10.0 * 60.0), c_timeGame);
            }
            
            //--------------------------------------------------------------------------------------------------
            // Trigger: Third Hybrid Captured
            //--------------------------------------------------------------------------------------------------
            bool gt_ThirdHybridCaptured_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
            
                // Actions
                if (!runActions) {
                    return true;
                }
            
                TriggerEnable(TriggerGetCurrent(), false);
                libCOMI_gf_WaitForMissionTransmission();
                TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromModel(&quot;ValerianEx1Portrait&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), &quot;ValerianEx1Portrait&quot;, &quot;Talk&quot;, null, StringExternal(&quot;Param/Value/07A346F1&quot;), StringExternal(&quot;Param/Value/8B1B5FFE&quot;), 6.0, c_transmissionDurationAdd, false, c_maxPlayers, false);
                libNtve_gf_ShowHideUnit(gv_hybrid[3], true);
                libNtve_gf_CreateModelAtPoint(&quot;HybridWarpInEffect&quot;, UnitGetPosition(gv_hybrid[3]));
                libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_hybrid[3]), &quot;Channel&quot;, &quot;Stand Angry&quot;, c_animFlagPlayForever, c_animTimeDefault);
                libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_Primary, UnitGetPosition(gv_crate[3]), StringExternal(&quot;Param/Value/D85498BE&quot;));
                gv_pilotObjectiveMarkers[3] = PingLastCreated();
                if (((PlayerDifficulty(1) &lt;= 3) == true)) {
                    PlayerCreateEffectPoint(gv_pLAYER_05_PILOT, &quot;ScannerSweep&quot;, UnitGetPosition(gv_hybrid[3]));
                }
            
                return true;
            }
            
            //--------------------------------------------------------------------------------------------------
            void gt_ThirdHybridCaptured_Init () {
                gt_ThirdHybridCaptured = TriggerCreate(&quot;gt_ThirdHybridCaptured_Func&quot;);
                TriggerAddEventTimeElapsed(gt_ThirdHybridCaptured, (15.0 * 60.0), c_timeGame);
            }
            
            //--------------------------------------------------------------------------------------------------
            // Trigger: Forth Hybrid Captured
            //--------------------------------------------------------------------------------------------------
            bool gt_ForthHybridCaptured_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
            
                // Actions
                if (!runActions) {
                    return true;
                }
            
                TriggerEnable(TriggerGetCurrent(), false);
                libCOMI_gf_WaitForMissionTransmission();
                TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromModel(&quot;ValerianEx1Portrait&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), &quot;ValerianEx1Portrait&quot;, &quot;Talk&quot;, null, StringExternal(&quot;Param/Value/C8987615&quot;), StringExternal(&quot;Param/Value/B6D2BFBD&quot;), 6.0, c_transmissionDurationAdd, false, c_maxPlayers, false);
                libNtve_gf_ShowHideUnit(gv_hybrid[4], true);
                libNtve_gf_CreateModelAtPoint(&quot;HybridWarpInEffect&quot;, UnitGetPosition(gv_hybrid[4]));
                libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_hybrid[4]), &quot;Channel&quot;, &quot;Stand Angry&quot;, c_animFlagPlayForever, c_animTimeDefault);
                libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_Primary, UnitGetPosition(gv_crate[4]), StringExternal(&quot;Param/Value/0CFF3277&quot;));
                gv_pilotObjectiveMarkers[4] = PingLastCreated();
                if (((PlayerDifficulty(1) &lt;= 3) == true)) {
                    PlayerCreateEffectPoint(gv_pLAYER_05_PILOT, &quot;ScannerSweep&quot;, UnitGetPosition(gv_hybrid[4]));
                }
            
                return true;
            }
            
            //--------------------------------------------------------------------------------------------------
            void gt_ForthHybridCaptured_Init () {
                gt_ForthHybridCaptured = TriggerCreate(&quot;gt_ForthHybridCaptured_Func&quot;);
                TriggerAddEventTimeElapsed(gt_ForthHybridCaptured, (20.0 * 60.0), c_timeGame);
            }
            
            //--------------------------------------------------------------------------------------------------
            // Trigger: Hybird Attacked
            //--------------------------------------------------------------------------------------------------
            bool gt_HybirdAttacked_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!(((EventUnit() == gv_hybrid[1]) || (EventUnit() == gv_hybrid[2]) || (EventUnit() == gv_hybrid[3]) || (EventUnit() == gv_hybrid[4])))) {
                        return false;
                    }
                }
            
                // Actions
                if (!runActions) {
                    return true;
                }
            
                GameDestroyEffects(UnitGetPosition(EventUnit()), 8.0, 0, &quot;SoulChannelCreatePersistent&quot;);
                libNtve_gf_PauseUnit(EventUnit(), false);
                return true;
            }
            
            //--------------------------------------------------------------------------------------------------
            void gt_HybirdAttacked_Init () {
                gt_HybirdAttacked = TriggerCreate(&quot;gt_HybirdAttacked_Func&quot;);
                TriggerAddEventUnitDamaged(gt_HybirdAttacked, null, c_unitDamageTypeAny, c_unitDamageEither, null);
            }
            
            //--------------------------------------------------------------------------------------------------
            // Trigger: Defense Timer Window
            //--------------------------------------------------------------------------------------------------
            bool gt_DefenseTimerWindow_Func (bool testConds, bool runActions) {
                unit auto07708996_val;
            
                // Actions
                if (!runActions) {
                    return true;
                }
            
                auto07708996_val = EventUnit();
                if (auto07708996_val == UnitFromId(598706537)) {
                    gv_area = 1;
                    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromModel(&quot;ValerianEx1Portrait&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), &quot;ValerianEx1Portrait&quot;, &quot;Talk&quot;, null, StringExternal(&quot;Param/Value/9B763CD9&quot;), StringExternal(&quot;Param/Value/D0F46A5F&quot;), 8.0, c_transmissionDurationAdd, false, c_maxPlayers, false);
                }
                else if (auto07708996_val == UnitFromId(2042893580)) {
                    gv_area = 2;
                }
                else if (auto07708996_val == UnitFromId(1623103881)) {
                    gv_area = 3;
                }
                else if (auto07708996_val == UnitFromId(1516601535)) {
                    gv_area = 4;
                }
                else {
                    ActorSend(libNtve_gf_MainActorofUnit(gv_crate[gv_area]), &quot;AnimBracketStart StandWork Stand,Unpowered,Start Stand,Unpowered Stand,Unpowered,End&quot;);
                }
                TimerStart(gv_defenseTimer, (1.5 * 60.0), false, c_timeGame);
                TimerPause(gv_objectiveTimer, true);
                if ((gv_area != 4)) {
                }
                else {
                    TimerWindowDestroy(gv_objectiveTimerWindow);
                }
                libCOMI_gf_TimerWindowCreate(gv_defenseTimer, StringExternal(&quot;Param/Value/67F39004&quot;), true, false);
                gv_defenseTimerWindow = TimerWindowLastCreated();
                TimerWindowSetFormat(gv_defenseTimerWindow, StringToText(&quot;&lt;sectotal/&gt;&quot;));
                TriggerExecute(gt_DefenseAI, true, false);
                return true;
            }
            
            //--------------------------------------------------------------------------------------------------
            void gt_DefenseTimerWindow_Init () {
                gt_DefenseTimerWindow = TriggerCreate(&quot;gt_DefenseTimerWindow_Func&quot;);
                TriggerAddEventUnitDied(gt_DefenseTimerWindow, UnitRefFromUnit(UnitFromId(598706537)));
                TriggerAddEventUnitDied(gt_DefenseTimerWindow, UnitRefFromUnit(UnitFromId(2042893580)));
                TriggerAddEventUnitDied(gt_DefenseTimerWindow, UnitRefFromUnit(UnitFromId(1516601535)));
                TriggerAddEventUnitDied(gt_DefenseTimerWindow, UnitRefFromUnit(UnitFromId(1623103881)));
            }
            
            //--------------------------------------------------------------------------------------------------
            // Trigger: Defense AI
            //--------------------------------------------------------------------------------------------------
            bool gt_DefenseAI_Func (bool testConds, bool runActions) {
                int auto318148F6_val;
            
                // Variable Declarations
                unitgroup lv_attackForce;
            
                // Variable Initialization
                lv_attackForce = UnitGroupEmpty();
            
                // Actions
                if (!runActions) {
                    return true;
                }
            
                Wait(2.0, c_timeGame);
                auto318148F6_val = gv_area;
                if (auto318148F6_val == 1) {
                    AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, RegionGetCenter(RegionFromId(8)));
                    AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, RegionGetCenter(RegionFromId(8)));
                    libCOMI_gf_CreateCoopDropForceinTransportsatLocationandWaitforthemtospawn(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest, libCOMI_ge_CoopAITechLevelBuckets__1Early, RegionGetCenter(RegionFromId(57)), &quot;Medivac&quot;);
                    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
                    Wait(20.0, c_timeGame);
                    AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, RegionGetCenter(RegionFromId(8)));
                    AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, RegionGetCenter(RegionFromId(8)));
                    if (((PlayerDifficulty(1) &gt;= 3) == true)) {
                        libCOMI_gf_CreateCoopDropForceinTransportsatLocationandWaitforthemtospawn(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, libCOMI_ge_CoopAIAttackWaveBuckets__2Smaller, libCOMI_ge_CoopAITechLevelBuckets__1Early, RegionGetCenter(RegionFromId(57)), &quot;Medivac&quot;);
                    }
                    else {
                        libCOMI_gf_CreateCoopDropForceinTransportsatLocationandWaitforthemtospawn(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest, libCOMI_ge_CoopAITechLevelBuckets__1Early, RegionGetCenter(RegionFromId(57)), &quot;Medivac&quot;);
                    }
                    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
                    Wait(30.0, c_timeGame);
                    AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, RegionGetCenter(RegionFromId(8)));
                    AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, RegionGetCenter(RegionFromId(8)));
                    if (((PlayerDifficulty(1) &gt;= 3) == true)) {
                        libCOMI_gf_CreateCoopDropForceinTransportsatLocationandWaitforthemtospawn(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, libCOMI_ge_CoopAIAttackWaveBuckets__2Smaller, libCOMI_ge_CoopAITechLevelBuckets__2EarlyMid, RegionGetCenter(RegionFromId(57)), &quot;Medivac&quot;);
                    }
                    else {
                        libCOMI_gf_CreateCoopDropForceinTransportsatLocationandWaitforthemtospawn(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, libCOMI_ge_CoopAIAttackWaveBuckets__2Smaller, libCOMI_ge_CoopAITechLevelBuckets__1Early, RegionGetCenter(RegionFromId(57)), &quot;Medivac&quot;);
                    }
                    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
                }
                else if (auto318148F6_val == 2) {
                    AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, RegionGetCenter(RegionFromId(5)));
                    AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, RegionGetCenter(RegionFromId(5)));
                    if (((PlayerDifficulty(1) &gt;= 3) == true)) {
                        libCOMI_gf_CreateCoopDropForceinTransportsatLocationandWaitforthemtospawn(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, libCOMI_ge_CoopAIAttackWaveBuckets__3Small, libCOMI_ge_CoopAITechLevelBuckets__3Mid, RegionGetCenter(RegionFromId(7)), &quot;Medivac&quot;);
                    }
                    else {
                        libCOMI_gf_CreateCoopDropForceinTransportsatLocationandWaitforthemtospawn(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, libCOMI_ge_CoopAIAttackWaveBuckets__3Small, libCOMI_ge_CoopAITechLevelBuckets__2EarlyMid, RegionGetCenter(RegionFromId(7)), &quot;Medivac&quot;);
                    }
                    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
                    Wait(25.0, c_timeGame);
                    AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, RegionGetCenter(RegionFromId(5)));
                    AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, RegionGetCenter(RegionFromId(5)));
                    if (((PlayerDifficulty(1) &gt;= 3) == true)) {
                        libCOMI_gf_CreateCoopDropForceinTransportsatLocationandWaitforthemtospawn(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, libCOMI_ge_CoopAIAttackWaveBuckets__4Medium, libCOMI_ge_CoopAITechLevelBuckets__3Mid, RegionGetCenter(RegionFromId(7)), &quot;Medivac&quot;);
                    }
                    else {
                        libCOMI_gf_CreateCoopDropForceinTransportsatLocationandWaitforthemtospawn(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, libCOMI_ge_CoopAIAttackWaveBuckets__3Small, libCOMI_ge_CoopAITechLevelBuckets__3Mid, RegionGetCenter(RegionFromId(7)), &quot;Medivac&quot;);
                    }
                    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
                    Wait(25.0, c_timeGame);
                    AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, RegionGetCenter(RegionFromId(5)));
                    AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, RegionGetCenter(RegionFromId(5)));
                    if (((PlayerDifficulty(1) &gt;= 3) == true)) {
                        libCOMI_gf_CreateCoopDropForceinTransportsatLocationandWaitforthemtospawn(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, libCOMI_ge_CoopAIAttackWaveBuckets__4Medium, libCOMI_ge_CoopAITechLevelBuckets__4LateMid, RegionGetCenter(RegionFromId(7)), &quot;Medivac&quot;);
                    }
                    else {
                        libCOMI_gf_CreateCoopDropForceinTransportsatLocationandWaitforthemtospawn(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, libCOMI_ge_CoopAIAttackWaveBuckets__4Medium, libCOMI_ge_CoopAITechLevelBuckets__3Mid, RegionGetCenter(RegionFromId(7)), &quot;Medivac&quot;);
                    }
                    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
                }
                else if (auto318148F6_val == 3) {
                    AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, RegionGetCenter(RegionFromId(6)));
                    AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, RegionGetCenter(RegionFromId(6)));
                    if (((PlayerDifficulty(1) &gt;= 3) == true)) {
                        libCOMI_gf_CreateCoopDropForceinTransportsatLocationandWaitforthemtospawn(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, libCOMI_ge_CoopAIAttackWaveBuckets__4Medium, libCOMI_ge_CoopAITechLevelBuckets__5Late, RegionGetCenter(RegionFromId(57)), &quot;Medivac&quot;);
                    }
                    else {
                        libCOMI_gf_CreateCoopDropForceinTransportsatLocationandWaitforthemtospawn(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, libCOMI_ge_CoopAIAttackWaveBuckets__4Medium, libCOMI_ge_CoopAITechLevelBuckets__4LateMid, RegionGetCenter(RegionFromId(57)), &quot;Medivac&quot;);
                    }
                    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
                    Wait(25.0, c_timeGame);
                    AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, RegionGetCenter(RegionFromId(6)));
                    AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, RegionGetCenter(RegionFromId(6)));
                    if (((PlayerDifficulty(1) &gt;= 3) == true)) {
                        libCOMI_gf_CreateCoopDropForceinTransportsatLocationandWaitforthemtospawn(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, libCOMI_ge_CoopAIAttackWaveBuckets__5Large, libCOMI_ge_CoopAITechLevelBuckets__5Late, RegionGetCenter(RegionFromId(57)), &quot;Medivac&quot;);
                    }
                    else {
                        libCOMI_gf_CreateCoopDropForceinTransportsatLocationandWaitforthemtospawn(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, libCOMI_ge_CoopAIAttackWaveBuckets__5Large, libCOMI_ge_CoopAITechLevelBuckets__4LateMid, RegionGetCenter(RegionFromId(57)), &quot;Medivac&quot;);
                    }
                    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
                    Wait(25.0, c_timeGame);
                    AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, RegionGetCenter(RegionFromId(6)));
                    AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, RegionGetCenter(RegionFromId(6)));
                    if (((PlayerDifficulty(1) &gt;= 3) == true)) {
                        libCOMI_gf_CreateCoopDropForceinTransportsatLocationandWaitforthemtospawn(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, libCOMI_ge_CoopAIAttackWaveBuckets__6Larger, libCOMI_ge_CoopAITechLevelBuckets_TechLevel06, RegionGetCenter(RegionFromId(57)), &quot;Medivac&quot;);
                    }
                    else {
                        libCOMI_gf_CreateCoopDropForceinTransportsatLocationandWaitforthemtospawn(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, libCOMI_ge_CoopAIAttackWaveBuckets__6Larger, libCOMI_ge_CoopAITechLevelBuckets__5Late, RegionGetCenter(RegionFromId(57)), &quot;Medivac&quot;);
                    }
                    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
                }
                else if (auto318148F6_val == 4) {
                    AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, RegionGetCenter(RegionFromId(57)));
                    AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, RegionGetCenter(RegionFromId(57)));
                    UnitCreate(libNtve_gf_DifficultyValueInt(1, 1, 2, 2), &quot;HybridNemesis&quot;, 0, gv_pLAYER_03_ENEMY, RegionGetCenter(RegionFromId(35)), libNtve_gf_RandomAngle());
                    UnitGroupLoopBegin(UnitLastCreatedGroup());
                    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                        UnitSetHeight(UnitGroupLoopCurrent(), 16.0, 0.0);
                        UnitSetHeight(UnitGroupLoopCurrent(), UnitTypeGetProperty(UnitGetType(UnitGroupLoopCurrent()), c_unitPropHeight), 3.0);
                        UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand(&quot;attack&quot;, 0), RegionGetCenter(RegionFromId(57))), c_orderQueueReplace);
                    }
                    UnitGroupLoopEnd();
                    UnitCreate(libNtve_gf_DifficultyValueInt(1, 1, 2, 2), &quot;HybridNemesis&quot;, 0, gv_pLAYER_04_ENEMY, RegionGetCenter(RegionFromId(35)), libNtve_gf_RandomAngle());
                    UnitGroupLoopBegin(UnitLastCreatedGroup());
                    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                        UnitSetHeight(UnitGroupLoopCurrent(), 16.0, 0.0);
                        UnitSetHeight(UnitGroupLoopCurrent(), UnitTypeGetProperty(UnitGetType(UnitGroupLoopCurrent()), c_unitPropHeight), 3.0);
                        UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand(&quot;attack&quot;, 0), RegionGetCenter(RegionFromId(57))), c_orderQueueReplace);
                    }
                    UnitGroupLoopEnd();
                    if (((PlayerDifficulty(1) &gt;= 3) == true)) {
                        libCOMI_gf_CreateCoopDropForceinTransportsatLocationandWaitforthemtospawn(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, libCOMI_ge_CoopAIAttackWaveBuckets__4Medium, libCOMI_ge_CoopAITechLevelBuckets_TechLevel06, RegionGetCenter(RegionFromId(35)), &quot;Medivac&quot;);
                    }
                    else {
                        libCOMI_gf_CreateCoopDropForceinTransportsatLocationandWaitforthemtospawn(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, libCOMI_ge_CoopAIAttackWaveBuckets__4Medium, libCOMI_ge_CoopAITechLevelBuckets__5Late, RegionGetCenter(RegionFromId(35)), &quot;Medivac&quot;);
                    }
                    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
                    Wait(25.0, c_timeGame);
                    AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, RegionGetCenter(RegionFromId(57)));
                    AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, RegionGetCenter(RegionFromId(57)));
                    UnitCreate(libNtve_gf_DifficultyValueInt(1, 1, 2, 2), &quot;HybridNemesis&quot;, 0, gv_pLAYER_03_ENEMY, RegionGetCenter(RegionFromId(35)), libNtve_gf_RandomAngle());
                    UnitGroupLoopBegin(UnitLastCreatedGroup());
                    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                        UnitSetHeight(UnitGroupLoopCurrent(), 16.0, 0.0);
                        UnitSetHeight(UnitGroupLoopCurrent(), UnitTypeGetProperty(UnitGetType(UnitGroupLoopCurrent()), c_unitPropHeight), 3.0);
                        UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand(&quot;attack&quot;, 0), RegionGetCenter(RegionFromId(57))), c_orderQueueReplace);
                    }
                    UnitGroupLoopEnd();
                    UnitCreate(libNtve_gf_DifficultyValueInt(1, 1, 2, 2), &quot;HybridNemesis&quot;, 0, gv_pLAYER_04_ENEMY, RegionGetCenter(RegionFromId(35)), libNtve_gf_RandomAngle());
                    UnitGroupLoopBegin(UnitLastCreatedGroup());
                    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                        UnitSetHeight(UnitGroupLoopCurrent(), 16.0, 0.0);
                        UnitSetHeight(UnitGroupLoopCurrent(), UnitTypeGetProperty(UnitGetType(UnitGroupLoopCurrent()), c_unitPropHeight), 3.0);
                        UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand(&quot;attack&quot;, 0), RegionGetCenter(RegionFromId(57))), c_orderQueueReplace);
                    }
                    UnitGroupLoopEnd();
                    if (((PlayerDifficulty(1) &gt;= 3) == true)) {
                        libCOMI_gf_CreateCoopDropForceinTransportsatLocationandWaitforthemtospawn(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, libCOMI_ge_CoopAIAttackWaveBuckets__3Small, libCOMI_ge_CoopAITechLevelBuckets_TechLevel07, RegionGetCenter(RegionFromId(35)), &quot;Medivac&quot;);
                    }
                    else {
                        libCOMI_gf_CreateCoopDropForceinTransportsatLocationandWaitforthemtospawn(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, libCOMI_ge_CoopAIAttackWaveBuckets__3Small, libCOMI_ge_CoopAITechLevelBuckets_TechLevel06, RegionGetCenter(RegionFromId(35)), &quot;Medivac&quot;);
                    }
                    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
                    Wait(30.0, c_timeGame);
                    AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, RegionGetCenter(RegionFromId(57)));
                    AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, RegionGetCenter(RegionFromId(57)));
                    UnitCreate(1, &quot;HybridNemesis&quot;, 0, gv_pLAYER_03_ENEMY, RegionGetCenter(RegionFromId(35)), libNtve_gf_RandomAngle());
                    UnitGroupLoopBegin(UnitLastCreatedGroup());
                    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                        UnitSetHeight(UnitGroupLoopCurrent(), 16.0, 0.0);
                        UnitSetHeight(UnitGroupLoopCurrent(), UnitTypeGetProperty(UnitGetType(UnitGroupLoopCurrent()), c_unitPropHeight), 3.0);
                    }
                    UnitGroupLoopEnd();
                    UnitCreate(1, &quot;HybridNemesis&quot;, 0, gv_pLAYER_04_ENEMY, RegionGetCenter(RegionFromId(35)), libNtve_gf_RandomAngle());
                    UnitGroupLoopBegin(UnitLastCreatedGroup());
                    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                        UnitSetHeight(UnitGroupLoopCurrent(), 16.0, 0.0);
                        UnitSetHeight(UnitGroupLoopCurrent(), UnitTypeGetProperty(UnitGetType(UnitGroupLoopCurrent()), c_unitPropHeight), 3.0);
                    }
                    UnitGroupLoopEnd();
                    if (((PlayerDifficulty(1) &gt;= 3) == true)) {
                        libCOMI_gf_CreateCoopDropForceinTransportsatLocationandWaitforthemtospawn(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, libCOMI_ge_CoopAIAttackWaveBuckets__7Largest, libCOMI_ge_CoopAITechLevelBuckets_TechLevel07, RegionGetCenter(RegionFromId(35)), &quot;Medivac&quot;);
                    }
                    else {
                        libCOMI_gf_CreateCoopDropForceinTransportsatLocationandWaitforthemtospawn(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, libCOMI_ge_CoopAIAttackWaveBuckets__6Larger, libCOMI_ge_CoopAITechLevelBuckets_TechLevel07, RegionGetCenter(RegionFromId(35)), &quot;Medivac&quot;);
                    }
                    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
                }
                else {
                }
                return true;
            }
            
            //--------------------------------------------------------------------------------------------------
            void gt_DefenseAI_Init () {
                gt_DefenseAI = TriggerCreate(&quot;gt_DefenseAI_Func&quot;);
            }
            
            //--------------------------------------------------------------------------------------------------
            // Trigger: Defense Timer Expired
            //--------------------------------------------------------------------------------------------------
            bool gt_DefenseTimerExpired_Func (bool testConds, bool runActions) {
                int auto71978EA0_val;
            
                // Variable Declarations
                unitgroup lv_attackForce;
            
                // Variable Initialization
                lv_attackForce = UnitGroupEmpty();
            
                // Actions
                if (!runActions) {
                    return true;
                }
            
                TimerWindowDestroy(gv_defenseTimerWindow);
                PingDestroy(gv_pilotObjectiveMarkers[gv_area]);
                ActorSend(libNtve_gf_MainActorofUnit(gv_crate[gv_area]), &quot;AnimBracketStart StandWork Stand,Unpowered,Start Stand,Unpowered Stand,Unpowered,End&quot;);
                libNtve_gf_RescueUnit2(gv_pilot[gv_area], gv_pLAYER_05_PILOT, false);
                UnitGroupIssueOrder(gv_pilot[gv_area], OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), PointFromName((&quot;Transport &quot; + IntToString(gv_area)))), c_orderQueueReplace);
                UnitGroupLoopBegin(gv_pilot[gv_area]);
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    libCOMI_gf_CreatePingCoop(PlayerGroupAll(), &quot;PingSimple&quot;, UnitGetPosition(UnitGroupLoopCurrent()), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 0.0);
                    PingSetUnit(PingLastCreated(), UnitGroupLoopCurrent());
                    libHots_gf_StorePingForUnit(UnitGroupLoopCurrent(), 0, PingLastCreated());
                    libNtve_gf_ShareVisionofUnit(UnitGroupLoopCurrent(), true, gv_pLAYER_01_USER);
                    libNtve_gf_ShareVisionofUnit(UnitGroupLoopCurrent(), true, gv_pLAYER_02_USER);
                }
                UnitGroupLoopEnd();
                Wait(1.0, c_timeGame);
                auto71978EA0_val = gv_area;
                if (auto71978EA0_val == 1) {
                    SoundPlayForPlayer(SoundLink(&quot;TUIWarningPing&quot;, -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
                    gf_PilotMoving();
                    gf_PathPing();
                    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromModel(&quot;ValerianEx1Portrait&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), &quot;ValerianEx1Portrait&quot;, &quot;Talk&quot;, null, StringExternal(&quot;Param/Value/E6BF5C98&quot;), StringExternal(&quot;Param/Value/0FDA4791&quot;), 10.0, c_transmissionDurationAdd, false, c_maxPlayers, false);
                    UnitGroupLoopBegin(gv_pilot[gv_area]);
                    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                        ActorSend(libNtve_gf_MainActorofUnit(UnitGroupLoopCurrent()), &quot;HaloStart&quot;);
                        libNtve_gf_MakeUnitInvulnerable(UnitGroupLoopCurrent(), false);
                    }
                    UnitGroupLoopEnd();
                    TimerPause(gv_objectiveTimer, false);
                    TimerStart(gv_objectiveTimer, (TimerGetRemaining(gv_objectiveTimer) + (5.0 * 60.0)), false, c_timeGame);
                    TriggerExecute(gt_SecondHybridCaptured, true, false);
                    TriggerEnable(gt_PilotCheck, true);
                    if (((PlayerDifficulty(1) &gt;= 3) == true)) {
                        libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, libCOMI_ge_CoopAIAttackWaveBuckets__2Smaller, libCOMI_ge_CoopAITechLevelBuckets__2EarlyMid, PointFromId(142425344), true);
                    }
                    else {
                        libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, libCOMI_ge_CoopAIAttackWaveBuckets__2Smaller, libCOMI_ge_CoopAITechLevelBuckets__1Early, PointFromId(142425344), true);
                    }
                    Wait(35.0, c_timeGame);
                    if (((PlayerDifficulty(1) &gt;= 3) == true)) {
                        libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, libCOMI_ge_CoopAIAttackWaveBuckets__2Smaller, libCOMI_ge_CoopAITechLevelBuckets__2EarlyMid, PointFromId(563158157), true);
                    }
                    else {
                        libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest, libCOMI_ge_CoopAITechLevelBuckets__2EarlyMid, PointFromId(563158157), true);
                    }
                }
                else if (auto71978EA0_val == 2) {
                    SoundPlayForPlayer(SoundLink(&quot;TUIWarningPing&quot;, -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
                    gf_PilotMoving();
                    gf_PathPing();
                    if (((PlayerDifficulty(1) &gt;= 2) == true)) {
                        TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromModel(&quot;ValerianEx1Portrait&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), &quot;ValerianEx1Portrait&quot;, &quot;Talk&quot;, null, StringExternal(&quot;Param/Value/2879C86E&quot;), StringExternal(&quot;Param/Value/78A5DDF1&quot;), 4.0, c_transmissionDurationAdd, false, c_maxPlayers, false);
                    }
            
                    UnitGroupLoopBegin(gv_pilot[gv_area]);
                    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                        ActorSend(libNtve_gf_MainActorofUnit(UnitGroupLoopCurrent()), &quot;HaloStart&quot;);
                        libNtve_gf_MakeUnitInvulnerable(UnitGroupLoopCurrent(), false);
                    }
                    UnitGroupLoopEnd();
                    TimerPause(gv_objectiveTimer, false);
                    TimerStart(gv_objectiveTimer, (TimerGetRemaining(gv_objectiveTimer) + (5.0 * 60.0)), false, c_timeGame);
                    TriggerExecute(gt_ThirdHybridCaptured, true, false);
                    TriggerEnable(gt_PilotCheck, true);
                    AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, RegionGetCenter(RegionFromId(5)));
                    AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, RegionGetCenter(RegionFromId(5)));
                    if (((PlayerDifficulty(1) &gt;= 3) == true)) {
                        libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, libCOMI_ge_CoopAIAttackWaveBuckets__4Medium, libCOMI_ge_CoopAITechLevelBuckets__5Late, RegionGetCenter(RegionFromId(7)), true);
                    }
                    else {
                        libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, libCOMI_ge_CoopAIAttackWaveBuckets__4Medium, libCOMI_ge_CoopAITechLevelBuckets__4LateMid, RegionGetCenter(RegionFromId(7)), true);
                    }
                    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
                    Wait(3.0, c_timeGame);
                    if (((PlayerDifficulty(1) == 3) == true)) {
                        PlayerCreateEffectPoint(gv_pLAYER_05_PILOT, &quot;ScannerSweep&quot;, PointFromId(557872595));
                    }
            
                    if (((PlayerDifficulty(1) == 3 || PlayerDifficulty(1) == 2) == true)) {
                        PlayerCreateEffectPoint(gv_pLAYER_05_PILOT, &quot;ScannerSweep&quot;, PointFromId(101268794));
                    }
            
                }
                else if (auto71978EA0_val == 3) {
                    SoundPlayForPlayer(SoundLink(&quot;TUIWarningPing&quot;, -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
                    gf_PilotMoving();
                    gf_PathPing();
                    UnitGroupLoopBegin(gv_pilot[gv_area]);
                    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                        ActorSend(libNtve_gf_MainActorofUnit(UnitGroupLoopCurrent()), &quot;HaloStart&quot;);
                        libNtve_gf_MakeUnitInvulnerable(UnitGroupLoopCurrent(), false);
                    }
                    UnitGroupLoopEnd();
                    TimerPause(gv_objectiveTimer, false);
                    TimerStart(gv_objectiveTimer, (TimerGetRemaining(gv_objectiveTimer) + (5.0 * 60.0)), false, c_timeGame);
                    TriggerExecute(gt_ForthHybridCaptured, true, false);
                    TriggerEnable(gt_PilotCheck, true);
                    AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, RegionGetCenter(RegionFromId(6)));
                    AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, RegionGetCenter(RegionFromId(6)));
                    if (((PlayerDifficulty(1) &gt;= 3) == true)) {
                        libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, libCOMI_ge_CoopAIAttackWaveBuckets__6Larger, libCOMI_ge_CoopAITechLevelBuckets_TechLevel06, RegionGetCenter(RegionFromId(36)), true);
                    }
                    else {
                        libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, libCOMI_ge_CoopAIAttackWaveBuckets__6Larger, libCOMI_ge_CoopAITechLevelBuckets__5Late, RegionGetCenter(RegionFromId(36)), true);
                    }
                    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
                }
                else if (auto71978EA0_val == 4) {
                    SoundPlayForPlayer(SoundLink(&quot;TUIWarningPing&quot;, -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
                    gf_PilotMoving();
                    gf_PathPing();
                    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromModel(&quot;ValerianEx1Portrait&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), &quot;ValerianEx1Portrait&quot;, &quot;Talk&quot;, null, StringExternal(&quot;Param/Value/EFB92DD1&quot;), StringExternal(&quot;Param/Value/04703F69&quot;), 8.0, c_transmissionDurationAdd, false, c_maxPlayers, false);
                    UnitGroupLoopBegin(gv_pilot[gv_area]);
                    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                        ActorSend(libNtve_gf_MainActorofUnit(UnitGroupLoopCurrent()), &quot;HaloStart&quot;);
                        libNtve_gf_MakeUnitInvulnerable(UnitGroupLoopCurrent(), false);
                    }
                    UnitGroupLoopEnd();
                    TriggerExecute(gt_ObjectiveRescuePilotComplete, true, false);
                    TriggerExecute(gt_ObjectivePreventTimerExpireComplete, true, false);
                    TriggerEnable(gt_PilotCheckFinal, true);
                    UnitGroupLoopBegin(libNtve_gf_ConvertUnitToUnitGroup(UnitGroupRandomUnit(gv_pilot[gv_area], c_unitCountAlive)));
                    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                        UnitGroupRemove(gv_pilot[gv_area], UnitGroupLoopCurrent());
                        UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), UnitGetPosition(UnitFromId(715633273))), c_orderQueueReplace);
                    }
                    UnitGroupLoopEnd();
                    Wait(5.0, c_timeGame);
                    UnitCreate(libNtve_gf_DifficultyValueInt(1, 1, 2, 2), &quot;HybridNemesis&quot;, 0, gv_pLAYER_03_ENEMY, RegionGetCenter(RegionFromId(35)), libNtve_gf_RandomAngle());
                    UnitGroupLoopBegin(UnitLastCreatedGroup());
                    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                        UnitSetHeight(UnitGroupLoopCurrent(), 16.0, 0.0);
                        UnitSetHeight(UnitGroupLoopCurrent(), UnitTypeGetProperty(UnitGetType(UnitGroupLoopCurrent()), c_unitPropHeight), 3.0);
                        UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand(&quot;attack&quot;, 0), PointFromId(553999862)), c_orderQueueReplace);
                    }
                    UnitGroupLoopEnd();
                    UnitCreate(libNtve_gf_DifficultyValueInt(1, 1, 2, 2), &quot;HybridNemesis&quot;, 0, gv_pLAYER_04_ENEMY, RegionGetCenter(RegionFromId(35)), libNtve_gf_RandomAngle());
                    UnitGroupLoopBegin(UnitLastCreatedGroup());
                    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                        UnitSetHeight(UnitGroupLoopCurrent(), 16.0, 0.0);
                        UnitSetHeight(UnitGroupLoopCurrent(), UnitTypeGetProperty(UnitGetType(UnitGroupLoopCurrent()), c_unitPropHeight), 3.0);
                        UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand(&quot;attack&quot;, 0), PointFromId(14908365)), c_orderQueueReplace);
                    }
                    UnitGroupLoopEnd();
                    libCOMI_gf_WaitForMissionTransmission();
                    libCOMI_gf_SendMissionTransmission(&quot;HybridDetected&quot;, true, RandomInt(gv_pLAYER_01_USER, gv_pLAYER_02_USER));
                }
                else {
                }
                return true;
            }
            
            //--------------------------------------------------------------------------------------------------
            void gt_DefenseTimerExpired_Init () {
                gt_DefenseTimerExpired = TriggerCreate(&quot;gt_DefenseTimerExpired_Func&quot;);
                TriggerAddEventTimer(gt_DefenseTimerExpired, gv_defenseTimer);
            }
            
            //--------------------------------------------------------------------------------------------------
            // Trigger: Pilot Dead
            //--------------------------------------------------------------------------------------------------
            bool gt_PilotDead_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((UnitGetType(EventUnit()) == &quot;Civilian&quot;))) {
                        return false;
                    }
                }
            
                // Actions
                if (!runActions) {
                    return true;
                }
            
                PingDestroy(libHots_gf_PingStoredForUnit(EventUnit(), 0));
                gv_deadPilot += 1;
                return true;
            }
            
            //--------------------------------------------------------------------------------------------------
            void gt_PilotDead_Init () {
                gt_PilotDead = TriggerCreate(&quot;gt_PilotDead_Func&quot;);
                TriggerAddEventUnitDied(gt_PilotDead, null);
            }
            
            //--------------------------------------------------------------------------------------------------
            // Trigger: Pilot Check
            //--------------------------------------------------------------------------------------------------
            bool gt_PilotCheck_Func (bool testConds, bool runActions) {
                int autoFE425581_val;
            
                // Conditions
                if (testConds) {
                    if (!((UnitGroupCount(gv_pilot[gv_area], c_unitCountAlive) == 0))) {
                        return false;
                    }
                }
            
                // Actions
                if (!runActions) {
                    return true;
                }
            
                autoFE425581_val = gv_area;
                if (autoFE425581_val == 1) {
                    libCOMI_gf_DestroyPingCoop(gv_pilotMarker[0]);
                    gf_BridgeOpen(UnitFromId(640236561));
                    gf_BridgeOpen(UnitFromId(1862914269));
                    gf_BridgeOpen(UnitFromId(831471166));
                    TriggerEnable(TriggerGetCurrent(), false);
                    libCOMI_gf_WaitForMissionTransmission();
                    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromModel(&quot;ValerianEx1Portrait&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), &quot;ValerianEx1Portrait&quot;, &quot;Talk&quot;, null, StringExternal(&quot;Param/Value/0D2A856B&quot;), StringExternal(&quot;Param/Value/E6B99AC9&quot;), 8.0, c_transmissionDurationAdd, false, c_maxPlayers, false);
                }
                else if (autoFE425581_val == 2) {
                    libCOMI_gf_DestroyPingCoop(gv_pilotMarker[0]);
                    gf_BridgeOpen(UnitFromId(826699005));
                    gf_BridgeOpen(UnitFromId(1094159886));
                    gf_BridgeOpen(UnitFromId(1063111380));
                    TriggerEnable(TriggerGetCurrent(), false);
                    libCOMI_gf_WaitForMissionTransmission();
                    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromModel(&quot;ValerianEx1Portrait&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), &quot;ValerianEx1Portrait&quot;, &quot;Talk&quot;, null, StringExternal(&quot;Param/Value/F4B211E6&quot;), StringExternal(&quot;Param/Value/85650C3E&quot;), 8.0, c_transmissionDurationAdd, false, c_maxPlayers, false);
                }
                else if (autoFE425581_val == 3) {
                    libCOMI_gf_DestroyPingCoop(gv_pilotMarker[0]);
                    gf_BridgeOpen(UnitFromId(280170458));
                    gf_BridgeOpen(UnitFromId(154858134));
                    TriggerEnable(TriggerGetCurrent(), false);
                    libCOMI_gf_WaitForMissionTransmission();
                    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromModel(&quot;ValerianEx1Portrait&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), &quot;ValerianEx1Portrait&quot;, &quot;Talk&quot;, null, StringExternal(&quot;Param/Value/C324199D&quot;), StringExternal(&quot;Param/Value/FF443709&quot;), 8.0, c_transmissionDurationAdd, false, c_maxPlayers, false);
                }
                else {
                }
                return true;
            }
            
            //--------------------------------------------------------------------------------------------------
            void gt_PilotCheck_Init () {
                gt_PilotCheck = TriggerCreate(&quot;gt_PilotCheck_Func&quot;);
                TriggerEnable(gt_PilotCheck, false);
                TriggerAddEventTimePeriodic(gt_PilotCheck, 0.5, c_timeGame);
            }
            
            //--------------------------------------------------------------------------------------------------
            // Trigger: Pilot Check Final
            //--------------------------------------------------------------------------------------------------
            bool gt_PilotCheckFinal_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((UnitGroupCount(UnitGroup(&quot;Civilian&quot;, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0))) {
                        return false;
                    }
                }
            
                // Actions
                if (!runActions) {
                    return true;
                }
            
                TriggerEnable(TriggerGetCurrent(), false);
                libCOMI_gf_DestroyPingCoop(gv_pilotMarker[0]);
                TriggerExecute(gt_ObjectiveBattlecruisersAcquiredComplete, true, false);
                TriggerEnable(gt_HybridNemesisDefeat, true);
                TriggerEnable(gt_BattlecruiserDefeat, true);
                libCOMI_gf_WaitForMissionTransmission();
                TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromModel(&quot;ValerianEx1Portrait&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), &quot;ValerianEx1Portrait&quot;, &quot;Talk&quot;, null, StringExternal(&quot;Param/Value/6AD81C67&quot;), StringExternal(&quot;Param/Value/60D5BAAE&quot;), 6.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
                UnitClearSelection(gv_pLAYER_01_USER);
                UnitClearSelection(gv_pLAYER_02_USER);
                UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionFromId(34), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 0));
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    UnitSetState(UnitGroupLoopCurrent(), c_unitStatePaused, true);
                    UnitSetState(UnitGroupLoopCurrent(), c_unitStateSelectable, false);
                }
                UnitGroupLoopEnd();
                UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 0));
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    UnitSetState(UnitGroupLoopCurrent(), c_unitStatePaused, true);
                    UnitSetState(UnitGroupLoopCurrent(), c_unitStateSelectable, false);
                }
                UnitGroupLoopEnd();
                UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_02_USER, RegionEntireMap(), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32))), 0));
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    UnitSetState(UnitGroupLoopCurrent(), c_unitStatePaused, true);
                    UnitSetState(UnitGroupLoopCurrent(), c_unitStateSelectable, false);
                }
                UnitGroupLoopEnd();
                libNtve_gf_CinematicMode(true, PlayerGroupAll(), c_transitionDurationDefault);
                CinematicFade(false, 1.5, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
                CameraSetBounds(PlayerGroupAll(), RegionFromId(17), true);
                PlayerSetRace(gv_pLAYER_01_USER, &quot;Terr&quot;);
                PlayerSetRace(gv_pLAYER_02_USER, &quot;Terr&quot;);
                CameraPan(gv_pLAYER_01_USER, RegionGetCenter(RegionFromId(17)), 0.0, -1, 10.0, false);
                CameraPan(gv_pLAYER_02_USER, RegionGetCenter(RegionFromId(17)), 0.0, -1, 10.0, false);
                libNtve_gf_CinematicMode(false, PlayerGroupAll(), c_transitionDurationDefault);
                CinematicFade(true, 1.5, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, false);
                Wait(1.5, c_timeGame);
                TriggerExecute(gt_ObjectiveKillHybridNemesisCreate, true, false);
                TechTreeUpgradeAddLevel(gv_pLAYER_01_USER, &quot;BattlecruiserEnableSpecializations&quot;, 1);
                TechTreeUpgradeAddLevel(gv_pLAYER_01_USER, &quot;TerranVehicleAndShipWeaponsLevel1&quot;, 1);
                TechTreeUpgradeAddLevel(gv_pLAYER_01_USER, &quot;TerranVehicleAndShipArmorsLevel1&quot;, 1);
                TechTreeUpgradeAddLevel(gv_pLAYER_02_USER, &quot;BattlecruiserEnableSpecializations&quot;, 1);
                TechTreeUpgradeAddLevel(gv_pLAYER_02_USER, &quot;TerranVehicleAndShipWeaponsLevel1&quot;, 1);
                TechTreeUpgradeAddLevel(gv_pLAYER_02_USER, &quot;TerranVehicleAndShipArmorsLevel1&quot;, 1);
                libNtve_gf_RescueUnit2(gv_acquiredBattlecruisers[gv_pLAYER_01_USER], gv_pLAYER_01_USER, true);
                libNtve_gf_RescueUnit2(gv_acquiredBattlecruisers[gv_pLAYER_02_USER], gv_pLAYER_02_USER, true);
                Wait(6.0, c_timeGame);
                UnitGroupIssueOrder(UnitGroup(&quot;HybridNemesis&quot;, c_playerAny, RegionFromId(17), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0), OrderTargetingPoint(AbilityCommand(&quot;attack&quot;, 0), UnitGroupCenterOfGroup(UnitGroup(&quot;Battlecruiser&quot;, c_playerAny, RegionFromId(17), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0))), c_orderQueueReplace);
                return true;
            }
            
            //--------------------------------------------------------------------------------------------------
            void gt_PilotCheckFinal_Init () {
                gt_PilotCheckFinal = TriggerCreate(&quot;gt_PilotCheckFinal_Func&quot;);
                TriggerEnable(gt_PilotCheckFinal, false);
                TriggerAddEventTimePeriodic(gt_PilotCheckFinal, 0.5, c_timeGame);
            }
            
            //--------------------------------------------------------------------------------------------------
            // Trigger: BC 01
            //--------------------------------------------------------------------------------------------------
            bool gt_BC01_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((UnitGetType(EventUnit()) == &quot;Civilian&quot;))) {
                        return false;
                    }
                }
            
                // Actions
                if (!runActions) {
                    return true;
                }
            
                TriggerEnable(TriggerGetCurrent(), false);
                UnitGroupLoopBegin(libNtve_gf_ConvertUnitToUnitGroup(UnitGroupRandomUnit(gv_pilot[1], c_unitCountAlive)));
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    UnitGroupRemove(gv_pilot[1], UnitGroupLoopCurrent());
                    UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), UnitGetPosition(UnitFromId(1100128322))), c_orderQueueReplace);
                }
                UnitGroupLoopEnd();
                return true;
            }
            
            //--------------------------------------------------------------------------------------------------
            void gt_BC01_Init () {
                gt_BC01 = TriggerCreate(&quot;gt_BC01_Func&quot;);
                TriggerAddEventUnitRegion(gt_BC01, null, RegionFromId(19), true);
            }
            
            //--------------------------------------------------------------------------------------------------
            // Trigger: BC Operational 01
            //--------------------------------------------------------------------------------------------------
            bool gt_BCOperational01_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((UnitGetType(EventUnit()) == &quot;Civilian&quot;))) {
                        return false;
                    }
                }
            
                // Actions
                if (!runActions) {
                    return true;
                }
            
                TriggerEnable(TriggerGetCurrent(), false);
                PingDestroy(libHots_gf_PingStoredForUnit(EventUnit(), 0));
                UnitRemove(EventUnit());
                UnitKill(UnitFromId(1100128322));
                gf_BattlecruiserOperational(UnitFromId(1990987408));
                UnitGroupAdd(gv_acquiredBattlecruisers[gv_pLAYER_01_USER], UnitFromId(1990987408));
                gv_battlecruiserCount += 1;
                SoundPlayForPlayer(SoundLink(&quot;Battlecruiser_Ready&quot;, -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
                return true;
            }
            
            //--------------------------------------------------------------------------------------------------
            void gt_BCOperational01_Init () {
                gt_BCOperational01 = TriggerCreate(&quot;gt_BCOperational01_Func&quot;);
                TriggerAddEventUnitRangePoint(gt_BCOperational01, null, UnitGetPosition(UnitFromId(1100128322)), 0.5, true);
            }
            
            //--------------------------------------------------------------------------------------------------
            // Trigger: BC 02
            //--------------------------------------------------------------------------------------------------
            bool gt_BC02_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((UnitGetType(EventUnit()) == &quot;Civilian&quot;))) {
                        return false;
                    }
                }
            
                // Actions
                if (!runActions) {
                    return true;
                }
            
                TriggerEnable(TriggerGetCurrent(), false);
                UnitGroupLoopBegin(libNtve_gf_ConvertUnitToUnitGroup(UnitGroupRandomUnit(gv_pilot[1], c_unitCountAlive)));
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    UnitGroupRemove(gv_pilot[1], UnitGroupLoopCurrent());
                    UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), UnitGetPosition(UnitFromId(2027440662))), c_orderQueueReplace);
                }
                UnitGroupLoopEnd();
                return true;
            }
            
            //--------------------------------------------------------------------------------------------------
            void gt_BC02_Init () {
                gt_BC02 = TriggerCreate(&quot;gt_BC02_Func&quot;);
                TriggerAddEventUnitRegion(gt_BC02, null, RegionFromId(18), true);
            }
            
            //--------------------------------------------------------------------------------------------------
            // Trigger: BC Operational 02
            //--------------------------------------------------------------------------------------------------
            bool gt_BCOperational02_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((UnitGetType(EventUnit()) == &quot;Civilian&quot;))) {
                        return false;
                    }
                }
            
                // Actions
                if (!runActions) {
                    return true;
                }
            
                TriggerEnable(TriggerGetCurrent(), false);
                PingDestroy(libHots_gf_PingStoredForUnit(EventUnit(), 0));
                UnitRemove(EventUnit());
                UnitKill(UnitFromId(2027440662));
                gf_BattlecruiserOperational(UnitFromId(1059226550));
                UnitGroupAdd(gv_acquiredBattlecruisers[gv_pLAYER_01_USER], UnitFromId(1059226550));
                gv_battlecruiserCount += 1;
                SoundPlayForPlayer(SoundLink(&quot;Battlecruiser_Ready&quot;, -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
                return true;
            }
            
            //--------------------------------------------------------------------------------------------------
            void gt_BCOperational02_Init () {
                gt_BCOperational02 = TriggerCreate(&quot;gt_BCOperational02_Func&quot;);
                TriggerAddEventUnitRangePoint(gt_BCOperational02, null, UnitGetPosition(UnitFromId(2027440662)), 0.5, true);
            }
            
            //--------------------------------------------------------------------------------------------------
            // Trigger: BC 03
            //--------------------------------------------------------------------------------------------------
            bool gt_BC03_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((UnitGetType(EventUnit()) == &quot;Civilian&quot;))) {
                        return false;
                    }
                }
            
                // Actions
                if (!runActions) {
                    return true;
                }
            
                TriggerEnable(TriggerGetCurrent(), false);
                UnitGroupLoopBegin(libNtve_gf_ConvertUnitToUnitGroup(UnitGroupRandomUnit(gv_pilot[1], c_unitCountAlive)));
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    UnitGroupRemove(gv_pilot[1], UnitGroupLoopCurrent());
                    UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), UnitGetPosition(UnitFromId(1359874913))), c_orderQueueReplace);
                }
                UnitGroupLoopEnd();
                return true;
            }
            
            //--------------------------------------------------------------------------------------------------
            void gt_BC03_Init () {
                gt_BC03 = TriggerCreate(&quot;gt_BC03_Func&quot;);
                TriggerAddEventUnitRegion(gt_BC03, null, RegionFromId(20), true);
            }
            
            //--------------------------------------------------------------------------------------------------
            // Trigger: BC Operational 03
            //--------------------------------------------------------------------------------------------------
            bool gt_BCOperational03_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((UnitGetType(EventUnit()) == &quot;Civilian&quot;))) {
                        return false;
                    }
                }
            
                // Actions
                if (!runActions) {
                    return true;
                }
            
                TriggerEnable(TriggerGetCurrent(), false);
                PingDestroy(libHots_gf_PingStoredForUnit(EventUnit(), 0));
                UnitRemove(EventUnit());
                UnitKill(UnitFromId(1359874913));
                gf_BattlecruiserOperational(UnitFromId(1728904905));
                UnitGroupAdd(gv_acquiredBattlecruisers[gv_pLAYER_01_USER], UnitFromId(1728904905));
                gv_battlecruiserCount += 1;
                SoundPlayForPlayer(SoundLink(&quot;Battlecruiser_Ready&quot;, -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
                return true;
            }
            
            //--------------------------------------------------------------------------------------------------
            void gt_BCOperational03_Init () {
                gt_BCOperational03 = TriggerCreate(&quot;gt_BCOperational03_Func&quot;);
                TriggerAddEventUnitRangePoint(gt_BCOperational03, null, UnitGetPosition(UnitFromId(1359874913)), 0.5, true);
            }
            
            //--------------------------------------------------------------------------------------------------
            // Trigger: BC 04
            //--------------------------------------------------------------------------------------------------
            bool gt_BC04_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((UnitGetType(EventUnit()) == &quot;Civilian&quot;))) {
                        return false;
                    }
                }
            
                // Actions
                if (!runActions) {
                    return true;
                }
            
                TriggerEnable(TriggerGetCurrent(), false);
                UnitGroupLoopBegin(libNtve_gf_ConvertUnitToUnitGroup(UnitGroupRandomUnit(gv_pilot[2], c_unitCountAlive)));
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    UnitGroupRemove(gv_pilot[2], UnitGroupLoopCurrent());
                    UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), UnitGetPosition(UnitFromId(1617264708))), c_orderQueueReplace);
                }
                UnitGroupLoopEnd();
                return true;
            }
            
            //--------------------------------------------------------------------------------------------------
            void gt_BC04_Init () {
                gt_BC04 = TriggerCreate(&quot;gt_BC04_Func&quot;);
                TriggerAddEventUnitRegion(gt_BC04, null, RegionFromId(21), true);
            }
            
            //--------------------------------------------------------------------------------------------------
            // Trigger: BC Operational 04
            //--------------------------------------------------------------------------------------------------
            bool gt_BCOperational04_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((UnitGetType(EventUnit()) == &quot;Civilian&quot;))) {
                        return false;
                    }
                }
            
                // Actions
                if (!runActions) {
                    return true;
                }
            
                TriggerEnable(TriggerGetCurrent(), false);
                PingDestroy(libHots_gf_PingStoredForUnit(EventUnit(), 0));
                UnitRemove(EventUnit());
                UnitKill(UnitFromId(1617264708));
                gf_BattlecruiserOperational(UnitFromId(1692122708));
                UnitGroupAdd(gv_acquiredBattlecruisers[gv_pLAYER_02_USER], UnitFromId(1692122708));
                gv_battlecruiserCount += 1;
                SoundPlayForPlayer(SoundLink(&quot;Battlecruiser_Ready&quot;, -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
                return true;
            }
            
            //--------------------------------------------------------------------------------------------------
            void gt_BCOperational04_Init () {
                gt_BCOperational04 = TriggerCreate(&quot;gt_BCOperational04_Func&quot;);
                TriggerAddEventUnitRangePoint(gt_BCOperational04, null, UnitGetPosition(UnitFromId(1617264708)), 0.5, true);
            }
            
            //--------------------------------------------------------------------------------------------------
            // Trigger: BC 05
            //--------------------------------------------------------------------------------------------------
            bool gt_BC05_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((UnitGetType(EventUnit()) == &quot;Civilian&quot;))) {
                        return false;
                    }
                }
            
                // Actions
                if (!runActions) {
                    return true;
                }
            
                TriggerEnable(TriggerGetCurrent(), false);
                UnitGroupLoopBegin(libNtve_gf_ConvertUnitToUnitGroup(UnitGroupRandomUnit(gv_pilot[2], c_unitCountAlive)));
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    UnitGroupRemove(gv_pilot[2], UnitGroupLoopCurrent());
                    UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), UnitGetPosition(UnitFromId(1195396867))), c_orderQueueReplace);
                }
                UnitGroupLoopEnd();
                return true;
            }
            
            //--------------------------------------------------------------------------------------------------
            void gt_BC05_Init () {
                gt_BC05 = TriggerCreate(&quot;gt_BC05_Func&quot;);
                TriggerAddEventUnitRegion(gt_BC05, null, RegionFromId(22), true);
            }
            
            //--------------------------------------------------------------------------------------------------
            // Trigger: BC Operational 05
            //--------------------------------------------------------------------------------------------------
            bool gt_BCOperational05_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((UnitGetType(EventUnit()) == &quot;Civilian&quot;))) {
                        return false;
                    }
                }
            
                // Actions
                if (!runActions) {
                    return true;
                }
            
                TriggerEnable(TriggerGetCurrent(), false);
                PingDestroy(libHots_gf_PingStoredForUnit(EventUnit(), 0));
                UnitRemove(EventUnit());
                UnitKill(UnitFromId(1195396867));
                gf_BattlecruiserOperational(UnitFromId(1645708222));
                UnitGroupAdd(gv_acquiredBattlecruisers[gv_pLAYER_02_USER], UnitFromId(1645708222));
                gv_battlecruiserCount += 1;
                SoundPlayForPlayer(SoundLink(&quot;Battlecruiser_Ready&quot;, -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
                return true;
            }
            
            //--------------------------------------------------------------------------------------------------
            void gt_BCOperational05_Init () {
                gt_BCOperational05 = TriggerCreate(&quot;gt_BCOperational05_Func&quot;);
                TriggerAddEventUnitRangePoint(gt_BCOperational05, null, UnitGetPosition(UnitFromId(1195396867)), 0.5, true);
            }
            
            //--------------------------------------------------------------------------------------------------
            // Trigger: BC 06
            //--------------------------------------------------------------------------------------------------
            bool gt_BC06_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((UnitGetType(EventUnit()) == &quot;Civilian&quot;))) {
                        return false;
                    }
                }
            
                // Actions
                if (!runActions) {
                    return true;
                }
            
                TriggerEnable(TriggerGetCurrent(), false);
                UnitGroupLoopBegin(libNtve_gf_ConvertUnitToUnitGroup(UnitGroupRandomUnit(gv_pilot[2], c_unitCountAlive)));
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    UnitGroupRemove(gv_pilot[2], UnitGroupLoopCurrent());
                    UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), UnitGetPosition(UnitFromId(1813725415))), c_orderQueueReplace);
                }
                UnitGroupLoopEnd();
                return true;
            }
            
            //--------------------------------------------------------------------------------------------------
            void gt_BC06_Init () {
                gt_BC06 = TriggerCreate(&quot;gt_BC06_Func&quot;);
                TriggerAddEventUnitRegion(gt_BC06, null, RegionFromId(23), true);
            }
            
            //--------------------------------------------------------------------------------------------------
            // Trigger: BC Operational 06
            //--------------------------------------------------------------------------------------------------
            bool gt_BCOperational06_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((UnitGetType(EventUnit()) == &quot;Civilian&quot;))) {
                        return false;
                    }
                }
            
                // Actions
                if (!runActions) {
                    return true;
                }
            
                TriggerEnable(TriggerGetCurrent(), false);
                PingDestroy(libHots_gf_PingStoredForUnit(EventUnit(), 0));
                UnitRemove(EventUnit());
                UnitKill(UnitFromId(1813725415));
                gf_BattlecruiserOperational(UnitFromId(379689219));
                UnitGroupAdd(gv_acquiredBattlecruisers[gv_pLAYER_02_USER], UnitFromId(379689219));
                gv_battlecruiserCount += 1;
                SoundPlayForPlayer(SoundLink(&quot;Battlecruiser_Ready&quot;, -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
                return true;
            }
            
            //--------------------------------------------------------------------------------------------------
            void gt_BCOperational06_Init () {
                gt_BCOperational06 = TriggerCreate(&quot;gt_BCOperational06_Func&quot;);
                TriggerAddEventUnitRangePoint(gt_BCOperational06, null, UnitGetPosition(UnitFromId(1813725415)), 0.5, true);
            }
            
            //--------------------------------------------------------------------------------------------------
            // Trigger: BC 07
            //--------------------------------------------------------------------------------------------------
            bool gt_BC07_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((UnitGetType(EventUnit()) == &quot;Civilian&quot;))) {
                        return false;
                    }
                }
            
                // Actions
                if (!runActions) {
                    return true;
                }
            
                TriggerEnable(TriggerGetCurrent(), false);
                UnitGroupLoopBegin(libNtve_gf_ConvertUnitToUnitGroup(UnitGroupRandomUnit(gv_pilot[2], c_unitCountAlive)));
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    UnitGroupRemove(gv_pilot[2], UnitGroupLoopCurrent());
                    UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), UnitGetPosition(UnitFromId(1794126350))), c_orderQueueReplace);
                }
                UnitGroupLoopEnd();
                return true;
            }
            
            //--------------------------------------------------------------------------------------------------
            void gt_BC07_Init () {
                gt_BC07 = TriggerCreate(&quot;gt_BC07_Func&quot;);
                TriggerAddEventUnitRegion(gt_BC07, null, RegionFromId(24), true);
            }
            
            //--------------------------------------------------------------------------------------------------
            // Trigger: BC Operational 07
            //--------------------------------------------------------------------------------------------------
            bool gt_BCOperational07_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((UnitGetType(EventUnit()) == &quot;Civilian&quot;))) {
                        return false;
                    }
                }
            
                // Actions
                if (!runActions) {
                    return true;
                }
            
                TriggerEnable(TriggerGetCurrent(), false);
                PingDestroy(libHots_gf_PingStoredForUnit(EventUnit(), 0));
                UnitRemove(EventUnit());
                UnitKill(UnitFromId(1794126350));
                gf_BattlecruiserOperational(UnitFromId(2015205333));
                UnitGroupAdd(gv_acquiredBattlecruisers[gv_pLAYER_02_USER], UnitFromId(2015205333));
                gv_battlecruiserCount += 1;
                SoundPlayForPlayer(SoundLink(&quot;Battlecruiser_Ready&quot;, -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
                return true;
            }
            
            //--------------------------------------------------------------------------------------------------
            void gt_BCOperational07_Init () {
                gt_BCOperational07 = TriggerCreate(&quot;gt_BCOperational07_Func&quot;);
                TriggerAddEventUnitRangePoint(gt_BCOperational07, null, UnitGetPosition(UnitFromId(1794126350)), 0.5, true);
            }
            
            //--------------------------------------------------------------------------------------------------
            // Trigger: BC 08
            //--------------------------------------------------------------------------------------------------
            bool gt_BC08_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((UnitGetType(EventUnit()) == &quot;Civilian&quot;))) {
                        return false;
                    }
                }
            
                // Actions
                if (!runActions) {
                    return true;
                }
            
                TriggerEnable(TriggerGetCurrent(), false);
                UnitGroupLoopBegin(libNtve_gf_ConvertUnitToUnitGroup(UnitGroupRandomUnit(gv_pilot[3], c_unitCountAlive)));
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    UnitGroupRemove(gv_pilot[3], UnitGroupLoopCurrent());
                    UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), UnitGetPosition(UnitFromId(1076500287))), c_orderQueueReplace);
                }
                UnitGroupLoopEnd();
                return true;
            }
            
            //--------------------------------------------------------------------------------------------------
            void gt_BC08_Init () {
                gt_BC08 = TriggerCreate(&quot;gt_BC08_Func&quot;);
                TriggerAddEventUnitRegion(gt_BC08, null, RegionFromId(25), true);
            }
            
            //--------------------------------------------------------------------------------------------------
            // Trigger: BC Operational 08
            //--------------------------------------------------------------------------------------------------
            bool gt_BCOperational08_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((UnitGetType(EventUnit()) == &quot;Civilian&quot;))) {
                        return false;
                    }
                }
            
                // Actions
                if (!runActions) {
                    return true;
                }
            
                TriggerEnable(TriggerGetCurrent(), false);
                PingDestroy(libHots_gf_PingStoredForUnit(EventUnit(), 0));
                UnitRemove(EventUnit());
                UnitKill(UnitFromId(1076500287));
                gf_BattlecruiserOperational(UnitFromId(13108382));
                UnitGroupAdd(gv_acquiredBattlecruisers[gv_pLAYER_02_USER], UnitFromId(13108382));
                gv_battlecruiserCount += 1;
                SoundPlayForPlayer(SoundLink(&quot;Battlecruiser_Ready&quot;, -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
                return true;
            }
            
            //--------------------------------------------------------------------------------------------------
            void gt_BCOperational08_Init () {
                gt_BCOperational08 = TriggerCreate(&quot;gt_BCOperational08_Func&quot;);
                TriggerAddEventUnitRangePoint(gt_BCOperational08, null, UnitGetPosition(UnitFromId(1076500287)), 0.5, true);
            }
            
            //--------------------------------------------------------------------------------------------------
            // Trigger: BC 09
            //--------------------------------------------------------------------------------------------------
            bool gt_BC09_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((UnitGetType(EventUnit()) == &quot;Civilian&quot;))) {
                        return false;
                    }
                }
            
                // Actions
                if (!runActions) {
                    return true;
                }
            
                TriggerEnable(TriggerGetCurrent(), false);
                UnitGroupLoopBegin(libNtve_gf_ConvertUnitToUnitGroup(UnitGroupRandomUnit(gv_pilot[3], c_unitCountAlive)));
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    UnitGroupRemove(gv_pilot[3], UnitGroupLoopCurrent());
                    UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), UnitGetPosition(UnitFromId(462430711))), c_orderQueueReplace);
                }
                UnitGroupLoopEnd();
                return true;
            }
            
            //--------------------------------------------------------------------------------------------------
            void gt_BC09_Init () {
                gt_BC09 = TriggerCreate(&quot;gt_BC09_Func&quot;);
                TriggerAddEventUnitRegion(gt_BC09, null, RegionFromId(26), true);
            }
            
            //--------------------------------------------------------------------------------------------------
            // Trigger: BC Operational 09
            //--------------------------------------------------------------------------------------------------
            bool gt_BCOperational09_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((UnitGetType(EventUnit()) == &quot;Civilian&quot;))) {
                        return false;
                    }
                }
            
                // Actions
                if (!runActions) {
                    return true;
                }
            
                TriggerEnable(TriggerGetCurrent(), false);
                PingDestroy(libHots_gf_PingStoredForUnit(EventUnit(), 0));
                UnitRemove(EventUnit());
                UnitKill(UnitFromId(462430711));
                gf_BattlecruiserOperational(UnitFromId(1809993969));
                UnitGroupAdd(gv_acquiredBattlecruisers[gv_pLAYER_02_USER], UnitFromId(1809993969));
                gv_battlecruiserCount += 1;
                SoundPlayForPlayer(SoundLink(&quot;Battlecruiser_Ready&quot;, -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
                return true;
            }
            
            //--------------------------------------------------------------------------------------------------
            void gt_BCOperational09_Init () {
                gt_BCOperational09 = TriggerCreate(&quot;gt_BCOperational09_Func&quot;);
                TriggerAddEventUnitRangePoint(gt_BCOperational09, null, UnitGetPosition(UnitFromId(462430711)), 0.5, true);
            }
            
            //--------------------------------------------------------------------------------------------------
            // Trigger: BC 10
            //--------------------------------------------------------------------------------------------------
            bool gt_BC10_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((UnitGetType(EventUnit()) == &quot;Civilian&quot;))) {
                        return false;
                    }
                }
            
                // Actions
                if (!runActions) {
                    return true;
                }
            
                TriggerEnable(TriggerGetCurrent(), false);
                UnitGroupLoopBegin(libNtve_gf_ConvertUnitToUnitGroup(UnitGroupRandomUnit(gv_pilot[3], c_unitCountAlive)));
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    UnitGroupRemove(gv_pilot[3], UnitGroupLoopCurrent());
                    UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), UnitGetPosition(UnitFromId(302161699))), c_orderQueueReplace);
                }
                UnitGroupLoopEnd();
                return true;
            }
            
            //--------------------------------------------------------------------------------------------------
            void gt_BC10_Init () {
                gt_BC10 = TriggerCreate(&quot;gt_BC10_Func&quot;);
                TriggerAddEventUnitRegion(gt_BC10, null, RegionFromId(27), true);
            }
            
            //--------------------------------------------------------------------------------------------------
            // Trigger: BC Operational 10
            //--------------------------------------------------------------------------------------------------
            bool gt_BCOperational10_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((UnitGetType(EventUnit()) == &quot;Civilian&quot;))) {
                        return false;
                    }
                }
            
                // Actions
                if (!runActions) {
                    return true;
                }
            
                TriggerEnable(TriggerGetCurrent(), false);
                PingDestroy(libHots_gf_PingStoredForUnit(EventUnit(), 0));
                UnitRemove(EventUnit());
                UnitKill(UnitFromId(302161699));
                gf_BattlecruiserOperational(UnitFromId(244765266));
                UnitGroupAdd(gv_acquiredBattlecruisers[gv_pLAYER_02_USER], UnitFromId(244765266));
                gv_battlecruiserCount += 1;
                SoundPlayForPlayer(SoundLink(&quot;Battlecruiser_Ready&quot;, -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
                return true;
            }
            
            //--------------------------------------------------------------------------------------------------
            void gt_BCOperational10_Init () {
                gt_BCOperational10 = TriggerCreate(&quot;gt_BCOperational10_Func&quot;);
                TriggerAddEventUnitRangePoint(gt_BCOperational10, null, UnitGetPosition(UnitFromId(302161699)), 0.5, true);
            }
            
            //--------------------------------------------------------------------------------------------------
            // Trigger: BC 11
            //--------------------------------------------------------------------------------------------------
            bool gt_BC11_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((UnitGetType(EventUnit()) == &quot;Civilian&quot;))) {
                        return false;
                    }
                }
            
                // Actions
                if (!runActions) {
                    return true;
                }
            
                TriggerEnable(TriggerGetCurrent(), false);
                UnitGroupLoopBegin(libNtve_gf_ConvertUnitToUnitGroup(UnitGroupRandomUnit(gv_pilot[3], c_unitCountAlive)));
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    UnitGroupRemove(gv_pilot[3], UnitGroupLoopCurrent());
                    UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), UnitGetPosition(UnitFromId(1599205470))), c_orderQueueReplace);
                }
                UnitGroupLoopEnd();
                return true;
            }
            
            //--------------------------------------------------------------------------------------------------
            void gt_BC11_Init () {
                gt_BC11 = TriggerCreate(&quot;gt_BC11_Func&quot;);
                TriggerAddEventUnitRegion(gt_BC11, null, RegionFromId(28), true);
            }
            
            //--------------------------------------------------------------------------------------------------
            // Trigger: BC Operational 11
            //--------------------------------------------------------------------------------------------------
            bool gt_BCOperational11_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((UnitGetType(EventUnit()) == &quot;Civilian&quot;))) {
                        return false;
                    }
                }
            
                // Actions
                if (!runActions) {
                    return true;
                }
            
                TriggerEnable(TriggerGetCurrent(), false);
                PingDestroy(libHots_gf_PingStoredForUnit(EventUnit(), 0));
                UnitRemove(EventUnit());
                UnitKill(UnitFromId(1599205470));
                gf_BattlecruiserOperational(UnitFromId(1680506451));
                UnitGroupAdd(gv_acquiredBattlecruisers[gv_pLAYER_02_USER], UnitFromId(1680506451));
                gv_battlecruiserCount += 1;
                SoundPlayForPlayer(SoundLink(&quot;Battlecruiser_Ready&quot;, -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
                return true;
            }
            
            //--------------------------------------------------------------------------------------------------
            void gt_BCOperational11_Init () {
                gt_BCOperational11 = TriggerCreate(&quot;gt_BCOperational11_Func&quot;);
                TriggerAddEventUnitRangePoint(gt_BCOperational11, null, UnitGetPosition(UnitFromId(1599205470)), 0.5, true);
            }
            
            //--------------------------------------------------------------------------------------------------
            // Trigger: BC 12
            //--------------------------------------------------------------------------------------------------
            bool gt_BC12_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((UnitGetType(EventUnit()) == &quot;Civilian&quot;))) {
                        return false;
                    }
                }
            
                // Actions
                if (!runActions) {
                    return true;
                }
            
                TriggerEnable(TriggerGetCurrent(), false);
                UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), UnitGetPosition(UnitFromId(705284253))), c_orderQueueReplace);
                return true;
            }
            
            //--------------------------------------------------------------------------------------------------
            void gt_BC12_Init () {
                gt_BC12 = TriggerCreate(&quot;gt_BC12_Func&quot;);
                TriggerAddEventUnitRegion(gt_BC12, null, RegionFromId(29), true);
            }
            
            //--------------------------------------------------------------------------------------------------
            // Trigger: BC Operational 12
            //--------------------------------------------------------------------------------------------------
            bool gt_BCOperational12_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((UnitGetType(EventUnit()) == &quot;Civilian&quot;))) {
                        return false;
                    }
                }
            
                // Actions
                if (!runActions) {
                    return true;
                }
            
                TriggerEnable(TriggerGetCurrent(), false);
                PingDestroy(libHots_gf_PingStoredForUnit(EventUnit(), 0));
                UnitRemove(EventUnit());
                UnitKill(UnitFromId(705284253));
                gf_BattlecruiserOperational(UnitFromId(2090686210));
                UnitGroupAdd(gv_acquiredBattlecruisers[gv_pLAYER_01_USER], UnitFromId(2090686210));
                gv_battlecruiserCount += 1;
                SoundPlayForPlayer(SoundLink(&quot;Battlecruiser_Ready&quot;, -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
                return true;
            }
            
            //--------------------------------------------------------------------------------------------------
            void gt_BCOperational12_Init () {
                gt_BCOperational12 = TriggerCreate(&quot;gt_BCOperational12_Func&quot;);
                TriggerAddEventUnitRangePoint(gt_BCOperational12, null, UnitGetPosition(UnitFromId(705284253)), 1.0, true);
            }
            
            //--------------------------------------------------------------------------------------------------
            // Trigger: BC 13
            //--------------------------------------------------------------------------------------------------
            bool gt_BC13_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((UnitGetType(EventUnit()) == &quot;Civilian&quot;))) {
                        return false;
                    }
                }
            
                // Actions
                if (!runActions) {
                    return true;
                }
            
                TriggerEnable(TriggerGetCurrent(), false);
                UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), UnitGetPosition(UnitFromId(1555066946))), c_orderQueueReplace);
                return true;
            }
            
            //--------------------------------------------------------------------------------------------------
            void gt_BC13_Init () {
                gt_BC13 = TriggerCreate(&quot;gt_BC13_Func&quot;);
                TriggerAddEventUnitRegion(gt_BC13, null, RegionFromId(30), true);
            }
            
            //--------------------------------------------------------------------------------------------------
            // Trigger: BC Operational 13
            //--------------------------------------------------------------------------------------------------
            bool gt_BCOperational13_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((UnitGetType(EventUnit()) == &quot;Civilian&quot;))) {
                        return false;
                    }
                }
            
                // Actions
                if (!runActions) {
                    return true;
                }
            
                TriggerEnable(TriggerGetCurrent(), false);
                PingDestroy(libHots_gf_PingStoredForUnit(EventUnit(), 0));
                UnitRemove(EventUnit());
                UnitKill(UnitFromId(1555066946));
                gf_BattlecruiserOperational(UnitFromId(867326625));
                UnitGroupAdd(gv_acquiredBattlecruisers[gv_pLAYER_01_USER], UnitFromId(867326625));
                gv_battlecruiserCount += 1;
                SoundPlayForPlayer(SoundLink(&quot;Battlecruiser_Ready&quot;, -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
                return true;
            }
            
            //--------------------------------------------------------------------------------------------------
            void gt_BCOperational13_Init () {
                gt_BCOperational13 = TriggerCreate(&quot;gt_BCOperational13_Func&quot;);
                TriggerAddEventUnitRangePoint(gt_BCOperational13, null, UnitGetPosition(UnitFromId(1555066946)), 1.0, true);
            }
            
            //--------------------------------------------------------------------------------------------------
            // Trigger: BC 14
            //--------------------------------------------------------------------------------------------------
            bool gt_BC14_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((UnitGetType(EventUnit()) == &quot;Civilian&quot;))) {
                        return false;
                    }
                }
            
                // Actions
                if (!runActions) {
                    return true;
                }
            
                TriggerEnable(TriggerGetCurrent(), false);
                UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), UnitGetPosition(UnitFromId(1599693748))), c_orderQueueReplace);
                return true;
            }
            
            //--------------------------------------------------------------------------------------------------
            void gt_BC14_Init () {
                gt_BC14 = TriggerCreate(&quot;gt_BC14_Func&quot;);
                TriggerAddEventUnitRegion(gt_BC14, null, RegionFromId(31), true);
            }
            
            //--------------------------------------------------------------------------------------------------
            // Trigger: BC Operational 14
            //--------------------------------------------------------------------------------------------------
            bool gt_BCOperational14_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((UnitGetType(EventUnit()) == &quot;Civilian&quot;))) {
                        return false;
                    }
                }
            
                // Actions
                if (!runActions) {
                    return true;
                }
            
                TriggerEnable(TriggerGetCurrent(), false);
                PingDestroy(libHots_gf_PingStoredForUnit(EventUnit(), 0));
                UnitRemove(EventUnit());
                UnitKill(UnitFromId(1599693748));
                gf_BattlecruiserOperational(UnitFromId(590370719));
                UnitGroupAdd(gv_acquiredBattlecruisers[gv_pLAYER_01_USER], UnitFromId(590370719));
                gv_battlecruiserCount += 1;
                SoundPlayForPlayer(SoundLink(&quot;Battlecruiser_Ready&quot;, -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
                return true;
            }
            
            //--------------------------------------------------------------------------------------------------
            void gt_BCOperational14_Init () {
                gt_BCOperational14 = TriggerCreate(&quot;gt_BCOperational14_Func&quot;);
                TriggerAddEventUnitRangePoint(gt_BCOperational14, null, UnitGetPosition(UnitFromId(1599693748)), 1.0, true);
            }
            
            //--------------------------------------------------------------------------------------------------
            // Trigger: BC 15
            //--------------------------------------------------------------------------------------------------
            bool gt_BC15_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((UnitGetType(EventUnit()) == &quot;Civilian&quot;))) {
                        return false;
                    }
                }
            
                // Actions
                if (!runActions) {
                    return true;
                }
            
                TriggerEnable(TriggerGetCurrent(), false);
                UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), UnitGetPosition(UnitFromId(904707511))), c_orderQueueReplace);
                return true;
            }
            
            //--------------------------------------------------------------------------------------------------
            void gt_BC15_Init () {
                gt_BC15 = TriggerCreate(&quot;gt_BC15_Func&quot;);
                TriggerAddEventUnitRegion(gt_BC15, null, RegionFromId(32), true);
            }
            
            //--------------------------------------------------------------------------------------------------
            // Trigger: BC Operational 15
            //--------------------------------------------------------------------------------------------------
            bool gt_BCOperational15_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((UnitGetType(EventUnit()) == &quot;Civilian&quot;))) {
                        return false;
                    }
                }
            
                // Actions
                if (!runActions) {
                    return true;
                }
            
                TriggerEnable(TriggerGetCurrent(), false);
                PingDestroy(libHots_gf_PingStoredForUnit(EventUnit(), 0));
                UnitRemove(EventUnit());
                UnitKill(UnitFromId(904707511));
                gf_BattlecruiserOperational(UnitFromId(1455401389));
                UnitGroupAdd(gv_acquiredBattlecruisers[gv_pLAYER_01_USER], UnitFromId(1455401389));
                gv_battlecruiserCount += 1;
                SoundPlayForPlayer(SoundLink(&quot;Battlecruiser_Ready&quot;, -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
                return true;
            }
            
            //--------------------------------------------------------------------------------------------------
            void gt_BCOperational15_Init () {
                gt_BCOperational15 = TriggerCreate(&quot;gt_BCOperational15_Func&quot;);
                TriggerAddEventUnitRangePoint(gt_BCOperational15, null, UnitGetPosition(UnitFromId(904707511)), 1.0, true);
            }
            
            //--------------------------------------------------------------------------------------------------
            // Trigger: BC Operational 16
            //--------------------------------------------------------------------------------------------------
            bool gt_BCOperational16_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((UnitGetType(EventUnit()) == &quot;Civilian&quot;))) {
                        return false;
                    }
                }
            
                // Actions
                if (!runActions) {
                    return true;
                }
            
                TriggerEnable(TriggerGetCurrent(), false);
                PingDestroy(libHots_gf_PingStoredForUnit(EventUnit(), 0));
                UnitRemove(EventUnit());
                UnitKill(UnitFromId(715633273));
                gf_BattlecruiserOperational(UnitFromId(1490989589));
                UnitGroupAdd(gv_acquiredBattlecruisers[gv_pLAYER_01_USER], UnitFromId(1490989589));
                gv_battlecruiserCount += 1;
                SoundPlayForPlayer(SoundLink(&quot;Battlecruiser_Ready&quot;, -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
                return true;
            }
            
            //--------------------------------------------------------------------------------------------------
            void gt_BCOperational16_Init () {
                gt_BCOperational16 = TriggerCreate(&quot;gt_BCOperational16_Func&quot;);
                TriggerAddEventUnitRangePoint(gt_BCOperational16, null, UnitGetPosition(UnitFromId(715633273)), 1.0, true);
            }
            
            //--------------------------------------------------------------------------------------------------
            // Trigger: Update Pilot Count
            //--------------------------------------------------------------------------------------------------
            bool gt_UpdatePilotCount_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_pilotTotal;
            
                // Variable Initialization
            
                // Conditions
                if (testConds) {
                    if (!((libCOMI_gf_GameIsOver() == false))) {
                        return false;
                    }
            
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
            
                // Actions
                if (!runActions) {
                    return true;
                }
            
                lv_pilotTotal += UnitGroupCount(UnitGroup(&quot;Civilian&quot;, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
                gv_remainingPilot = lv_pilotTotal;
                TriggerExecute(gt_ObjectiveRescuePilotUpdate, true, false);
                return true;
            }
            
            //--------------------------------------------------------------------------------------------------
            void gt_UpdatePilotCount_Init () {
                gt_UpdatePilotCount = TriggerCreate(&quot;gt_UpdatePilotCount_Func&quot;);
                TriggerAddEventTimePeriodic(gt_UpdatePilotCount, 0.5, c_timeGame);
            }
            
            //--------------------------------------------------------------------------------------------------
            // Trigger: Update Battlecruisers Count
            //--------------------------------------------------------------------------------------------------
            bool gt_UpdateBattlecruisersCount_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((libCOMI_gf_GameIsOver() == false))) {
                        return false;
                    }
            
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
            
                // Actions
                if (!runActions) {
                    return true;
                }
            
                TriggerExecute(gt_ObjectiveBattlecruisersAcquiredUpdate, true, false);
                return true;
            }
            
            //--------------------------------------------------------------------------------------------------
            void gt_UpdateBattlecruisersCount_Init () {
                gt_UpdateBattlecruisersCount = TriggerCreate(&quot;gt_UpdateBattlecruisersCount_Func&quot;);
                TriggerAddEventTimePeriodic(gt_UpdateBattlecruisersCount, 0.5, c_timeGame);
            }
            
            //--------------------------------------------------------------------------------------------------
            // Trigger: Hybrid Nemesis Defeat
            //--------------------------------------------------------------------------------------------------
            bool gt_HybridNemesisDefeat_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((UnitGroupCount(UnitGroup(&quot;HybridNemesis&quot;, c_playerAny, RegionFromId(17), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0))) {
                        return false;
                    }
                }
            
                // Actions
                if (!runActions) {
                    return true;
                }
            
                TriggerEnable(TriggerGetCurrent(), false);
                TriggerExecute(gt_ObjectiveKillHybridNemesisComplete, true, false);
                TriggerExecute(gt_VictoryPrimaryObjectiveComplete, true, false);
                TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromModel(&quot;ValerianEx1Portrait&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), &quot;ValerianEx1Portrait&quot;, &quot;Talk&quot;, null, StringExternal(&quot;Param/Value/0C3CBE6F&quot;), StringExternal(&quot;Param/Value/ABD5BDA7&quot;), 6.0, c_transmissionDurationAdd, false, c_maxPlayers, false);
                return true;
            }
            
            //--------------------------------------------------------------------------------------------------
            void gt_HybridNemesisDefeat_Init () {
                gt_HybridNemesisDefeat = TriggerCreate(&quot;gt_HybridNemesisDefeat_Func&quot;);
                TriggerEnable(gt_HybridNemesisDefeat, false);
                TriggerAddEventUnitDied(gt_HybridNemesisDefeat, null);
            }
            
            //--------------------------------------------------------------------------------------------------
            // Trigger: Battlecruiser Defeat
            //--------------------------------------------------------------------------------------------------
            bool gt_BattlecruiserDefeat_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((UnitGroupCount(UnitGroup(&quot;Battlecruiser&quot;, c_playerAny, RegionFromId(17), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0))) {
                        return false;
                    }
                }
            
                // Actions
                if (!runActions) {
                    return true;
                }
            
                TriggerEnable(TriggerGetCurrent(), false);
                TriggerExecute(gt_ObjectiveKillHybridNemesisFailed, true, false);
                TriggerExecute(gt_DefeatPrimaryObjectiveFailed, true, false);
                return true;
            }
            
            //--------------------------------------------------------------------------------------------------
            void gt_BattlecruiserDefeat_Init () {
                gt_BattlecruiserDefeat = TriggerCreate(&quot;gt_BattlecruiserDefeat_Func&quot;);
                TriggerEnable(gt_BattlecruiserDefeat, false);
                TriggerAddEventUnitDied(gt_BattlecruiserDefeat, null);
            }
            
            //--------------------------------------------------------------------------------------------------
            // Trigger: Loki Left Disover
            //--------------------------------------------------------------------------------------------------
            bool gt_LokiLeftDisover_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!(((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER) || (UnitGetOwner(EventUnit()) == gv_pLAYER_02_USER)))) {
                        return false;
                    }
                }
            
                // Actions
                if (!runActions) {
                    return true;
                }
            
                TriggerEnable(TriggerGetCurrent(), false);
                libNtve_gf_ShareVisionofUnit(UnitFromId(370698803), true, gv_pLAYER_01_USER);
                libNtve_gf_ShareVisionofUnit(UnitFromId(370698803), true, gv_pLAYER_02_USER);
                Wait(1.0, c_timeGame);
                TriggerExecute(gt_LokiDisoveredQ, true, false);
                libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionFromId(2), &quot;BattlecruiserLokiDock&quot;, c_animNameDefault, &quot;Stand Work End&quot;, c_animFlagNonLooping, c_animTimeDefault);
                UnitIssueOrder(UnitFromId(370698803), Order(AbilityCommand(&quot;LokiUndock&quot;, 0)), c_orderQueueReplace);
                Wait(3.5, c_timeGame);
                libNtve_gf_MakeUnitInvulnerable(UnitFromId(370698803), false);
                libNtve_gf_RescueUnit(UnitFromId(370698803), gv_pLAYER_03_ENEMY, true);
                return true;
            }
            
            //--------------------------------------------------------------------------------------------------
            void gt_LokiLeftDisover_Init () {
                gt_LokiLeftDisover = TriggerCreate(&quot;gt_LokiLeftDisover_Func&quot;);
                TriggerEnable(gt_LokiLeftDisover, false);
                TriggerAddEventUnitRegion(gt_LokiLeftDisover, null, RegionFromId(2), true);
            }
            
            //--------------------------------------------------------------------------------------------------
            // Trigger: Loki Right Disover
            //--------------------------------------------------------------------------------------------------
            bool gt_LokiRightDisover_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!(((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER) || (UnitGetOwner(EventUnit()) == gv_pLAYER_02_USER)))) {
                        return false;
                    }
                }
            
                // Actions
                if (!runActions) {
                    return true;
                }
            
                TriggerEnable(TriggerGetCurrent(), false);
                libNtve_gf_ShareVisionofUnit(UnitFromId(442268028), true, gv_pLAYER_01_USER);
                libNtve_gf_ShareVisionofUnit(UnitFromId(442268028), true, gv_pLAYER_02_USER);
                Wait(1.0, c_timeGame);
                TriggerExecute(gt_LokiDisoveredQ, true, false);
                libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionFromId(2), &quot;BattlecruiserLokiDock&quot;, c_animNameDefault, &quot;Stand Work End&quot;, c_animFlagNonLooping, c_animTimeDefault);
                UnitIssueOrder(UnitFromId(442268028), Order(AbilityCommand(&quot;LokiUndock&quot;, 0)), c_orderQueueReplace);
                Wait(3.5, c_timeGame);
                libNtve_gf_MakeUnitInvulnerable(UnitFromId(442268028), false);
                libNtve_gf_RescueUnit(UnitFromId(442268028), gv_pLAYER_04_ENEMY, true);
                return true;
            }
            
            //--------------------------------------------------------------------------------------------------
            void gt_LokiRightDisover_Init () {
                gt_LokiRightDisover = TriggerCreate(&quot;gt_LokiRightDisover_Func&quot;);
                TriggerEnable(gt_LokiRightDisover, false);
                TriggerAddEventUnitRegion(gt_LokiRightDisover, null, RegionFromId(9), true);
            }
            
            //--------------------------------------------------------------------------------------------------
            // Trigger: Loki Behavior
            //--------------------------------------------------------------------------------------------------
            bool gt_LokiBehavior_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((UnitGetType(EventUnit()) == &quot;Loki&quot;))) {
                        return false;
                    }
                }
            
                // Actions
                if (!runActions) {
                    return true;
                }
            
                if ((UnitGetPropertyFixed(libNtve_gf_AcquiredTarget(), c_unitPropLife, c_unitPropCurrent) &gt;= 200.0)) {
                    UnitIssueOrder(EventUnit(), OrderTargetingUnit(AbilityCommand(&quot;LokiYamato&quot;, 0), libNtve_gf_AcquiredTarget()), c_orderQueueReplace);
                }
            
                if ((UnitFilterMatch(libNtve_gf_AcquiredTarget(), EventPlayer(), UnitFilter((1 &lt;&lt; c_targetFilterAir), 0, (1 &lt;&lt; c_targetFilterPlayer) | (1 &lt;&lt; c_targetFilterAlly) | (1 &lt;&lt; c_targetFilterNeutral) | (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32)))) == true)) {
                    UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand(&quot;LokiMissilePods&quot;, 0), UnitGetPosition(libNtve_gf_AcquiredTarget())), c_orderQueueReplace);
                }
            
                return true;
            }
            
            //--------------------------------------------------------------------------------------------------
            void gt_LokiBehavior_Init () {
                gt_LokiBehavior = TriggerCreate(&quot;gt_LokiBehavior_Func&quot;);
                TriggerAddEventUnitAcquiredTarget(gt_LokiBehavior, null);
            }
            
            //--------------------------------------------------------------------------------------------------
            // Trigger: Loki Destroyed
            //--------------------------------------------------------------------------------------------------
            bool gt_LokiDestroyed_Func (bool testConds, bool runActions) {
                unit auto80DA19B1_val;
            
                // Actions
                if (!runActions) {
                    return true;
                }
            
                gv_destroyedLoki += 1;
                auto80DA19B1_val = EventUnit();
                if (auto80DA19B1_val == UnitFromId(370698803)) {
                    libCOMI_gf_DestroyPingCoop(gv_lokiPIng[1]);
                    gf_BridgeOpen(UnitFromId(767446002));
                }
                else if (auto80DA19B1_val == UnitFromId(442268028)) {
                    libCOMI_gf_DestroyPingCoop(gv_lokiPIng[2]);
                    gf_BridgeOpen(UnitFromId(2090377473));
                }
                else {
                }
                TriggerExecute(gt_ObjectiveDestroyLokiUpdate, true, true);
                if ((gv_destroyedLoki == 2)) {
                    TriggerExecute(gt_ObjectiveDestroyLokiComplete, true, true);
                }
            
                return true;
            }
            
            //--------------------------------------------------------------------------------------------------
            void gt_LokiDestroyed_Init () {
                gt_LokiDestroyed = TriggerCreate(&quot;gt_LokiDestroyed_Func&quot;);
                TriggerAddEventUnitDied(gt_LokiDestroyed, UnitRefFromUnit(UnitFromId(370698803)));
                TriggerAddEventUnitDied(gt_LokiDestroyed, UnitRefFromUnit(UnitFromId(442268028)));
            }
            
            //--------------------------------------------------------------------------------------------------
            // Trigger: Enemy Attacking Q
            //--------------------------------------------------------------------------------------------------
            bool gt_EnemyAttackingQ_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((libCOMI_gf_GameIsOver() == false))) {
                        return false;
                    }
            
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
            
                // Actions
                if (!runActions) {
                    return true;
                }
            
                TriggerEnable(TriggerGetCurrent(), false);
                TriggerQueueEnter();
                libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
                libCOMI_gf_SendMissionTransmission(&quot;AttackWave&quot;, true, RandomInt(gv_pLAYER_01_USER, gv_pLAYER_02_USER));
                libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
                TriggerQueueExit();
                Wait(20.0, c_timeAI);
                TriggerEnable(TriggerGetCurrent(), true);
                return true;
            }
            
            //--------------------------------------------------------------------------------------------------
            void gt_EnemyAttackingQ_Init () {
                gt_EnemyAttackingQ = TriggerCreate(&quot;gt_EnemyAttackingQ_Func&quot;);
                TriggerAddEventPlayerAIWave(gt_EnemyAttackingQ, gv_pLAYER_03_ENEMY);
                TriggerAddEventPlayerAIWave(gt_EnemyAttackingQ, gv_pLAYER_04_ENEMY);
            }
            
            //--------------------------------------------------------------------------------------------------
            // Trigger: Loki Q
            //--------------------------------------------------------------------------------------------------
            bool gt_LokiQ_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
            
                TriggerExecute(gt_ObjectiveDestroyLokiCreate, true, true);
                TriggerEnable(gt_LokiLeftDisover, true);
                TriggerEnable(gt_LokiRightDisover, true);
                libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_Secondary, UnitGetPosition(UnitFromId(370698803)), null);
                gv_lokiPIng[1] = PingLastCreated();
                libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_Secondary, UnitGetPosition(UnitFromId(442268028)), null);
                gv_lokiPIng[2] = PingLastCreated();
                TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromModel(&quot;ValerianEx1Portrait&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), &quot;ValerianEx1Portrait&quot;, &quot;Talk&quot;, null, StringExternal(&quot;Param/Value/53361133&quot;), StringExternal(&quot;Param/Value/544854BD&quot;), 8.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
                return true;
            }
            
            //--------------------------------------------------------------------------------------------------
            void gt_LokiQ_Init () {
                gt_LokiQ = TriggerCreate(&quot;gt_LokiQ_Func&quot;);
                TriggerAddEventTimeElapsed(gt_LokiQ, 480.0, c_timeGame);
            }
            
            //--------------------------------------------------------------------------------------------------
            // Trigger: Loki Disovered Q
            //--------------------------------------------------------------------------------------------------
            bool gt_LokiDisoveredQ_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
            
                // Actions
                if (!runActions) {
                    return true;
                }
            
                TriggerEnable(TriggerGetCurrent(), false);
                TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromModel(&quot;ValerianEx1Portrait&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), &quot;ValerianEx1Portrait&quot;, &quot;Talk&quot;, null, StringExternal(&quot;Param/Value/1669629E&quot;), StringExternal(&quot;Param/Value/FFF4D343&quot;), 8.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
                return true;
            }
            
            //--------------------------------------------------------------------------------------------------
            void gt_LokiDisoveredQ_Init () {
                gt_LokiDisoveredQ = TriggerCreate(&quot;gt_LokiDisoveredQ_Func&quot;);
            }
            
            
            //--------------------------------------------------------------------------------------------------
            // Trigger: Defeat Primary Objective Failed
            //--------------------------------------------------------------------------------------------------
            bool gt_DefeatPrimaryObjectiveFailed_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
            
                    if (!((libCOMI_gf_GameIsOver() == false))) {
                        return false;
                    }
                }
            
                // Actions
                if (!runActions) {
                    return true;
                }
            
                TriggerEnable(TriggerGetCurrent(), false);
                libCOMI_gf_GameOver(libCOMI_ge_CampaignMissionGameResultType_Defeat);
                TransmissionClearAll();
                TriggerQueuePause(true);
                TriggerQueueClear(c_triggerQueueRemove);
                libCOMI_gf_SendMissionTransmission(&quot;DestroyedReminder&quot;, false, -1);
                libCOMI_gf_CinematicModeCampaign(true, 1.5, true);
                TriggerExecute(gt_ObjectivePreventTimerExpireFailed, true, false);
                TriggerExecute(gt_ObjectiveBattlecruisersAcquiredFailed, true, false);
                TriggerExecute(gt_ObjectiveKillHybridNemesisFailed, true, false);
                TriggerExecute(gt_ObjectiveRescuePilotFailed, true, false);
                libCOMI_gf_DisplayCampaignMessage(libCOMI_gf_HumanPlayers(), libCOMI_ge_CampaignMessageType_MissionFailed, StringExternal(&quot;Param/Value/79462FB3&quot;), libCOMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
                CameraLockInput(gv_pLAYER_01_USER, true);
                CameraLockInput(gv_pLAYER_02_USER, true);
                UnitClearSelection(gv_pLAYER_01_USER);
                UnitClearSelection(gv_pLAYER_02_USER);
                UISetSelectionTypeEnabled(PlayerGroupAll(), c_localSelectionTypeUnknown, false);
                CameraPan(gv_pLAYER_01_USER, RegionGetCenter(RegionEntireMap()), 1.5, -1, 10.0, false);
                CameraPan(gv_pLAYER_02_USER, RegionGetCenter(RegionEntireMap()), 1.5, -1, 10.0, false);
                libCOMI_gf_WaitForMissionTransmission();
                UISetCursorVisible(PlayerGroupAll(), true);
                TriggerExecute(gt_Defeat, true, false);
                return true;
            }
            
            //--------------------------------------------------------------------------------------------------
            void gt_DefeatPrimaryObjectiveFailed_Init () {
                gt_DefeatPrimaryObjectiveFailed = TriggerCreate(&quot;gt_DefeatPrimaryObjectiveFailed_Func&quot;);
                TriggerAddEventTimer(gt_DefeatPrimaryObjectiveFailed, gv_objectiveTimer);
            }
            
            //--------------------------------------------------------------------------------------------------
            // Trigger: Victory Primary Objective Complete
            //--------------------------------------------------------------------------------------------------
            bool gt_VictoryPrimaryObjectiveComplete_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((libCOMI_gf_GameIsOver() == false))) {
                        return false;
                    }
            
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
            
                // Actions
                if (!runActions) {
                    return true;
                }
            
                TriggerEnable(TriggerGetCurrent(), false);
                TriggerExecute(gt_VictorySequence, true, false);
                return true;
            }
            
            //--------------------------------------------------------------------------------------------------
            void gt_VictoryPrimaryObjectiveComplete_Init () {
                gt_VictoryPrimaryObjectiveComplete = TriggerCreate(&quot;gt_VictoryPrimaryObjectiveComplete_Func&quot;);
            }
            
            //--------------------------------------------------------------------------------------------------
            // Trigger: Victory Sequence
            //--------------------------------------------------------------------------------------------------
            bool gt_VictorySequence_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((libCOMI_gf_GameIsOver() == false))) {
                        return false;
                    }
            
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
            
                // Actions
                if (!runActions) {
                    return true;
                }
            
                TriggerEnable(TriggerGetCurrent(), false);
                libCOMI_gf_GameOver(libCOMI_ge_CampaignMissionGameResultType_Victory);
                Wait(2.0, c_timeReal);
                TriggerExecute(gt_ObjectiveRescuePilotComplete, true, false);
                libCOMI_gf_RunMissionVictorySequence(gt_VictoryFanfareQ);
                return true;
            }
            
            //--------------------------------------------------------------------------------------------------
            void gt_VictorySequence_Init () {
                gt_VictorySequence = TriggerCreate(&quot;gt_VictorySequence_Func&quot;);
            }
            
            //--------------------------------------------------------------------------------------------------
            // Trigger: Victory Fanfare Q
            //--------------------------------------------------------------------------------------------------
            bool gt_VictoryFanfareQ_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
            
                TransmissionClearAll();
                TriggerQueueEnter();
                libCOMI_gf_CinematicModeCampaign(true, c_transitionDurationDefault, true);
                libCOMI_gf_SendMissionTransmission(&quot;PrimaryObjectiveVictory&quot;, false, -1);
                UnitPauseAll(true);
                CameraLockInput(gv_pLAYER_01_USER, true);
                CameraLockInput(gv_pLAYER_02_USER, true);
                UnitClearSelection(gv_pLAYER_01_USER);
                UnitClearSelection(gv_pLAYER_02_USER);
                UISetSelectionTypeEnabled(PlayerGroupAll(), c_localSelectionTypeUnknown, false);
                CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoDefault(), 2.0, -1, 10.0, false);
                CameraPan(gv_pLAYER_01_USER, RegionGetCenter(RegionFromId(17)), 2.0, -1, 10.0, false);
                CameraApplyInfo(gv_pLAYER_02_USER, CameraInfoDefault(), 2.0, -1, 10.0, false);
                CameraPan(gv_pLAYER_02_USER, RegionGetCenter(RegionFromId(17)), 2.0, -1, 10.0, false);
                libCOMI_gf_DisplayCampaignMessage(PlayerGroupSingle(gv_pLAYER_01_USER), libCOMI_ge_CampaignMessageType_MissionVictory, StringExternal(&quot;Param/Value/684A78B4&quot;), libCOMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
                libCOMI_gf_DisplayCampaignMessage(PlayerGroupSingle(gv_pLAYER_02_USER), libCOMI_ge_CampaignMessageType_MissionVictory, StringExternal(&quot;Param/Value/E5C8709E&quot;), libCOMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
                libCOMI_gf_WaitForMissionTransmission();
                Wait(libCOMI_gv_campaignVictoryDelay, c_timeGame);
                UISetCursorVisible(PlayerGroupAll(), true);
                TriggerExecute(gt_Victory, true, false);
                TriggerQueueExit();
                return true;
            }
            
            //--------------------------------------------------------------------------------------------------
            void gt_VictoryFanfareQ_Init () {
                gt_VictoryFanfareQ = TriggerCreate(&quot;gt_VictoryFanfareQ_Func&quot;);
            }
            
            //--------------------------------------------------------------------------------------------------
            // Trigger: Victory
            //--------------------------------------------------------------------------------------------------
            bool gt_Victory_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
            
                // Actions
                if (!runActions) {
                    return true;
                }
            
                TriggerEnable(TriggerGetCurrent(), false);
                libCOMI_gf_EndCampaignMission(c_gameOverVictory);
                return true;
            }
            
            //--------------------------------------------------------------------------------------------------
            void gt_Victory_Init () {
                gt_Victory = TriggerCreate(&quot;gt_Victory_Func&quot;);
            }
            
            //--------------------------------------------------------------------------------------------------
            // Trigger: Defeat
            //--------------------------------------------------------------------------------------------------
            bool gt_Defeat_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
            
                // Actions
                if (!runActions) {
                    return true;
                }
            
                TriggerEnable(TriggerGetCurrent(), false);
                libCOMI_gf_EndCampaignMission(c_gameOverDefeat);
                return true;
            }
            
            //--------------------------------------------------------------------------------------------------
            void gt_Defeat_Init () {
                gt_Defeat = TriggerCreate(&quot;gt_Defeat_Func&quot;);
            }
            
            //--------------------------------------------------------------------------------------------------
            // Trigger: Start AI
            //--------------------------------------------------------------------------------------------------
            bool gt_StartAI_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
            
                libCOMI_gf_StartCoopAI(gv_pLAYER_03_ENEMY, gv_pLAYER_01_USER);
                libCOMI_gf_StartCoopAI(gv_pLAYER_04_ENEMY, gv_pLAYER_02_USER);
                TriggerExecute(gt_SetupAttackWaveSpawn, true, false);
                TriggerExecute(gt_AIAttackWaves, true, false);
                return true;
            }
            
            //--------------------------------------------------------------------------------------------------
            void gt_StartAI_Init () {
                gt_StartAI = TriggerCreate(&quot;gt_StartAI_Func&quot;);
            }
            
            //--------------------------------------------------------------------------------------------------
            // Trigger: Setup Attack Wave Spawn
            //--------------------------------------------------------------------------------------------------
            bool gt_SetupAttackWaveSpawn_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_spawnLocationIter;
            
                // Variable Initialization
            
                // Actions
                if (!runActions) {
                    return true;
                }
            
                lv_spawnLocationIter += 1;
                gv_attackSpawn[gv_pLAYER_01_USER][lv_spawnLocationIter] = RegionFromId(57);
                lv_spawnLocationIter = 1;
                gv_attackSpawn[gv_pLAYER_02_USER][lv_spawnLocationIter] = RegionFromId(57);
                return true;
            }
            
            //--------------------------------------------------------------------------------------------------
            void gt_SetupAttackWaveSpawn_Init () {
                gt_SetupAttackWaveSpawn = TriggerCreate(&quot;gt_SetupAttackWaveSpawn_Func&quot;);
            }
            
            //--------------------------------------------------------------------------------------------------
            // Trigger: AI Attack Waves
            //--------------------------------------------------------------------------------------------------
            bool gt_AIAttackWaves_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
            
                gf_RunAttackWaveatMissionTime(gt_AttackWave01, (3.0 * 60.0));
                if ((gv_area == 0)) {
                    gf_RunAttackWaveatMissionTime(gt_AttackWave02, (6.0 * 60.0));
                }
            
                if ((gv_area == 0)) {
                    gf_RunAttackWaveatMissionTime(gt_AttackWave03, (9.0 * 60.0));
                }
            
                return true;
            }
            
            //--------------------------------------------------------------------------------------------------
            void gt_AIAttackWaves_Init () {
                gt_AIAttackWaves = TriggerCreate(&quot;gt_AIAttackWaves_Func&quot;);
            }
            
            //--------------------------------------------------------------------------------------------------
            // Trigger: Attack Wave 01
            //--------------------------------------------------------------------------------------------------
            bool gt_AttackWave01_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_resourceBucket;
                int lv_techBucket;
            
                // Variable Initialization
                lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
                lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__1Early;
            
                // Conditions
                if (testConds) {
                    if (!((libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_03_ENEMY) != 1))) {
                        return false;
                    }
            
                    if (!((libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_03_ENEMY) != 2))) {
                        return false;
                    }
            
                    if (!((libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_04_ENEMY) != 1))) {
                        return false;
                    }
            
                    if (!((libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_04_ENEMY) != 2))) {
                        return false;
                    }
                }
            
                // Actions
                if (!runActions) {
                    return true;
                }
            
                lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
                lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__1Early;
                AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, PointFromId(249));
                AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, PointFromId(249));
                libCOMI_gf_CreateCoopDropForceinTransportsatLocationandWaitforthemtospawn(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, lv_resourceBucket, lv_techBucket, gf_AttackWaveSpawn(), &quot;Medivac&quot;);
                libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
                return true;
            }
            
            //--------------------------------------------------------------------------------------------------
            void gt_AttackWave01_Init () {
                gt_AttackWave01 = TriggerCreate(&quot;gt_AttackWave01_Func&quot;);
            }
            
            //--------------------------------------------------------------------------------------------------
            // Trigger: Attack Wave 02
            //--------------------------------------------------------------------------------------------------
            bool gt_AttackWave02_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_resourceBucket;
                int lv_techBucket;
            
                // Variable Initialization
                lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__2Smaller;
                lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__2EarlyMid;
            
                // Actions
                if (!runActions) {
                    return true;
                }
            
                lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__2Smaller;
                lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__2EarlyMid;
                AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, PointFromId(249));
                AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, PointFromId(249));
                libCOMI_gf_CreateCoopDropForceinTransportsatLocationandWaitforthemtospawn(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, lv_resourceBucket, lv_techBucket, gf_AttackWaveSpawn(), &quot;Medivac&quot;);
                libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
                return true;
            }
            
            //--------------------------------------------------------------------------------------------------
            void gt_AttackWave02_Init () {
                gt_AttackWave02 = TriggerCreate(&quot;gt_AttackWave02_Func&quot;);
            }
            
            //--------------------------------------------------------------------------------------------------
            // Trigger: Attack Wave 03
            //--------------------------------------------------------------------------------------------------
            bool gt_AttackWave03_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_resourceBucket;
                int lv_techBucket;
                int lv_numberOfStructures_ExpLeft;
                int lv_numberOfStructures_ExpRight;
                point lv_attackPathWaypoint;
            
                // Variable Initialization
                lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__3Small;
                lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__3Mid;
            
                // Actions
                if (!runActions) {
                    return true;
                }
            
                lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__3Small;
                lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__3Mid;
                PlayerGroupLoopBegin(libCOMI_gf_HumanPlayers());
                for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                    lv_numberOfStructures_ExpLeft += UnitGroupCount(UnitGroup(null, PlayerGroupLoopCurrent(), RegionFromId(3), UnitFilter((1 &lt;&lt; c_targetFilterStructure), 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
                    lv_numberOfStructures_ExpRight += UnitGroupCount(UnitGroup(null, PlayerGroupLoopCurrent(), RegionFromId(4), UnitFilter((1 &lt;&lt; c_targetFilterStructure), 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
                }
                PlayerGroupLoopEnd();
                if ((((lv_numberOfStructures_ExpLeft == 0) &amp;&amp; (lv_numberOfStructures_ExpRight == 0)) || ((lv_numberOfStructures_ExpLeft &gt; 0) &amp;&amp; (lv_numberOfStructures_ExpRight &gt; 0)))) {
                    if ((RandomInt(0, 100) &lt; 50)) {
                        lv_attackPathWaypoint = PointFromId(367);
                    }
                    else {
                        lv_attackPathWaypoint = PointFromId(358);
                    }
                }
                else {
                    if ((lv_numberOfStructures_ExpLeft &gt; lv_numberOfStructures_ExpRight)) {
                        lv_attackPathWaypoint = PointFromId(367);
                    }
                    else {
                        lv_attackPathWaypoint = PointFromId(358);
                    }
                }
                if ((lv_attackPathWaypoint == PointFromId(367))) {
                    gv_attackWaveA_Wave05Path = PointFromId(358);
                }
                else {
                    gv_attackWaveA_Wave05Path = PointFromId(367);
                }
                AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, PointFromId(249));
                AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, PointFromId(249));
                libCOMI_gf_CreateCoopDropForceinTransportsatLocationandWaitforthemtospawn(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, lv_resourceBucket, lv_techBucket, gf_AttackWaveSpawn(), &quot;Medivac&quot;);
                libCOMI_gf_AddAttackForceWaypoint(lv_attackPathWaypoint, false);
                libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
                return true;
            }
            
            //--------------------------------------------------------------------------------------------------
            void gt_AttackWave03_Init () {
                gt_AttackWave03 = TriggerCreate(&quot;gt_AttackWave03_Func&quot;);
            }
            
            //--------------------------------------------------------------------------------------------------
            // Trigger: Attack Wave 04
            //--------------------------------------------------------------------------------------------------
            bool gt_AttackWave04_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_resourceBucket;
                int lv_techBucket;
                int lv_attackingAI;
                int lv_defendingPlayer;
            
                // Variable Initialization
                lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__4Medium;
                lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__4LateMid;
            
                // Actions
                if (!runActions) {
                    return true;
                }
            
                lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__4Medium;
                lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__4LateMid;
                AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, PointFromId(249));
                AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, PointFromId(249));
                libCOMI_gf_CreateCoopDropForceinTransportsatLocationandWaitforthemtospawn(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, lv_resourceBucket, lv_techBucket, gf_AttackWaveSpawn(), &quot;Medivac&quot;);
                libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
                return true;
            }
            
            //--------------------------------------------------------------------------------------------------
            void gt_AttackWave04_Init () {
                gt_AttackWave04 = TriggerCreate(&quot;gt_AttackWave04_Func&quot;);
            }
            
            //--------------------------------------------------------------------------------------------------
            // Trigger: Attack Wave 05
            //--------------------------------------------------------------------------------------------------
            bool gt_AttackWave05_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_resourceBucket;
                int lv_techBucket;
                int lv_numberOfStructures_ExpLeft;
                int lv_numberOfStructures_ExpRight;
                point lv_attackPathWaypoint;
            
                // Variable Initialization
                lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
                lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__1Early;
            
                // Actions
                if (!runActions) {
                    return true;
                }
            
                lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__5Large;
                lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__5Late;
                lv_attackPathWaypoint = gv_attackWaveA_Wave05Path;
                AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, PointFromId(249));
                AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, PointFromId(249));
                libCOMI_gf_CreateCoopDropForceinTransportsatLocationandWaitforthemtospawn(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, lv_resourceBucket, lv_techBucket, gf_AttackWaveSpawn(), &quot;Medivac&quot;);
                libCOMI_gf_AddAttackForceWaypoint(lv_attackPathWaypoint, false);
                libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
                return true;
            }
            
            //--------------------------------------------------------------------------------------------------
            void gt_AttackWave05_Init () {
                gt_AttackWave05 = TriggerCreate(&quot;gt_AttackWave05_Func&quot;);
            }
            
            //--------------------------------------------------------------------------------------------------
            // Trigger: Attack Wave 06
            //--------------------------------------------------------------------------------------------------
            bool gt_AttackWave06_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_resourceBucket;
                int lv_techBucket;
            
                // Variable Initialization
                lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__6Larger;
                lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets_TechLevel06;
            
                // Actions
                if (!runActions) {
                    return true;
                }
            
                lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__6Larger;
                lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets_TechLevel06;
                AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, PointFromId(249));
                AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, PointFromId(249));
                libCOMI_gf_CreateCoopDropForceinTransportsatLocationandWaitforthemtospawn(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, lv_resourceBucket, lv_techBucket, gf_AttackWaveSpawn(), &quot;Medivac&quot;);
                libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
                return true;
            }
            
            //--------------------------------------------------------------------------------------------------
            void gt_AttackWave06_Init () {
                gt_AttackWave06 = TriggerCreate(&quot;gt_AttackWave06_Func&quot;);
            }
            
            //--------------------------------------------------------------------------------------------------
            // Trigger: Attack Wave 07
            //--------------------------------------------------------------------------------------------------
            bool gt_AttackWave07_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_resourceBucket;
                int lv_techBucket;
            
                // Variable Initialization
                lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__7Largest;
                lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets_TechLevel07;
            
                // Actions
                if (!runActions) {
                    return true;
                }
            
                lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__7Largest;
                lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets_TechLevel07;
                AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, PointFromId(249));
                AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, PointFromId(249));
                libCOMI_gf_CreateCoopDropForceinTransportsatLocationandWaitforthemtospawn(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, lv_resourceBucket, lv_techBucket, gf_AttackWaveSpawn(), &quot;Medivac&quot;);
                libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
                return true;
            }
            
            //--------------------------------------------------------------------------------------------------
            void gt_AttackWave07_Init () {
                gt_AttackWave07 = TriggerCreate(&quot;gt_AttackWave07_Func&quot;);
            }
            
            //--------------------------------------------------------------------------------------------------
            // Trigger: Objective - KillHybridNemesis - Create
            //--------------------------------------------------------------------------------------------------
            bool gt_ObjectiveKillHybridNemesisCreate_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
            
                // Actions
                if (!runActions) {
                    return true;
                }
            
                TriggerEnable(TriggerGetCurrent(), false);
                libCOMI_gf_CreateObjectiveCampaign(&quot;PlaceholderPrimary&quot;);
                gv_objectiveKillHybridNemesis = ObjectiveLastCreated();
                ObjectiveSetPriority(ObjectiveLastCreated(), 12);
                TriggerExecute(gt_ObjectiveKillHybridNemesisUpdate, true, false);
                Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
                return true;
            }
            
            //--------------------------------------------------------------------------------------------------
            void gt_ObjectiveKillHybridNemesisCreate_Init () {
                gt_ObjectiveKillHybridNemesisCreate = TriggerCreate(&quot;gt_ObjectiveKillHybridNemesisCreate_Func&quot;);
            }
            
            //--------------------------------------------------------------------------------------------------
            // Trigger: Objective - KillHybridNemesis - Complete
            //--------------------------------------------------------------------------------------------------
            bool gt_ObjectiveKillHybridNemesisComplete_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
            
                // Actions
                if (!runActions) {
                    return true;
                }
            
                TriggerEnable(TriggerGetCurrent(), false);
                TriggerExecute(gt_ObjectiveKillHybridNemesisCreate, true, false);
                ObjectiveSetState(gv_objectiveKillHybridNemesis, c_objectiveStateCompleted);
                Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
                return true;
            }
            
            //--------------------------------------------------------------------------------------------------
            void gt_ObjectiveKillHybridNemesisComplete_Init () {
                gt_ObjectiveKillHybridNemesisComplete = TriggerCreate(&quot;gt_ObjectiveKillHybridNemesisComplete_Func&quot;);
            }
            
            //--------------------------------------------------------------------------------------------------
            // Trigger: Objective - KillHybridNemesis - Update
            //--------------------------------------------------------------------------------------------------
            bool gt_ObjectiveKillHybridNemesisUpdate_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
            
                TriggerExecute(gt_ObjectiveKillHybridNemesisCreate, true, false);
                ObjectiveSetName(gv_objectiveKillHybridNemesis, StringExternal(&quot;Param/Value/97517453&quot;));
                return true;
            }
            
            //--------------------------------------------------------------------------------------------------
            void gt_ObjectiveKillHybridNemesisUpdate_Init () {
                gt_ObjectiveKillHybridNemesisUpdate = TriggerCreate(&quot;gt_ObjectiveKillHybridNemesisUpdate_Func&quot;);
            }
            
            //--------------------------------------------------------------------------------------------------
            // Trigger: Objective - KillHybridNemesis - Failed
            //--------------------------------------------------------------------------------------------------
            bool gt_ObjectiveKillHybridNemesisFailed_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
            
                // Actions
                if (!runActions) {
                    return true;
                }
            
                TriggerEnable(TriggerGetCurrent(), false);
                TriggerExecute(gt_ObjectiveKillHybridNemesisCreate, true, false);
                ObjectiveSetState(gv_objectiveKillHybridNemesis, c_objectiveStateFailed);
                Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
                return true;
            }
            
            //--------------------------------------------------------------------------------------------------
            void gt_ObjectiveKillHybridNemesisFailed_Init () {
                gt_ObjectiveKillHybridNemesisFailed = TriggerCreate(&quot;gt_ObjectiveKillHybridNemesisFailed_Func&quot;);
            }
            
            //--------------------------------------------------------------------------------------------------
            // Trigger: Objective - BattlecruisersAcquired - Create
            //--------------------------------------------------------------------------------------------------
            bool gt_ObjectiveBattlecruisersAcquiredCreate_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
            
                // Actions
                if (!runActions) {
                    return true;
                }
            
                TriggerEnable(TriggerGetCurrent(), false);
                libCOMI_gf_CreateObjectiveCampaign(&quot;PlaceholderPrimary&quot;);
                libCOMI_gf_SetObjectiveRequiredCountCampaign(&quot;PlaceholderPrimary&quot;, gv_battlecruiserCount);
                gv_objectiveBattlecruisersAcquired = ObjectiveLastCreated();
                ObjectiveSetPriority(ObjectiveLastCreated(), 11);
                TriggerExecute(gt_ObjectiveBattlecruisersAcquiredUpdate, true, false);
                Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
                return true;
            }
            
            //--------------------------------------------------------------------------------------------------
            void gt_ObjectiveBattlecruisersAcquiredCreate_Init () {
                gt_ObjectiveBattlecruisersAcquiredCreate = TriggerCreate(&quot;gt_ObjectiveBattlecruisersAcquiredCreate_Func&quot;);
            }
            
            //--------------------------------------------------------------------------------------------------
            // Trigger: Objective - BattlecruisersAcquired - Complete
            //--------------------------------------------------------------------------------------------------
            bool gt_ObjectiveBattlecruisersAcquiredComplete_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
            
                // Actions
                if (!runActions) {
                    return true;
                }
            
                TriggerEnable(TriggerGetCurrent(), false);
                TriggerExecute(gt_ObjectiveBattlecruisersAcquiredCreate, true, false);
                ObjectiveSetState(gv_objectiveBattlecruisersAcquired, c_objectiveStateCompleted);
                Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
                return true;
            }
            
            //--------------------------------------------------------------------------------------------------
            void gt_ObjectiveBattlecruisersAcquiredComplete_Init () {
                gt_ObjectiveBattlecruisersAcquiredComplete = TriggerCreate(&quot;gt_ObjectiveBattlecruisersAcquiredComplete_Func&quot;);
            }
            
            //--------------------------------------------------------------------------------------------------
            // Trigger: Objective - BattlecruisersAcquired - Update
            //--------------------------------------------------------------------------------------------------
            bool gt_ObjectiveBattlecruisersAcquiredUpdate_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
            
                TriggerExecute(gt_ObjectiveBattlecruisersAcquiredCreate, true, false);
                libCOMI_gf_SetMissionObjectiveProgress(&quot;PlaceholderPrimary&quot;, gv_battlecruiserCount);
                TextExpressionSetToken(&quot;Param/Expression/5270A063&quot;, &quot;StructureCount&quot;, IntToText(gv_battlecruiserCount));
                ObjectiveSetName(gv_objectiveBattlecruisersAcquired, TextExpressionAssemble(&quot;Param/Expression/5270A063&quot;));
                return true;
            }
            
            //--------------------------------------------------------------------------------------------------
            void gt_ObjectiveBattlecruisersAcquiredUpdate_Init () {
                gt_ObjectiveBattlecruisersAcquiredUpdate = TriggerCreate(&quot;gt_ObjectiveBattlecruisersAcquiredUpdate_Func&quot;);
            }
            
            //--------------------------------------------------------------------------------------------------
            // Trigger: Objective - BattlecruisersAcquired - Failed
            //--------------------------------------------------------------------------------------------------
            bool gt_ObjectiveBattlecruisersAcquiredFailed_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
            
                // Actions
                if (!runActions) {
                    return true;
                }
            
                TriggerEnable(TriggerGetCurrent(), false);
                TriggerExecute(gt_ObjectiveBattlecruisersAcquiredCreate, true, false);
                ObjectiveSetState(gv_objectiveBattlecruisersAcquired, c_objectiveStateFailed);
                Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
                return true;
            }
            
            //--------------------------------------------------------------------------------------------------
            void gt_ObjectiveBattlecruisersAcquiredFailed_Init () {
                gt_ObjectiveBattlecruisersAcquiredFailed = TriggerCreate(&quot;gt_ObjectiveBattlecruisersAcquiredFailed_Func&quot;);
            }
            
            //--------------------------------------------------------------------------------------------------
            // Trigger: Objective - RescuePilot - Create
            //--------------------------------------------------------------------------------------------------
            bool gt_ObjectiveRescuePilotCreate_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
            
                // Actions
                if (!runActions) {
                    return true;
                }
            
                TriggerEnable(TriggerGetCurrent(), false);
                libCOMI_gf_CreateObjectiveCampaign(&quot;PlaceholderPrimary&quot;);
                libCOMI_gf_SetObjectiveRequiredCountCampaign(&quot;PlaceholderPrimary&quot;, gv_remainingPilot);
                gv_objectiveRescuePilot = ObjectiveLastCreated();
                ObjectiveSetPriority(ObjectiveLastCreated(), 10);
                TriggerExecute(gt_ObjectiveRescuePilotUpdate, true, false);
                Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
                return true;
            }
            
            //--------------------------------------------------------------------------------------------------
            void gt_ObjectiveRescuePilotCreate_Init () {
                gt_ObjectiveRescuePilotCreate = TriggerCreate(&quot;gt_ObjectiveRescuePilotCreate_Func&quot;);
            }
            
            //--------------------------------------------------------------------------------------------------
            // Trigger: Objective - RescuePilot - Complete
            //--------------------------------------------------------------------------------------------------
            bool gt_ObjectiveRescuePilotComplete_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
            
                // Actions
                if (!runActions) {
                    return true;
                }
            
                TriggerEnable(TriggerGetCurrent(), false);
                TriggerExecute(gt_ObjectiveRescuePilotCreate, true, false);
                ObjectiveSetState(gv_objectiveRescuePilot, c_objectiveStateCompleted);
                Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
                return true;
            }
            
            //--------------------------------------------------------------------------------------------------
            void gt_ObjectiveRescuePilotComplete_Init () {
                gt_ObjectiveRescuePilotComplete = TriggerCreate(&quot;gt_ObjectiveRescuePilotComplete_Func&quot;);
            }
            
            //--------------------------------------------------------------------------------------------------
            // Trigger: Objective - RescuePilot - Update
            //--------------------------------------------------------------------------------------------------
            bool gt_ObjectiveRescuePilotUpdate_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
            
                TriggerExecute(gt_ObjectiveRescuePilotCreate, true, false);
                libCOMI_gf_SetMissionObjectiveProgress(&quot;PlaceholderPrimary&quot;, gv_remainingPilot);
                TextExpressionSetToken(&quot;Param/Expression/089DE02D&quot;, &quot;StructureCount&quot;, IntToText(gv_remainingPilot));
                TextExpressionSetToken(&quot;Param/Expression/089DE02D&quot;, &quot;DeadPilotCount&quot;, IntToText(gv_deadPilot));
                ObjectiveSetName(gv_objectiveRescuePilot, TextExpressionAssemble(&quot;Param/Expression/089DE02D&quot;));
                return true;
            }
            
            //--------------------------------------------------------------------------------------------------
            void gt_ObjectiveRescuePilotUpdate_Init () {
                gt_ObjectiveRescuePilotUpdate = TriggerCreate(&quot;gt_ObjectiveRescuePilotUpdate_Func&quot;);
            }
            
            //--------------------------------------------------------------------------------------------------
            // Trigger: Objective - RescuePilot - Failed
            //--------------------------------------------------------------------------------------------------
            bool gt_ObjectiveRescuePilotFailed_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
            
                // Actions
                if (!runActions) {
                    return true;
                }
            
                TriggerEnable(TriggerGetCurrent(), false);
                TriggerExecute(gt_ObjectiveRescuePilotCreate, true, false);
                ObjectiveSetState(gv_objectiveRescuePilot, c_objectiveStateFailed);
                Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
                return true;
            }
            
            //--------------------------------------------------------------------------------------------------
            void gt_ObjectiveRescuePilotFailed_Init () {
                gt_ObjectiveRescuePilotFailed = TriggerCreate(&quot;gt_ObjectiveRescuePilotFailed_Func&quot;);
            }
            
            //--------------------------------------------------------------------------------------------------
            // Trigger: Objective - PreventTimerExpire - Create
            //--------------------------------------------------------------------------------------------------
            bool gt_ObjectivePreventTimerExpireCreate_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
            
                // Actions
                if (!runActions) {
                    return true;
                }
            
                TriggerEnable(TriggerGetCurrent(), false);
                libCOMI_gf_CreateObjectiveCampaign(&quot;PlaceholderPrimary&quot;);
                gv_objectivePreventTimerExpire = ObjectiveLastCreated();
                ObjectiveSetPriority(ObjectiveLastCreated(), 8);
                TriggerExecute(gt_ObjectivePreventTimerExpireUpdate, true, false);
                Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
                return true;
            }
            
            //--------------------------------------------------------------------------------------------------
            void gt_ObjectivePreventTimerExpireCreate_Init () {
                gt_ObjectivePreventTimerExpireCreate = TriggerCreate(&quot;gt_ObjectivePreventTimerExpireCreate_Func&quot;);
            }
            
            //--------------------------------------------------------------------------------------------------
            // Trigger: Objective - PreventTimerExpire - Complete
            //--------------------------------------------------------------------------------------------------
            bool gt_ObjectivePreventTimerExpireComplete_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
            
                // Actions
                if (!runActions) {
                    return true;
                }
            
                TriggerEnable(TriggerGetCurrent(), false);
                TriggerExecute(gt_ObjectivePreventTimerExpireCreate, true, false);
                ObjectiveSetState(gv_objectivePreventTimerExpire, c_objectiveStateCompleted);
                Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
                return true;
            }
            
            //--------------------------------------------------------------------------------------------------
            void gt_ObjectivePreventTimerExpireComplete_Init () {
                gt_ObjectivePreventTimerExpireComplete = TriggerCreate(&quot;gt_ObjectivePreventTimerExpireComplete_Func&quot;);
            }
            
            //--------------------------------------------------------------------------------------------------
            // Trigger: Objective - PreventTimerExpire - Update
            //--------------------------------------------------------------------------------------------------
            bool gt_ObjectivePreventTimerExpireUpdate_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
            
                TriggerExecute(gt_ObjectivePreventTimerExpireCreate, true, false);
                TextExpressionSetToken(&quot;Param/Expression/D14A8E07&quot;, &quot;timerRemaining&quot;, libCOMI_gf_FormatTimeCampaign(FixedToInt(TimerGetRemaining(gv_objectiveTimer))));
                ObjectiveSetName(gv_objectivePreventTimerExpire, TextExpressionAssemble(&quot;Param/Expression/D14A8E07&quot;));
                return true;
            }
            
            //--------------------------------------------------------------------------------------------------
            void gt_ObjectivePreventTimerExpireUpdate_Init () {
                gt_ObjectivePreventTimerExpireUpdate = TriggerCreate(&quot;gt_ObjectivePreventTimerExpireUpdate_Func&quot;);
            }
            
            //--------------------------------------------------------------------------------------------------
            // Trigger: Objective - PreventTimerExpire - Failed
            //--------------------------------------------------------------------------------------------------
            bool gt_ObjectivePreventTimerExpireFailed_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
            
                // Actions
                if (!runActions) {
                    return true;
                }
            
                TriggerEnable(TriggerGetCurrent(), false);
                TriggerExecute(gt_ObjectivePreventTimerExpireCreate, true, false);
                ObjectiveSetState(gv_objectivePreventTimerExpire, c_objectiveStateFailed);
                Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
                return true;
            }
            
            //--------------------------------------------------------------------------------------------------
            void gt_ObjectivePreventTimerExpireFailed_Init () {
                gt_ObjectivePreventTimerExpireFailed = TriggerCreate(&quot;gt_ObjectivePreventTimerExpireFailed_Func&quot;);
            }
            
            //--------------------------------------------------------------------------------------------------
            // Trigger: Objective - DestroyLoki - Create
            //--------------------------------------------------------------------------------------------------
            bool gt_ObjectiveDestroyLokiCreate_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
            
                // Actions
                if (!runActions) {
                    return true;
                }
            
                TriggerEnable(TriggerGetCurrent(), false);
                libCOMI_gf_CreateObjectiveCampaign(&quot;PlaceholderSecondary&quot;);
                libCOMI_gf_SetObjectiveRequiredCountCampaign(&quot;PlaceholderSecondary&quot;, gv_destroyedLoki);
                gv_objectiveDestroyLoki = ObjectiveLastCreated();
                TriggerExecute(gt_ObjectiveDestroyLokiUpdate, true, false);
                Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
                return true;
            }
            
            //--------------------------------------------------------------------------------------------------
            void gt_ObjectiveDestroyLokiCreate_Init () {
                gt_ObjectiveDestroyLokiCreate = TriggerCreate(&quot;gt_ObjectiveDestroyLokiCreate_Func&quot;);
            }
            
            //--------------------------------------------------------------------------------------------------
            // Trigger: Objective - DestroyLoki - Complete
            //--------------------------------------------------------------------------------------------------
            bool gt_ObjectiveDestroyLokiComplete_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
            
                // Actions
                if (!runActions) {
                    return true;
                }
            
                TriggerEnable(TriggerGetCurrent(), false);
                TriggerExecute(gt_ObjectiveDestroyLokiCreate, true, false);
                ObjectiveSetState(gv_objectiveDestroyLoki, c_objectiveStateCompleted);
                Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
                return true;
            }
            
            //--------------------------------------------------------------------------------------------------
            void gt_ObjectiveDestroyLokiComplete_Init () {
                gt_ObjectiveDestroyLokiComplete = TriggerCreate(&quot;gt_ObjectiveDestroyLokiComplete_Func&quot;);
            }
            
            //--------------------------------------------------------------------------------------------------
            // Trigger: Objective - DestroyLoki - Update
            //--------------------------------------------------------------------------------------------------
            bool gt_ObjectiveDestroyLokiUpdate_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
            
                TriggerExecute(gt_ObjectiveDestroyLokiCreate, true, false);
                libCOMI_gf_SetMissionObjectiveProgress(&quot;PlaceholderSecondary&quot;, gv_destroyedLoki);
                TextExpressionSetToken(&quot;Param/Expression/4599E08E&quot;, &quot;StructureCount&quot;, IntToText(gv_destroyedLoki));
                ObjectiveSetName(gv_objectiveDestroyLoki, TextExpressionAssemble(&quot;Param/Expression/4599E08E&quot;));
                return true;
            }
            
            //--------------------------------------------------------------------------------------------------
            void gt_ObjectiveDestroyLokiUpdate_Init () {
                gt_ObjectiveDestroyLokiUpdate = TriggerCreate(&quot;gt_ObjectiveDestroyLokiUpdate_Func&quot;);
            }
            
            //--------------------------------------------------------------------------------------------------
            // Trigger: Objective - DestroyLoki - Failed
            //--------------------------------------------------------------------------------------------------
            bool gt_ObjectiveDestroyLokiFailed_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
            
                // Actions
                if (!runActions) {
                    return true;
                }
            
                TriggerEnable(TriggerGetCurrent(), false);
                TriggerExecute(gt_ObjectiveDestroyLokiCreate, true, false);
                ObjectiveSetState(gv_objectiveDestroyLoki, c_objectiveStateFailed);
                Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
                return true;
            }
            
            //--------------------------------------------------------------------------------------------------
            void gt_ObjectiveDestroyLokiFailed_Init () {
                gt_ObjectiveDestroyLokiFailed = TriggerCreate(&quot;gt_ObjectiveDestroyLokiFailed_Func&quot;);
            }
            
            //--------------------------------------------------------------------------------------------------
            // Trigger Initialization
            //--------------------------------------------------------------------------------------------------
            void InitTriggers () {
                gt_Init01LoadData_Init();
                gt_Init02Players_Init();
                gt_Init03LoadingComplete_Init();
                gt_Init04Technology_Init();
                gt_Init05Units_Init();
                gt_Init06MusicSound_Init();
                gt_Init07Environment_Init();
                gt_Init08Difficulties_Init();
                gt_DebugCantFail_Init();
                gt_StartGameQ_Init();
                gt_ObjectiveTimerWindowFirstHybirdCaptured_Init();
                gt_SecondHybridCaptured_Init();
                gt_ThirdHybridCaptured_Init();
                gt_ForthHybridCaptured_Init();
                gt_HybirdAttacked_Init();
                gt_DefenseTimerWindow_Init();
                gt_DefenseAI_Init();
                gt_DefenseTimerExpired_Init();
                gt_PilotDead_Init();
                gt_PilotCheck_Init();
                gt_PilotCheckFinal_Init();
                gt_BC01_Init();
                gt_BCOperational01_Init();
                gt_BC02_Init();
                gt_BCOperational02_Init();
                gt_BC03_Init();
                gt_BCOperational03_Init();
                gt_BC04_Init();
                gt_BCOperational04_Init();
                gt_BC05_Init();
                gt_BCOperational05_Init();
                gt_BC06_Init();
                gt_BCOperational06_Init();
                gt_BC07_Init();
                gt_BCOperational07_Init();
                gt_BC08_Init();
                gt_BCOperational08_Init();
                gt_BC09_Init();
                gt_BCOperational09_Init();
                gt_BC10_Init();
                gt_BCOperational10_Init();
                gt_BC11_Init();
                gt_BCOperational11_Init();
                gt_BC12_Init();
                gt_BCOperational12_Init();
                gt_BC13_Init();
                gt_BCOperational13_Init();
                gt_BC14_Init();
                gt_BCOperational14_Init();
                gt_BC15_Init();
                gt_BCOperational15_Init();
                gt_BCOperational16_Init();
                gt_UpdatePilotCount_Init();
                gt_UpdateBattlecruisersCount_Init();
                gt_HybridNemesisDefeat_Init();
                gt_BattlecruiserDefeat_Init();
                gt_LokiLeftDisover_Init();
                gt_LokiRightDisover_Init();
                gt_LokiBehavior_Init();
                gt_LokiDestroyed_Init();
                gt_EnemyAttackingQ_Init();
                gt_LokiQ_Init();
                gt_LokiDisoveredQ_Init();
                gt_DefeatPrimaryObjectiveFailed_Init();
                gt_VictoryPrimaryObjectiveComplete_Init();
                gt_VictorySequence_Init();
                gt_VictoryFanfareQ_Init();
                gt_Victory_Init();
                gt_Defeat_Init();
                gt_StartAI_Init();
                gt_SetupAttackWaveSpawn_Init();
                gt_AIAttackWaves_Init();
                gt_AttackWave01_Init();
                gt_AttackWave02_Init();
                gt_AttackWave03_Init();
                gt_AttackWave04_Init();
                gt_AttackWave05_Init();
                gt_AttackWave06_Init();
                gt_AttackWave07_Init();
                gt_ObjectiveKillHybridNemesisCreate_Init();
                gt_ObjectiveKillHybridNemesisComplete_Init();
                gt_ObjectiveKillHybridNemesisUpdate_Init();
                gt_ObjectiveKillHybridNemesisFailed_Init();
                gt_ObjectiveBattlecruisersAcquiredCreate_Init();
                gt_ObjectiveBattlecruisersAcquiredComplete_Init();
                gt_ObjectiveBattlecruisersAcquiredUpdate_Init();
                gt_ObjectiveBattlecruisersAcquiredFailed_Init();
                gt_ObjectiveRescuePilotCreate_Init();
                gt_ObjectiveRescuePilotComplete_Init();
                gt_ObjectiveRescuePilotUpdate_Init();
                gt_ObjectiveRescuePilotFailed_Init();
                gt_ObjectivePreventTimerExpireCreate_Init();
                gt_ObjectivePreventTimerExpireComplete_Init();
                gt_ObjectivePreventTimerExpireUpdate_Init();
                gt_ObjectivePreventTimerExpireFailed_Init();
                gt_ObjectiveDestroyLokiCreate_Init();
                gt_ObjectiveDestroyLokiComplete_Init();
                gt_ObjectiveDestroyLokiUpdate_Init();
                gt_ObjectiveDestroyLokiFailed_Init();
            }
            
            //--------------------------------------------------------------------------------------------------
            // Map Initialization
            //--------------------------------------------------------------------------------------------------
            void run () {
                InitLibs();
                InitGlobals();
                InitTriggers();
            }
        </ScriptCode>
        <InitFunc>run</InitFunc>
    </Element>
</TriggerData>