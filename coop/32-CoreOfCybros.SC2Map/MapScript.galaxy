//==================================================================================================
// 
// Generated Map Script
// 
// Name:   [ARC] Cores of Cybros
// 
//==================================================================================================
include "TriggerLibs/natives"

//--------------------------------------------------------------------------------------------------
// Custom Script: Triggers
//--------------------------------------------------------------------------------------------------
 //==================================================================================================
// 
// Generated AI Script
// 
// AI Name: Hybrid Wave AI
// 
//==================================================================================================
include "TriggerLibs/natives"
include "TriggerLibs/AI"
include "TriggerLibs/Computer"
//--------------------------------------------------------------------------------------------------
// Globals
//--------------------------------------------------------------------------------------------------
point[17] aiF917F4D7_defGather;
string[17] aiF917F4D7_customData;
wave[17] aiF917F4D7_lastWave;
//--------------------------------------------------------------------------------------------------
// Attack Wave: 
//--------------------------------------------------------------------------------------------------
bool[17] aiF917F4D7_wave1_enabled;
wave[17] aiF917F4D7_wave1_lastWave;
trigger aiF917F4D7_wave1_trigger = null;
int aiF917F4D7_wave1_runPlayer;
playergroup aiF917F4D7_wave1_runTarget;
//--------------------------------------------------------------------------------------------------
void aiF917F4D7_wave1_init () {
    int init_i;
    for (init_i = 0; init_i <= 16; init_i += 1) {
        aiF917F4D7_wave1_enabled[init_i] = true;
        aiF917F4D7_wave1_lastWave[init_i] = null;
    }
    aiF917F4D7_wave1_trigger = TriggerCreate("aiF917F4D7_wave1_runFunc");
}
//--------------------------------------------------------------------------------------------------
void aiF917F4D7_wave1_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    aiF917F4D7_wave1_enabled[p] = val;
}
//--------------------------------------------------------------------------------------------------
bool aiF917F4D7_wave1_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return aiF917F4D7_wave1_enabled[p];
}
//--------------------------------------------------------------------------------------------------
wave aiF917F4D7_wave1_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiF917F4D7_wave1_lastWave[p];
}
//--------------------------------------------------------------------------------------------------
bool aiF917F4D7_wave1_runFunc (bool c, bool a) {
    int p = aiF917F4D7_wave1_runPlayer;
    playergroup target = aiF917F4D7_wave1_runTarget;
    int d;
    point gatherPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;
    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!aiF917F4D7_wave1_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }
    aiF917F4D7_customData[p] = "";
    ta = 0;
    tg = 0;
    ts = ta;
    TriggerExecute(TriggerFind("gt_AttackWave01_Func"), true, false);
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);
    gatherPoint = aiF917F4D7_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);
    AIAttackWaveClearWaypoints(p);
    AIAttackWaveAddUnits(2, 1, "HybridReaver");
    AIAttackWaveAddUnits(3, 1, "HybridReaver");
    AIAttackWaveAddUnits(4, 1, "HybridReaver");
    AIAttackWaveAddUnits(5, 1, "HybridReaver");
    AIAttackWaveAddUnits(6, 1, "HybridReaver");
    AIAttackWaveAddUnits(7, 1, "HybridReaver");
    AIAttackWaveSend(p, ts, false);
    aiF917F4D7_wave1_lastWave[p] = WaveLastCreated();
    aiF917F4D7_lastWave[p] = aiF917F4D7_wave1_lastWave[p];
    Wait(ts, c_timeAI);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void aiF917F4D7_wave1_run (int p, playergroup target, bool wait) {
    aiF917F4D7_wave1_runPlayer = p;
    aiF917F4D7_wave1_runTarget = PlayerGroupCopy(target);
    TriggerExecute(aiF917F4D7_wave1_trigger, false, wait);
}
//--------------------------------------------------------------------------------------------------
// Attack Wave: 
//--------------------------------------------------------------------------------------------------
bool[17] aiF917F4D7_wave2_enabled;
wave[17] aiF917F4D7_wave2_lastWave;
trigger aiF917F4D7_wave2_trigger = null;
int aiF917F4D7_wave2_runPlayer;
playergroup aiF917F4D7_wave2_runTarget;
//--------------------------------------------------------------------------------------------------
void aiF917F4D7_wave2_init () {
    int init_i;
    for (init_i = 0; init_i <= 16; init_i += 1) {
        aiF917F4D7_wave2_enabled[init_i] = true;
        aiF917F4D7_wave2_lastWave[init_i] = null;
    }
    aiF917F4D7_wave2_trigger = TriggerCreate("aiF917F4D7_wave2_runFunc");
}
//--------------------------------------------------------------------------------------------------
void aiF917F4D7_wave2_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    aiF917F4D7_wave2_enabled[p] = val;
}
//--------------------------------------------------------------------------------------------------
bool aiF917F4D7_wave2_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return aiF917F4D7_wave2_enabled[p];
}
//--------------------------------------------------------------------------------------------------
wave aiF917F4D7_wave2_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiF917F4D7_wave2_lastWave[p];
}
//--------------------------------------------------------------------------------------------------
bool aiF917F4D7_wave2_runFunc (bool c, bool a) {
    int p = aiF917F4D7_wave2_runPlayer;
    playergroup target = aiF917F4D7_wave2_runTarget;
    int d;
    point gatherPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;
    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!aiF917F4D7_wave2_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }
    aiF917F4D7_customData[p] = "";
    ta = 0;
    if (d == 1) { ta = 180; }
    if (d == 2) { ta = 180; }
    if (d == 3) { ta = 180; }
    if (d == 4) { ta = 180; }
    if (d == 5) { ta = 180; }
    if (d == 6) { ta = 180; }
    tg = 0;
    ts = ta;
    TriggerExecute(TriggerFind("gt_AttackWave02_Func"), true, false);
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);
    gatherPoint = aiF917F4D7_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);
    AIAttackWaveClearWaypoints(p);
    AIAttackWaveAddUnits(2, 1, "HybridReaver");
    AIAttackWaveAddUnits(3, 1, "HybridReaver");
    AIAttackWaveAddUnits(4, 1, "HybridReaver");
    AIAttackWaveAddUnits(5, 1, "HybridReaver");
    AIAttackWaveAddUnits(6, 1, "HybridReaver");
    AIAttackWaveAddUnits(7, 1, "HybridReaver");
    AIAttackWaveSend(p, ts, false);
    aiF917F4D7_wave2_lastWave[p] = WaveLastCreated();
    aiF917F4D7_lastWave[p] = aiF917F4D7_wave2_lastWave[p];
    Wait(ts, c_timeAI);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void aiF917F4D7_wave2_run (int p, playergroup target, bool wait) {
    aiF917F4D7_wave2_runPlayer = p;
    aiF917F4D7_wave2_runTarget = PlayerGroupCopy(target);
    TriggerExecute(aiF917F4D7_wave2_trigger, false, wait);
}
//--------------------------------------------------------------------------------------------------
// Attack Wave: 
//--------------------------------------------------------------------------------------------------
bool[17] aiF917F4D7_wave3_enabled;
wave[17] aiF917F4D7_wave3_lastWave;
trigger aiF917F4D7_wave3_trigger = null;
int aiF917F4D7_wave3_runPlayer;
playergroup aiF917F4D7_wave3_runTarget;
//--------------------------------------------------------------------------------------------------
void aiF917F4D7_wave3_init () {
    int init_i;
    for (init_i = 0; init_i <= 16; init_i += 1) {
        aiF917F4D7_wave3_enabled[init_i] = true;
        aiF917F4D7_wave3_lastWave[init_i] = null;
    }
    aiF917F4D7_wave3_trigger = TriggerCreate("aiF917F4D7_wave3_runFunc");
}
//--------------------------------------------------------------------------------------------------
void aiF917F4D7_wave3_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    aiF917F4D7_wave3_enabled[p] = val;
}
//--------------------------------------------------------------------------------------------------
bool aiF917F4D7_wave3_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return aiF917F4D7_wave3_enabled[p];
}
//--------------------------------------------------------------------------------------------------
wave aiF917F4D7_wave3_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiF917F4D7_wave3_lastWave[p];
}
//--------------------------------------------------------------------------------------------------
bool aiF917F4D7_wave3_runFunc (bool c, bool a) {
    int p = aiF917F4D7_wave3_runPlayer;
    playergroup target = aiF917F4D7_wave3_runTarget;
    int d;
    point gatherPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;
    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!aiF917F4D7_wave3_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }
    aiF917F4D7_customData[p] = "";
    ta = 0;
    if (d == 1) { ta = 180; }
    if (d == 2) { ta = 180; }
    if (d == 3) { ta = 180; }
    if (d == 4) { ta = 180; }
    if (d == 5) { ta = 180; }
    if (d == 6) { ta = 180; }
    tg = 0;
    ts = ta;
    TriggerExecute(TriggerFind("gt_AttackWave03_Func"), true, false);
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);
    gatherPoint = aiF917F4D7_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);
    AIAttackWaveClearWaypoints(p);
    Wait(ts, c_timeAI);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void aiF917F4D7_wave3_run (int p, playergroup target, bool wait) {
    aiF917F4D7_wave3_runPlayer = p;
    aiF917F4D7_wave3_runTarget = PlayerGroupCopy(target);
    TriggerExecute(aiF917F4D7_wave3_trigger, false, wait);
}
//--------------------------------------------------------------------------------------------------
// Attack Wave: 
//--------------------------------------------------------------------------------------------------
bool[17] aiF917F4D7_wave4_enabled;
wave[17] aiF917F4D7_wave4_lastWave;
trigger aiF917F4D7_wave4_trigger = null;
int aiF917F4D7_wave4_runPlayer;
playergroup aiF917F4D7_wave4_runTarget;
//--------------------------------------------------------------------------------------------------
void aiF917F4D7_wave4_init () {
    int init_i;
    for (init_i = 0; init_i <= 16; init_i += 1) {
        aiF917F4D7_wave4_enabled[init_i] = true;
        aiF917F4D7_wave4_lastWave[init_i] = null;
    }
    aiF917F4D7_wave4_trigger = TriggerCreate("aiF917F4D7_wave4_runFunc");
}
//--------------------------------------------------------------------------------------------------
void aiF917F4D7_wave4_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    aiF917F4D7_wave4_enabled[p] = val;
}
//--------------------------------------------------------------------------------------------------
bool aiF917F4D7_wave4_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return aiF917F4D7_wave4_enabled[p];
}
//--------------------------------------------------------------------------------------------------
wave aiF917F4D7_wave4_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiF917F4D7_wave4_lastWave[p];
}
//--------------------------------------------------------------------------------------------------
bool aiF917F4D7_wave4_runFunc (bool c, bool a) {
    int p = aiF917F4D7_wave4_runPlayer;
    playergroup target = aiF917F4D7_wave4_runTarget;
    int d;
    point gatherPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;
    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!aiF917F4D7_wave4_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }
    aiF917F4D7_customData[p] = "";
    ta = 0;
    if (d == 1) { ta = 180; }
    if (d == 2) { ta = 180; }
    if (d == 3) { ta = 180; }
    if (d == 4) { ta = 180; }
    if (d == 5) { ta = 180; }
    if (d == 6) { ta = 180; }
    tg = 0;
    ts = ta;
    TriggerExecute(TriggerFind("gt_AttackWave04_Func"), true, false);
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);
    gatherPoint = aiF917F4D7_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);
    AIAttackWaveClearWaypoints(p);
    Wait(ts, c_timeAI);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void aiF917F4D7_wave4_run (int p, playergroup target, bool wait) {
    aiF917F4D7_wave4_runPlayer = p;
    aiF917F4D7_wave4_runTarget = PlayerGroupCopy(target);
    TriggerExecute(aiF917F4D7_wave4_trigger, false, wait);
}
//--------------------------------------------------------------------------------------------------
// Attack Wave: 
//--------------------------------------------------------------------------------------------------
bool[17] aiF917F4D7_wave5_enabled;
wave[17] aiF917F4D7_wave5_lastWave;
trigger aiF917F4D7_wave5_trigger = null;
int aiF917F4D7_wave5_runPlayer;
playergroup aiF917F4D7_wave5_runTarget;
//--------------------------------------------------------------------------------------------------
void aiF917F4D7_wave5_init () {
    int init_i;
    for (init_i = 0; init_i <= 16; init_i += 1) {
        aiF917F4D7_wave5_enabled[init_i] = true;
        aiF917F4D7_wave5_lastWave[init_i] = null;
    }
    aiF917F4D7_wave5_trigger = TriggerCreate("aiF917F4D7_wave5_runFunc");
}
//--------------------------------------------------------------------------------------------------
void aiF917F4D7_wave5_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    aiF917F4D7_wave5_enabled[p] = val;
}
//--------------------------------------------------------------------------------------------------
bool aiF917F4D7_wave5_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return aiF917F4D7_wave5_enabled[p];
}
//--------------------------------------------------------------------------------------------------
wave aiF917F4D7_wave5_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiF917F4D7_wave5_lastWave[p];
}
//--------------------------------------------------------------------------------------------------
bool aiF917F4D7_wave5_runFunc (bool c, bool a) {
    int p = aiF917F4D7_wave5_runPlayer;
    playergroup target = aiF917F4D7_wave5_runTarget;
    int d;
    point gatherPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;
    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!aiF917F4D7_wave5_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }
    aiF917F4D7_customData[p] = "";
    ta = 0;
    if (d == 1) { ta = 180; }
    if (d == 2) { ta = 180; }
    if (d == 3) { ta = 180; }
    if (d == 4) { ta = 180; }
    if (d == 5) { ta = 180; }
    if (d == 6) { ta = 180; }
    tg = 0;
    ts = ta;
    TriggerExecute(TriggerFind("gt_AttackWave05_Func"), true, false);
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);
    gatherPoint = aiF917F4D7_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);
    AIAttackWaveClearWaypoints(p);
    Wait(ts, c_timeAI);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void aiF917F4D7_wave5_run (int p, playergroup target, bool wait) {
    aiF917F4D7_wave5_runPlayer = p;
    aiF917F4D7_wave5_runTarget = PlayerGroupCopy(target);
    TriggerExecute(aiF917F4D7_wave5_trigger, false, wait);
}
//--------------------------------------------------------------------------------------------------
// Attack Wave: 
//--------------------------------------------------------------------------------------------------
bool[17] aiF917F4D7_wave6_enabled;
wave[17] aiF917F4D7_wave6_lastWave;
trigger aiF917F4D7_wave6_trigger = null;
int aiF917F4D7_wave6_runPlayer;
playergroup aiF917F4D7_wave6_runTarget;
//--------------------------------------------------------------------------------------------------
void aiF917F4D7_wave6_init () {
    int init_i;
    for (init_i = 0; init_i <= 16; init_i += 1) {
        aiF917F4D7_wave6_enabled[init_i] = true;
        aiF917F4D7_wave6_lastWave[init_i] = null;
    }
    aiF917F4D7_wave6_trigger = TriggerCreate("aiF917F4D7_wave6_runFunc");
}
//--------------------------------------------------------------------------------------------------
void aiF917F4D7_wave6_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    aiF917F4D7_wave6_enabled[p] = val;
}
//--------------------------------------------------------------------------------------------------
bool aiF917F4D7_wave6_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return aiF917F4D7_wave6_enabled[p];
}
//--------------------------------------------------------------------------------------------------
wave aiF917F4D7_wave6_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiF917F4D7_wave6_lastWave[p];
}
//--------------------------------------------------------------------------------------------------
bool aiF917F4D7_wave6_runFunc (bool c, bool a) {
    int p = aiF917F4D7_wave6_runPlayer;
    playergroup target = aiF917F4D7_wave6_runTarget;
    int d;
    point gatherPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;
    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!aiF917F4D7_wave6_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }
    aiF917F4D7_customData[p] = "";
    ta = 0;
    if (d == 1) { ta = 180; }
    if (d == 2) { ta = 180; }
    if (d == 3) { ta = 180; }
    if (d == 4) { ta = 180; }
    if (d == 5) { ta = 180; }
    if (d == 6) { ta = 180; }
    tg = 0;
    ts = ta;
    TriggerExecute(TriggerFind("gt_AttackWave06_Func"), true, false);
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);
    gatherPoint = aiF917F4D7_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);
    AIAttackWaveClearWaypoints(p);
    Wait(ts, c_timeAI);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void aiF917F4D7_wave6_run (int p, playergroup target, bool wait) {
    aiF917F4D7_wave6_runPlayer = p;
    aiF917F4D7_wave6_runTarget = PlayerGroupCopy(target);
    TriggerExecute(aiF917F4D7_wave6_trigger, false, wait);
}
//--------------------------------------------------------------------------------------------------
// Attack Wave: 
//--------------------------------------------------------------------------------------------------
bool[17] aiF917F4D7_wave7_enabled;
wave[17] aiF917F4D7_wave7_lastWave;
trigger aiF917F4D7_wave7_trigger = null;
int aiF917F4D7_wave7_runPlayer;
playergroup aiF917F4D7_wave7_runTarget;
//--------------------------------------------------------------------------------------------------
void aiF917F4D7_wave7_init () {
    int init_i;
    for (init_i = 0; init_i <= 16; init_i += 1) {
        aiF917F4D7_wave7_enabled[init_i] = true;
        aiF917F4D7_wave7_lastWave[init_i] = null;
    }
    aiF917F4D7_wave7_trigger = TriggerCreate("aiF917F4D7_wave7_runFunc");
}
//--------------------------------------------------------------------------------------------------
void aiF917F4D7_wave7_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    aiF917F4D7_wave7_enabled[p] = val;
}
//--------------------------------------------------------------------------------------------------
bool aiF917F4D7_wave7_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return aiF917F4D7_wave7_enabled[p];
}
//--------------------------------------------------------------------------------------------------
wave aiF917F4D7_wave7_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiF917F4D7_wave7_lastWave[p];
}
//--------------------------------------------------------------------------------------------------
bool aiF917F4D7_wave7_runFunc (bool c, bool a) {
    int p = aiF917F4D7_wave7_runPlayer;
    playergroup target = aiF917F4D7_wave7_runTarget;
    int d;
    point gatherPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;
    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!aiF917F4D7_wave7_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }
    aiF917F4D7_customData[p] = "";
    ta = 0;
    if (d == 1) { ta = 180; }
    if (d == 2) { ta = 180; }
    if (d == 3) { ta = 180; }
    if (d == 4) { ta = 180; }
    if (d == 5) { ta = 180; }
    if (d == 6) { ta = 180; }
    tg = 0;
    ts = ta;
    TriggerExecute(TriggerFind("gt_AttackWave07_Func"), true, false);
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);
    gatherPoint = aiF917F4D7_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);
    AIAttackWaveClearWaypoints(p);
    AIAttackWaveAddUnits(2, 1, "HybridReaver");
    AIAttackWaveAddUnits(3, 1, "HybridReaver");
    AIAttackWaveAddUnits(4, 1, "HybridReaver");
    AIAttackWaveAddUnits(5, 1, "HybridReaver");
    AIAttackWaveAddUnits(6, 1, "HybridReaver");
    AIAttackWaveAddUnits(7, 1, "HybridReaver");
    AIAttackWaveSend(p, ts, false);
    aiF917F4D7_wave7_lastWave[p] = WaveLastCreated();
    aiF917F4D7_lastWave[p] = aiF917F4D7_wave7_lastWave[p];
    Wait(ts, c_timeAI);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void aiF917F4D7_wave7_run (int p, playergroup target, bool wait) {
    aiF917F4D7_wave7_runPlayer = p;
    aiF917F4D7_wave7_runTarget = PlayerGroupCopy(target);
    TriggerExecute(aiF917F4D7_wave7_trigger, false, wait);
}
//--------------------------------------------------------------------------------------------------
// Attack Wave Wrappers
//--------------------------------------------------------------------------------------------------
void aiF917F4D7_wave_enable (int w, int p, bool val) {
    if (w == 1) { aiF917F4D7_wave1_enable(p, val); }
    if (w == 2) { aiF917F4D7_wave2_enable(p, val); }
    if (w == 3) { aiF917F4D7_wave3_enable(p, val); }
    if (w == 4) { aiF917F4D7_wave4_enable(p, val); }
    if (w == 5) { aiF917F4D7_wave5_enable(p, val); }
    if (w == 6) { aiF917F4D7_wave6_enable(p, val); }
    if (w == 7) { aiF917F4D7_wave7_enable(p, val); }
}
//--------------------------------------------------------------------------------------------------
bool aiF917F4D7_wave_isEnabled (int w, int p) {
    if (w == 1) { return aiF917F4D7_wave1_isEnabled(p); }
    if (w == 2) { return aiF917F4D7_wave2_isEnabled(p); }
    if (w == 3) { return aiF917F4D7_wave3_isEnabled(p); }
    if (w == 4) { return aiF917F4D7_wave4_isEnabled(p); }
    if (w == 5) { return aiF917F4D7_wave5_isEnabled(p); }
    if (w == 6) { return aiF917F4D7_wave6_isEnabled(p); }
    if (w == 7) { return aiF917F4D7_wave7_isEnabled(p); }
    return false;
}
//--------------------------------------------------------------------------------------------------
unitgroup aiF917F4D7_wave_createdUnits (int w, int p) {
    return null;
}
//--------------------------------------------------------------------------------------------------
wave aiF917F4D7_wave_createdWave (int w, int p) {
    if (w == 1) { return aiF917F4D7_wave1_createdWave(p); }
    if (w == 2) { return aiF917F4D7_wave2_createdWave(p); }
    if (w == 3) { return aiF917F4D7_wave3_createdWave(p); }
    if (w == 4) { return aiF917F4D7_wave4_createdWave(p); }
    if (w == 5) { return aiF917F4D7_wave5_createdWave(p); }
    if (w == 6) { return aiF917F4D7_wave6_createdWave(p); }
    if (w == 7) { return aiF917F4D7_wave7_createdWave(p); }
    return null;
}
//--------------------------------------------------------------------------------------------------
void aiF917F4D7_wave_run (int w, int p, playergroup target, bool wait) {
    if (w == 1) { aiF917F4D7_wave1_run(p, target, wait); }
    if (w == 2) { aiF917F4D7_wave2_run(p, target, wait); }
    if (w == 3) { aiF917F4D7_wave3_run(p, target, wait); }
    if (w == 4) { aiF917F4D7_wave4_run(p, target, wait); }
    if (w == 5) { aiF917F4D7_wave5_run(p, target, wait); }
    if (w == 6) { aiF917F4D7_wave6_run(p, target, wait); }
    if (w == 7) { aiF917F4D7_wave7_run(p, target, wait); }
}
//--------------------------------------------------------------------------------------------------
// Attack Wave Sequence
//--------------------------------------------------------------------------------------------------
trigger aiF917F4D7_waves_trigger = null;
int aiF917F4D7_waves_runPlayer;
playergroup aiF917F4D7_waves_runTarget;
//--------------------------------------------------------------------------------------------------
void aiF917F4D7_waves_init () {
    aiF917F4D7_waves_trigger = TriggerCreate("aiF917F4D7_waves_runFunc");
}
//--------------------------------------------------------------------------------------------------
bool aiF917F4D7_waves_runFunc (bool c, bool a) {
    int p = aiF917F4D7_waves_runPlayer;
    playergroup target = aiF917F4D7_waves_runTarget;
    if (p < 0 || p >= 16) {
        return false;
    }
    aiF917F4D7_wave1_run(p, target, true);
    aiF917F4D7_wave2_run(p, target, true);
    aiF917F4D7_wave3_run(p, target, true);
    aiF917F4D7_wave4_run(p, target, true);
    aiF917F4D7_wave5_run(p, target, true);
    aiF917F4D7_wave6_run(p, target, true);
    aiF917F4D7_wave7_run(p, target, true);
    while (true) {
        aiF917F4D7_wave7_run(p, target, true);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void aiF917F4D7_waves_run (int p, playergroup target) {
    aiF917F4D7_waves_runPlayer = p;
    aiF917F4D7_waves_runTarget = PlayerGroupCopy(target);
    TriggerExecute(aiF917F4D7_waves_trigger, false, false);
}
//--------------------------------------------------------------------------------------------------
void aiF917F4D7_waves_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    aiF917F4D7_wave1_enable(p, val);
    aiF917F4D7_wave2_enable(p, val);
    aiF917F4D7_wave3_enable(p, val);
    aiF917F4D7_wave4_enable(p, val);
    aiF917F4D7_wave5_enable(p, val);
    aiF917F4D7_wave6_enable(p, val);
    aiF917F4D7_wave7_enable(p, val);
}
//--------------------------------------------------------------------------------------------------
void aiF917F4D7_waves_stop () {
    TriggerStop(aiF917F4D7_waves_trigger);
    TriggerStop(aiF917F4D7_wave1_trigger);
    TriggerStop(aiF917F4D7_wave2_trigger);
    TriggerStop(aiF917F4D7_wave3_trigger);
    TriggerStop(aiF917F4D7_wave4_trigger);
    TriggerStop(aiF917F4D7_wave5_trigger);
    TriggerStop(aiF917F4D7_wave6_trigger);
    TriggerStop(aiF917F4D7_wave7_trigger);
}
//--------------------------------------------------------------------------------------------------
// Configuration
//--------------------------------------------------------------------------------------------------
void aiF917F4D7_setDefGather (int p, point val) {
    if (p < 0 || p >= 16) {
        return;
    }
    aiF917F4D7_defGather[p] = val;
}
//--------------------------------------------------------------------------------------------------
string aiF917F4D7_getCustomData (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiF917F4D7_customData[p];
}
//--------------------------------------------------------------------------------------------------
wave aiF917F4D7_getLastWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiF917F4D7_lastWave[p];
}
//--------------------------------------------------------------------------------------------------
// Start
//--------------------------------------------------------------------------------------------------
bool aiF917F4D7_initialized = false;
//--------------------------------------------------------------------------------------------------
void aiF917F4D7_start (int p) {
    int init_i;
    if (p < 0 || p >= 16) {
        return;
    }
    if (!aiF917F4D7_initialized) {
        aiF917F4D7_wave1_init();
        aiF917F4D7_wave2_init();
        aiF917F4D7_wave3_init();
        aiF917F4D7_wave4_init();
        aiF917F4D7_wave5_init();
        aiF917F4D7_wave6_init();
        aiF917F4D7_wave7_init();
        aiF917F4D7_waves_init();
        for (init_i = 0; init_i <= 16; init_i += 1) {
            aiF917F4D7_defGather[init_i] = PointFromId(0);
        }
        aiF917F4D7_initialized = true;
    }
    AICampaignStart(p);
}
//==================================================================================================
// 
// Generated Map Script
// 
// Name:   Cores of Cybros
// 
//==================================================================================================
include "TriggerLibs/NativeLib"
include "libARRA"
include "LibCOMI"
//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void InitLibs () {
    libNtve_InitLib();
    libARRA_InitLib();
    libCOMI_InitLib();
}
//--------------------------------------------------------------------------------------------------
// Constants
//--------------------------------------------------------------------------------------------------
const int gv_pLAYER_00_NEUTRAL = 0;
int gv_pLAYER_01_USER = 1;
int gv_pLAYER_02_USER = 2;
const int gv_pLAYER_03_ENEMY = 6;
const int gv_pLAYER_04_ENEMY = 7;
//--------------------------------------------------------------------------------------------------
// Global Variables
//--------------------------------------------------------------------------------------------------
playergroup gv_enemyGroup;
unitgroup gv_centralcoregroup;
unitfilter gv_vICTORY_REQUIREMENT;
int[5] gv_outerCorePings;
int gv_outerCoresCaptured;
int gv_centralCorePing;
int gv_bonusObjectivePing;
point gv_victoryCompletePan;
int gv_waveCount;
point gv_attackWaveA_Wave05Path;
region[3][11] gv_attackSpawn;
int gv_objectiveCaptureOuterCores;
int gv_objectiveRestabilizeCentralCore;
int gv_bonusObjectiveCorruptedColossus;
void InitGlobals () {
    int init_i;
    gv_enemyGroup = PlayerGroupEmpty();
    gv_centralcoregroup = UnitGroupEmpty();
    gv_vICTORY_REQUIREMENT = UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)));
    for (init_i = 0; init_i <= 4; init_i += 1) {
        gv_outerCorePings[init_i] = c_invalidPingId;
    }
    gv_centralCorePing = c_invalidPingId;
    gv_bonusObjectivePing = c_invalidPingId;
    gv_objectiveCaptureOuterCores = c_invalidObjectiveId;
    gv_objectiveRestabilizeCentralCore = c_invalidObjectiveId;
    gv_bonusObjectiveCorruptedColossus = c_invalidObjectiveId;
}
//--------------------------------------------------------------------------------------------------
// Global Function Declarations
//--------------------------------------------------------------------------------------------------
void gf_RunMissionEvent (trigger lp_missionEventTrigger, fixed lp_missionEventTime);
void gf_playTransmissionClolarionStart (text lp_text, fixed lp_time);
point gf_OuterCoresAttackWave ();
point gf_CentralCoreAttackWave ();
point gf_AttackWaveSpawn ();
void gf_RunAttackWaveatMissionTime (trigger lp_attackWave, fixed lp_time);
//--------------------------------------------------------------------------------------------------
// Trigger Variables
//--------------------------------------------------------------------------------------------------
trigger gt_Init01LoadData;
trigger gt_Init02Players;
trigger gt_Init03LoadingComplete;
trigger gt_Init07Environment;
trigger gt_Init08Difficulties;
trigger gt_RevealAll;
trigger gt_CompleteFirstObjective;
trigger gt_AutoDefeat;
trigger gt_showClolarionPortrait;
trigger gt_StartGameQ;
trigger gt_StartAmonCorruptors;
trigger gt_RevealObjectiveAreas;
trigger gt_RevealCorruptors;
trigger gt_OuterCoreObjectiveInformation;
trigger gt_OuterCoreUpdateCount;
trigger gt_OuterCoreChangedtoPurifier;
trigger gt_OuterCoreChangedtoAmon;
trigger gt_OuterCoreCorruptionNotifcation;
trigger gt_OuterCoreCorruptionNotifcationRemove;
trigger gt_CentralCoreStabilityUpdate;
trigger gt_CentralCoreRestabilizationStarted;
trigger gt_CentralCoreVictory;
trigger gt_CentralCoreRandomizeCorruptorPosition1;
trigger gt_CentralCoreRandomizeCorruptorPosition2;
trigger gt_InitializeBonusObjective;
trigger gt_BonusObjectiveComplete;
trigger gt_EnemyAttackingQ;
trigger gt_DefeatPrimaryObjectiveFailed;
trigger gt_FirstObjectiveComplete;
trigger gt_VictoryPrimaryObjectiveComplete;
trigger gt_VictorySequence;
trigger gt_VictoryFanfareQ;
trigger gt_Victory;
trigger gt_Defeat;
trigger gt_StartAI;
trigger gt_AIOuterCoreRepeatWaves;
trigger gt_AIOuterCoreAttackWaveAddUnits;
trigger gt_OuterCoreAttackWave;
trigger gt_AICentralCoreRepeatWaves;
trigger gt_AICentralCoreAttackWaveAddUnits;
trigger gt_CentralCoreAttackWave;
trigger gt_SetupAttackWaveSpawn;
trigger gt_AIAttackWaves;
trigger gt_AttackWave01;
trigger gt_AttackWave02;
trigger gt_AttackWave03;
trigger gt_AttackWave04;
trigger gt_AttackWave05;
trigger gt_AttackWave06;
trigger gt_AttackWave07;
trigger gt_ObjectiveCaptureOuterCoresCreate;
trigger gt_ObjectiveCaptureOuterCoresComplete;
trigger gt_ObjectiveCaptureOuterCoresUpdate;
trigger gt_ObjectiveCaptureOuterCoresFailed;
trigger gt_ObjectiveRestabilizeCentralCoreCreate;
trigger gt_ObjectiveRestabilizeCentralCoreComplete;
trigger gt_ObjectiveRestabilizeCentralCoreUpdate;
trigger gt_ObjectiveRestabilizeCentralCoreFailed;
trigger gt_BonusObjectiveCorruptedColossusCreate;
trigger gt_BonusObjectiveCorruptedColossusComplete;
trigger gt_BonusObjectiveCorruptedColossusUpdate;
//--------------------------------------------------------------------------------------------------
// Custom AI Functions
//--------------------------------------------------------------------------------------------------
string[17] cai_playerAI;
//--------------------------------------------------------------------------------------------------
void InitCustomAI () {
    int init_i;
    for (init_i = 0; init_i <= 16; init_i += 1) {
        cai_playerAI[init_i] = null;
    }
}
//--------------------------------------------------------------------------------------------------
void cai_start (string ai, int p) {
    if (p < 0 || p >= 16) {
        return;
    }
    cai_playerAI[p] = ai;
    if (cai_playerAI[p] == "aiF917F4D7") { aiF917F4D7_start(p); }
}
//--------------------------------------------------------------------------------------------------
void cai_setDefGather (int p, point val) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "aiF917F4D7") { aiF917F4D7_setDefGather(p, val); }
}
//--------------------------------------------------------------------------------------------------
string cai_getCustomData (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "aiF917F4D7") { return aiF917F4D7_getCustomData(p); }
    return null;
}
//--------------------------------------------------------------------------------------------------
wave cai_getLastWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "aiF917F4D7") { return aiF917F4D7_getLastWave(p); }
    return null;
}
//--------------------------------------------------------------------------------------------------
void cai_waves_run (int p, playergroup target) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "aiF917F4D7") { aiF917F4D7_waves_run(p, target); }
}
//--------------------------------------------------------------------------------------------------
void cai_waves_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "aiF917F4D7") { aiF917F4D7_waves_enable(p, val); }
}
//--------------------------------------------------------------------------------------------------
void cai_waves_stop (string ai) {
    if (ai == "aiF917F4D7") { aiF917F4D7_waves_stop(); }
}
//--------------------------------------------------------------------------------------------------
void cai_wave_run (int w, int p, playergroup target, bool wait) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "aiF917F4D7") { aiF917F4D7_wave_run(w, p, target, wait); }
}
//--------------------------------------------------------------------------------------------------
void cai_wave_enable (int w, int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "aiF917F4D7") { aiF917F4D7_wave_enable(w, p, val); }
}
//--------------------------------------------------------------------------------------------------
bool cai_wave_isEnabled (int w, int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    if (cai_playerAI[p] == "aiF917F4D7") { return aiF917F4D7_wave_isEnabled(w, p); }
    return false;
}
//--------------------------------------------------------------------------------------------------
unitgroup cai_wave_createdUnits (int w, int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "aiF917F4D7") { return aiF917F4D7_wave_createdUnits(w, p); }
    return null;
}
//--------------------------------------------------------------------------------------------------
wave cai_wave_createdWave (int w, int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "aiF917F4D7") { return aiF917F4D7_wave_createdWave(w, p); }
    return null;
}
//--------------------------------------------------------------------------------------------------
void cai_startall () {
    AICampaignStart(3);
    AICampaignStart(4);
}
//--------------------------------------------------------------------------------------------------
void cai_runall () {
    playergroup target = PlayerGroupEmpty();
}
//--------------------------------------------------------------------------------------------------
// Global Functions
//--------------------------------------------------------------------------------------------------
trigger auto_gf_RunMissionEvent_Trigger = null;
trigger auto_gf_RunMissionEvent_lp_missionEventTrigger;
fixed auto_gf_RunMissionEvent_lp_missionEventTime;
void gf_RunMissionEvent (trigger lp_missionEventTrigger, fixed lp_missionEventTime) {
    auto_gf_RunMissionEvent_lp_missionEventTrigger = lp_missionEventTrigger;
    auto_gf_RunMissionEvent_lp_missionEventTime = lp_missionEventTime;
    if (auto_gf_RunMissionEvent_Trigger == null) {
        auto_gf_RunMissionEvent_Trigger = TriggerCreate("auto_gf_RunMissionEvent_TriggerFunc");
    }
    TriggerExecute(auto_gf_RunMissionEvent_Trigger, false, false);
}
bool auto_gf_RunMissionEvent_TriggerFunc (bool testConds, bool runActions) {
    trigger lp_missionEventTrigger = auto_gf_RunMissionEvent_lp_missionEventTrigger;
    fixed lp_missionEventTime = auto_gf_RunMissionEvent_lp_missionEventTime;
    // Implementation
    while (!((GameGetMissionTime() >= lp_missionEventTime))) {
        Wait(0.5, c_timeAI);
    }
    if ((libCOMI_gf_GameIsOver() == false)) {
        TriggerExecute(lp_missionEventTrigger, true, false);
    }
    return true;
}
void gf_playTransmissionClolarionStart (text lp_text, fixed lp_time) {
    // Variable Declarations
    int lv_var;
    timer lv_timer;
    // Variable Initialization
    lv_timer = TimerCreate();
    // Implementation
    TriggerExecute(gt_showClolarionPortrait, false, false);
    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSource(), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", null, StringExternal("Param/Value/A12FD393"), lp_text, 90.0, c_transmissionDurationAdd, false, c_maxPlayers, false);
    Wait(lp_time, c_timeReal);
    PortraitSetVisible(libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), PlayerGroupAll(), false, false);
    TransmissionClearAll();
    TriggerStop(gt_showClolarionPortrait);
    UIClearMessages(PlayerGroupAll(), c_messageAreaAll);
}
point gf_OuterCoresAttackWave () {
    int auto35AA5429_ae;
    int auto35AA5429_ai;
    // Variable Declarations
    int lv_mapSide;
    int lv_spawnLocationIter;
    // Variable Initialization
    // Implementation
    lv_mapSide = RandomInt(gv_pLAYER_01_USER, gv_pLAYER_02_USER);
    auto35AA5429_ae = 10;
    auto35AA5429_ai = 1;
    lv_spawnLocationIter = 1;
    for ( ; ( (auto35AA5429_ai >= 0 && lv_spawnLocationIter <= auto35AA5429_ae) || (auto35AA5429_ai <= 0 && lv_spawnLocationIter >= auto35AA5429_ae) ) ; lv_spawnLocationIter += auto35AA5429_ai ) {
        if ((UnitGroupCount(UnitGroupAlliance(gv_pLAYER_01_USER, c_unitAllianceEnemy, gv_attackSpawn[lv_mapSide][lv_spawnLocationIter], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > RandomInt(2, 5))) {
            return PointFromId(367);
        }
    }
    return RegionGetCenter(RegionFromId(9));
}
point gf_CentralCoreAttackWave () {
    int auto5C443BEC_ae;
    int auto5C443BEC_ai;
    // Variable Declarations
    int lv_mapSide;
    int lv_spawnLocationIter;
    // Variable Initialization
    // Implementation
    lv_mapSide = RandomInt(gv_pLAYER_01_USER, gv_pLAYER_02_USER);
    auto5C443BEC_ae = 10;
    auto5C443BEC_ai = 1;
    lv_spawnLocationIter = 1;
    for ( ; ( (auto5C443BEC_ai >= 0 && lv_spawnLocationIter <= auto5C443BEC_ae) || (auto5C443BEC_ai <= 0 && lv_spawnLocationIter >= auto5C443BEC_ae) ) ; lv_spawnLocationIter += auto5C443BEC_ai ) {
        if ((UnitGroupCount(UnitGroupAlliance(gv_pLAYER_01_USER, c_unitAllianceEnemy, gv_attackSpawn[lv_mapSide][lv_spawnLocationIter], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > RandomInt(2, 5))) {
            return PointFromId(367);
        }
    }
    return RegionGetCenter(RegionFromId(9));
}
point gf_AttackWaveSpawn () {
    int auto9A2E02E3_ae;
    int auto9A2E02E3_ai;
    // Variable Declarations
    int lv_mapSide;
    int lv_spawnLocationIter;
    // Variable Initialization
    // Implementation
    lv_mapSide = RandomInt(gv_pLAYER_01_USER, gv_pLAYER_02_USER);
    auto9A2E02E3_ae = 10;
    auto9A2E02E3_ai = 1;
    lv_spawnLocationIter = 1;
    for ( ; ( (auto9A2E02E3_ai >= 0 && lv_spawnLocationIter <= auto9A2E02E3_ae) || (auto9A2E02E3_ai <= 0 && lv_spawnLocationIter >= auto9A2E02E3_ae) ) ; lv_spawnLocationIter += auto9A2E02E3_ai ) {
        if ((UnitGroupCount(UnitGroupAlliance(gv_pLAYER_01_USER, c_unitAllianceEnemy, gv_attackSpawn[lv_mapSide][lv_spawnLocationIter], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > RandomInt(2, 5))) {
            return RegionGetCenter(gv_attackSpawn[lv_mapSide][lv_spawnLocationIter]);
        }
    }
    return RegionGetCenter(RegionFromId(9));
}
trigger auto_gf_RunAttackWaveatMissionTime_Trigger = null;
trigger auto_gf_RunAttackWaveatMissionTime_lp_attackWave;
fixed auto_gf_RunAttackWaveatMissionTime_lp_time;
void gf_RunAttackWaveatMissionTime (trigger lp_attackWave, fixed lp_time) {
    auto_gf_RunAttackWaveatMissionTime_lp_attackWave = lp_attackWave;
    auto_gf_RunAttackWaveatMissionTime_lp_time = lp_time;
    if (auto_gf_RunAttackWaveatMissionTime_Trigger == null) {
        auto_gf_RunAttackWaveatMissionTime_Trigger = TriggerCreate("auto_gf_RunAttackWaveatMissionTime_TriggerFunc");
    }
    TriggerExecute(auto_gf_RunAttackWaveatMissionTime_Trigger, false, false);
}
bool auto_gf_RunAttackWaveatMissionTime_TriggerFunc (bool testConds, bool runActions) {
    trigger lp_attackWave = auto_gf_RunAttackWaveatMissionTime_lp_attackWave;
    fixed lp_time = auto_gf_RunAttackWaveatMissionTime_lp_time;
    // Implementation
    while (!((lp_time <= GameGetMissionTime()))) {
        Wait(0.3, c_timeAI);
    }
    if ((libCOMI_gf_GameIsOver() == false)) {
        TriggerExecute(lp_attackWave, true, false);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
// Trigger: Init 01 Load Data
//--------------------------------------------------------------------------------------------------
bool gt_Init01LoadData_Func (bool testConds, bool runActions) {
    libCOMI_gf_LoadCoopMission("COOP_Placeholder", gt_Init03LoadingComplete);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_Init01LoadData_Init () {
    gt_Init01LoadData = TriggerCreate("gt_Init01LoadData_Func");
    TriggerAddEventMapInit(gt_Init01LoadData);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Init 02 Players
//--------------------------------------------------------------------------------------------------
bool gt_Init02Players_Func (bool testConds, bool runActions) {
    playergroup auto0B258D10_g;
    int auto0B258D10_p;
    string auto834F8A5E_val;
    // Variable Declarations
    int lv_indexPlayer;

    gv_pLAYER_01_USER = libCOMI_gf_GetRolePlayer(1);
    gv_pLAYER_02_USER = libCOMI_gf_GetRolePlayer(2);



    PathAddNoFlyZone(PointFromId(1110891384), 13.0, 13.5);
    UnitSetState(UnitFromId(1655051572), c_unitStateFidget, false);
    libNtve_gf_MakeUnitInvulnerable(UnitFromId(1655051572), true);
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_03_ENEMY, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "Nexus")) {
            UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("ProtossBuild", 30)), c_orderQueueReplace);
            UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("ProtossBuild", 30)), c_orderQueueReplace);
        }
        else {
            if ((UnitTypeTestAttribute(UnitGetType(UnitGroupLoopCurrent()), c_unitAttributeStructure) == false)) {
                UnitSetState(UnitGroupLoopCurrent(), c_unitStateFidget, false);
            }
        }
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_04_ENEMY, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "Nexus")) {
            UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("ProtossBuild", 30)), c_orderQueueReplace);
            UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("ProtossBuild", 30)), c_orderQueueReplace);
        }
        else {
            if ((UnitTypeTestAttribute(UnitGetType(UnitGroupLoopCurrent()), c_unitAttributeStructure) == false)) {
                UnitSetState(UnitGroupLoopCurrent(), c_unitStateFidget, false);
            }
        }
    }
    UnitGroupLoopEnd();
    UnitBehaviorAddPlayer(UnitFromId(1839808230), "RevealObjectiveUnit", gv_pLAYER_01_USER, 1);
    UnitBehaviorAddPlayer(UnitFromId(1839808230), "RevealObjectiveUnit", gv_pLAYER_02_USER, 1);
    UnitBehaviorAddPlayer(UnitFromId(491760992), "RevealObjectiveUnit", gv_pLAYER_01_USER, 1);
    UnitBehaviorAddPlayer(UnitFromId(491760992), "RevealObjectiveUnit", gv_pLAYER_02_USER, 1);
    UnitBehaviorAddPlayer(UnitFromId(1554286808), "RevealObjectiveUnit", gv_pLAYER_01_USER, 1);
    UnitBehaviorAddPlayer(UnitFromId(1554286808), "RevealObjectiveUnit", gv_pLAYER_02_USER, 1);
    UnitBehaviorAddPlayer(UnitFromId(1468071331), "RevealObjectiveUnit", gv_pLAYER_01_USER, 1);
    UnitBehaviorAddPlayer(UnitFromId(1468071331), "RevealObjectiveUnit", gv_pLAYER_02_USER, 1);
    UnitIssueOrder(UnitFromId(1527827446), OrderTargetingUnit(AbilityCommand("attack", 0), UnitFromId(1554286808)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(2107844974), OrderTargetingUnit(AbilityCommand("attack", 0), UnitFromId(1554286808)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(1650541936), OrderTargetingUnit(AbilityCommand("attack", 0), UnitFromId(1554286808)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(165925616), OrderTargetingUnit(AbilityCommand("attack", 0), UnitFromId(1554286808)), c_orderQueueReplace);
    UnitGroupAdd(gv_centralcoregroup, UnitFromId(165925616));
    UnitGroupAdd(gv_centralcoregroup, UnitFromId(1650541936));
    UnitGroupAdd(gv_centralcoregroup, UnitFromId(2107844974));
    UnitGroupAdd(gv_centralcoregroup, UnitFromId(1527827446));
    UnitGroupAdd(gv_centralcoregroup, UnitFromId(308694551));
    UnitGroupAdd(gv_centralcoregroup, UnitFromId(1473369719));
    UnitGroupAdd(gv_centralcoregroup, UnitFromId(2143747436));
    UnitGroupAdd(gv_centralcoregroup, UnitFromId(353358315));
    UnitGroupAdd(gv_centralcoregroup, UnitFromId(585241055));
    UnitGroupAdd(gv_centralcoregroup, UnitFromId(1373964785));
    UnitGroupLoopBegin(gv_centralcoregroup);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) { 
        libNtve_gf_MakeUnitInvulnerable(UnitGroupLoopCurrent(), true);
        UnitBehaviorAddPlayer(UnitGroupLoopCurrent(), "RevealObjectiveUnit", gv_pLAYER_01_USER, 1);
        UnitBehaviorAddPlayer(UnitGroupLoopCurrent(), "RevealObjectiveUnit", gv_pLAYER_02_USER, 1);
    }
    UnitGroupLoopEnd();


    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_Init02Players_Init () {
    gt_Init02Players = TriggerCreate("gt_Init02Players_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Init 03 Loading Complete
//--------------------------------------------------------------------------------------------------
bool gt_Init03LoadingComplete_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerExecute(gt_Init02Players, true, false);
    TriggerExecute(gt_Init07Environment, true, false);
    TriggerExecute(gt_Init08Difficulties, true, false);
    TriggerExecute(gt_StartAI, true, false);
    TriggerExecute(gt_StartGameQ, true, false);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_Init03LoadingComplete_Init () {
    gt_Init03LoadingComplete = TriggerCreate("gt_Init03LoadingComplete_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Init 07 Environment
//--------------------------------------------------------------------------------------------------
bool gt_Init07Environment_Func (bool testConds, bool runActions) {
    // Variable Declarations
    revealer[16] lv_temprevealer;
    // Variable Initialization
    // Actions
    if (!runActions) {
        return true;
    }

    VisExploreArea(gv_pLAYER_01_USER, RegionFromId(49), true, false);
    VisExploreArea(gv_pLAYER_02_USER, RegionFromId(49), true, false);
    VisRevealerCreate(gv_pLAYER_01_USER, RegionFromId(21));
    lv_temprevealer[0] = VisRevealerLastCreated();
    VisRevealerEnable(lv_temprevealer[0], true);
    VisRevealerCreate(gv_pLAYER_02_USER, RegionFromId(21));
    lv_temprevealer[1] = VisRevealerLastCreated();
    VisRevealerEnable(lv_temprevealer[1], true);
    VisRevealerCreate(gv_pLAYER_01_USER, RegionFromId(22));
    lv_temprevealer[2] = VisRevealerLastCreated();
    VisRevealerEnable(lv_temprevealer[2], true);
    VisRevealerCreate(gv_pLAYER_02_USER, RegionFromId(22));
    lv_temprevealer[3] = VisRevealerLastCreated();
    VisRevealerEnable(lv_temprevealer[3], true);
    VisRevealerCreate(gv_pLAYER_01_USER, RegionFromId(23));
    lv_temprevealer[4] = VisRevealerLastCreated();
    VisRevealerEnable(lv_temprevealer[4], true);
    VisRevealerCreate(gv_pLAYER_02_USER, RegionFromId(23));
    lv_temprevealer[5] = VisRevealerLastCreated();
    VisRevealerEnable(lv_temprevealer[5], true);
    Wait(2.0, c_timeGame);
    VisRevealerEnable(lv_temprevealer[0], false);
    VisRevealerEnable(lv_temprevealer[1], false);
    VisRevealerEnable(lv_temprevealer[2], false);
    VisRevealerEnable(lv_temprevealer[3], false);
    VisRevealerEnable(lv_temprevealer[4], false);
    VisRevealerEnable(lv_temprevealer[5], false);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_Init07Environment_Init () {
    gt_Init07Environment = TriggerCreate("gt_Init07Environment_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Init 08 Difficulties
//--------------------------------------------------------------------------------------------------
bool gt_Init08Difficulties_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_bonusObjectiveLife;
    fixed lv_mainObjectiveLife;
    // Variable Initialization
    // Actions
    if (!runActions) {
        return true;
    } 
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_Init08Difficulties_Init () {
    gt_Init08Difficulties = TriggerCreate("gt_Init08Difficulties_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Reveal All
//--------------------------------------------------------------------------------------------------
bool gt_RevealAll_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    VisRevealerCreate(1, RegionEntireMap());
    VisRevealerEnable(VisRevealerLastCreated(), true);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_RevealAll_Init () {
    gt_RevealAll = TriggerCreate("gt_RevealAll_Func");
    TriggerEnable(gt_RevealAll, false);
    TriggerAddEventChatMessage(gt_RevealAll, c_playerAny, "!reveal", true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Complete First Objective
//--------------------------------------------------------------------------------------------------
bool gt_CompleteFirstObjective_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    UnitGroupLoopBegin(UnitGroup("AmonCorruptor", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitKill(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("PurifierCore", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropLifePercent, 100.0);
    }
    UnitGroupLoopEnd();
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_CompleteFirstObjective_Init () {
    gt_CompleteFirstObjective = TriggerCreate("gt_CompleteFirstObjective_Func");
    TriggerEnable(gt_CompleteFirstObjective, false);
    TriggerAddEventChatMessage(gt_CompleteFirstObjective, c_playerAny, "!first", true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Auto Defeat
//--------------------------------------------------------------------------------------------------
bool gt_AutoDefeat_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    UnitSetPropertyFixed(UnitFromId(1554286808), c_unitPropLife, 30.0);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_AutoDefeat_Init () {
    gt_AutoDefeat = TriggerCreate("gt_AutoDefeat_Func");
    TriggerEnable(gt_AutoDefeat, false);
    TriggerAddEventChatMessage(gt_AutoDefeat, c_playerAny, "!defeat", true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: showClolarionPortrait
//--------------------------------------------------------------------------------------------------
bool gt_showClolarionPortrait_Func (bool testConds, bool runActions) {
    int auto0DF1AE52_n;
    int auto0DF1AE52_i;
    // Variable Declarations
    region lv_enemyBase;
    // Variable Initialization
    // Actions
    if (!runActions) {
        return true;
    }
    auto0DF1AE52_n = (c_animFlagPlayForever);
    for (auto0DF1AE52_i = 1; auto0DF1AE52_i <= auto0DF1AE52_n; auto0DF1AE52_i += 1) {
        libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel("ZealotPurifierPortrait"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), SoundLink("Clolarion_Start_Alt", -1), 0.0, c_transmissionDurationAdd, true);
        Wait(4.0, c_timeReal);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_showClolarionPortrait_Init () {
    gt_showClolarionPortrait = TriggerCreate("gt_showClolarionPortrait_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Start Game Q
//--------------------------------------------------------------------------------------------------
bool gt_StartGameQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    region lv_enemyBase;
    // Variable Initialization
    // Actions
    if (!runActions) {
        return true;
    }
    Wait(10.0, c_timeGame);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnitType("ZealotPurifier", false), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("CoC_MissionIntro", -1), StringExternal("Param/Value/DF12DC47"), StringExternal("Param/Value/3C52BD2D"), 1.0, c_transmissionDurationAdd, false, c_maxPlayers, false);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    Wait(20.0, c_timeGame);
    TriggerQueueEnter();
    TriggerExecute(gt_OuterCoreObjectiveInformation, true, false);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnitType("ZealotPurifier", false), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("CoC_FirstObjectiveIntro", -1), StringExternal("Param/Value/6BACFF17"), StringExternal("Param/Value/F7EED057"), 1.0, c_transmissionDurationAdd, false, c_maxPlayers, false);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    Wait(3.0, c_timeGame);
    TriggerExecute(gt_ObjectiveCaptureOuterCoresCreate, true, true);
    Wait(3.0, c_timeGame);
    TriggerExecute(gt_CentralCoreStabilityUpdate, true, false);
    TriggerQueueExit();
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_StartGameQ_Init () {
    gt_StartGameQ = TriggerCreate("gt_StartGameQ_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Start Amon Corruptors
//--------------------------------------------------------------------------------------------------
bool gt_StartAmonCorruptors_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    UnitIssueOrder(UnitFromId(1163389707), OrderTargetingUnit(AbilityCommand("attack", 0), UnitFromId(119381035)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(2014898284), OrderTargetingUnit(AbilityCommand("attack", 0), UnitFromId(119381035)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(571472748), OrderTargetingUnit(AbilityCommand("attack", 0), UnitFromId(119381035)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(388060350), OrderTargetingUnit(AbilityCommand("attack", 0), UnitFromId(119381035)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(1927064880), OrderTargetingUnit(AbilityCommand("attack", 0), UnitFromId(379177728)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(1281899130), OrderTargetingUnit(AbilityCommand("attack", 0), UnitFromId(379177728)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(280575344), OrderTargetingUnit(AbilityCommand("attack", 0), UnitFromId(379177728)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(1748236865), OrderTargetingUnit(AbilityCommand("attack", 0), UnitFromId(379177728)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(727926992), OrderTargetingUnit(AbilityCommand("attack", 0), UnitFromId(2025447594)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(1604160078), OrderTargetingUnit(AbilityCommand("attack", 0), UnitFromId(2025447594)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(1865345147), OrderTargetingUnit(AbilityCommand("attack", 0), UnitFromId(2025447594)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(1753471829), OrderTargetingUnit(AbilityCommand("attack", 0), UnitFromId(2025447594)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(306403098), OrderTargetingUnit(AbilityCommand("attack", 0), UnitFromId(1503412912)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(1044004191), OrderTargetingUnit(AbilityCommand("attack", 0), UnitFromId(1503412912)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(782559772), OrderTargetingUnit(AbilityCommand("attack", 0), UnitFromId(1503412912)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(709215746), OrderTargetingUnit(AbilityCommand("attack", 0), UnitFromId(1503412912)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(1021294995), OrderTargetingUnit(AbilityCommand("attack", 0), UnitFromId(1759889906)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(713331674), OrderTargetingUnit(AbilityCommand("attack", 0), UnitFromId(1759889906)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(1527627404), OrderTargetingUnit(AbilityCommand("attack", 0), UnitFromId(1759889906)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(1526959897), OrderTargetingUnit(AbilityCommand("attack", 0), UnitFromId(1759889906)), c_orderQueueReplace);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_StartAmonCorruptors_Init () {
    gt_StartAmonCorruptors = TriggerCreate("gt_StartAmonCorruptors_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Reveal Objective Areas
//--------------------------------------------------------------------------------------------------
bool gt_RevealObjectiveAreas_Func (bool testConds, bool runActions) {
    // Variable Declarations
    revealer[16] lv_temprevealer;
    // Variable Initialization
    // Actions
    if (!runActions) {
        return true;
    }
    VisRevealerCreate(gv_pLAYER_01_USER, RegionFromId(11));
    lv_temprevealer[6] = VisRevealerLastCreated();
    VisRevealerEnable(lv_temprevealer[6], true);
    VisRevealerCreate(gv_pLAYER_02_USER, RegionFromId(11));
    lv_temprevealer[7] = VisRevealerLastCreated();
    VisRevealerEnable(lv_temprevealer[7], true);
    VisRevealerCreate(gv_pLAYER_01_USER, RegionFromId(12));
    lv_temprevealer[8] = VisRevealerLastCreated();
    VisRevealerEnable(lv_temprevealer[8], true);
    VisRevealerCreate(gv_pLAYER_02_USER, RegionFromId(12));
    lv_temprevealer[9] = VisRevealerLastCreated();
    VisRevealerEnable(lv_temprevealer[9], true);
    VisRevealerCreate(gv_pLAYER_01_USER, RegionFromId(15));
    lv_temprevealer[10] = VisRevealerLastCreated();
    VisRevealerEnable(lv_temprevealer[10], true);
    VisRevealerCreate(gv_pLAYER_02_USER, RegionFromId(15));
    lv_temprevealer[11] = VisRevealerLastCreated();
    VisRevealerEnable(lv_temprevealer[11], true);
    VisRevealerCreate(gv_pLAYER_01_USER, RegionFromId(16));
    lv_temprevealer[12] = VisRevealerLastCreated();
    VisRevealerEnable(lv_temprevealer[12], true);
    VisRevealerCreate(gv_pLAYER_02_USER, RegionFromId(16));
    lv_temprevealer[13] = VisRevealerLastCreated();
    VisRevealerEnable(lv_temprevealer[13], true);
    VisRevealerCreate(gv_pLAYER_01_USER, RegionFromId(17));
    lv_temprevealer[14] = VisRevealerLastCreated();
    VisRevealerEnable(lv_temprevealer[14], true);
    VisRevealerCreate(gv_pLAYER_02_USER, RegionFromId(17));
    lv_temprevealer[15] = VisRevealerLastCreated();
    VisRevealerEnable(lv_temprevealer[15], true);
    Wait(0.5, c_timeGame);
    VisRevealerEnable(lv_temprevealer[6], false);
    VisRevealerEnable(lv_temprevealer[7], false);
    VisRevealerEnable(lv_temprevealer[8], false);
    VisRevealerEnable(lv_temprevealer[9], false);
    VisRevealerEnable(lv_temprevealer[10], false);
    VisRevealerEnable(lv_temprevealer[11], false);
    VisRevealerEnable(lv_temprevealer[12], false);
    VisRevealerEnable(lv_temprevealer[13], false);
    VisRevealerEnable(lv_temprevealer[14], false);
    VisRevealerEnable(lv_temprevealer[15], false);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_RevealObjectiveAreas_Init () {
    gt_RevealObjectiveAreas = TriggerCreate("gt_RevealObjectiveAreas_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Reveal Corruptors
//--------------------------------------------------------------------------------------------------
bool gt_RevealCorruptors_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior2(EventUnitDamageSourceUnit(), "RevealObjectiveUnit") == false))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    UnitBehaviorAddPlayer(EventUnitDamageSourceUnit(), "RevealObjectiveUnit", gv_pLAYER_01_USER, 1);
    UnitBehaviorAddPlayer(EventUnitDamageSourceUnit(), "RevealObjectiveUnit", gv_pLAYER_02_USER, 1);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_RevealCorruptors_Init () {
    gt_RevealCorruptors = TriggerCreate("gt_RevealCorruptors_Func");
    TriggerAddEventUnitDamaged(gt_RevealCorruptors, null, c_unitDamageTypeAny, c_unitDamageEither, "CorruptionBeamDamage");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Outer Core - Objective Information
//--------------------------------------------------------------------------------------------------
bool gt_OuterCoreObjectiveInformation_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_Primary, UnitGetPosition(UnitFromId(1759889906)), StringExternal("Param/Value/D20D3AE5"));
    gv_outerCorePings[0] = PingLastCreated();
    PingSetUnit(PingLastCreated(), UnitFromId(1759889906));
    libARRA_gf_StorePingForUnit(UnitFromId(1759889906), 1, PingLastCreated());
    PingSetScale(PingLastCreated(), 1.0);
    libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_Primary, UnitGetPosition(UnitFromId(119381035)), StringExternal("Param/Value/977C045C"));
    gv_outerCorePings[1] = PingLastCreated();
    PingSetUnit(PingLastCreated(), UnitFromId(119381035));
    libARRA_gf_StorePingForUnit(UnitFromId(119381035), 1, PingLastCreated());
    PingSetScale(PingLastCreated(), 1.0);
    libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_Primary, UnitGetPosition(UnitFromId(1503412912)), StringExternal("Param/Value/4CEA32AC"));
    gv_outerCorePings[2] = PingLastCreated();
    PingSetUnit(PingLastCreated(), UnitFromId(1503412912));
    libARRA_gf_StorePingForUnit(UnitFromId(1503412912), 1, PingLastCreated());
    PingSetScale(PingLastCreated(), 1.0);
    libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_Primary, UnitGetPosition(UnitFromId(2025447594)), StringExternal("Param/Value/FC0B37CB"));
    gv_outerCorePings[3] = PingLastCreated();
    PingSetUnit(PingLastCreated(), UnitFromId(2025447594));
    libARRA_gf_StorePingForUnit(UnitFromId(2025447594), 1, PingLastCreated());
    PingSetScale(PingLastCreated(), 1.0);
    libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_Primary, UnitGetPosition(UnitFromId(379177728)), StringExternal("Param/Value/0CB883B6"));
    gv_outerCorePings[4] = PingLastCreated();
    PingSetUnit(PingLastCreated(), UnitFromId(379177728));
    libARRA_gf_StorePingForUnit(UnitFromId(379177728), 1, PingLastCreated());
    PingSetScale(PingLastCreated(), 1.0);
    UnitGroupLoopBegin(UnitGroup("PurifierCore", gv_pLAYER_03_ENEMY, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitBehaviorAddPlayer(UnitGroupLoopCurrent(), "RevealObjectiveUnit", gv_pLAYER_01_USER, 1);
        UnitBehaviorAddPlayer(UnitGroupLoopCurrent(), "RevealObjectiveUnit", gv_pLAYER_02_USER, 1);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("AmonCorruptor", gv_pLAYER_03_ENEMY, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitBehaviorAddPlayer(UnitGroupLoopCurrent(), "RevealObjectiveUnit", gv_pLAYER_01_USER, 1);
        UnitBehaviorAddPlayer(UnitGroupLoopCurrent(), "RevealObjectiveUnit", gv_pLAYER_02_USER, 1);
    }
    UnitGroupLoopEnd();
    TriggerExecute(gt_StartAmonCorruptors, true, false);
    TriggerExecute(gt_RevealObjectiveAreas, true, false);
    libNtve_gf_DisplayBossBar(1, "core.dds", StringExternal("Param/Value/FDA17787"), 3000, PlayerGroupAll());
    libNtve_gf_SetBossBarBoss(1, UnitFromId(1554286808), true);
    libNtve_gf_MoveBossBar(1, c_anchorTopRight, 0, 50);
    libNtve_gf_RefreshBossBar(1);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_OuterCoreObjectiveInformation_Init () {
    gt_OuterCoreObjectiveInformation = TriggerCreate("gt_OuterCoreObjectiveInformation_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Outer Core - Update Count
//--------------------------------------------------------------------------------------------------
bool gt_OuterCoreUpdateCount_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_coresCapturedTotal;
    // Variable Initialization
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    PlayerGroupLoopBegin(PlayerGroupSingle(gv_pLAYER_00_NEUTRAL));
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        lv_coresCapturedTotal += UnitGroupCount(UnitGroup("PurifierCore", PlayerGroupLoopCurrent(), null, gv_vICTORY_REQUIREMENT, 0), c_unitCountAll);
    }
    PlayerGroupLoopEnd();
    gv_outerCoresCaptured = lv_coresCapturedTotal;
    if ((lv_coresCapturedTotal == 5)) {
        TriggerExecute(gt_FirstObjectiveComplete, true, false);
        TriggerEnable(gt_OuterCoreChangedtoPurifier, false);
        TriggerEnable(gt_OuterCoreChangedtoAmon, false);
        TriggerEnable(gt_OuterCoreCorruptionNotifcation, false);
        TriggerEnable(gt_AIOuterCoreAttackWaveAddUnits, false);
        TriggerEnable(gt_AIOuterCoreRepeatWaves, false);
        TriggerEnable(TriggerGetCurrent(), false);
        UnitGroupLoopBegin(UnitGroup("PurifierCore", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            libCOMI_gf_DestroyPingCoop(libARRA_gf_PingStoredForUnit(UnitGroupLoopCurrent(), 1));
            libCOMI_gf_DestroyPingCoop(libARRA_gf_PingStoredForUnit(UnitGroupLoopCurrent(), 2));
        }
        UnitGroupLoopEnd();
        TransmissionClearAll();
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
        TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnitType("ZealotPurifier", false), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("CoC_FirstObjectiveComplete", -1), StringExternal("Param/Value/71944A1B"), StringExternal("Param/Value/C0A1EFDE"), 1.0, c_transmissionDurationAdd, false, c_maxPlayers, false);
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
        libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_Primary, UnitGetPosition(UnitFromId(1554286808)), StringExternal("Param/Value/C5171315"));
        PingSetModel(PingLastCreated(), "PingWarning");
        PingSetColor(PingLastCreated(), Color(95.29, 53.33, 15.29));
        gv_centralCorePing = PingLastCreated();
        PingSetUnit(PingLastCreated(), UnitFromId(1554286808));
        libARRA_gf_StorePingForUnit(UnitFromId(1554286808), 1, PingLastCreated());
        PingSetScale(PingLastCreated(), 1.25);
        Wait(3.0, c_timeGame);
        UnitBehaviorAddPlayer(UnitFromId(1554286808), "RevealVisionObjectiveUnit", gv_pLAYER_01_USER, 1);
        UnitBehaviorAddPlayer(UnitFromId(1554286808), "RevealVisionObjectiveUnit", gv_pLAYER_02_USER, 1);
        UnitGroupLoopBegin(gv_centralcoregroup);
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            libNtve_gf_MakeUnitInvulnerable(UnitGroupLoopCurrent(), false);
        }
        UnitGroupLoopEnd();
    }
    TriggerExecute(gt_ObjectiveCaptureOuterCoresUpdate, true, false);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_OuterCoreUpdateCount_Init () {
    gt_OuterCoreUpdateCount = TriggerCreate("gt_OuterCoreUpdateCount_Func");
    TriggerAddEventTimePeriodic(gt_OuterCoreUpdateCount, 0.5, c_timeGame);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Outer Core - Changed to Purifier
//--------------------------------------------------------------------------------------------------
bool gt_OuterCoreChangedtoPurifier_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_coresCapturedTotal;
    // Variable Initialization
    // Actions
    if (!runActions) {
        return true;
    }
    if ((TriggerIsEnabled(gt_AIOuterCoreRepeatWaves) == false) && (ObjectiveGetState(gv_objectiveCaptureOuterCores) != c_objectiveStateCompleted)) {
        TriggerEnable(gt_AIOuterCoreRepeatWaves, true);
        TriggerExecute(gt_AIOuterCoreRepeatWaves, true, false);
    }
    libCOMI_gf_ShowHidePingCoop(libARRA_gf_PingStoredForUnit(EventUnit(), 1), false);
    PlayerGroupLoopBegin(PlayerGroupSingle(gv_pLAYER_00_NEUTRAL));
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        lv_coresCapturedTotal += UnitGroupCount(UnitGroup("PurifierCore", PlayerGroupLoopCurrent(), null, gv_vICTORY_REQUIREMENT, 0), c_unitCountAll);
    }
    PlayerGroupLoopEnd();
    UnitSetOwner(EventUnit(), gv_pLAYER_00_NEUTRAL, false);
    UnitBehaviorAddPlayer(EventUnit(), "RevealVisionObjectiveUnit", gv_pLAYER_01_USER, 1);
    UnitBehaviorAddPlayer(EventUnit(), "RevealVisionObjectiveUnit", gv_pLAYER_02_USER, 1);
    if ((lv_coresCapturedTotal < 4)) {
        TransmissionClearAll();
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
        TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnitType("ZealotPurifier", false), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("CoC_FirstObjectiveCapture", -1), StringExternal("Param/Value/8937B5E7"), StringExternal("Param/Value/8F524127"), 1.0, c_transmissionDurationAdd, false, c_maxPlayers, false);
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_OuterCoreChangedtoPurifier_Init () {
    gt_OuterCoreChangedtoPurifier = TriggerCreate("gt_OuterCoreChangedtoPurifier_Func");
    TriggerAddEventUnitBehaviorChange(gt_OuterCoreChangedtoPurifier, null, "PurifiersControl", c_unitBehaviorChangeActivate);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Outer Core - Changed to Amon
//--------------------------------------------------------------------------------------------------
bool gt_OuterCoreChangedtoAmon_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    UnitSetOwner(EventUnit(), gv_pLAYER_03_ENEMY, false);
    UnitBehaviorRemovePlayer(EventUnit(), "RevealVisionObjectiveUnit", gv_pLAYER_01_USER, 1);
    UnitBehaviorRemovePlayer(EventUnit(), "RevealVisionObjectiveUnit", gv_pLAYER_02_USER, 1);
    libCOMI_gf_DestroyPingCoop(libARRA_gf_PingStoredForUnit(EventUnit(), 2));
    libCOMI_gf_ShowHidePingCoop(libARRA_gf_PingStoredForUnit(EventUnit(), 1), true);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_OuterCoreChangedtoAmon_Init () {
    gt_OuterCoreChangedtoAmon = TriggerCreate("gt_OuterCoreChangedtoAmon_Func");
    TriggerAddEventUnitBehaviorChange(gt_OuterCoreChangedtoAmon, null, "AmonsControl", c_unitBehaviorChangeActivate);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Outer Core - Corruption Notifcation
//--------------------------------------------------------------------------------------------------
bool gt_OuterCoreCorruptionNotifcation_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == 0))) {
            return false;
        }
        if (!((UnitGetType(EventUnit()) == "PurifierCore"))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TransmissionClearAll();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnitType("ZealotPurifier", false), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("CoC_FirstObjectiveCorruption", -1), StringExternal("Param/Value/338D29A3"), StringExternal("Param/Value/3DFDAA5D"), 1.0, c_transmissionDurationAdd, false, c_maxPlayers, false);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_POI, UnitGetPosition(EventUnit()), StringExternal("Param/Value/F8684763"));
    PingSetModel(PingLastCreated(), "PingWarning");
    PingSetColor(PingLastCreated(), Color(83.53, 41.57, 4.31));
    PingSetUnit(PingLastCreated(), EventUnit());
    PingSetScale(PingLastCreated(), 0.75);
    libARRA_gf_StorePingForUnit(EventUnit(), 2, PingLastCreated());
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_OuterCoreCorruptionNotifcation_Init () {
    gt_OuterCoreCorruptionNotifcation = TriggerCreate("gt_OuterCoreCorruptionNotifcation_Func");
    TriggerAddEventUnitBehaviorChange(gt_OuterCoreCorruptionNotifcation, null, "DummyBehaviorPreventRestabilize", c_unitBehaviorChangeActivate);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Outer Core - Corruption Notifcation Remove
//--------------------------------------------------------------------------------------------------
bool gt_OuterCoreCorruptionNotifcationRemove_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == 0))) {
            return false;
        }
        if (!((UnitGetType(EventUnit()) == "PurifierCore"))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    PingDestroy(libARRA_gf_PingStoredForUnit(EventUnit(), 2));
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_OuterCoreCorruptionNotifcationRemove_Init () {
    gt_OuterCoreCorruptionNotifcationRemove = TriggerCreate("gt_OuterCoreCorruptionNotifcationRemove_Func");
    TriggerAddEventUnitBehaviorChange(gt_OuterCoreCorruptionNotifcationRemove, null, "DummyBehaviorPreventRestabilize", c_unitBehaviorChangeDeactivate);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Central Core - Stability Update
//--------------------------------------------------------------------------------------------------
bool gt_CentralCoreStabilityUpdate_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    Wait(5.0, c_timeGame);
    UnitBehaviorRemove(UnitFromId(1554286808), "TemporaryDamagePrevention", 1);
    TriggerExecute(gt_ObjectiveRestabilizeCentralCoreUpdate, true, false);
    Wait(5.0, c_timeGame);
    while ((libCOMI_gf_GameIsOver() == false)) {
        TriggerExecute(gt_ObjectiveRestabilizeCentralCoreUpdate, true, false);
        Wait(0.5, c_timeGame);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_CentralCoreStabilityUpdate_Init () {
    gt_CentralCoreStabilityUpdate = TriggerCreate("gt_CentralCoreStabilityUpdate_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Central Core - Restabilization Started
//--------------------------------------------------------------------------------------------------
bool gt_CentralCoreRestabilizationStarted_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(gt_CentralCoreRandomizeCorruptorPosition1, true);
    TriggerEnable(gt_CentralCoreRandomizeCorruptorPosition2, true);
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_AICentralCoreRepeatWaves, true, false);
    TransmissionClearAll();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnitType("ZealotPurifier", false), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("CoC_SecondObjectiveIntro", -1), StringExternal("Param/Value/72D40B01"), StringExternal("Param/Value/252838D5"), 1.0, c_transmissionDurationAdd, false, c_maxPlayers, false);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_CentralCoreRestabilizationStarted_Init () {
    gt_CentralCoreRestabilizationStarted = TriggerCreate("gt_CentralCoreRestabilizationStarted_Func");
    TriggerAddEventUnitBehaviorChange(gt_CentralCoreRestabilizationStarted, null, "CentralCoreLivingConduit", c_unitBehaviorChangeActivate);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Central Core - Victory
//--------------------------------------------------------------------------------------------------
bool gt_CentralCoreVictory_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerExecute(gt_VictoryPrimaryObjectiveComplete, true, false);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_CentralCoreVictory_Init () {
    gt_CentralCoreVictory = TriggerCreate("gt_CentralCoreVictory_Func");
    TriggerAddEventUnitBehaviorChange(gt_CentralCoreVictory, null, "CentralCoreVictory", c_unitBehaviorChangeActivate);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Central Core - Randomize Corruptor Position [1]
//--------------------------------------------------------------------------------------------------
bool gt_CentralCoreRandomizeCorruptorPosition1_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "AmonCorruptor"))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(24))), c_orderQueueReplace);
    UnitIssueOrder(EventUnit(), OrderTargetingUnit(AbilityCommand("attack", 0), UnitFromId(1554286808)), c_orderQueueAddToEnd);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_CentralCoreRandomizeCorruptorPosition1_Init () {
    gt_CentralCoreRandomizeCorruptorPosition1 = TriggerCreate("gt_CentralCoreRandomizeCorruptorPosition1_Func");
    TriggerEnable(gt_CentralCoreRandomizeCorruptorPosition1, false);
    TriggerAddEventUnitRegion(gt_CentralCoreRandomizeCorruptorPosition1, null, RegionFromId(24), true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Central Core - Randomize Corruptor Position [2]
//--------------------------------------------------------------------------------------------------
bool gt_CentralCoreRandomizeCorruptorPosition2_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "AmonCorruptor"))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(25))), c_orderQueueReplace);
    UnitIssueOrder(EventUnit(), OrderTargetingUnit(AbilityCommand("attack", 0), UnitFromId(1554286808)), c_orderQueueAddToEnd);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_CentralCoreRandomizeCorruptorPosition2_Init () {
    gt_CentralCoreRandomizeCorruptorPosition2 = TriggerCreate("gt_CentralCoreRandomizeCorruptorPosition2_Func");
    TriggerEnable(gt_CentralCoreRandomizeCorruptorPosition2, false);
    TriggerAddEventUnitRegion(gt_CentralCoreRandomizeCorruptorPosition2, null, RegionFromId(25), true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Initialize Bonus Objective
//--------------------------------------------------------------------------------------------------
bool gt_InitializeBonusObjective_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerExecute(gt_BonusObjectiveCorruptedColossusCreate, true, false);
    TriggerEnable(TriggerGetCurrent(), false);
    TransmissionClearAll();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnitType("ZealotPurifier", false), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("CoC_BonusObjectiveIntro", -1), StringExternal("Param/Value/7AEC2553"), StringExternal("Param/Value/4DAC79F2"), 1.0, c_transmissionDurationAdd, false, c_maxPlayers, false);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    UnitSetOwner(UnitFromId(1655051572), gv_pLAYER_03_ENEMY, true);
    UnitIssueOrder(UnitFromId(1655051572), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1557047907)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(1655051572), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1908578925)), c_orderQueueAddToEnd);
    libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_Secondary, UnitGetPosition(UnitFromId(1655051572)), StringExternal("Param/Value/CC59B00B"));
    gv_bonusObjectivePing = PingLastCreated();
    PingSetUnit(PingLastCreated(), UnitFromId(1655051572));
    UnitBehaviorAdd(UnitFromId(1655051572), "AmonsCorruption", UnitFromId(1655051572), 1);
    libARRA_gf_StorePingForUnit(UnitFromId(1655051572), 1, PingLastCreated());
    libNtve_gf_MakeUnitInvulnerable(UnitFromId(1655051572), false);
    PingSetScale(PingLastCreated(), 0.65);
    Wait(2.0, c_timeGame);
    UnitIssueOrder(UnitFromId(1655051572), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(243165562)), c_orderQueueAddToEnd);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_InitializeBonusObjective_Init () {
    gt_InitializeBonusObjective = TriggerCreate("gt_InitializeBonusObjective_Func");
    TriggerAddEventTimeElapsed(gt_InitializeBonusObjective, 615.0, c_timeGame);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Bonus Objective Complete
//--------------------------------------------------------------------------------------------------
bool gt_BonusObjectiveComplete_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    PingDestroy(gv_bonusObjectivePing);
    TriggerExecute(gt_BonusObjectiveCorruptedColossusComplete, true, false);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_BonusObjectiveComplete_Init () {
    gt_BonusObjectiveComplete = TriggerCreate("gt_BonusObjectiveComplete_Func");
    TriggerAddEventUnitDied(gt_BonusObjectiveComplete, UnitRefFromUnit(UnitFromId(1655051572)));
}
//--------------------------------------------------------------------------------------------------
// Trigger: Enemy Attacking Q
//--------------------------------------------------------------------------------------------------
bool gt_EnemyAttackingQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("AttackWave", true, RandomInt(gv_pLAYER_01_USER, gv_pLAYER_02_USER));
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    Wait(20.0, c_timeAI);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_EnemyAttackingQ_Init () {
    gt_EnemyAttackingQ = TriggerCreate("gt_EnemyAttackingQ_Func");
    TriggerAddEventPlayerAIWave(gt_EnemyAttackingQ, gv_pLAYER_03_ENEMY);
    TriggerAddEventPlayerAIWave(gt_EnemyAttackingQ, gv_pLAYER_04_ENEMY);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Primary Objective Failed
//--------------------------------------------------------------------------------------------------
bool gt_DefeatPrimaryObjectiveFailed_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    ActorCreate(ActorScopeFromUnit(UnitFromId(1554286808)), "AmonVictoryVisual", null, null, null);
    UnitSetPropertyFixed(EventUnit(), c_unitPropLife, 1.0);
    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_GameOver(libCOMI_ge_CampaignMissionGameResultType_Defeat);
    TransmissionClearAll();
    TriggerQueuePause(true);
    TriggerQueueClear(c_triggerQueueRemove);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    UnitClearSelection(gv_pLAYER_01_USER);
    UnitClearSelection(gv_pLAYER_02_USER);
    UISetSelectionTypeEnabled(PlayerGroupAll(), c_localSelectionTypeUnknown, false);
    CameraPan(gv_pLAYER_01_USER, RegionGetCenter(RegionEntireMap()), 1.0, -1, 10.0, false);
    CameraPan(gv_pLAYER_02_USER, RegionGetCenter(RegionEntireMap()), 1.0, -1, 10.0, false);
    CameraLockInput(gv_pLAYER_01_USER, true);
    CameraLockInput(gv_pLAYER_02_USER, true);
    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnitType("ZealotPurifier", false), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("CoC_MissionFailure", -1), StringExternal("Param/Value/B125159E"), StringExternal("Param/Value/3687580D"), 15.0, c_transmissionDurationAdd, false, c_maxPlayers, false);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerExecute(gt_ObjectiveRestabilizeCentralCoreFailed, true, false);
    libCOMI_gf_DisplayCampaignMessage(libCOMI_gf_HumanPlayers(), libCOMI_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/79462FB3"), libCOMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
    Wait(15.0, c_timeGame);
    libCOMI_gf_CinematicModeCampaign(true, 1.5, true);
    UISetCursorVisible(PlayerGroupAll(), true);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_DefeatPrimaryObjectiveFailed_Init () {
    gt_DefeatPrimaryObjectiveFailed = TriggerCreate("gt_DefeatPrimaryObjectiveFailed_Func");
    TriggerAddEventUnitBehaviorChange(gt_DefeatPrimaryObjectiveFailed, null, "CentralCoreofCybrosTriggerLoss", c_unitBehaviorChangeActivate);
}
//--------------------------------------------------------------------------------------------------
// Trigger: First Objective Complete
//--------------------------------------------------------------------------------------------------
bool gt_FirstObjectiveComplete_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerExecute(gt_ObjectiveCaptureOuterCoresComplete, true, false);
    UnitIssueOrder(UnitFromId(491760992), Order(AbilityCommand("Purifier_DoorNWLowered", 0)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(1839808230), Order(AbilityCommand("Purifier_DoorNWLowered", 0)), c_orderQueueReplace);
    UnitKill(UnitFromId(1468071331));
    PathRemoveNoFlyZonesInRegion(RegionFromId(10));
    SoundPlayForPlayer(SoundLink("Objective_Shield_Death", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_FirstObjectiveComplete_Init () {
    gt_FirstObjectiveComplete = TriggerCreate("gt_FirstObjectiveComplete_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Victory Primary Objective Complete
//--------------------------------------------------------------------------------------------------
bool gt_VictoryPrimaryObjectiveComplete_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_VictorySequence, true, false);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_VictoryPrimaryObjectiveComplete_Init () {
    gt_VictoryPrimaryObjectiveComplete = TriggerCreate("gt_VictoryPrimaryObjectiveComplete_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Victory Sequence
//--------------------------------------------------------------------------------------------------
bool gt_VictorySequence_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_GameOver(libCOMI_ge_CampaignMissionGameResultType_Victory);
    Wait(2.0, c_timeReal);
    TriggerExecute(gt_ObjectiveCaptureOuterCoresComplete, true, false);
    libCOMI_gf_RunMissionVictorySequence(gt_VictoryFanfareQ);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_VictorySequence_Init () {
    gt_VictorySequence = TriggerCreate("gt_VictorySequence_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Victory Fanfare Q
//--------------------------------------------------------------------------------------------------
bool gt_VictoryFanfareQ_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    TransmissionClearAll();
    TriggerQueueEnter();
    gv_victoryCompletePan = UnitGetPosition(UnitFromId(1554286808));
    libCOMI_gf_CinematicModeCampaign(true, c_transitionDurationDefault, true);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnitType("ZealotPurifier", false), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("CoC_MissionSuccess", -1), StringExternal("Param/Value/FDD6AED1"), StringExternal("Param/Value/71A0D4E1"), 15.0, c_transmissionDurationAdd, false, c_maxPlayers, false);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    UnitPauseAll(true);
    CameraLockInput(gv_pLAYER_01_USER, true);
    CameraLockInput(gv_pLAYER_02_USER, true);
    UnitClearSelection(gv_pLAYER_01_USER);
    UnitClearSelection(gv_pLAYER_02_USER);
    UISetSelectionTypeEnabled(PlayerGroupAll(), c_localSelectionTypeUnknown, false);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoDefault(), 2.0, -1, 10.0, false);
    CameraPan(gv_pLAYER_01_USER, gv_victoryCompletePan, 2.0, -1, 10.0, false);
    CameraApplyInfo(gv_pLAYER_02_USER, CameraInfoDefault(), 2.0, -1, 10.0, false);
    CameraPan(gv_pLAYER_02_USER, gv_victoryCompletePan, 2.0, -1, 10.0, false);
    libCOMI_gf_DisplayCampaignMessage(PlayerGroupSingle(gv_pLAYER_01_USER), libCOMI_ge_CampaignMessageType_MissionVictory, StringExternal("Param/Value/684A78B4"), libCOMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
    libCOMI_gf_DisplayCampaignMessage(PlayerGroupSingle(gv_pLAYER_02_USER), libCOMI_ge_CampaignMessageType_MissionVictory, StringExternal("Param/Value/E5C8709E"), libCOMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
    libCOMI_gf_WaitForMissionTransmission();
    Wait(12.0, c_timeGame);
    UISetCursorVisible(PlayerGroupAll(), true);
    TriggerExecute(gt_Victory, true, false);
    TriggerQueueExit();
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_VictoryFanfareQ_Init () {
    gt_VictoryFanfareQ = TriggerCreate("gt_VictoryFanfareQ_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Victory
//--------------------------------------------------------------------------------------------------
bool gt_Victory_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    Wait(2.0, c_timeGame);
    libCOMI_gf_EndCampaignMission(c_gameOverVictory);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_Victory_Init () {
    gt_Victory = TriggerCreate("gt_Victory_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Defeat
//--------------------------------------------------------------------------------------------------
bool gt_Defeat_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_EndCampaignMission(c_gameOverDefeat);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_Defeat_Init () {
    gt_Defeat = TriggerCreate("gt_Defeat_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Start AI
//--------------------------------------------------------------------------------------------------
bool gt_StartAI_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    libCOMI_gf_StartCoopAI(gv_pLAYER_03_ENEMY, gv_pLAYER_01_USER);
    libCOMI_gf_StartCoopAI(gv_pLAYER_04_ENEMY, gv_pLAYER_02_USER);
    TriggerExecute(gt_SetupAttackWaveSpawn, true, false);
    TriggerExecute(gt_AIAttackWaves, true, false);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_StartAI_Init () {
    gt_StartAI = TriggerCreate("gt_StartAI_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: AI Outer Core Repeat Waves
//--------------------------------------------------------------------------------------------------
bool gt_AIOuterCoreRepeatWaves_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((ObjectiveGetState(gv_objectiveCaptureOuterCores) != c_objectiveStateCompleted))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    Wait(360.0, c_timeGame);
    if ((ObjectiveGetState(gv_objectiveCaptureOuterCores) == c_objectiveStateCompleted)) {
        TriggerEnable(TriggerGetCurrent(), false);
    }
    else {
        TriggerExecute(gt_AIOuterCoreAttackWaveAddUnits, true, false);
        TriggerExecute(gt_AIOuterCoreRepeatWaves, true, false);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_AIOuterCoreRepeatWaves_Init () {
    gt_AIOuterCoreRepeatWaves = TriggerCreate("gt_AIOuterCoreRepeatWaves_Func");
    TriggerEnable(gt_AIOuterCoreRepeatWaves, false);
}
//--------------------------------------------------------------------------------------------------
// Trigger: AI Outer Core Attack Wave - Add Units
//--------------------------------------------------------------------------------------------------
bool gt_AIOuterCoreAttackWaveAddUnits_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerExecute(gt_OuterCoreAttackWave, true, false);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_AIOuterCoreAttackWaveAddUnits_Init () {
    gt_AIOuterCoreAttackWaveAddUnits = TriggerCreate("gt_AIOuterCoreAttackWaveAddUnits_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Outer Core Attack Wave
//--------------------------------------------------------------------------------------------------
bool gt_OuterCoreAttackWave_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceBucket;
    int lv_techBucket;
    region lv_randomSpawn;
    bool lv_canSpawn;
    // Variable Initialization
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__7Largest;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets_TechLevel07;
    // Actions
    if (!runActions) {
        return true;
    }
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__3Small;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__3Mid;
    if ((UnitHasBehavior2(UnitFromId(119381035), "PurifiersControl") == true) && (UnitHasBehavior2(UnitFromId(119381035), "DummyBehaviorPreventRestabilize") == false)) {
        lv_canSpawn = true;
        lv_randomSpawn = RegionFromId(20);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "AmonCorruptor", 0, gv_pLAYER_03_ENEMY, RegionGetCenter(lv_randomSpawn));
        UnitIssueOrder(UnitLastCreated(), OrderTargetingUnit(AbilityCommand("AttackWithNeutralScan", 0), UnitFromId(119381035)), c_orderQueueReplace);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "AmonCorruptor", 0, gv_pLAYER_04_ENEMY, RegionGetCenter(lv_randomSpawn));
        UnitIssueOrder(UnitLastCreated(), OrderTargetingUnit(AbilityCommand("AttackWithNeutralScan", 0), UnitFromId(119381035)), c_orderQueueReplace);
        AIAttackWaveSetTargetUnit(gv_pLAYER_03_ENEMY, UnitFromId(119381035));
        AIAttackWaveSetTargetUnit(gv_pLAYER_04_ENEMY, UnitFromId(119381035));
    }
    else {
        if ((UnitHasBehavior2(UnitFromId(1503412912), "PurifiersControl") == true) && (UnitHasBehavior2(UnitFromId(1759889906), "PurifiersControl") == true) && (UnitHasBehavior2(UnitFromId(1503412912), "DummyBehaviorPreventRestabilize") == false) && (UnitHasBehavior2(UnitFromId(1759889906), "DummyBehaviorPreventRestabilize") == false)) {
            if ((RandomInt(1, 2) == 1)) {
                lv_canSpawn = true;
                lv_randomSpawn = RegionFromId(20);
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "AmonCorruptor", 0, gv_pLAYER_03_ENEMY, RegionGetCenter(lv_randomSpawn));
                UnitIssueOrder(UnitLastCreated(), OrderTargetingUnit(AbilityCommand("AttackWithNeutralScan", 0), UnitFromId(1503412912)), c_orderQueueReplace);
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "AmonCorruptor", 0, gv_pLAYER_04_ENEMY, RegionGetCenter(lv_randomSpawn));
                UnitIssueOrder(UnitLastCreated(), OrderTargetingUnit(AbilityCommand("AttackWithNeutralScan", 0), UnitFromId(1503412912)), c_orderQueueReplace);
                AIAttackWaveSetTargetUnitPoint(gv_pLAYER_03_ENEMY, UnitFromId(1503412912));
                AIAttackWaveSetTargetUnitPoint(gv_pLAYER_04_ENEMY, UnitFromId(1503412912));
            }
            else {
                lv_canSpawn = true;
                lv_randomSpawn = RegionFromId(20);
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "AmonCorruptor", 0, gv_pLAYER_03_ENEMY, RegionGetCenter(lv_randomSpawn));
                UnitIssueOrder(UnitLastCreated(), OrderTargetingUnit(AbilityCommand("AttackWithNeutralScan", 0), UnitFromId(1759889906)), c_orderQueueReplace);
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "AmonCorruptor", 0, gv_pLAYER_04_ENEMY, RegionGetCenter(lv_randomSpawn));
                UnitIssueOrder(UnitLastCreated(), OrderTargetingUnit(AbilityCommand("AttackWithNeutralScan", 0), UnitFromId(1759889906)), c_orderQueueReplace);
                AIAttackWaveSetTargetUnitPoint(gv_pLAYER_03_ENEMY, UnitFromId(1759889906));
                AIAttackWaveSetTargetUnitPoint(gv_pLAYER_04_ENEMY, UnitFromId(1759889906));
            }
        }
        else {
            if ((UnitHasBehavior2(UnitFromId(1503412912), "PurifiersControl") == true) && (UnitHasBehavior2(UnitFromId(1503412912), "DummyBehaviorPreventRestabilize") == false)) {
                lv_canSpawn = true;
                lv_randomSpawn = RegionFromId(20);
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "AmonCorruptor", 0, gv_pLAYER_03_ENEMY, RegionGetCenter(lv_randomSpawn));
                UnitIssueOrder(UnitLastCreated(), OrderTargetingUnit(AbilityCommand("AttackWithNeutralScan", 0), UnitFromId(1503412912)), c_orderQueueReplace);
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "AmonCorruptor", 0, gv_pLAYER_04_ENEMY, RegionGetCenter(lv_randomSpawn));
                UnitIssueOrder(UnitLastCreated(), OrderTargetingUnit(AbilityCommand("AttackWithNeutralScan", 0), UnitFromId(1503412912)), c_orderQueueReplace);
                AIAttackWaveSetTargetUnitPoint(gv_pLAYER_03_ENEMY, UnitFromId(1503412912));
                AIAttackWaveSetTargetUnitPoint(gv_pLAYER_04_ENEMY, UnitFromId(1503412912));
            }
            else {
                if ((UnitHasBehavior2(UnitFromId(1759889906), "PurifiersControl") == true) && (UnitHasBehavior2(UnitFromId(1759889906), "DummyBehaviorPreventRestabilize") == false)) {
                    lv_canSpawn = true;
                    lv_randomSpawn = RegionFromId(20);
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "AmonCorruptor", 0, gv_pLAYER_03_ENEMY, RegionGetCenter(lv_randomSpawn));
                    UnitIssueOrder(UnitLastCreated(), OrderTargetingUnit(AbilityCommand("AttackWithNeutralScan", 0), UnitFromId(1759889906)), c_orderQueueReplace);
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "AmonCorruptor", 0, gv_pLAYER_04_ENEMY, RegionGetCenter(lv_randomSpawn));
                    UnitIssueOrder(UnitLastCreated(), OrderTargetingUnit(AbilityCommand("AttackWithNeutralScan", 0), UnitFromId(1759889906)), c_orderQueueReplace);
                    AIAttackWaveSetTargetUnitPoint(gv_pLAYER_03_ENEMY, UnitFromId(1759889906));
                    AIAttackWaveSetTargetUnitPoint(gv_pLAYER_04_ENEMY, UnitFromId(1759889906));
                }
                else {
                    if ((UnitHasBehavior2(UnitFromId(379177728), "PurifiersControl") == true) && (UnitHasBehavior2(UnitFromId(2025447594), "PurifiersControl") == true) && (UnitHasBehavior2(UnitFromId(379177728), "DummyBehaviorPreventRestabilize") == false) && (UnitHasBehavior2(UnitFromId(2025447594), "DummyBehaviorPreventRestabilize") == false)) {
                        if ((RandomInt(1, 2) == 1)) {
                            lv_canSpawn = true;
                            lv_randomSpawn = RegionFromId(1);
                            libNtve_gf_CreateUnitsWithDefaultFacing(1, "AmonCorruptor", 0, gv_pLAYER_03_ENEMY, RegionGetCenter(lv_randomSpawn));
                            UnitIssueOrder(UnitLastCreated(), OrderTargetingUnit(AbilityCommand("AttackWithNeutralScan", 0), UnitFromId(2025447594)), c_orderQueueReplace);
                            libNtve_gf_CreateUnitsWithDefaultFacing(1, "AmonCorruptor", 0, gv_pLAYER_04_ENEMY, RegionGetCenter(lv_randomSpawn));
                            UnitIssueOrder(UnitLastCreated(), OrderTargetingUnit(AbilityCommand("AttackWithNeutralScan", 0), UnitFromId(2025447594)), c_orderQueueReplace);
                            AIAttackWaveSetTargetUnitPoint(gv_pLAYER_03_ENEMY, UnitFromId(2025447594));
                            AIAttackWaveSetTargetUnitPoint(gv_pLAYER_04_ENEMY, UnitFromId(2025447594));
                        }
                        else {
                            lv_canSpawn = true;
                            lv_randomSpawn = RegionFromId(18);
                            libNtve_gf_CreateUnitsWithDefaultFacing(1, "AmonCorruptor", 0, gv_pLAYER_03_ENEMY, RegionGetCenter(lv_randomSpawn));
                            UnitIssueOrder(UnitLastCreated(), OrderTargetingUnit(AbilityCommand("AttackWithNeutralScan", 0), UnitFromId(379177728)), c_orderQueueReplace);
                            libNtve_gf_CreateUnitsWithDefaultFacing(1, "AmonCorruptor", 0, gv_pLAYER_04_ENEMY, RegionGetCenter(lv_randomSpawn));
                            UnitIssueOrder(UnitLastCreated(), OrderTargetingUnit(AbilityCommand("AttackWithNeutralScan", 0), UnitFromId(379177728)), c_orderQueueReplace);
                            AIAttackWaveSetTargetUnitPoint(gv_pLAYER_03_ENEMY, UnitFromId(379177728));
                            AIAttackWaveSetTargetUnitPoint(gv_pLAYER_04_ENEMY, UnitFromId(379177728));
                        }
                    }
                    else {
                        if ((UnitHasBehavior2(UnitFromId(2025447594), "PurifiersControl") == true) && (UnitHasBehavior2(UnitFromId(2025447594), "DummyBehaviorPreventRestabilize") == false)) {
                            lv_canSpawn = true;
                            lv_randomSpawn = RegionFromId(1);
                            libNtve_gf_CreateUnitsWithDefaultFacing(1, "AmonCorruptor", 0, gv_pLAYER_03_ENEMY, RegionGetCenter(lv_randomSpawn));
                            UnitIssueOrder(UnitLastCreated(), OrderTargetingUnit(AbilityCommand("AttackWithNeutralScan", 0), UnitFromId(2025447594)), c_orderQueueReplace);
                            libNtve_gf_CreateUnitsWithDefaultFacing(1, "AmonCorruptor", 0, gv_pLAYER_04_ENEMY, RegionGetCenter(lv_randomSpawn));
                            UnitIssueOrder(UnitLastCreated(), OrderTargetingUnit(AbilityCommand("AttackWithNeutralScan", 0), UnitFromId(2025447594)), c_orderQueueReplace);
                            AIAttackWaveSetTargetUnitPoint(gv_pLAYER_03_ENEMY, UnitFromId(2025447594));
                            AIAttackWaveSetTargetUnitPoint(gv_pLAYER_04_ENEMY, UnitFromId(2025447594));
                        }
                        else {
                            if ((UnitHasBehavior2(UnitFromId(379177728), "PurifiersControl") == true) && (UnitHasBehavior2(UnitFromId(379177728), "DummyBehaviorPreventRestabilize") == false)) {
                                lv_canSpawn = true;
                                lv_randomSpawn = RegionFromId(18);
                                libNtve_gf_CreateUnitsWithDefaultFacing(1, "AmonCorruptor", 0, gv_pLAYER_03_ENEMY, RegionGetCenter(lv_randomSpawn));
                                UnitIssueOrder(UnitLastCreated(), OrderTargetingUnit(AbilityCommand("AttackWithNeutralScan", 0), UnitFromId(379177728)), c_orderQueueReplace);
                                libNtve_gf_CreateUnitsWithDefaultFacing(1, "AmonCorruptor", 0, gv_pLAYER_04_ENEMY, RegionGetCenter(lv_randomSpawn));
                                UnitIssueOrder(UnitLastCreated(), OrderTargetingUnit(AbilityCommand("AttackWithNeutralScan", 0), UnitFromId(379177728)), c_orderQueueReplace);
                                AIAttackWaveSetTargetUnitPoint(gv_pLAYER_03_ENEMY, UnitFromId(379177728));
                                AIAttackWaveSetTargetUnitPoint(gv_pLAYER_04_ENEMY, UnitFromId(379177728));
                            }
                        }
                    }
                }
            }
        }
    }
    if ((lv_canSpawn == true)) {
        libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, lv_resourceBucket, lv_techBucket, RegionGetCenter(lv_randomSpawn), true);
        libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_OuterCoreAttackWave_Init () {
    gt_OuterCoreAttackWave = TriggerCreate("gt_OuterCoreAttackWave_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: AI Central Core Repeat Waves
//--------------------------------------------------------------------------------------------------
bool gt_AICentralCoreRepeatWaves_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    Wait(15.0, c_timeGame);
    TriggerExecute(gt_AICentralCoreAttackWaveAddUnits, true, false);
    Wait(60.0, c_timeGame);
    TriggerExecute(gt_AICentralCoreRepeatWaves, true, false);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_AICentralCoreRepeatWaves_Init () {
    gt_AICentralCoreRepeatWaves = TriggerCreate("gt_AICentralCoreRepeatWaves_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: AI Central Core Attack Wave - Add Units
//--------------------------------------------------------------------------------------------------
bool gt_AICentralCoreAttackWaveAddUnits_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "AmonCorruptor", 0, gv_pLAYER_03_ENEMY, RegionGetCenter(RegionFromId(1)));
    UnitBehaviorAdd(UnitLastCreated(), "WillofAmon", UnitLastCreated(), 1);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingUnit(AbilityCommand("AttackWithNeutralScan", 0), UnitFromId(1554286808)), c_orderQueueReplace);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "AmonCorruptor", 0, gv_pLAYER_03_ENEMY, RegionGetCenter(RegionFromId(1)));
    UnitBehaviorAdd(UnitLastCreated(), "WillofAmon", UnitLastCreated(), 1);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingUnit(AbilityCommand("AttackWithNeutralScan", 0), UnitFromId(1554286808)), c_orderQueueReplace);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "AmonCorruptor", 0, gv_pLAYER_04_ENEMY, RegionGetCenter(RegionFromId(18)));
    UnitBehaviorAdd(UnitLastCreated(), "WillofAmon", UnitLastCreated(), 1);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingUnit(AbilityCommand("AttackWithNeutralScan", 0), UnitFromId(1554286808)), c_orderQueueReplace);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "AmonCorruptor", 0, gv_pLAYER_04_ENEMY, RegionGetCenter(RegionFromId(18)));
    UnitBehaviorAdd(UnitLastCreated(), "WillofAmon", UnitLastCreated(), 1);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingUnit(AbilityCommand("AttackWithNeutralScan", 0), UnitFromId(1554286808)), c_orderQueueReplace);
    TriggerExecute(gt_CentralCoreAttackWave, true, false);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_AICentralCoreAttackWaveAddUnits_Init () {
    gt_AICentralCoreAttackWaveAddUnits = TriggerCreate("gt_AICentralCoreAttackWaveAddUnits_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Central Core Attack Wave
//--------------------------------------------------------------------------------------------------
bool gt_CentralCoreAttackWave_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceBucket;
    int lv_techBucket;
    region lv_randomSpawn;
    region lv_randomSpawn2;
    unit lv_addedHybrid1;
    unit lv_addedHybrid2;
    // Variable Initialization
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__7Largest;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets_TechLevel07;
    // Actions
    if (!runActions) {
        return true;
    }
    if ((gv_waveCount == 0)) {
        lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__4Medium;
        gv_waveCount += 1;
    }
    else {
        if ((gv_waveCount == 1)) {
            gv_waveCount += 1;
            lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__5Large;
        }
        else {
            lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__6Larger;
        }
    }
    if ((gv_waveCount == 0)) {
        lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__5Late;
    }
    else {
        if ((gv_waveCount == 1)) {
            lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets_TechLevel06;
        }
        else {
            lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets_TechLevel07;
        }
    }
    AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, PointFromId(105487371));
    AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, PointFromId(105487371));
    if ((RandomInt(1, 100) <= 50)) {
        lv_randomSpawn = RegionFromId(1);
        lv_randomSpawn2 = RegionFromId(18);
    }
    else {
        lv_randomSpawn = RegionFromId(18);
        lv_randomSpawn2 = RegionFromId(1);
    }
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "HybridReaver", 0, gv_pLAYER_03_ENEMY, RegionGetCenter(lv_randomSpawn));
    lv_addedHybrid1 = UnitLastCreated();
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "HybridDestroyer", 0, gv_pLAYER_03_ENEMY, RegionGetCenter(lv_randomSpawn2));
    lv_addedHybrid2 = UnitLastCreated();
    AIAttackWaveUseUnit(gv_pLAYER_03_ENEMY, lv_addedHybrid1);
    AIAttackWaveUseUnit(gv_pLAYER_03_ENEMY, lv_addedHybrid2);
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, lv_resourceBucket, lv_techBucket, RegionGetCenter(lv_randomSpawn), true);
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    if ((lv_randomSpawn == RegionFromId(1))) {
        lv_randomSpawn = RegionFromId(18);
        libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, lv_resourceBucket, lv_techBucket, RegionGetCenter(lv_randomSpawn), true);
        libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    }
    else {
        lv_randomSpawn = RegionFromId(1);
        libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, lv_resourceBucket, lv_techBucket, RegionGetCenter(lv_randomSpawn), true);
        libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_CentralCoreAttackWave_Init () {
    gt_CentralCoreAttackWave = TriggerCreate("gt_CentralCoreAttackWave_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Setup Attack Wave Spawn
//--------------------------------------------------------------------------------------------------
bool gt_SetupAttackWaveSpawn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_spawnLocationIter;
    // Variable Initialization
    // Actions
    if (!runActions) {
        return true;
    }
    lv_spawnLocationIter += 1;
    gv_attackSpawn[gv_pLAYER_01_USER][lv_spawnLocationIter] = RegionFromId(9);
    lv_spawnLocationIter += 1;
    gv_attackSpawn[gv_pLAYER_01_USER][lv_spawnLocationIter] = RegionFromId(6);
    lv_spawnLocationIter += 1;
    gv_attackSpawn[gv_pLAYER_01_USER][lv_spawnLocationIter] = RegionFromId(8);
    lv_spawnLocationIter += 1;
    gv_attackSpawn[gv_pLAYER_01_USER][lv_spawnLocationIter] = RegionFromId(14);
    lv_spawnLocationIter += 1;
    gv_attackSpawn[gv_pLAYER_01_USER][lv_spawnLocationIter] = RegionFromId(7);
    lv_spawnLocationIter += 1;
    gv_attackSpawn[gv_pLAYER_01_USER][lv_spawnLocationIter] = RegionFromId(2);
    lv_spawnLocationIter = 1;
    gv_attackSpawn[gv_pLAYER_02_USER][lv_spawnLocationIter] = RegionFromId(9);
    lv_spawnLocationIter += 1;
    gv_attackSpawn[gv_pLAYER_02_USER][lv_spawnLocationIter] = RegionFromId(6);
    lv_spawnLocationIter += 1;
    gv_attackSpawn[gv_pLAYER_02_USER][lv_spawnLocationIter] = RegionFromId(5);
    lv_spawnLocationIter += 1;
    gv_attackSpawn[gv_pLAYER_02_USER][lv_spawnLocationIter] = RegionFromId(19);
    lv_spawnLocationIter += 1;
    gv_attackSpawn[gv_pLAYER_02_USER][lv_spawnLocationIter] = RegionFromId(57);
    lv_spawnLocationIter += 1;
    gv_attackSpawn[gv_pLAYER_02_USER][lv_spawnLocationIter] = RegionFromId(13);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SetupAttackWaveSpawn_Init () {
    gt_SetupAttackWaveSpawn = TriggerCreate("gt_SetupAttackWaveSpawn_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: AI Attack Waves
//--------------------------------------------------------------------------------------------------
bool gt_AIAttackWaves_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    gf_RunAttackWaveatMissionTime(gt_AttackWave01, (3.5 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_AttackWave02, (7.0 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_AttackWave03, (11.0 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_AttackWave04, (15.0 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_AttackWave05, (19.0 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_AttackWave06, (23.0 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_AttackWave07, (27.0 * 60.0));
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_AIAttackWaves_Init () {
    gt_AIAttackWaves = TriggerCreate("gt_AIAttackWaves_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave 01
//--------------------------------------------------------------------------------------------------
bool gt_AttackWave01_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceBucket;
    int lv_techBucket;
    // Variable Initialization
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__1Early;
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_03_ENEMY) != 1))) {
            return false;
        }
        if (!((libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_03_ENEMY) != 2))) {
            return false;
        }
        if (!((libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_04_ENEMY) != 1))) {
            return false;
        }
        if (!((libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_04_ENEMY) != 2))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__1Early;
    AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, PointFromId(249));
    AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, PointFromId(249));
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, lv_resourceBucket, lv_techBucket, gf_AttackWaveSpawn(), true);
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_AttackWave01_Init () {
    gt_AttackWave01 = TriggerCreate("gt_AttackWave01_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave 02
//--------------------------------------------------------------------------------------------------
bool gt_AttackWave02_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceBucket;
    int lv_techBucket;
    // Variable Initialization
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__2Smaller;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__2EarlyMid;
    // Actions
    if (!runActions) {
        return true;
    }
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__1Early;
    AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, PointFromId(249));
    AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, PointFromId(249));
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, lv_resourceBucket, lv_techBucket, gf_AttackWaveSpawn(), true);
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_AttackWave02_Init () {
    gt_AttackWave02 = TriggerCreate("gt_AttackWave02_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave 03
//--------------------------------------------------------------------------------------------------
bool gt_AttackWave03_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceBucket;
    int lv_techBucket;
    int lv_numberOfStructures_ExpLeft;
    int lv_numberOfStructures_ExpRight;
    point lv_attackPathWaypoint;
    // Variable Initialization
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__3Small;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__3Mid;
    // Actions
    if (!runActions) {
        return true;
    }
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__3Small;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__3Mid;
    PlayerGroupLoopBegin(libCOMI_gf_HumanPlayers());
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        lv_numberOfStructures_ExpLeft += UnitGroupCount(UnitGroup(null, PlayerGroupLoopCurrent(), RegionFromId(3), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
        lv_numberOfStructures_ExpRight += UnitGroupCount(UnitGroup(null, PlayerGroupLoopCurrent(), RegionFromId(4), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
    }
    PlayerGroupLoopEnd();
    if ((((lv_numberOfStructures_ExpLeft == 0) && (lv_numberOfStructures_ExpRight == 0)) || ((lv_numberOfStructures_ExpLeft > 0) && (lv_numberOfStructures_ExpRight > 0)))) {
        if ((RandomInt(0, 100) < 50)) {
            lv_attackPathWaypoint = PointFromId(367);
        }
        else {
            lv_attackPathWaypoint = PointFromId(358);
        }
    }
    else {
        if ((lv_numberOfStructures_ExpLeft > lv_numberOfStructures_ExpRight)) {
            lv_attackPathWaypoint = PointFromId(367);
        }
        else {
            lv_attackPathWaypoint = PointFromId(358);
        }
    }
    if ((lv_attackPathWaypoint == PointFromId(367))) {
        gv_attackWaveA_Wave05Path = PointFromId(358);
    }
    else {
        gv_attackWaveA_Wave05Path = PointFromId(367);
    }
    AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, PointFromId(249));
    AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, PointFromId(249));
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, lv_resourceBucket, lv_techBucket, gf_AttackWaveSpawn(), true);
    libCOMI_gf_AddAttackForceWaypoint(lv_attackPathWaypoint, false);
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_AttackWave03_Init () {
    gt_AttackWave03 = TriggerCreate("gt_AttackWave03_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave 04
//--------------------------------------------------------------------------------------------------
bool gt_AttackWave04_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceBucket;
    int lv_techBucket;
    int lv_attackingAI;
    int lv_defendingPlayer;
    // Variable Initialization
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__4Medium;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__4LateMid;
    // Actions
    if (!runActions) {
        return true;
    }
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__4Medium;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__4LateMid;
    AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, PointFromId(249));
    AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, PointFromId(249));
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, lv_resourceBucket, lv_techBucket, gf_AttackWaveSpawn(), true);
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_AttackWave04_Init () {
    gt_AttackWave04 = TriggerCreate("gt_AttackWave04_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave 05
//--------------------------------------------------------------------------------------------------
bool gt_AttackWave05_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceBucket;
    int lv_techBucket;
    int lv_numberOfStructures_ExpLeft;
    int lv_numberOfStructures_ExpRight;
    point lv_attackPathWaypoint;
    // Variable Initialization
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__1Early;
    // Actions
    if (!runActions) {
        return true;
    }
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__4Medium;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__4LateMid;
    lv_attackPathWaypoint = gv_attackWaveA_Wave05Path;
    AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, PointFromId(249));
    AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, PointFromId(249));
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, lv_resourceBucket, lv_techBucket, gf_AttackWaveSpawn(), true);
    libCOMI_gf_AddAttackForceWaypoint(lv_attackPathWaypoint, false);
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_AttackWave05_Init () {
    gt_AttackWave05 = TriggerCreate("gt_AttackWave05_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave 06
//--------------------------------------------------------------------------------------------------
bool gt_AttackWave06_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceBucket;
    int lv_techBucket;
    // Variable Initialization
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__6Larger;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets_TechLevel06;
    // Actions
    if (!runActions) {
        return true;
    }
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__4Medium;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__4LateMid;
    AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, PointFromId(249));
    AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, PointFromId(249));
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, lv_resourceBucket, lv_techBucket, gf_AttackWaveSpawn(), true);
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_AttackWave06_Init () {
    gt_AttackWave06 = TriggerCreate("gt_AttackWave06_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave 07
//--------------------------------------------------------------------------------------------------
bool gt_AttackWave07_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceBucket;
    int lv_techBucket;
    // Variable Initialization
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__7Largest;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets_TechLevel07;
    // Actions
    if (!runActions) {
        return true;
    }
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__4Medium;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__4LateMid;
    AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, PointFromId(249));
    AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, PointFromId(249));
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, lv_resourceBucket, lv_techBucket, gf_AttackWaveSpawn(), true);
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_AttackWave07_Init () {
    gt_AttackWave07 = TriggerCreate("gt_AttackWave07_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Objective - CaptureOuterCores - Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveCaptureOuterCoresCreate_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_CreateObjectiveCampaign("PlaceholderPrimary");
    libCOMI_gf_SetObjectiveRequiredCountCampaign("PlaceholderPrimary", gv_outerCoresCaptured);
    gv_objectiveCaptureOuterCores = ObjectiveLastCreated();
    ObjectiveSetPriority(ObjectiveLastCreated(), 10);
    TriggerExecute(gt_ObjectiveCaptureOuterCoresUpdate, true, false);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ObjectiveCaptureOuterCoresCreate_Init () {
    gt_ObjectiveCaptureOuterCoresCreate = TriggerCreate("gt_ObjectiveCaptureOuterCoresCreate_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Objective - CaptureOuterCores - Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveCaptureOuterCoresComplete_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveCaptureOuterCoresCreate, true, false);
    ObjectiveSetState(gv_objectiveCaptureOuterCores, c_objectiveStateCompleted);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ObjectiveCaptureOuterCoresComplete_Init () {
    gt_ObjectiveCaptureOuterCoresComplete = TriggerCreate("gt_ObjectiveCaptureOuterCoresComplete_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Objective - CaptureOuterCores - Update
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveCaptureOuterCoresUpdate_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerExecute(gt_ObjectiveCaptureOuterCoresCreate, true, false);
    libCOMI_gf_SetMissionObjectiveProgress("PlaceholderPrimary", gv_outerCoresCaptured);
    TextExpressionSetToken("Param/Expression/089DE02D", "StructureCount", IntToText(gv_outerCoresCaptured));
    ObjectiveSetName(gv_objectiveCaptureOuterCores, TextExpressionAssemble("Param/Expression/089DE02D"));
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ObjectiveCaptureOuterCoresUpdate_Init () {
    gt_ObjectiveCaptureOuterCoresUpdate = TriggerCreate("gt_ObjectiveCaptureOuterCoresUpdate_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Objective - CaptureOuterCores - Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveCaptureOuterCoresFailed_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveCaptureOuterCoresCreate, true, false);
    ObjectiveSetState(gv_objectiveCaptureOuterCores, c_objectiveStateFailed);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ObjectiveCaptureOuterCoresFailed_Init () {
    gt_ObjectiveCaptureOuterCoresFailed = TriggerCreate("gt_ObjectiveCaptureOuterCoresFailed_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Objective - RestabilizeCentralCore - Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveRestabilizeCentralCoreCreate_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_CreateObjectiveCampaign("PlaceholderPrimary");
    gv_objectiveRestabilizeCentralCore = ObjectiveLastCreated();
    ObjectiveSetPriority(ObjectiveLastCreated(), 8);
    TriggerExecute(gt_ObjectiveRestabilizeCentralCoreUpdate, true, false);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ObjectiveRestabilizeCentralCoreCreate_Init () {
    gt_ObjectiveRestabilizeCentralCoreCreate = TriggerCreate("gt_ObjectiveRestabilizeCentralCoreCreate_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Objective - RestabilizeCentralCore - Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveRestabilizeCentralCoreComplete_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveRestabilizeCentralCoreCreate, true, false);
    ObjectiveSetState(gv_objectiveRestabilizeCentralCore, c_objectiveStateCompleted);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ObjectiveRestabilizeCentralCoreComplete_Init () {
    gt_ObjectiveRestabilizeCentralCoreComplete = TriggerCreate("gt_ObjectiveRestabilizeCentralCoreComplete_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Objective - RestabilizeCentralCore - Update
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveRestabilizeCentralCoreUpdate_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerExecute(gt_ObjectiveRestabilizeCentralCoreCreate, true, false);
    TextExpressionSetToken("Param/Expression/F6A42A6B", "timerRemaining", FixedToText(UnitGetPropertyFixed(UnitFromId(1554286808), c_unitPropLifePercent, c_unitPropCurrent), 2));
    ObjectiveSetName(gv_objectiveRestabilizeCentralCore, TextExpressionAssemble("Param/Expression/F6A42A6B"));
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ObjectiveRestabilizeCentralCoreUpdate_Init () {
    gt_ObjectiveRestabilizeCentralCoreUpdate = TriggerCreate("gt_ObjectiveRestabilizeCentralCoreUpdate_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Objective - RestabilizeCentralCore - Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveRestabilizeCentralCoreFailed_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveRestabilizeCentralCoreCreate, true, false);
    ObjectiveSetState(gv_objectiveRestabilizeCentralCore, c_objectiveStateFailed);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ObjectiveRestabilizeCentralCoreFailed_Init () {
    gt_ObjectiveRestabilizeCentralCoreFailed = TriggerCreate("gt_ObjectiveRestabilizeCentralCoreFailed_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Bonus Objective - CorruptedColossus - Create
//--------------------------------------------------------------------------------------------------
bool gt_BonusObjectiveCorruptedColossusCreate_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_CreateObjectiveCampaign("PlaceholderSecondary");
    gv_bonusObjectiveCorruptedColossus = ObjectiveLastCreated();
    ObjectiveSetPriority(ObjectiveLastCreated(), 8);
    TriggerExecute(gt_BonusObjectiveCorruptedColossusUpdate, true, false);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_BonusObjectiveCorruptedColossusCreate_Init () {
    gt_BonusObjectiveCorruptedColossusCreate = TriggerCreate("gt_BonusObjectiveCorruptedColossusCreate_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Bonus Objective - CorruptedColossus - Complete
//--------------------------------------------------------------------------------------------------
bool gt_BonusObjectiveCorruptedColossusComplete_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_BonusObjectiveCorruptedColossusCreate, true, false);
    ObjectiveSetState(gv_bonusObjectiveCorruptedColossus, c_objectiveStateCompleted);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_BonusObjectiveCorruptedColossusComplete_Init () {
    gt_BonusObjectiveCorruptedColossusComplete = TriggerCreate("gt_BonusObjectiveCorruptedColossusComplete_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Bonus Objective - CorruptedColossus - Update
//--------------------------------------------------------------------------------------------------
bool gt_BonusObjectiveCorruptedColossusUpdate_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerExecute(gt_BonusObjectiveCorruptedColossusCreate, true, false);
    ObjectiveSetName(gv_bonusObjectiveCorruptedColossus, StringExternal("Param/Value/24A9331D"));
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_BonusObjectiveCorruptedColossusUpdate_Init () {
    gt_BonusObjectiveCorruptedColossusUpdate = TriggerCreate("gt_BonusObjectiveCorruptedColossusUpdate_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger Initialization
//--------------------------------------------------------------------------------------------------
void InitTriggers () {
    gt_Init01LoadData_Init();
    gt_Init02Players_Init();
    gt_Init03LoadingComplete_Init();
    gt_Init07Environment_Init();
    gt_Init08Difficulties_Init();
    gt_RevealAll_Init();
    gt_CompleteFirstObjective_Init();
    gt_AutoDefeat_Init();
    gt_showClolarionPortrait_Init();
    gt_StartGameQ_Init();
    gt_StartAmonCorruptors_Init();
    gt_RevealObjectiveAreas_Init();
    gt_RevealCorruptors_Init();
    gt_OuterCoreObjectiveInformation_Init();
    gt_OuterCoreUpdateCount_Init();
    gt_OuterCoreChangedtoPurifier_Init();
    gt_OuterCoreChangedtoAmon_Init();
    gt_OuterCoreCorruptionNotifcation_Init();
    gt_OuterCoreCorruptionNotifcationRemove_Init();
    gt_CentralCoreStabilityUpdate_Init();
    gt_CentralCoreRestabilizationStarted_Init();
    gt_CentralCoreVictory_Init();
    gt_CentralCoreRandomizeCorruptorPosition1_Init();
    gt_CentralCoreRandomizeCorruptorPosition2_Init();
    gt_InitializeBonusObjective_Init();
    gt_BonusObjectiveComplete_Init();
    gt_EnemyAttackingQ_Init();
    gt_DefeatPrimaryObjectiveFailed_Init();
    gt_FirstObjectiveComplete_Init();
    gt_VictoryPrimaryObjectiveComplete_Init();
    gt_VictorySequence_Init();
    gt_VictoryFanfareQ_Init();
    gt_Victory_Init();
    gt_Defeat_Init();
    gt_StartAI_Init();
    gt_AIOuterCoreRepeatWaves_Init();
    gt_AIOuterCoreAttackWaveAddUnits_Init();
    gt_OuterCoreAttackWave_Init();
    gt_AICentralCoreRepeatWaves_Init();
    gt_AICentralCoreAttackWaveAddUnits_Init();
    gt_CentralCoreAttackWave_Init();
    gt_SetupAttackWaveSpawn_Init();
    gt_AIAttackWaves_Init();
    gt_AttackWave01_Init();
    gt_AttackWave02_Init();
    gt_AttackWave03_Init();
    gt_AttackWave04_Init();
    gt_AttackWave05_Init();
    gt_AttackWave06_Init();
    gt_AttackWave07_Init();
    gt_ObjectiveCaptureOuterCoresCreate_Init();
    gt_ObjectiveCaptureOuterCoresComplete_Init();
    gt_ObjectiveCaptureOuterCoresUpdate_Init();
    gt_ObjectiveCaptureOuterCoresFailed_Init();
    gt_ObjectiveRestabilizeCentralCoreCreate_Init();
    gt_ObjectiveRestabilizeCentralCoreComplete_Init();
    gt_ObjectiveRestabilizeCentralCoreUpdate_Init();
    gt_ObjectiveRestabilizeCentralCoreFailed_Init();
    gt_BonusObjectiveCorruptedColossusCreate_Init();
    gt_BonusObjectiveCorruptedColossusComplete_Init();
    gt_BonusObjectiveCorruptedColossusUpdate_Init();
}
//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void run () {
    InitLibs();
    InitGlobals();
    InitCustomAI();
    InitTriggers();
}

//--------------------------------------------------------------------------------------------------
// Custom Script Initialization
//--------------------------------------------------------------------------------------------------
void InitCustomScript () {
    run();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void InitMap () {
    InitCustomScript();
}
