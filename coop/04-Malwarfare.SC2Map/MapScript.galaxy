//==================================================================================================
// 
// Generated Map Script
// 
// Name:   [ARC] Malwarfare
// 
//==================================================================================================
include "TriggerLibs/NativeLib"
include "TriggerLibs/SwarmLib"
include "LibCOMI"

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void InitLibs () {
    libNtve_InitLib();
    libHots_InitLib();
    libCOMI_InitLib();
}

//--------------------------------------------------------------------------------------------------
// Constants
//--------------------------------------------------------------------------------------------------
const fixed gv_suppressionTowerAttackRange_MAX = 22.0;
const fixed gv_purifierGuardianStartupTime = 180.0;
const fixed gv_purifierLockTimerDuration = 165.0;
const fixed gv_purifierGuardianMAXSPEED = 1.8;
const fixed gv_purifierGuardianSLOWSPEED = 0.2;
const fixed gv_purifierGuardianNEARSPEED = 1.0;
const int gv_pURIFIER_LOCK_COUNT = 4;
const int gv_pLAYER_03_Player01Enemy = 8;
const int gv_pLAYER_04_Player02Enemy = 9;
const int gv_pLAYER_05_PurifierGuardian = 7;
const int gv_pLAYER_06_BonusNetural = 6;
const int gv_pLAYER_09_BonusHostileFlag1 = 11;
const int gv_pLAYER_10_BonusHostileFlag2 = 12;

//--------------------------------------------------------------------------------------------------
// Global Variables
//--------------------------------------------------------------------------------------------------
int gv_objectiveRescueStalkers3;
int gv_objectiveRescueStalkers4;
int gv_objectiveDestroyZergBase2;
int gv_objectiveDestroyZergBase;
fixed gv_scoreScreen_PurifierDamage;
fixed[gv_pURIFIER_LOCK_COUNT + 1] gv_suppressionTowerAttackRange;
timer gv_suppressionTowerSingleShotCooldown;
unitgroup[gv_pURIFIER_LOCK_COUNT + 1] gv_suppressionTowerUnits;
point gv_wave02_AttackSpawnPt;
unit gv_downloadCenter1;
timer gv_bonus1Timer;
int gv_bonus1Ping;
int gv_downloadIter1;
int gv_downloadMAX1;
unit gv_downloadCenter2;
timer gv_bonus2Timer;
int gv_bonus2Ping;
int gv_downloadIter2;
int gv_downloadMAX2;
int gv_towerHealth;
int gv_towerShields;
int gv_purifierGuardianPing;
int gv_purifierLockIndex;
point[5] gv_purifierLockPtArray;
unit gv_purifierGuardian;
timer gv_purifierGuardianChannelingTimer;
point gv_purifierDeathPoint;
bool[gv_pURIFIER_LOCK_COUNT + 1] gv_purifierArrivedAtLock;
timer gv_barrageHitTimer;
int gv_leaderboardSuppressionTowersActive;
int gv_leaderboardThrasherScoreFinal;
int gv_leaderboardBonus01ScoreFinal;
int gv_leaderboardBonus02ScoreFinal;
int gv_leaderboardObjectiveScoreFinal;
fixed gv_leaderboardTransportDamageTaken;
int gv_purifierGuardianHealth;
int gv_purifierGuardianShields;
fixed gv_suppressionTower_MultiShotCooldown;
fixed gv_suppressionTower_SingleShotCooldown;
fixed gv_suppressionTower_BarrageCooldown;
fixed gv_suppressionTower_AntiKitingTimer;
fixed gv_suppressionTower_EnrageTimer;
int gv_purifierGuardianShieldRegen;
int gv_pLAYER_01_USER;
int gv_pLAYER_02_USER;
string gv_mapMusicTrack;

void InitGlobals () {
    int init_i;

    gv_objectiveRescueStalkers3 = c_invalidObjectiveId;
    gv_objectiveRescueStalkers4 = c_invalidObjectiveId;
    gv_objectiveDestroyZergBase2 = c_invalidObjectiveId;
    gv_objectiveDestroyZergBase = c_invalidObjectiveId;
    gv_suppressionTowerSingleShotCooldown = TimerCreate();
    for (init_i = 0; init_i <= gv_pURIFIER_LOCK_COUNT; init_i += 1) {
        gv_suppressionTowerUnits[init_i] = UnitGroupEmpty();
    }
    gv_bonus1Timer = TimerCreate();
    gv_bonus1Ping = c_invalidPingId;
    gv_downloadMAX1 = 3;
    gv_bonus2Timer = TimerCreate();
    gv_bonus2Ping = c_invalidPingId;
    gv_downloadMAX2 = 3;
    gv_purifierGuardianPing = c_invalidPingId;
    gv_purifierGuardianChannelingTimer = TimerCreate();
    gv_barrageHitTimer = TimerCreate();
    gv_pLAYER_01_USER = 1;
    gv_pLAYER_02_USER = 2;
}

//--------------------------------------------------------------------------------------------------
// Global Function Declarations
//--------------------------------------------------------------------------------------------------
void gf_SuppressionTowerController (unit lp_tower, int lp_towerGroupIndex);
void gf_AttackWaveatTime (fixed lp_time, trigger lp_aIAttackWave);
point gf_EscortHarassDropLocation (int lp_lockIndex, int lp_firstLocation, int lp_lastLocation);
void gf_SpawnHarassWavesatLocation (int lp_lockNumber, int lp_lockMaxSpawnPointNum, int lp_resourceAmount, int lp_techLevel, unit lp_harassTarget);
void gf_SpawnSuppressionTower (point lp_spawnLocation);
void gf_SendPurifierGuardian (unit lp_escortUnit, point lp_destination, int lp_lockNumber);
void gf_PingandRevealLockLocation (point lp_lockPingPoint, unit lp_lockUnit);
void gf_DisplayPurifierProgressBar (unit lp_escortUnit, int lp_duration);
void gf_PurifierGuardianLockLogic (point lp_nextLockPoint, unit lp_currentLockUnit, unit lp_nextLockUnit, int lp_nextLockNum, trigger lp_escortHoldoutTrigger);

//--------------------------------------------------------------------------------------------------
// Trigger Variables
//--------------------------------------------------------------------------------------------------
trigger gt_ObjectiveDownloadBackups1Create;
trigger gt_ObjectiveDownloadBackups1Complete;
trigger gt_ObjectiveDownloadBackups1Update;
trigger gt_ObjectiveDownloadBackups1Failed;
trigger gt_ObjectiveDownloadBackups2Create;
trigger gt_ObjectiveDownloadBackups2Complete;
trigger gt_ObjectiveDownloadBackups2Update;
trigger gt_ObjectiveDownloadBackups2Failed;
trigger gt_ObjectivePurifierGuardianMustSurviveCreate;
trigger gt_ObjectivePurifierGuardianMustSurviveComplete;
trigger gt_ObjectivePurifierGuardianMustSurviveFailed;
trigger gt_ObjectiveActivatePurifierLocksCreate;
trigger gt_ObjectiveActivatePurifierLocksComplete;
trigger gt_ObjectiveActivatePurifierLocksUpdate;
trigger gt_ObjectiveActivatePurifierLocksFailed;
trigger gt_ScoreScreenHarvesterDamage;
trigger gt_SuppressionTowerAttackDistance;
trigger gt_RunAttackWaves;
trigger gt_AttackWave01;
trigger gt_AttackWave02;
trigger gt_AttackWave03MainBaseAttack;
trigger gt_EnemyAttackingFirstQ;
trigger gt_EnemyAttackingQ;
trigger gt_DefeatPrimaryObjectiveFailed;
trigger gt_VictoryActivatePurifierLocksCompleted;
trigger gt_ObjectiveDownloadBackups1Initialization;
trigger gt_DownloadBackups1ListenStartDownload;
trigger gt_DownloadBackups1AttackWaves;
trigger gt_DownloadBackups1ListenCompleteDownload;
trigger gt_DownloadCenter1DiesFail;
trigger gt_DownloadBackups1TimerExpireFail;
trigger gt_ObjectiveDownloadBackups1TimerUpdate;
trigger gt_ObjectiveDownloadBackups2Initialization;
trigger gt_DownloadBackups2ListenStartDownload;
trigger gt_DownloadBackups2AttackWaves;
trigger gt_DownloadBackups2ListenCompleteDownload;
trigger gt_DownloadCenter2DiesFail;
trigger gt_DownloadBackups2TimerExpireFail;
trigger gt_ObjectiveDownloadBackups2TimerUpdate;
trigger gt_ObjectiveDownloadBackups1StartQ;
trigger gt_ObjectiveDownloadBackups1FailedTimerExpireQ;
trigger gt_ObjectiveDownloadBackups1FailedDestroyedQ;
trigger gt_ObjectiveDownloadBackups1SuccessQ;
trigger gt_ObjectiveDownloadBackupsDownloadCompleteQ;
trigger gt_ObjectiveDownloadBackups1TimeWarningLogicQ;
trigger gt_ObjectiveDownloadBackupsTimeFinalWarningLogicQ;
trigger gt_ObjectiveDownloadBackups2StartQ;
trigger gt_ObjectiveDownloadBackups2FailedTimerExpireQ;
trigger gt_ObjectiveDownloadBackups2FailedDestroyedQ;
trigger gt_ObjectiveDownloadBackups2SuccessQ;
trigger gt_ObjectiveDownloadBackups2TimeWarningLogicQ;
trigger gt_ObjectiveDownloadBackups2TimeFinalWarningLogicQ;
trigger gt_ObjectiveDownloadBackupsUnderAttackQ;
trigger gt_SuppressionTowerDeathActions;
trigger gt_EscortHoldoutLock2;
trigger gt_EscortHoldoutLock3;
trigger gt_EscortHoldoutLock4;
trigger gt_EscortHoldoutLock1;
trigger gt_HoldoutStartingVOQ;
trigger gt_HoldoutHalfDoneVOQ;
trigger gt_HoldoutAlmostDoneVOQ;
trigger gt_HoldoutDefenseTowerFirstSpawnQ;
trigger gt_HoldoutDefenseTowerSoloSpawnQ;
trigger gt_HoldoutDefenseTowerMultiSpawnQ;
trigger gt_HoldoutDefenseTowerDestroyedQ;
trigger gt_PurifierGuardianProgression;
trigger gt_PurifierGuardianPauseonBarrage;
trigger gt_PurifierGuardianUnPauseHoldoutTimer;
trigger gt_PurifierGuardianDiesEvent;
trigger gt_PurifierGuardianIsUnderAttackBehavior;
trigger gt_PurifierGuardianEnemiesAreNearBehavior;
trigger gt_TurnONallTakingDamageWarningQs;
trigger gt_PurifierGuardianTakingDamageWarningCasualNormFirstQ;
trigger gt_PurifierGuardianTakingDamageWarningCasualNormQ;
trigger gt_PurifierGuardianTakingDamageWarningFirstQ;
trigger gt_PurifierGuardianTakingDamageWarning1Q;
trigger gt_PurifierGuardianTakingDamageWarning2Q;
trigger gt_PurifierGuardianTakingDamageCriticalQ;
trigger gt_PurifierGuardianMovingQ;
trigger gt_PurifierGuardianAbouttoMoveGenericQ;
trigger gt_PurifierGuardianAbouttoMovetoMidLockQ;
trigger gt_PurifierGuardianAbouttoMovetoFinalLockQ;
trigger gt_PurifierGuardianHoldoutStartQ;
trigger gt_PurifierGuardianHoldoutCompleteGenericQ;
trigger gt_PurifierGuardianHoldoutCompleteFirstQ;
trigger gt_PurifierGuardianPauseonBarrageQ;
trigger gt_DebugCreateSuppressionTower;
trigger gt_Init02LoadingComplete;
trigger gt_Init03Players;
trigger gt_Init05Units;
trigger gt_Init07Environment;
trigger gt_Init08Difficulties;
trigger gt_StartAI;
trigger gt_StartGameQ;

//--------------------------------------------------------------------------------------------------
// Global Functions
//--------------------------------------------------------------------------------------------------
trigger auto_gf_SuppressionTowerController_Trigger = null;
unit auto_gf_SuppressionTowerController_lp_tower;
int auto_gf_SuppressionTowerController_lp_towerGroupIndex;

void gf_SuppressionTowerController (unit lp_tower, int lp_towerGroupIndex) {
    auto_gf_SuppressionTowerController_lp_tower = lp_tower;
    auto_gf_SuppressionTowerController_lp_towerGroupIndex = lp_towerGroupIndex;

    if (auto_gf_SuppressionTowerController_Trigger == null) {
        auto_gf_SuppressionTowerController_Trigger = TriggerCreate("auto_gf_SuppressionTowerController_TriggerFunc");
    }

    TriggerExecute(auto_gf_SuppressionTowerController_Trigger, false, false);
}

bool auto_gf_SuppressionTowerController_TriggerFunc (bool testConds, bool runActions) {
    unit lp_tower = auto_gf_SuppressionTowerController_lp_tower;
    int lp_towerGroupIndex = auto_gf_SuppressionTowerController_lp_towerGroupIndex;

    // Variable Declarations
    int lv_waveValue;
    unitgroup lv_threatGroup;
    int lv_spawnedUnitVariety;
    point lv_suppressionTargetPt;
    bool lv_suppressionPatternIsStraightLine;
    unit[3] lv_purificationTarget;
    unit lv_purificationTargetIter;
    int lv_purificationTargetIndex;
    timer lv_multiShotCooldown;
    timer lv_singleShotCooldown;
    timer lv_barrageCooldown;
    timer lv_antiKitingTimer;
    bool lv_antiKitingTimerStarted;
    timer lv_enrageTimer;
    timer lv_offsetAttacksTimer;
    int lv_towerGroupIter;
    int lv_towerGroupIndex;

    // Automatic Variable Declarations
    unitgroup auto6145680B_g;
    int auto6145680B_u;
    unit auto6145680B_var;
    unitgroup auto7C90E043_g;
    int auto7C90E043_u;
    unit auto7C90E043_var;
    unitgroup auto004C56A6_g;
    int auto004C56A6_u;
    const int auto23614AC2_ae = 2;
    const int auto23614AC2_ai = 1;

    // Variable Initialization
    lv_threatGroup = UnitGroupEmpty();
    lv_multiShotCooldown = TimerCreate();
    lv_singleShotCooldown = TimerCreate();
    lv_barrageCooldown = TimerCreate();
    lv_antiKitingTimer = TimerCreate();
    lv_enrageTimer = TimerCreate();
    lv_offsetAttacksTimer = TimerCreate();

    // Implementation
    gv_leaderboardSuppressionTowersActive += 1;
    TimerStart(lv_barrageCooldown, 14.0, false, c_timeAI);
    TimerStart(lv_multiShotCooldown, (14.0 + 3.0), false, c_timeAI);
    TimerStart(lv_singleShotCooldown, (14.0 + 6.0), false, c_timeAI);
    TimerStart(lv_enrageTimer, gv_suppressionTower_EnrageTimer, false, c_timeAI);
    while ((UnitIsAlive(lp_tower) == true) && (UnitOrderHasAbil(lp_tower, "MorphToCybrosEscortTowerDown") == false)) {
        if ((UnitIsAlive(lp_tower) == true)) {
            lv_threatGroup = UnitGroupAlliance(UnitGetOwner(lp_tower), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_tower), gv_suppressionTowerAttackRange[lp_towerGroupIndex]), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32)) | (1 << (c_targetFilterSummoned - 32))), 0);
            auto6145680B_g = lv_threatGroup;
            auto6145680B_u = UnitGroupCount(auto6145680B_g, c_unitCountAll);
            for (;; auto6145680B_u -= 1) {
                auto6145680B_var = UnitGroupUnitFromEnd(auto6145680B_g, auto6145680B_u);
                if (auto6145680B_var == null) { break; }
                if (((UnitGetType(auto6145680B_var) == "Observer") || (UnitGetType(auto6145680B_var) == "Overseer") || (auto6145680B_var == gv_purifierGuardian))) {
                    UnitGroupRemove(lv_threatGroup, auto6145680B_var);
                }

            }
            if ((lv_antiKitingTimerStarted == false) && (UnitGroupCount(lv_threatGroup, c_unitCountAlive) > 0)) {
                lv_antiKitingTimerStarted = true;
                TimerStart(lv_antiKitingTimer, gv_suppressionTower_AntiKitingTimer, false, c_timeAI);
            }

            if ((UnitGroupCount(lv_threatGroup, c_unitCountAlive) > 0) && (TimerGetRemaining(lv_offsetAttacksTimer) <= 0.0)) {
                if (((lp_towerGroupIndex == 1) || (lp_towerGroupIndex == 3) || (lp_towerGroupIndex == 4)) && (TimerGetRemaining(lv_multiShotCooldown) <= 0.0)) {
                    auto7C90E043_g = lv_threatGroup;
                    auto7C90E043_u = UnitGroupCount(auto7C90E043_g, c_unitCountAll);
                    for (;; auto7C90E043_u -= 1) {
                        auto7C90E043_var = UnitGroupUnitFromEnd(auto7C90E043_g, auto7C90E043_u);
                        if (auto7C90E043_var == null) { break; }
                        if ((UnitGroupCount(UnitGroupAlliance(UnitGetOwner(lp_tower), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(auto7C90E043_var), 4.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 8)) {
                            lv_suppressionTargetPt = UnitGetPosition(auto7C90E043_var);
                            break;
                        }
                        else {
                            lv_suppressionTargetPt = UnitGetPosition(UnitGroupRandomUnit(lv_threatGroup, c_unitCountAlive));
                        }
                    }
                    VisRevealArea(UnitGetOwner(lp_tower), RegionCircle(lv_suppressionTargetPt, 6.0), 2.0, false);
                    Wait(0.0625, c_timeAI);
                    if ((RandomInt(1, 100) < 65)) {
                        UnitIssueOrder(lp_tower, OrderTargetingPoint(AbilityCommand("CybrosEscortTowerMultiAOE", 0), PointWithOffsetPolar(lv_suppressionTargetPt, 0.0, 0.0)), c_orderQueueReplace);
                        UnitIssueOrder(lp_tower, OrderTargetingPoint(AbilityCommand("CybrosEscortTowerMultiAOE", 0), PointWithOffsetPolar(lv_suppressionTargetPt, 3.0, (90.0 + AngleBetweenPoints(UnitGetPosition(lp_tower), lv_suppressionTargetPt)))), c_orderQueueReplace);
                        UnitIssueOrder(lp_tower, OrderTargetingPoint(AbilityCommand("CybrosEscortTowerMultiAOE", 0), PointWithOffsetPolar(lv_suppressionTargetPt, 3.0, (270.0 + AngleBetweenPoints(UnitGetPosition(lp_tower), lv_suppressionTargetPt)))), c_orderQueueReplace);
                    }
                    else {
                        UnitIssueOrder(lp_tower, OrderTargetingPoint(AbilityCommand("CybrosEscortTowerMultiAOE", 0), PointWithOffsetPolar(lv_suppressionTargetPt, 0.0, 0.0)), c_orderQueueReplace);
                        UnitIssueOrder(lp_tower, OrderTargetingPoint(AbilityCommand("CybrosEscortTowerMultiAOE", 0), PointWithOffsetPolar(lv_suppressionTargetPt, 3.0, AngleBetweenPoints(UnitGetPosition(lp_tower), lv_suppressionTargetPt))), c_orderQueueReplace);
                        UnitIssueOrder(lp_tower, OrderTargetingPoint(AbilityCommand("CybrosEscortTowerMultiAOE", 0), PointWithOffsetPolar(lv_suppressionTargetPt, 6.0, AngleBetweenPoints(UnitGetPosition(lp_tower), lv_suppressionTargetPt))), c_orderQueueReplace);
                    }
                    TimerStart(lv_multiShotCooldown, gv_suppressionTower_MultiShotCooldown, false, c_timeAI);
                    TimerStart(lv_offsetAttacksTimer, 4.0, false, c_timeAI);
                }

                if (((lp_towerGroupIndex == 2) || (lp_towerGroupIndex == 3) || (lp_towerGroupIndex == 4)) && (TimerGetRemaining(lv_singleShotCooldown) <= 0.0)) {
                    if ((UnitGroupCount(lv_threatGroup, c_unitCountAlive) >= 2)) {
                        lv_purificationTargetIndex = 0;
                        lv_purificationTarget[1] = null;
                        lv_purificationTarget[2] = null;
                        auto004C56A6_g = lv_threatGroup;
                        auto004C56A6_u = UnitGroupCount(auto004C56A6_g, c_unitCountAll);
                        for (;; auto004C56A6_u -= 1) {
                            lv_purificationTargetIter = UnitGroupUnitFromEnd(auto004C56A6_g, auto004C56A6_u);
                            if (lv_purificationTargetIter == null) { break; }
                            if ((UnitGetPropertyFixed(lv_purificationTargetIter, c_unitPropVitalityMax, c_unitPropCurrent) >= 125.0)) {
                                lv_purificationTargetIndex += 1;
                                lv_purificationTarget[lv_purificationTargetIndex] = lv_purificationTargetIter;
                                if ((lv_purificationTargetIndex >= 2)) {
                                    break;
                                }

                            }

                        }
                        lv_purificationTargetIndex = 1;
                        for ( ; ( (auto23614AC2_ai >= 0 && lv_purificationTargetIndex <= auto23614AC2_ae) || (auto23614AC2_ai < 0 && lv_purificationTargetIndex >= auto23614AC2_ae) ) ; lv_purificationTargetIndex += auto23614AC2_ai ) {
                            if ((lv_purificationTarget[lv_purificationTargetIndex] == null)) {
                                lv_purificationTarget[lv_purificationTargetIndex] = UnitGroupRandomUnit(lv_threatGroup, c_unitCountAlive);
                            }

                        }
                    }
                    else {
                        lv_purificationTarget[1] = UnitGroupRandomUnit(lv_threatGroup, c_unitCountAlive);
                    }
                    VisRevealArea(UnitGetOwner(lp_tower), RegionCircle(UnitGetPosition(lv_purificationTarget[1]), 2.0), 2.0, false);
                    Wait(0.0625, c_timeAI);
                    UnitIssueOrder(lp_tower, OrderTargetingUnit(AbilityCommand("CybrosEscortTowerSingleTargetLockOn", 0), lv_purificationTarget[1]), c_orderQueueReplace);
                    if ((lp_towerGroupIndex == 4)) {
                        if ((UnitGroupCount(lv_threatGroup, c_unitCountAlive) > 1) && (lv_purificationTarget[1] != lv_purificationTarget[2])) {
                            VisRevealArea(UnitGetOwner(lp_tower), RegionCircle(UnitGetPosition(lv_purificationTarget[2]), 2.0), 2.0, false);
                            Wait(0.0625, c_timeAI);
                            UnitIssueOrder(lp_tower, OrderTargetingUnit(AbilityCommand("CybrosEscortTowerSingleTargetLockOn", 0), lv_purificationTarget[2]), c_orderQueueReplace);
                        }

                    }

                    TimerStart(lv_singleShotCooldown, gv_suppressionTower_SingleShotCooldown, false, c_timeAI);
                    TimerStart(lv_offsetAttacksTimer, 4.0, false, c_timeAI);
                }

            }

            if ((TimerGetRemaining(lv_barrageCooldown) <= 0.0)) {
                if (((UnitGroupCount(lv_threatGroup, c_unitCountAlive) == 0) || ((lv_antiKitingTimerStarted == true) && (TimerGetRemaining(lv_antiKitingTimer) <= 0.0)))) {
                    UnitIssueOrder(lp_tower, OrderTargetingUnit(AbilityCommand("CybrosEscortTowerMissileVolley", 0), gv_purifierGuardian), c_orderQueueReplace);
                    if ((TimerGetRemaining(lv_enrageTimer) > 0.0)) {
                        TimerStart(lv_barrageCooldown, gv_suppressionTower_BarrageCooldown, false, c_timeAI);
                    }
                    else {
                        TimerStart(lv_barrageCooldown, (gv_suppressionTower_BarrageCooldown * 0.33), false, c_timeAI);
                    }
                }

            }

        }
        else {
            Wait(10.0, c_timeAI);
        }
        Wait(0.5, c_timeAI);
    }
    gv_leaderboardSuppressionTowersActive -= 1;
    return true;
}

trigger auto_gf_AttackWaveatTime_Trigger = null;
fixed auto_gf_AttackWaveatTime_lp_time;
trigger auto_gf_AttackWaveatTime_lp_aIAttackWave;

void gf_AttackWaveatTime (fixed lp_time, trigger lp_aIAttackWave) {
    auto_gf_AttackWaveatTime_lp_time = lp_time;
    auto_gf_AttackWaveatTime_lp_aIAttackWave = lp_aIAttackWave;

    if (auto_gf_AttackWaveatTime_Trigger == null) {
        auto_gf_AttackWaveatTime_Trigger = TriggerCreate("auto_gf_AttackWaveatTime_TriggerFunc");
    }

    TriggerExecute(auto_gf_AttackWaveatTime_Trigger, false, false);
}

bool auto_gf_AttackWaveatTime_TriggerFunc (bool testConds, bool runActions) {
    fixed lp_time = auto_gf_AttackWaveatTime_lp_time;
    trigger lp_aIAttackWave = auto_gf_AttackWaveatTime_lp_aIAttackWave;

    // Variable Declarations
    fixed lv_attackWaveVariance;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    while (!((lp_time <= GameGetMissionTime()))) {
        Wait(0.3, c_timeAI);
    }
    if ((libCOMI_gf_GameIsOver() == false)) {
        TriggerExecute(lp_aIAttackWave, true, false);
    }

    return true;
}

point gf_EscortHarassDropLocation (int lp_lockIndex, int lp_firstLocation, int lp_lastLocation) {
    // Variable Declarations
    int lv_lockDropIter;
    int[8] lv_possibleDropLocations;
    int lv_dropLocationCount;
    int lv_dropLocationIndex;
    int lv_testDropLocation;
    point lv_testPoint;
    int lv_tempLocationIndex;

    // Automatic Variable Declarations
    int autoD55E624C_ae;
    const int autoD55E624C_ai = 1;

    // Variable Initialization

    // Implementation
    autoD55E624C_ae = lp_lastLocation;
    lv_lockDropIter = lp_firstLocation;
    for ( ; ( (autoD55E624C_ai >= 0 && lv_lockDropIter <= autoD55E624C_ae) || (autoD55E624C_ai < 0 && lv_lockDropIter >= autoD55E624C_ae) ) ; lv_lockDropIter += autoD55E624C_ai ) {
        lv_dropLocationCount += 1;
        lv_possibleDropLocations[lv_dropLocationCount] = lv_lockDropIter;
    }
    while ((lv_dropLocationCount > 0)) {
        lv_dropLocationIndex = RandomInt(1, lv_dropLocationCount);
        lv_testDropLocation = lv_possibleDropLocations[lv_dropLocationIndex];
        lv_testPoint = PointFromName(("Lock" + IntToString(lp_lockIndex) + "_Pt" + IntToString(lv_testDropLocation)));
        if ((UnitGroupCount(UnitGroupAlliance(gv_pLAYER_03_Player01Enemy, c_unitAllianceEnemy, RegionCircle(lv_testPoint, 12.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
            return lv_testPoint;
        }
        else {
            lv_tempLocationIndex = lv_possibleDropLocations[lv_dropLocationCount];
            lv_possibleDropLocations[lv_dropLocationCount] = lv_possibleDropLocations[lv_dropLocationIndex];
            lv_possibleDropLocations[lv_dropLocationIndex] = lv_tempLocationIndex;
            lv_dropLocationCount -= 1;
        }
    }
    return PointFromName(("Lock" + IntToString(lp_lockIndex) + "_Pt" + IntToString(RandomInt(lp_firstLocation, lp_lastLocation))));
}

trigger auto_gf_SpawnHarassWavesatLocation_Trigger = null;
int auto_gf_SpawnHarassWavesatLocation_lp_lockNumber;
int auto_gf_SpawnHarassWavesatLocation_lp_lockMaxSpawnPointNum;
int auto_gf_SpawnHarassWavesatLocation_lp_resourceAmount;
int auto_gf_SpawnHarassWavesatLocation_lp_techLevel;
unit auto_gf_SpawnHarassWavesatLocation_lp_harassTarget;

void gf_SpawnHarassWavesatLocation (int lp_lockNumber, int lp_lockMaxSpawnPointNum, int lp_resourceAmount, int lp_techLevel, unit lp_harassTarget) {
    auto_gf_SpawnHarassWavesatLocation_lp_lockNumber = lp_lockNumber;
    auto_gf_SpawnHarassWavesatLocation_lp_lockMaxSpawnPointNum = lp_lockMaxSpawnPointNum;
    auto_gf_SpawnHarassWavesatLocation_lp_resourceAmount = lp_resourceAmount;
    auto_gf_SpawnHarassWavesatLocation_lp_techLevel = lp_techLevel;
    auto_gf_SpawnHarassWavesatLocation_lp_harassTarget = lp_harassTarget;

    if (auto_gf_SpawnHarassWavesatLocation_Trigger == null) {
        auto_gf_SpawnHarassWavesatLocation_Trigger = TriggerCreate("auto_gf_SpawnHarassWavesatLocation_TriggerFunc");
    }

    TriggerExecute(auto_gf_SpawnHarassWavesatLocation_Trigger, false, false);
}

bool auto_gf_SpawnHarassWavesatLocation_TriggerFunc (bool testConds, bool runActions) {
    int lp_lockNumber = auto_gf_SpawnHarassWavesatLocation_lp_lockNumber;
    int lp_lockMaxSpawnPointNum = auto_gf_SpawnHarassWavesatLocation_lp_lockMaxSpawnPointNum;
    int lp_resourceAmount = auto_gf_SpawnHarassWavesatLocation_lp_resourceAmount;
    int lp_techLevel = auto_gf_SpawnHarassWavesatLocation_lp_techLevel;
    unit lp_harassTarget = auto_gf_SpawnHarassWavesatLocation_lp_harassTarget;

    // Variable Declarations
    point lv_attackWaveSpawnLocation;
    int lv_resourceAmount;
    int lv_techLevel;
    unitgroup lv_attackWaveGroup;
    unit lv_attackWaveIter;

    // Automatic Variable Declarations
    unitgroup auto541ECAD9_g;
    int auto541ECAD9_u;

    // Variable Initialization
    lv_resourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
    lv_techLevel = libCOMI_ge_CoopAITechLevelBuckets__1Early;
    lv_attackWaveGroup = UnitGroupEmpty();

    // Implementation
    lv_resourceAmount = lp_resourceAmount;
    lv_techLevel = lp_techLevel;
    lv_attackWaveSpawnLocation = gf_EscortHarassDropLocation(lp_lockNumber, 1, lp_lockMaxSpawnPointNum);
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_Player01Enemy, gv_pLAYER_04_Player02Enemy, lv_resourceAmount, lv_techLevel, lv_attackWaveSpawnLocation, false);
    UnitGroupAddUnitGroup(lv_attackWaveGroup, libCOMI_gf_LastCreatedCoopAttackForce());
    auto541ECAD9_g = lv_attackWaveGroup;
    auto541ECAD9_u = UnitGroupCount(auto541ECAD9_g, c_unitCountAll);
    for (;; auto541ECAD9_u -= 1) {
        lv_attackWaveIter = UnitGroupUnitFromEnd(auto541ECAD9_g, auto541ECAD9_u);
        if (lv_attackWaveIter == null) { break; }
        UnitBehaviorAdd(lv_attackWaveIter, "PurifierWarpIn", lv_attackWaveIter, 1);
    }
    Wait(8.0, c_timeGame);
    AIAttackWaveSetTargetUnit(gv_pLAYER_03_Player01Enemy, lp_harassTarget);
    AIAttackWaveSetTargetUnit(gv_pLAYER_04_Player02Enemy, lp_harassTarget);
    if ((lp_harassTarget == gv_purifierGuardian)) {
        libCOMI_gf_SendAttackWaveusingCoopAttackForceWaveAttackTargetType(lv_attackWaveGroup, 0, true, libCOMI_ge_CM_CoopAI_WaveAttackTargetType_Objective);
    }
    else {
        libCOMI_gf_SendAttackWaveusingCoopAttackForceWaveAttackTargetType(lv_attackWaveGroup, 0, true, libCOMI_ge_CM_CoopAI_WaveAttackTargetType_BonusObjective);
    }
    return true;
}

trigger auto_gf_SpawnSuppressionTower_Trigger = null;
point auto_gf_SpawnSuppressionTower_lp_spawnLocation;

void gf_SpawnSuppressionTower (point lp_spawnLocation) {
    auto_gf_SpawnSuppressionTower_lp_spawnLocation = lp_spawnLocation;

    if (auto_gf_SpawnSuppressionTower_Trigger == null) {
        auto_gf_SpawnSuppressionTower_Trigger = TriggerCreate("auto_gf_SpawnSuppressionTower_TriggerFunc");
    }

    TriggerExecute(auto_gf_SpawnSuppressionTower_Trigger, false, false);
}

bool auto_gf_SpawnSuppressionTower_TriggerFunc (bool testConds, bool runActions) {
    point lp_spawnLocation = auto_gf_SpawnSuppressionTower_lp_spawnLocation;

    // Variable Declarations
    unit lv_defenseTower;

    // Automatic Variable Declarations
    unitgroup auto8B12FE5D_g;
    int auto8B12FE5D_u;
    unit auto8B12FE5D_var;

    // Variable Initialization

    // Implementation
    auto8B12FE5D_g = UnitGroup("CybrosEscortTowerDown", c_playerAny, RegionCircle(lp_spawnLocation, 5.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1);
    auto8B12FE5D_u = UnitGroupCount(auto8B12FE5D_g, c_unitCountAll);
    for (;; auto8B12FE5D_u -= 1) {
        auto8B12FE5D_var = UnitGroupUnitFromEnd(auto8B12FE5D_g, auto8B12FE5D_u);
        if (auto8B12FE5D_var == null) { break; }
        lv_defenseTower = auto8B12FE5D_var;
    }
    UnitIssueOrder(lv_defenseTower, Order(AbilityCommand("MorphToCybrosEscortTowerUp", 0)), c_orderQueueReplace);
    UnitSetPropertyFixed(lv_defenseTower, c_unitPropLifeMax, gv_towerHealth);
    UnitSetPropertyFixed(lv_defenseTower, c_unitPropLifePercent, 100.0);
    UnitSetPropertyFixed(lv_defenseTower, c_unitPropShieldsMax, gv_towerShields);
    UnitSetPropertyFixed(lv_defenseTower, c_unitPropShieldsPercent, 100.0);
    libCOMI_gf_CreatePingFacingAngleCoop(libCOMI_gf_HumanPlayers(), UnitGetPosition(lv_defenseTower), 270.0, "PingBoss", Color(100.00, 0.00, 0.00), 0.0);
    libHots_gf_StorePingForUnit(lv_defenseTower, 1, PingLastCreated());
    PingSetTooltip(PingLastCreated(), UnitTypeGetName(UnitGetType(lv_defenseTower)));
    PingSetScale(PingLastCreated(), 0.8);
    UnitGroupAdd(gv_suppressionTowerUnits[gv_purifierLockIndex], lv_defenseTower);
    gf_SuppressionTowerController(lv_defenseTower, gv_purifierLockIndex);
    return true;
}

trigger auto_gf_SendPurifierGuardian_Trigger = null;
unit auto_gf_SendPurifierGuardian_lp_escortUnit;
point auto_gf_SendPurifierGuardian_lp_destination;
int auto_gf_SendPurifierGuardian_lp_lockNumber;

void gf_SendPurifierGuardian (unit lp_escortUnit, point lp_destination, int lp_lockNumber) {
    auto_gf_SendPurifierGuardian_lp_escortUnit = lp_escortUnit;
    auto_gf_SendPurifierGuardian_lp_destination = lp_destination;
    auto_gf_SendPurifierGuardian_lp_lockNumber = lp_lockNumber;

    if (auto_gf_SendPurifierGuardian_Trigger == null) {
        auto_gf_SendPurifierGuardian_Trigger = TriggerCreate("auto_gf_SendPurifierGuardian_TriggerFunc");
    }

    TriggerExecute(auto_gf_SendPurifierGuardian_Trigger, false, false);
}

bool auto_gf_SendPurifierGuardian_TriggerFunc (bool testConds, bool runActions) {
    unit lp_escortUnit = auto_gf_SendPurifierGuardian_lp_escortUnit;
    point lp_destination = auto_gf_SendPurifierGuardian_lp_destination;
    int lp_lockNumber = auto_gf_SendPurifierGuardian_lp_lockNumber;

    // Variable Declarations
    point lv_escortunitPosition;
    point lv_escortUnitDestination;
    point lv_escortUnitStart;
    int lv_lockIndex;
    int lv_pathIndex;
    point lv_nextPathPoint;

    // Automatic Variable Declarations
    fixed auto791FC5D1_at;

    // Variable Initialization

    // Implementation
    lv_escortunitPosition = UnitGetPosition(lp_escortUnit);
    if ((UnitIsAlive(lp_escortUnit) == false)) {
        libCOMI_gf_DestroyPingCoop(libHots_gf_PingStoredForUnit(lp_escortUnit, 1));
        return true;
    }

    if ((lp_destination == null)) {
        return true;
    }

    lv_escortUnitDestination = lp_destination;
    lv_lockIndex = lp_lockNumber;
    while ((UnitIsAlive(lp_escortUnit) == true) && (libNtve_gf_UnitInRegion(lp_escortUnit, RegionCircle(lv_escortUnitDestination, 0.1)) == false)) {
        lv_nextPathPoint = null;
        lv_nextPathPoint = PointFromName(("Path" + IntToString(lv_lockIndex) + "_" + IntToString((lv_pathIndex + 1))));
        if ((lv_nextPathPoint != null)) {
            if ((DistanceBetweenPoints(UnitGetPosition(lp_escortUnit), lv_nextPathPoint) <= 0.5)) {
                lv_pathIndex += 1;
                lv_nextPathPoint = PointFromName(("Path" + IntToString(lv_lockIndex) + "_" + IntToString(lv_pathIndex)));
                if ((lv_nextPathPoint == null)) {
                    lv_nextPathPoint = lv_escortUnitDestination;
                }

            }

        }
        else {
            lv_nextPathPoint = lv_escortUnitDestination;
        }
        UnitIssueOrder(lp_escortUnit, OrderTargetingPoint(AbilityCommand("move", 0), lv_nextPathPoint), c_orderQueueReplace);
        lv_escortunitPosition = UnitGetPosition(lp_escortUnit);
        Wait(0.1, c_timeGame);
    }
    if ((UnitIsAlive(lp_escortUnit) == false)) {
        libCOMI_gf_DestroyPingCoop(libHots_gf_PingStoredForUnit(lp_escortUnit, 1));
        return true;
    }

    gv_purifierArrivedAtLock[lp_lockNumber] = true;
    UnitIssueOrder(lp_escortUnit, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    TriggerExecute(gt_PurifierGuardianHoldoutStartQ, true, false);
    gf_DisplayPurifierProgressBar(lp_escortUnit, FixedToInt(gv_purifierLockTimerDuration));
    UnitAbilityEnable(lp_escortUnit, "move", false);
    auto791FC5D1_at = 0;
    while (!((UnitIsAlive(lp_escortUnit) == false)) && auto791FC5D1_at <= gv_purifierLockTimerDuration) {
        Wait(1.0, c_timeGame);
        auto791FC5D1_at = auto791FC5D1_at + 1.0;
    }
    if ((UnitIsAlive(lp_escortUnit) == false)) {
        libCOMI_gf_DestroyPingCoop(libHots_gf_PingStoredForUnit(lp_escortUnit, 1));
        return true;
    }
    else {
        UnitAbilityEnable(lp_escortUnit, "move", true);
    }
    return true;
}

trigger auto_gf_PingandRevealLockLocation_Trigger = null;
point auto_gf_PingandRevealLockLocation_lp_lockPingPoint;
unit auto_gf_PingandRevealLockLocation_lp_lockUnit;

void gf_PingandRevealLockLocation (point lp_lockPingPoint, unit lp_lockUnit) {
    auto_gf_PingandRevealLockLocation_lp_lockPingPoint = lp_lockPingPoint;
    auto_gf_PingandRevealLockLocation_lp_lockUnit = lp_lockUnit;

    if (auto_gf_PingandRevealLockLocation_Trigger == null) {
        auto_gf_PingandRevealLockLocation_Trigger = TriggerCreate("auto_gf_PingandRevealLockLocation_TriggerFunc");
    }

    TriggerExecute(auto_gf_PingandRevealLockLocation_Trigger, false, false);
}

bool auto_gf_PingandRevealLockLocation_TriggerFunc (bool testConds, bool runActions) {
    point lp_lockPingPoint = auto_gf_PingandRevealLockLocation_lp_lockPingPoint;
    unit lp_lockUnit = auto_gf_PingandRevealLockLocation_lp_lockUnit;

    // Variable Declarations
    int lv_destinationLock_Ping;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_destinationLock_Ping = c_invalidPingId;

    // Implementation
    libCOMI_gf_CreatePingCoop(libCOMI_gf_HumanPlayers(), "PingAlert", lp_lockPingPoint, Color(0.00, 100.00, 0.00), 0.0);
    lv_destinationLock_Ping = PingLastCreated();
    PingSetTooltip(lv_destinationLock_Ping, StringExternal("Param/Value/B8B9FEAF"));
    PingSetScale(lv_destinationLock_Ping, 0.7);
    VisRevealArea(gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(lp_lockUnit), 5.0), 0.1, false);
    VisRevealArea(gv_pLAYER_02_USER, RegionCircle(UnitGetPosition(lp_lockUnit), 5.0), 0.1, false);
    while (!(((UnitIsAlive(gv_purifierGuardian) == false) || (libNtve_gf_UnitInRegion(gv_purifierGuardian, RegionCircle(lp_lockPingPoint, 15.0)) == true)))) {
        Wait(1.0, c_timeGame);
    }
    libCOMI_gf_DestroyPingCoop(lv_destinationLock_Ping);
    return true;
}

trigger auto_gf_DisplayPurifierProgressBar_Trigger = null;
unit auto_gf_DisplayPurifierProgressBar_lp_escortUnit;
int auto_gf_DisplayPurifierProgressBar_lp_duration;

void gf_DisplayPurifierProgressBar (unit lp_escortUnit, int lp_duration) {
    auto_gf_DisplayPurifierProgressBar_lp_escortUnit = lp_escortUnit;
    auto_gf_DisplayPurifierProgressBar_lp_duration = lp_duration;

    if (auto_gf_DisplayPurifierProgressBar_Trigger == null) {
        auto_gf_DisplayPurifierProgressBar_Trigger = TriggerCreate("auto_gf_DisplayPurifierProgressBar_TriggerFunc");
    }

    TriggerExecute(auto_gf_DisplayPurifierProgressBar_Trigger, false, false);
}

bool auto_gf_DisplayPurifierProgressBar_TriggerFunc (bool testConds, bool runActions) {
    unit lp_escortUnit = auto_gf_DisplayPurifierProgressBar_lp_escortUnit;
    int lp_duration = auto_gf_DisplayPurifierProgressBar_lp_duration;

    // Variable Declarations
    unit lv_barDummy;
    unit lv_nearestLockUnit;

    // Automatic Variable Declarations
    unitgroup auto3E1448FB_g;
    int auto3E1448FB_u;
    unit auto3E1448FB_var;

    // Variable Initialization

    // Implementation
    auto3E1448FB_g = UnitGroup("CybrosLock", c_playerAny, RegionCircle(UnitGetPosition(gv_purifierGuardian), 10.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1);
    auto3E1448FB_u = UnitGroupCount(auto3E1448FB_g, c_unitCountAll);
    for (;; auto3E1448FB_u -= 1) {
        auto3E1448FB_var = UnitGroupUnitFromEnd(auto3E1448FB_g, auto3E1448FB_u);
        if (auto3E1448FB_var == null) { break; }
        lv_nearestLockUnit = auto3E1448FB_var;
    }
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "ProgressBarWideDummy", 0, UnitGetOwner(lp_escortUnit), PointWithOffset(UnitGetPosition(lp_escortUnit), -1.25, 0.0));
    lv_barDummy = UnitLastCreated();
    libCOMI_gf_DisplayUnitProgressBar(lv_barDummy, StringExternal("Param/Value/F75CDD53"), 0, lp_duration);
    TimerStart(gv_purifierGuardianChannelingTimer, lp_duration, false, c_timeAI);
    libCOMI_gf_SetUnitProgressBarIsWideBar(lv_barDummy, true);
    UnitIssueOrder(gv_purifierGuardian, OrderTargetingUnit(AbilityCommand("VirusCureBeam", 0), lv_nearestLockUnit), c_orderQueueReplace);
    while ((TimerGetRemaining(gv_purifierGuardianChannelingTimer) > 0.0) && (UnitIsAlive(gv_purifierGuardian) == true)) {
        libCOMI_gf_SetUnitProgressBarProgress(lv_barDummy, FixedToInt(TimerGetElapsed(gv_purifierGuardianChannelingTimer)));
        if ((TimerIsPaused(gv_purifierGuardianChannelingTimer) == true)) {
            libCOMI_gf_ShowHideUnitProgressBar2(lv_barDummy, false);
            libCOMI_gf_SetUnitProgresBarTitle(lv_barDummy, TextExpressionAssemble("Param/Expression/D1A230ED"));
            TextExpressionSetToken("Param/Expression/151B9A0C", "A", TextWithColor(StringExternal("Param/Value/125AF134"), Color(100.00, 100.00, 0.00)));
            libCOMI_gf_SetMissionObjectiveCustomText("AC_CybrosEscort_Primary01", TextExpressionAssemble("Param/Expression/151B9A0C"));
            UnitIssueOrder(gv_purifierGuardian, Order(AbilityCommand("VirusCureBeam", 1)), c_orderQueueReplace);
        }
        else {
            libCOMI_gf_SetUnitProgresBarTitle(lv_barDummy, StringExternal("Param/Value/831FDCC2"));
            libCOMI_gf_ShowHideUnitProgressBar2(lv_barDummy, true);
            libCOMI_gf_SetUnitProgressBarProgress2(lv_barDummy, FixedToInt(TimerGetRemaining(gv_purifierGuardianChannelingTimer)));
            TextExpressionSetToken("Param/Expression/4E43B4E2", "A", TextWithColor(TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), FixedToInt(TimerGetRemaining(gv_purifierGuardianChannelingTimer))), Color(100.00, 100.00, 0.00)));
            libCOMI_gf_SetMissionObjectiveCustomText("AC_CybrosEscort_Primary01", TextExpressionAssemble("Param/Expression/4E43B4E2"));
            UnitIssueOrder(gv_purifierGuardian, OrderTargetingUnit(AbilityCommand("VirusCureBeam", 0), lv_nearestLockUnit), c_orderQueueReplace);
        }
        Wait(1.0, c_timeAI);
    }
    while (!(((TimerGetRemaining(gv_purifierGuardianChannelingTimer) <= 0.0) || (UnitIsAlive(gv_purifierGuardian) == false)))) {
        Wait(1.0, c_timeAI);
    }
    libCOMI_gf_SetMissionObjectiveCustomText("AC_CybrosEscort_Primary01", StringToText(""));
    UnitIssueOrder(gv_purifierGuardian, Order(AbilityCommand("VirusCureBeam", 1)), c_orderQueueReplace);
    UnitRemove(lv_barDummy);
    return true;
}

void gf_PurifierGuardianLockLogic (point lp_nextLockPoint, unit lp_currentLockUnit, unit lp_nextLockUnit, int lp_nextLockNum, trigger lp_escortHoldoutTrigger) {
    // Automatic Variable Declarations
    int auto3B81CF3C_val;

    // Implementation
    UnitSetState(gv_purifierGuardian, c_unitStateInvulnerable, true);
    if ((gv_purifierLockIndex == 1)) {
        TriggerExecute(gt_PurifierGuardianHoldoutCompleteFirstQ, true, false);
    }
    else {
        TriggerExecute(gt_PurifierGuardianHoldoutCompleteGenericQ, true, false);
    }
    gf_PingandRevealLockLocation(lp_nextLockPoint, lp_nextLockUnit);
    libNtve_gf_SendActorMessageToUnit(lp_currentLockUnit, "Signal Ready");
    Wait(5.0, c_timeGame);
    UnitIssueOrder(gv_purifierGuardian, OrderTargetingUnit(AbilityCommand("MegalithCutterDock", 0), lp_currentLockUnit), c_orderQueueReplace);
    UnitSetPropertyFixed(gv_purifierGuardian, c_unitPropLifeRegen, 100.0);
    Wait(50.0, c_timeGame);
    UnitSetPropertyFixed(gv_purifierGuardian, c_unitPropLifeRegen, 0.0);
    UnitBehaviorAdd(lp_currentLockUnit, "MegalithDockComplete", gv_purifierGuardian, 1);
    UnitSetState(gv_purifierGuardian, c_unitStateInvulnerable, false);
    TriggerExecute(gt_TurnONallTakingDamageWarningQs, true, false);
    auto3B81CF3C_val = gv_purifierLockIndex;
    if (auto3B81CF3C_val == 2) {
        TriggerExecute(gt_PurifierGuardianAbouttoMovetoMidLockQ, true, false);
    }
    else if (auto3B81CF3C_val == 4) {
        TriggerExecute(gt_PurifierGuardianAbouttoMovetoFinalLockQ, true, false);
    }
    else {
        TriggerExecute(gt_PurifierGuardianAbouttoMoveGenericQ, true, false);
    }
    Wait(20.0, c_timeGame);
    gf_SendPurifierGuardian(gv_purifierGuardian, lp_nextLockPoint, lp_nextLockNum);
    TriggerExecute(gt_PurifierGuardianMovingQ, true, false);
    while (!(((UnitIsAlive(gv_purifierGuardian) == false) || (gv_purifierArrivedAtLock[lp_nextLockNum] == true)))) {
        Wait(1.0, c_timeGame);
    }
    if ((UnitIsAlive(gv_purifierGuardian) == false)) {
        return ;
    }

    TriggerExecute(lp_escortHoldoutTrigger, true, false);
    while (!(((UnitIsAlive(gv_purifierGuardian) == false) || (TimerGetRemaining(gv_purifierGuardianChannelingTimer) <= 0.0)))) {
        Wait(0.1, c_timeGame);
    }
    if ((UnitIsAlive(gv_purifierGuardian) == false)) {
        return ;
    }

    gv_purifierLockIndex = (gv_purifierLockIndex + 1);
    TriggerExecute(gt_ObjectiveActivatePurifierLocksUpdate, true, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective DownloadBackups 1 Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDownloadBackups1Create_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_CreateObjectiveCampaign("AC_CybrosEscort_Bonus01");
    gv_objectiveRescueStalkers3 = ObjectiveLastCreated();
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDownloadBackups1Create_Init () {
    gt_ObjectiveDownloadBackups1Create = TriggerCreate("gt_ObjectiveDownloadBackups1Create_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective DownloadBackups 1 Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDownloadBackups1Complete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveDownloadBackups1Create, true, false);
    libCOMI_gf_ZS_SetMissionObjectiveState("AC_CybrosEscort_Bonus01", libCOMI_ge_MissionObjectiveState_Completed);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDownloadBackups1Complete_Init () {
    gt_ObjectiveDownloadBackups1Complete = TriggerCreate("gt_ObjectiveDownloadBackups1Complete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective DownloadBackups 1 Update
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDownloadBackups1Update_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_ObjectiveDownloadBackups1Create, true, false);
    TextExpressionSetToken("Param/Expression/186381A7", "coloredTime", TextWithColor(TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), FixedToInt(TimerGetRemaining(gv_bonus1Timer))), Color(100.00, 100.00, 0.00)));
    libCOMI_gf_SetMissionObjectiveCustomText("AC_CybrosEscort_Bonus01", TextExpressionAssemble("Param/Expression/186381A7"));
    libCOMI_gf_SetMissionObjectiveProgress("AC_CybrosEscort_Bonus01", gv_downloadIter1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDownloadBackups1Update_Init () {
    gt_ObjectiveDownloadBackups1Update = TriggerCreate("gt_ObjectiveDownloadBackups1Update_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective DownloadBackups 1 Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDownloadBackups1Failed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_ObjectiveDownloadBackups1Create, true, false);
    libCOMI_gf_ZS_SetMissionObjectiveState("AC_CybrosEscort_Bonus01", libCOMI_ge_MissionObjectiveState_Failed);
    libCOMI_gf_SetMissionObjectiveCustomText("AC_CybrosEscort_Bonus01", StringToText(""));
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDownloadBackups1Failed_Init () {
    gt_ObjectiveDownloadBackups1Failed = TriggerCreate("gt_ObjectiveDownloadBackups1Failed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective DownloadBackups 2 Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDownloadBackups2Create_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_CreateObjectiveCampaign("AC_CybrosEscort_Bonus02");
    gv_objectiveRescueStalkers4 = ObjectiveLastCreated();
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDownloadBackups2Create_Init () {
    gt_ObjectiveDownloadBackups2Create = TriggerCreate("gt_ObjectiveDownloadBackups2Create_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective DownloadBackups 2 Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDownloadBackups2Complete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveDownloadBackups2Create, true, false);
    libCOMI_gf_ZS_SetMissionObjectiveState("AC_CybrosEscort_Bonus02", libCOMI_ge_MissionObjectiveState_Completed);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDownloadBackups2Complete_Init () {
    gt_ObjectiveDownloadBackups2Complete = TriggerCreate("gt_ObjectiveDownloadBackups2Complete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective DownloadBackups 2 Update
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDownloadBackups2Update_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_ObjectiveDownloadBackups2Create, true, false);
    TextExpressionSetToken("Param/Expression/D0D4FA48", "coloredTime", TextWithColor(TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), FixedToInt(TimerGetRemaining(gv_bonus2Timer))), Color(100.00, 100.00, 0.00)));
    libCOMI_gf_SetMissionObjectiveCustomText("AC_CybrosEscort_Bonus02", TextExpressionAssemble("Param/Expression/D0D4FA48"));
    libCOMI_gf_SetMissionObjectiveProgress("AC_CybrosEscort_Bonus02", gv_downloadIter2);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDownloadBackups2Update_Init () {
    gt_ObjectiveDownloadBackups2Update = TriggerCreate("gt_ObjectiveDownloadBackups2Update_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective DownloadBackups 2 Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDownloadBackups2Failed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_ObjectiveDownloadBackups2Create, true, false);
    libCOMI_gf_ZS_SetMissionObjectiveState("AC_CybrosEscort_Bonus02", libCOMI_ge_MissionObjectiveState_Failed);
    libCOMI_gf_SetMissionObjectiveCustomText("AC_CybrosEscort_Bonus02", StringToText(""));
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDownloadBackups2Failed_Init () {
    gt_ObjectiveDownloadBackups2Failed = TriggerCreate("gt_ObjectiveDownloadBackups2Failed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Purifier Guardian Must Survive Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectivePurifierGuardianMustSurviveCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_CreateObjectiveCampaign("AC_CybrosEscort_Primary02");
    gv_objectiveDestroyZergBase2 = ObjectiveLastCreated();
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectivePurifierGuardianMustSurviveCreate_Init () {
    gt_ObjectivePurifierGuardianMustSurviveCreate = TriggerCreate("gt_ObjectivePurifierGuardianMustSurviveCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Purifier Guardian Must Survive Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectivePurifierGuardianMustSurviveComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectivePurifierGuardianMustSurviveCreate, true, false);
    libCOMI_gf_ZS_SetMissionObjectiveState("AC_CybrosEscort_Primary02", libCOMI_ge_MissionObjectiveState_Completed);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectivePurifierGuardianMustSurviveComplete_Init () {
    gt_ObjectivePurifierGuardianMustSurviveComplete = TriggerCreate("gt_ObjectivePurifierGuardianMustSurviveComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Purifier Guardian Must Survive Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectivePurifierGuardianMustSurviveFailed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectivePurifierGuardianMustSurviveCreate, true, false);
    libCOMI_gf_ZS_SetMissionObjectiveState("AC_CybrosEscort_Primary02", libCOMI_ge_MissionObjectiveState_Failed);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectivePurifierGuardianMustSurviveFailed_Init () {
    gt_ObjectivePurifierGuardianMustSurviveFailed = TriggerCreate("gt_ObjectivePurifierGuardianMustSurviveFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Activate Purifier Locks Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveActivatePurifierLocksCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_CreateObjectiveCampaign("AC_CybrosEscort_Primary01");
    gv_objectiveDestroyZergBase = ObjectiveLastCreated();
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveActivatePurifierLocksCreate_Init () {
    gt_ObjectiveActivatePurifierLocksCreate = TriggerCreate("gt_ObjectiveActivatePurifierLocksCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Activate Purifier Locks Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveActivatePurifierLocksComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveActivatePurifierLocksCreate, true, false);
    libCOMI_gf_ZS_SetMissionObjectiveState("AC_CybrosEscort_Primary01", libCOMI_ge_MissionObjectiveState_Completed);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveActivatePurifierLocksComplete_Init () {
    gt_ObjectiveActivatePurifierLocksComplete = TriggerCreate("gt_ObjectiveActivatePurifierLocksComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Activate Purifier Locks Update
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveActivatePurifierLocksUpdate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_ObjectiveActivatePurifierLocksCreate, true, false);
    libCOMI_gf_SetMissionObjectiveProgress("AC_CybrosEscort_Primary01", gv_purifierLockIndex);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveActivatePurifierLocksUpdate_Init () {
    gt_ObjectiveActivatePurifierLocksUpdate = TriggerCreate("gt_ObjectiveActivatePurifierLocksUpdate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Activate Purifier Locks Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveActivatePurifierLocksFailed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveActivatePurifierLocksCreate, true, false);
    libCOMI_gf_ZS_SetMissionObjectiveState("AC_CybrosEscort_Primary01", libCOMI_ge_MissionObjectiveState_Failed);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveActivatePurifierLocksFailed_Init () {
    gt_ObjectiveActivatePurifierLocksFailed = TriggerCreate("gt_ObjectiveActivatePurifierLocksFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ScoreScreen - Harvester Damage
//--------------------------------------------------------------------------------------------------
bool gt_ScoreScreenHarvesterDamage_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_05_PurifierGuardian))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "MegalithCutter"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_scoreScreen_PurifierDamage += EventUnitDamageAmount();
    PlayerScoreValueSetFromFixed(gv_pLAYER_01_USER, "CybrosEscortGuardianHealth", gv_scoreScreen_PurifierDamage);
    PlayerScoreValueSetFromFixed(gv_pLAYER_02_USER, "CybrosEscortGuardianHealth", gv_scoreScreen_PurifierDamage);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ScoreScreenHarvesterDamage_Init () {
    gt_ScoreScreenHarvesterDamage = TriggerCreate("gt_ScoreScreenHarvesterDamage_Func");
    TriggerAddEventUnitDamaged(gt_ScoreScreenHarvesterDamage, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Suppression Tower Attack Distance
//--------------------------------------------------------------------------------------------------
bool gt_SuppressionTowerAttackDistance_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_distanceToAttacker;
    int lv_towerGroupIter;
    int lv_towerGroupIndex;

    // Automatic Variable Declarations
    const int autoB36BB4B1_ae = gv_pURIFIER_LOCK_COUNT;
    const int autoB36BB4B1_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "CybrosEscortTowerUp"))) {
            return false;
        }

        if (!((libNtve_gf_UnitIsInvulnerable(EventUnitDamageSourceUnit()) == false))) {
            return false;
        }

        if (!((EventUnitDamageSourceUnit() != null))) {
            return false;
        }

        if (!((EventUnit() != null))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_towerGroupIndex = -1;
    lv_towerGroupIter = 0;
    for ( ; ( (autoB36BB4B1_ai >= 0 && lv_towerGroupIter <= autoB36BB4B1_ae) || (autoB36BB4B1_ai < 0 && lv_towerGroupIter >= autoB36BB4B1_ae) ) ; lv_towerGroupIter += autoB36BB4B1_ai ) {
        if ((UnitGroupHasUnit(gv_suppressionTowerUnits[lv_towerGroupIter], EventUnit()) == true)) {
            lv_towerGroupIndex = lv_towerGroupIter;
            break;
        }

    }
    if ((lv_towerGroupIndex <= -1)) {
        return true;
    }

    if ((gv_suppressionTowerAttackRange[lv_towerGroupIndex] > gv_suppressionTowerAttackRange_MAX)) {
        return true;
    }

    lv_distanceToAttacker = DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(EventUnitDamageSourceUnit()));
    if ((lv_distanceToAttacker > gv_suppressionTowerAttackRange[lv_towerGroupIndex])) {
        lv_distanceToAttacker = (lv_distanceToAttacker + 1.5);
        gv_suppressionTowerAttackRange[lv_towerGroupIndex] = MinF(lv_distanceToAttacker, gv_suppressionTowerAttackRange_MAX);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SuppressionTowerAttackDistance_Init () {
    gt_SuppressionTowerAttackDistance = TriggerCreate("gt_SuppressionTowerAttackDistance_Func");
    TriggerAddEventUnitDamaged(gt_SuppressionTowerAttackDistance, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Run Attack Waves
//--------------------------------------------------------------------------------------------------
bool gt_RunAttackWaves_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_AttackWaveatTime((3.6 * 60.0), gt_AttackWave01);
    TriggerEnable(gt_AttackWave02, true);
    TriggerEnable(gt_AttackWave03MainBaseAttack, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RunAttackWaves_Init () {
    gt_RunAttackWaves = TriggerCreate("gt_RunAttackWaves_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave 01
//--------------------------------------------------------------------------------------------------
bool gt_AttackWave01_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceAmount;
    int lv_techLevel;
    point lv_attackWaveSpawnLocation;
    unitgroup lv_attackWaveGroup;
    unit lv_attackWaveIter;

    // Automatic Variable Declarations
    unitgroup auto32F79C40_g;
    int auto32F79C40_u;

    // Variable Initialization
    lv_resourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
    lv_techLevel = libCOMI_ge_CoopAITechLevelBuckets__1Early;
    lv_attackWaveGroup = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GetMissionDifficulty() != 1))) {
            return false;
        }

        if (!((libCOMI_gf_GetMissionDifficulty() != 2))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    AIAttackWaveSetTargetPoint(gv_pLAYER_03_Player01Enemy, PlayerStartLocation(gv_pLAYER_01_USER));
    AIAttackWaveSetTargetPoint(gv_pLAYER_04_Player02Enemy, PlayerStartLocation(gv_pLAYER_02_USER));
    lv_resourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
    lv_techLevel = libCOMI_ge_CoopAITechLevelBuckets__1Early;
    if ((RandomFixed(0.0, 100.0) <= 50.0)) {
        lv_attackWaveSpawnLocation = PointFromId(1427834147);
        gv_wave02_AttackSpawnPt = PointFromId(1617126532);
    }
    else {
        lv_attackWaveSpawnLocation = PointFromId(1617126532);
        gv_wave02_AttackSpawnPt = PointFromId(1427834147);
    }
    TriggerExecute(gt_EnemyAttackingFirstQ, true, false);
    Wait(10.0, c_timeGame);
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_Player01Enemy, gv_pLAYER_04_Player02Enemy, lv_resourceAmount, lv_techLevel, lv_attackWaveSpawnLocation, false);
    UnitGroupAddUnitGroup(lv_attackWaveGroup, libCOMI_gf_LastCreatedCoopAttackForce());
    auto32F79C40_g = lv_attackWaveGroup;
    auto32F79C40_u = UnitGroupCount(auto32F79C40_g, c_unitCountAll);
    for (;; auto32F79C40_u -= 1) {
        lv_attackWaveIter = UnitGroupUnitFromEnd(auto32F79C40_g, auto32F79C40_u);
        if (lv_attackWaveIter == null) { break; }
        UnitBehaviorAdd(lv_attackWaveIter, "PurifierWarpIn", lv_attackWaveIter, 1);
    }
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    libNtve_gf_SendActorMessageToGameRegionWithFilters(RegionCircle(lv_attackWaveSpawnLocation, 3.0), c_actorIntersectAgainstRadiusContact, "Signal WorkOff", "Doodad", "");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWave01_Init () {
    gt_AttackWave01 = TriggerCreate("gt_AttackWave01_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave 02
//--------------------------------------------------------------------------------------------------
bool gt_AttackWave02_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceAmount;
    int lv_techLevel;
    point lv_attackWaveSpawnLocation;
    unitgroup lv_attackWaveGroup;
    unit lv_attackWaveIter;

    // Automatic Variable Declarations
    unitgroup autoD440ECD5_g;
    int autoD440ECD5_u;

    // Variable Initialization
    lv_resourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
    lv_techLevel = libCOMI_ge_CoopAITechLevelBuckets__1Early;
    lv_attackWaveGroup = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    AIAttackWaveSetTargetPoint(gv_pLAYER_03_Player01Enemy, PlayerStartLocation(gv_pLAYER_01_USER));
    AIAttackWaveSetTargetPoint(gv_pLAYER_04_Player02Enemy, PlayerStartLocation(gv_pLAYER_02_USER));
    lv_resourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__3Small;
    lv_techLevel = libCOMI_ge_CoopAITechLevelBuckets__3Mid;
    if ((gv_wave02_AttackSpawnPt == null)) {
        if ((RandomInt(0, 1) == 1)) {
            lv_attackWaveSpawnLocation = PointFromId(1427834147);
        }
        else {
            lv_attackWaveSpawnLocation = PointFromId(1617126532);
        }
    }
    else {
        lv_attackWaveSpawnLocation = gv_wave02_AttackSpawnPt;
    }
    TriggerExecute(gt_EnemyAttackingQ, true, false);
    Wait(5.0, c_timeGame);
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_Player01Enemy, gv_pLAYER_04_Player02Enemy, lv_resourceAmount, lv_techLevel, lv_attackWaveSpawnLocation, false);
    UnitGroupAddUnitGroup(lv_attackWaveGroup, libCOMI_gf_LastCreatedCoopAttackForce());
    autoD440ECD5_g = lv_attackWaveGroup;
    autoD440ECD5_u = UnitGroupCount(autoD440ECD5_g, c_unitCountAll);
    for (;; autoD440ECD5_u -= 1) {
        lv_attackWaveIter = UnitGroupUnitFromEnd(autoD440ECD5_g, autoD440ECD5_u);
        if (lv_attackWaveIter == null) { break; }
        UnitBehaviorAdd(lv_attackWaveIter, "PurifierWarpIn", lv_attackWaveIter, 1);
    }
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    libNtve_gf_SendActorMessageToGameRegionWithFilters(RegionCircle(lv_attackWaveSpawnLocation, 3.0), c_actorIntersectAgainstRadiusContact, "Signal WorkOff", "Doodad", "");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWave02_Init () {
    gt_AttackWave02 = TriggerCreate("gt_AttackWave02_Func");
    TriggerEnable(gt_AttackWave02, false);
    TriggerAddEventUnitRegion(gt_AttackWave02, UnitRefFromVariable("gv_purifierGuardian"), RegionFromId(10), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave 03 - Main Base Attack
//--------------------------------------------------------------------------------------------------
bool gt_AttackWave03MainBaseAttack_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceAmount;
    int lv_techLevel;
    point lv_attackWaveSpawnLocation;
    unitgroup lv_attackWaveGroup;
    unit lv_attackWaveIter;

    // Automatic Variable Declarations
    unitgroup autoBC5872BF_g;
    int autoBC5872BF_u;

    // Variable Initialization
    lv_resourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
    lv_techLevel = libCOMI_ge_CoopAITechLevelBuckets__1Early;
    lv_attackWaveGroup = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    AIAttackWaveSetTargetPoint(gv_pLAYER_03_Player01Enemy, PlayerStartLocation(gv_pLAYER_01_USER));
    AIAttackWaveSetTargetPoint(gv_pLAYER_04_Player02Enemy, PlayerStartLocation(gv_pLAYER_02_USER));
    lv_resourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__4Medium;
    lv_techLevel = libCOMI_ge_CoopAITechLevelBuckets__4LateMid;
    lv_attackWaveSpawnLocation = PointFromId(610931366);
    TriggerExecute(gt_EnemyAttackingQ, true, false);
    Wait(5.0, c_timeGame);
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_Player01Enemy, gv_pLAYER_04_Player02Enemy, lv_resourceAmount, lv_techLevel, lv_attackWaveSpawnLocation, false);
    UnitGroupAddUnitGroup(lv_attackWaveGroup, libCOMI_gf_LastCreatedCoopAttackForce());
    autoBC5872BF_g = lv_attackWaveGroup;
    autoBC5872BF_u = UnitGroupCount(autoBC5872BF_g, c_unitCountAll);
    for (;; autoBC5872BF_u -= 1) {
        lv_attackWaveIter = UnitGroupUnitFromEnd(autoBC5872BF_g, autoBC5872BF_u);
        if (lv_attackWaveIter == null) { break; }
        UnitBehaviorAdd(lv_attackWaveIter, "PurifierWarpIn", lv_attackWaveIter, 1);
    }
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    libNtve_gf_SendActorMessageToGameRegionWithFilters(RegionCircle(lv_attackWaveSpawnLocation, 3.0), c_actorIntersectAgainstRadiusContact, "Signal WorkOff", "Doodad", "");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWave03MainBaseAttack_Init () {
    gt_AttackWave03MainBaseAttack = TriggerCreate("gt_AttackWave03MainBaseAttack_Func");
    TriggerEnable(gt_AttackWave03MainBaseAttack, false);
    TriggerAddEventUnitRegion(gt_AttackWave03MainBaseAttack, UnitRefFromVariable("gv_purifierGuardian"), RegionFromId(11), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Enemy Attacking First Q
//--------------------------------------------------------------------------------------------------
bool gt_EnemyAttackingFirstQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("FirstAttackWaveCE", true, -1);
    Wait(2.0, c_timeGame);
    libCOMI_gf_SendMissionTransmission("AttackWave", true, RandomInt(gv_pLAYER_01_USER, gv_pLAYER_02_USER));
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    Wait(20.0, c_timeAI);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EnemyAttackingFirstQ_Init () {
    gt_EnemyAttackingFirstQ = TriggerCreate("gt_EnemyAttackingFirstQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Enemy Attacking Q
//--------------------------------------------------------------------------------------------------
bool gt_EnemyAttackingQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("AttackWave", true, RandomInt(gv_pLAYER_01_USER, gv_pLAYER_02_USER));
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    Wait(20.0, c_timeAI);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EnemyAttackingQ_Init () {
    gt_EnemyAttackingQ = TriggerCreate("gt_EnemyAttackingQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Primary Objective Failed
//--------------------------------------------------------------------------------------------------
bool gt_DefeatPrimaryObjectiveFailed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_BeforeFanfare(c_gameOverVictory);
    libCOMI_gf_SendVictoryTransmission("DefeatCE");
    libCOMI_gf_DisplayCampaignMessage(libCOMI_gf_HumanPlayers(), libCOMI_ge_CampaignMessageType_MissionVictory, StringExternal("Param/Value/35397E95"), libCOMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
    libCOMI_gf_MoveCameraForAllPlayers(gv_purifierDeathPoint, 2.0);
    ;
    libCOMI_gf_AfterFanfare(c_gameOverVictory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatPrimaryObjectiveFailed_Init () {
    gt_DefeatPrimaryObjectiveFailed = TriggerCreate("gt_DefeatPrimaryObjectiveFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Activate Purifier Locks Completed
//--------------------------------------------------------------------------------------------------
bool gt_VictoryActivatePurifierLocksCompleted_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/541B7CC5"), StringExternal("Param/Value/B7F25150"));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/E0AE489E"), StringToText(""));
    libCOMI_gf_BeforeFanfare(c_gameOverVictory);
    libCOMI_gf_SendVictoryTransmission("VictoryCE");
    libCOMI_gf_DisplayCampaignMessage(libCOMI_gf_HumanPlayers(), libCOMI_ge_CampaignMessageType_MissionVictory, StringExternal("Param/Value/13AFAAA4"), libCOMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
    libCOMI_gf_MoveCameraForAllPlayers(UnitGetPosition(gv_purifierGuardian), 2.0);
    ;
    libCOMI_gf_AfterFanfare(c_gameOverVictory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryActivatePurifierLocksCompleted_Init () {
    gt_VictoryActivatePurifierLocksCompleted = TriggerCreate("gt_VictoryActivatePurifierLocksCompleted_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective DownloadBackups 1 - Initialization
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDownloadBackups1Initialization_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((UnitIsAlive(gv_purifierGuardian) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitSetState(gv_downloadCenter1, c_unitStateInvulnerable, false);
    libCOMI_gf_AttachReticleEffectAndTextTagOnUnit(libCOMI_ge_CampaginReticleType_ProtossBonusObjective, libCOMI_ge_CampaginReticleSize_Large, StringExternal("Param/Value/3C927BBA"), gv_downloadCenter1, "Ref_Center");
    TextTagSetAlignment(TextTagLastCreated(), c_alignCenter, c_alignBottom);
    libHots_gf_StoreActorForUnit(gv_downloadCenter1, 1, libNtve_gf_ActorLastCreated());
    libHots_gf_StoreTextTagForUnit(gv_downloadCenter1, 1, TextTagLastCreated());
    UISetButtonFaceHighlighted(PlayerGroupAll(), "DownloadBackupPart1", true);
    TriggerExecute(gt_ObjectiveDownloadBackups1Create, true, false);
    Wait(2.0, c_timeReal);
    TriggerExecute(gt_ObjectiveDownloadBackups1StartQ, true, false);
    libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_Secondary, UnitGetPosition(gv_downloadCenter1), StringExternal("Param/Value/42313B67"));
    gv_bonus1Ping = PingLastCreated();
    TriggerExecute(gt_ObjectiveDownloadBackups1TimerUpdate, true, false);
    TriggerEnable(gt_DownloadBackups1TimerExpireFail, true);
    TriggerEnable(gt_DownloadBackups1ListenStartDownload, true);
    TriggerEnable(gt_DownloadBackups1ListenCompleteDownload, true);
    TriggerEnable(gt_DownloadCenter1DiesFail, true);
    TriggerEnable(gt_ObjectiveDownloadBackupsUnderAttackQ, true);
    UnitSetOwner(gv_downloadCenter1, gv_pLAYER_09_BonusHostileFlag1, false);
    UnitAbilityEnable(gv_downloadCenter1, "ACGlobalShareUnitNoEnemy", true);
    UnitBehaviorAddPlayer(gv_downloadCenter1, "NoDamageFromCaster", 1, 1);
    UnitBehaviorAddPlayer(gv_downloadCenter1, "NoDamageFromCaster", 2, 1);
    Wait(60.0, c_timeAI);
    TriggerEnable(gt_ObjectiveDownloadBackups1TimeWarningLogicQ, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDownloadBackups1Initialization_Init () {
    gt_ObjectiveDownloadBackups1Initialization = TriggerCreate("gt_ObjectiveDownloadBackups1Initialization_Func");
    TriggerEnable(gt_ObjectiveDownloadBackups1Initialization, false);
    TriggerAddEventUnitRegion(gt_ObjectiveDownloadBackups1Initialization, UnitRefFromVariable("gv_purifierGuardian"), RegionFromId(4), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DownloadBackups 1 Listen Start Download
//--------------------------------------------------------------------------------------------------
bool gt_DownloadBackups1ListenStartDownload_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceAmount;
    int lv_techLevel;

    // Automatic Variable Declarations
    playergroup auto3B1ACF21_g;
    int auto3B1ACF21_var;

    // Variable Initialization
    lv_resourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
    lv_techLevel = libCOMI_ge_CoopAITechLevelBuckets__1Early;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((UnitIsAlive(gv_purifierGuardian) == true))) {
            return false;
        }

        if (!((UnitIsAlive(gv_downloadCenter1) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_KillModel(libHots_gf_ActorForUnit(gv_downloadCenter1, 1));
    TextTagDestroy(libHots_gf_TextTagForUnit(gv_downloadCenter1, 1));
    UISetButtonFaceHighlighted(PlayerGroupAll(), "DownloadBackupPart1", false);
    TimerPause(gv_bonus1Timer, true);
    auto3B1ACF21_g = libCOMI_gf_GetEnemyPlayers();
    auto3B1ACF21_var = -1;
    while (true) {
        auto3B1ACF21_var = PlayerGroupNextPlayer(auto3B1ACF21_g, auto3B1ACF21_var);
        if (auto3B1ACF21_var < 0) { break; }
        libCOMI_gf_SetAllianceCoop(auto3B1ACF21_var, gv_pLAYER_09_BonusHostileFlag1, libNtve_ge_AllianceSetting_Enemy);
    }
    TriggerExecute(gt_DownloadBackups1AttackWaves, true, false);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DownloadBackups1ListenStartDownload_Init () {
    gt_DownloadBackups1ListenStartDownload = TriggerCreate("gt_DownloadBackups1ListenStartDownload_Func");
    TriggerEnable(gt_DownloadBackups1ListenStartDownload, false);
    TriggerAddEventUnitAbility(gt_DownloadBackups1ListenStartDownload, UnitRefFromVariable("gv_downloadCenter1"), AbilityCommand("CybrosEscortDownloader", 0), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(gt_DownloadBackups1ListenStartDownload, UnitRefFromVariable("gv_downloadCenter1"), AbilityCommand("CybrosEscortDownloader", 1), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(gt_DownloadBackups1ListenStartDownload, UnitRefFromVariable("gv_downloadCenter1"), AbilityCommand("CybrosEscortDownloader", 2), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DownloadBackups 1 Attack Waves
//--------------------------------------------------------------------------------------------------
bool gt_DownloadBackups1AttackWaves_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceAmount;
    int lv_techLevel;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_resourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
    lv_techLevel = libCOMI_ge_CoopAITechLevelBuckets__1Early;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((UnitIsAlive(gv_purifierGuardian) == true))) {
            return false;
        }

        if (!((UnitIsAlive(gv_downloadCenter1) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    lv_resourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__2Smaller;
    lv_techLevel = libCOMI_ge_CoopAITechLevelBuckets__1Early;
    libNtve_gf_SendActorMessageToGameRegionWithFilters(RegionFromId(7), c_actorIntersectAgainstRadiusContact, "Signal WorkOn", "Doodad", "");
    Wait(2.0, c_timeGame);
    gf_SpawnHarassWavesatLocation(5, 3, lv_resourceAmount, lv_techLevel, gv_downloadCenter1);
    Wait(10.0, c_timeGame);
    gf_SpawnHarassWavesatLocation(5, 3, lv_resourceAmount, lv_techLevel, gv_downloadCenter1);
    Wait(6.0, c_timeGame);
    gf_SpawnHarassWavesatLocation(5, 3, lv_resourceAmount, lv_techLevel, gv_downloadCenter1);
    Wait(2.0, c_timeGame);
    libNtve_gf_SendActorMessageToGameRegionWithFilters(RegionFromId(7), c_actorIntersectAgainstRadiusContact, "Signal WorkOff", "Doodad", "");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DownloadBackups1AttackWaves_Init () {
    gt_DownloadBackups1AttackWaves = TriggerCreate("gt_DownloadBackups1AttackWaves_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: DownloadBackups 1 Listen Complete Download
//--------------------------------------------------------------------------------------------------
bool gt_DownloadBackups1ListenCompleteDownload_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((UnitIsAlive(gv_purifierGuardian) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TimerPause(gv_bonus1Timer, false);
    gv_downloadIter1 = (gv_downloadIter1 + 1);
    TriggerExecute(gt_ObjectiveDownloadBackups1Update, true, false);
    if ((gv_downloadIter1 >= gv_downloadMAX1)) {
        TimerPause(gv_bonus1Timer, true);
        TriggerExecute(gt_ObjectiveDownloadBackups1Complete, true, false);
        TriggerExecute(gt_ObjectiveDownloadBackups1SuccessQ, true, false);
        TriggerEnable(gt_ObjectiveDownloadBackupsUnderAttackQ, false);
        TriggerEnable(gt_ObjectiveDownloadBackups1TimeWarningLogicQ, false);
        TriggerEnable(gt_ObjectiveDownloadBackupsTimeFinalWarningLogicQ, false);
        libCOMI_gf_DestroyPingCoop(gv_bonus1Ping);
        UnitSetOwner(gv_downloadCenter1, gv_pLAYER_06_BonusNetural, false);
        UnitAbilityEnable(gv_downloadCenter1, "ACGlobalShareUnitNoEnemy", false);
        UnitSetState(gv_downloadCenter1, c_unitStateInvulnerable, true);
        UnitSetState(gv_downloadCenter1, c_unitStateTargetable, false);
    }
    else {
        TriggerExecute(gt_ObjectiveDownloadBackupsDownloadCompleteQ, true, false);
    }
    Wait(5.0, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DownloadBackups1ListenCompleteDownload_Init () {
    gt_DownloadBackups1ListenCompleteDownload = TriggerCreate("gt_DownloadBackups1ListenCompleteDownload_Func");
    TriggerEnable(gt_DownloadBackups1ListenCompleteDownload, false);
    TriggerAddEventUnitAbility(gt_DownloadBackups1ListenCompleteDownload, UnitRefFromVariable("gv_downloadCenter1"), AbilityCommand("CybrosEscortDownloader", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_DownloadBackups1ListenCompleteDownload, UnitRefFromVariable("gv_downloadCenter1"), AbilityCommand("CybrosEscortDownloader", 1), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_DownloadBackups1ListenCompleteDownload, UnitRefFromVariable("gv_downloadCenter1"), AbilityCommand("CybrosEscortDownloader", 2), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DownloadCenter1 Dies - Fail
//--------------------------------------------------------------------------------------------------
bool gt_DownloadCenter1DiesFail_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((UnitIsAlive(gv_purifierGuardian) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TimerPause(gv_bonus1Timer, true);
    libNtve_gf_KillModel(libHots_gf_ActorForUnit(gv_downloadCenter1, 1));
    TextTagDestroy(libHots_gf_TextTagForUnit(gv_downloadCenter1, 1));
    TriggerEnable(gt_DownloadBackups1ListenStartDownload, false);
    TriggerEnable(gt_DownloadBackups1ListenCompleteDownload, false);
    TriggerExecute(gt_ObjectiveDownloadBackups1Failed, true, false);
    TriggerExecute(gt_ObjectiveDownloadBackups1FailedDestroyedQ, true, false);
    TriggerEnable(gt_ObjectiveDownloadBackupsUnderAttackQ, false);
    TriggerEnable(gt_ObjectiveDownloadBackups1TimeWarningLogicQ, false);
    TriggerEnable(gt_ObjectiveDownloadBackupsTimeFinalWarningLogicQ, false);
    libCOMI_gf_DestroyPingCoop(gv_bonus1Ping);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DownloadCenter1DiesFail_Init () {
    gt_DownloadCenter1DiesFail = TriggerCreate("gt_DownloadCenter1DiesFail_Func");
    TriggerEnable(gt_DownloadCenter1DiesFail, false);
    TriggerAddEventUnitDied(gt_DownloadCenter1DiesFail, UnitRefFromVariable("gv_downloadCenter1"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: DownloadBackups 1 Timer Expire - Fail
//--------------------------------------------------------------------------------------------------
bool gt_DownloadBackups1TimerExpireFail_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_downloadIter1 < gv_downloadMAX1))) {
            return false;
        }

        if (!((UnitIsAlive(gv_downloadCenter1) == true))) {
            return false;
        }

        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_KillModel(libHots_gf_ActorForUnit(gv_downloadCenter1, 1));
    TextTagDestroy(libHots_gf_TextTagForUnit(gv_downloadCenter1, 1));
    TriggerEnable(gt_DownloadBackups1ListenStartDownload, false);
    TriggerEnable(gt_DownloadBackups1ListenCompleteDownload, false);
    TriggerExecute(gt_ObjectiveDownloadBackups1Failed, true, false);
    TriggerExecute(gt_ObjectiveDownloadBackups1FailedTimerExpireQ, true, false);
    TriggerEnable(gt_ObjectiveDownloadBackupsUnderAttackQ, false);
    libCOMI_gf_DestroyPingCoop(gv_bonus1Ping);
    UnitSetOwner(gv_downloadCenter1, gv_pLAYER_06_BonusNetural, false);
    UnitAbilityEnable(gv_downloadCenter1, "ACGlobalShareUnitNoEnemy", false);
    UnitSetState(gv_downloadCenter1, c_unitStateInvulnerable, true);
    UnitSetState(gv_downloadCenter1, c_unitStateTargetable, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DownloadBackups1TimerExpireFail_Init () {
    gt_DownloadBackups1TimerExpireFail = TriggerCreate("gt_DownloadBackups1TimerExpireFail_Func");
    TriggerEnable(gt_DownloadBackups1TimerExpireFail, false);
    TriggerAddEventTimer(gt_DownloadBackups1TimerExpireFail, gv_bonus1Timer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective DownloadBackups 1 - Timer Update
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDownloadBackups1TimerUpdate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(6.0, c_timeGame);
    TimerStart(gv_bonus1Timer, 240.0, false, c_timeAI);
    while ((libCOMI_gf_GameIsOver() == false) && (TimerGetRemaining(gv_bonus1Timer) >= 0.0) && (UnitIsAlive(gv_downloadCenter1) == true) && (gv_downloadIter1 < gv_downloadMAX1)) {
        TriggerExecute(gt_ObjectiveDownloadBackups1Update, true, false);
        Wait(1.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDownloadBackups1TimerUpdate_Init () {
    gt_ObjectiveDownloadBackups1TimerUpdate = TriggerCreate("gt_ObjectiveDownloadBackups1TimerUpdate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective DownloadBackups 2 - Initialization
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDownloadBackups2Initialization_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_p;

    // Automatic Variable Declarations
    playergroup auto6C4250FD_g;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((UnitIsAlive(gv_purifierGuardian) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    auto6C4250FD_g = libCOMI_gf_GetNonDefeatedPlayers();
    lv_p = -1;
    while (true) {
        lv_p = PlayerGroupNextPlayer(auto6C4250FD_g, lv_p);
        if (lv_p < 0) { break; }
        CatalogFieldValueSet(c_gameCatalogButton, "DownloadBackupPart1", "Name", lv_p, "Button/Name/DownloadBackupV2Part1");
        CatalogFieldValueSet(c_gameCatalogButton, "DownloadBackupPart1", "Tooltip", lv_p, "Button/Tooltip/DownloadBackupV2Part1");
        CatalogFieldValueSet(c_gameCatalogButton, "DownloadBackupPart1", "AlertTooltip", lv_p, "Button/Tooltip/DownloadBackupV2Part1");
        CatalogFieldValueSet(c_gameCatalogButton, "DownloadBackupPart2", "Name", lv_p, "Button/Name/DownloadBackupV2Part2");
        CatalogFieldValueSet(c_gameCatalogButton, "DownloadBackupPart2", "Tooltip", lv_p, "Button/Tooltip/DownloadBackupV2Part2");
        CatalogFieldValueSet(c_gameCatalogButton, "DownloadBackupPart2", "AlertTooltip", lv_p, "Button/Tooltip/DownloadBackupV2Part2");
        CatalogFieldValueSet(c_gameCatalogButton, "DownloadBackupPart3", "Name", lv_p, "Button/Name/DownloadBackupV2Part3");
        CatalogFieldValueSet(c_gameCatalogButton, "DownloadBackupPart3", "Tooltip", lv_p, "Button/Tooltip/DownloadBackupV2Part3");
        CatalogFieldValueSet(c_gameCatalogButton, "DownloadBackupPart3", "AlertTooltip", lv_p, "Button/Tooltip/DownloadBackupV2Part3");
    }
    UnitSetState(gv_downloadCenter2, c_unitStateInvulnerable, false);
    libCOMI_gf_AttachReticleEffectAndTextTagOnUnit(libCOMI_ge_CampaginReticleType_ProtossBonusObjective, libCOMI_ge_CampaginReticleSize_Large, StringExternal("Param/Value/189509D8"), gv_downloadCenter2, "Ref_Center");
    TextTagSetAlignment(TextTagLastCreated(), c_alignCenter, c_alignBottom);
    libHots_gf_StoreActorForUnit(gv_downloadCenter2, 1, libNtve_gf_ActorLastCreated());
    libHots_gf_StoreTextTagForUnit(gv_downloadCenter2, 1, TextTagLastCreated());
    UISetButtonFaceHighlighted(PlayerGroupAll(), "DownloadBackupPart1", true);
    TriggerExecute(gt_ObjectiveDownloadBackups2Create, true, false);
    Wait(2.0, c_timeReal);
    TriggerExecute(gt_ObjectiveDownloadBackups2StartQ, true, false);
    libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_Secondary, UnitGetPosition(gv_downloadCenter2), StringExternal("Param/Value/DC89CC82"));
    gv_bonus2Ping = PingLastCreated();
    TriggerExecute(gt_ObjectiveDownloadBackups2TimerUpdate, true, false);
    TriggerEnable(gt_DownloadBackups2TimerExpireFail, true);
    TriggerEnable(gt_DownloadBackups2ListenStartDownload, true);
    TriggerEnable(gt_DownloadBackups2ListenCompleteDownload, true);
    TriggerEnable(gt_DownloadCenter2DiesFail, true);
    TriggerEnable(gt_ObjectiveDownloadBackupsUnderAttackQ, true);
    UnitSetOwner(gv_downloadCenter2, gv_pLAYER_10_BonusHostileFlag2, false);
    UnitAbilityEnable(gv_downloadCenter2, "ACGlobalShareUnitNoEnemy", true);
    UnitBehaviorAddPlayer(gv_downloadCenter2, "NoDamageFromCaster", 1, 1);
    UnitBehaviorAddPlayer(gv_downloadCenter2, "NoDamageFromCaster", 2, 1);
    Wait(60.0, c_timeAI);
    TriggerEnable(gt_ObjectiveDownloadBackups2TimeWarningLogicQ, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDownloadBackups2Initialization_Init () {
    gt_ObjectiveDownloadBackups2Initialization = TriggerCreate("gt_ObjectiveDownloadBackups2Initialization_Func");
    TriggerEnable(gt_ObjectiveDownloadBackups2Initialization, false);
    TriggerAddEventUnitRegion(gt_ObjectiveDownloadBackups2Initialization, UnitRefFromVariable("gv_purifierGuardian"), RegionFromId(5), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DownloadBackups 2 Listen Start Download
//--------------------------------------------------------------------------------------------------
bool gt_DownloadBackups2ListenStartDownload_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceAmount;
    int lv_techLevel;

    // Automatic Variable Declarations
    playergroup auto304CAD35_g;
    int auto304CAD35_var;

    // Variable Initialization
    lv_resourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
    lv_techLevel = libCOMI_ge_CoopAITechLevelBuckets__1Early;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((UnitIsAlive(gv_purifierGuardian) == true))) {
            return false;
        }

        if (!((UnitIsAlive(gv_downloadCenter2) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_KillModel(libHots_gf_ActorForUnit(gv_downloadCenter2, 1));
    TextTagDestroy(libHots_gf_TextTagForUnit(gv_downloadCenter2, 1));
    UISetButtonFaceHighlighted(PlayerGroupAll(), "DownloadBackupPart1", false);
    TimerPause(gv_bonus2Timer, true);
    auto304CAD35_g = libCOMI_gf_GetEnemyPlayers();
    auto304CAD35_var = -1;
    while (true) {
        auto304CAD35_var = PlayerGroupNextPlayer(auto304CAD35_g, auto304CAD35_var);
        if (auto304CAD35_var < 0) { break; }
        libCOMI_gf_SetAllianceCoop(auto304CAD35_var, gv_pLAYER_10_BonusHostileFlag2, libNtve_ge_AllianceSetting_Enemy);
    }
    TriggerExecute(gt_DownloadBackups2AttackWaves, true, false);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DownloadBackups2ListenStartDownload_Init () {
    gt_DownloadBackups2ListenStartDownload = TriggerCreate("gt_DownloadBackups2ListenStartDownload_Func");
    TriggerEnable(gt_DownloadBackups2ListenStartDownload, false);
    TriggerAddEventUnitAbility(gt_DownloadBackups2ListenStartDownload, UnitRefFromVariable("gv_downloadCenter2"), AbilityCommand("CybrosEscortDownloader", 0), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(gt_DownloadBackups2ListenStartDownload, UnitRefFromVariable("gv_downloadCenter2"), AbilityCommand("CybrosEscortDownloader", 1), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(gt_DownloadBackups2ListenStartDownload, UnitRefFromVariable("gv_downloadCenter2"), AbilityCommand("CybrosEscortDownloader", 2), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DownloadBackups 2 Attack Waves
//--------------------------------------------------------------------------------------------------
bool gt_DownloadBackups2AttackWaves_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceAmount;
    int lv_techLevel;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_resourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
    lv_techLevel = libCOMI_ge_CoopAITechLevelBuckets__1Early;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((UnitIsAlive(gv_purifierGuardian) == true))) {
            return false;
        }

        if (!((UnitIsAlive(gv_downloadCenter2) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    lv_resourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__4Medium;
    lv_techLevel = libCOMI_ge_CoopAITechLevelBuckets__4LateMid;
    libNtve_gf_SendActorMessageToGameRegionWithFilters(RegionFromId(16), c_actorIntersectAgainstRadiusContact, "Signal WorkOn", "Doodad", "");
    Wait(2.0, c_timeGame);
    gf_SpawnHarassWavesatLocation(6, 3, lv_resourceAmount, lv_techLevel, gv_downloadCenter2);
    Wait(9.0, c_timeGame);
    gf_SpawnHarassWavesatLocation(6, 3, lv_resourceAmount, lv_techLevel, gv_downloadCenter2);
    Wait(7.0, c_timeGame);
    gf_SpawnHarassWavesatLocation(6, 3, lv_resourceAmount, lv_techLevel, gv_downloadCenter2);
    Wait(2.0, c_timeGame);
    libNtve_gf_SendActorMessageToGameRegionWithFilters(RegionFromId(16), c_actorIntersectAgainstRadiusContact, "Signal WorkOff", "Doodad", "");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DownloadBackups2AttackWaves_Init () {
    gt_DownloadBackups2AttackWaves = TriggerCreate("gt_DownloadBackups2AttackWaves_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: DownloadBackups 2 Listen Complete Download
//--------------------------------------------------------------------------------------------------
bool gt_DownloadBackups2ListenCompleteDownload_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((UnitIsAlive(gv_purifierGuardian) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TimerPause(gv_bonus2Timer, false);
    gv_downloadIter2 = (gv_downloadIter2 + 1);
    TriggerExecute(gt_ObjectiveDownloadBackups2Update, true, false);
    if ((gv_downloadIter2 >= gv_downloadMAX2)) {
        TimerPause(gv_bonus2Timer, true);
        TriggerExecute(gt_ObjectiveDownloadBackups2Complete, true, false);
        TriggerExecute(gt_ObjectiveDownloadBackups2SuccessQ, true, false);
        TriggerEnable(gt_ObjectiveDownloadBackupsUnderAttackQ, false);
        TriggerEnable(gt_ObjectiveDownloadBackups2TimeWarningLogicQ, false);
        TriggerEnable(gt_ObjectiveDownloadBackups2TimeFinalWarningLogicQ, false);
        libCOMI_gf_DestroyPingCoop(gv_bonus2Ping);
        UnitSetOwner(gv_downloadCenter2, gv_pLAYER_06_BonusNetural, false);
        UnitAbilityEnable(gv_downloadCenter2, "ACGlobalShareUnitNoEnemy", false);
        UnitSetState(gv_downloadCenter2, c_unitStateInvulnerable, true);
        UnitSetState(gv_downloadCenter2, c_unitStateTargetable, false);
    }
    else {
        TriggerExecute(gt_ObjectiveDownloadBackupsDownloadCompleteQ, true, false);
    }
    Wait(5.0, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DownloadBackups2ListenCompleteDownload_Init () {
    gt_DownloadBackups2ListenCompleteDownload = TriggerCreate("gt_DownloadBackups2ListenCompleteDownload_Func");
    TriggerEnable(gt_DownloadBackups2ListenCompleteDownload, false);
    TriggerAddEventUnitAbility(gt_DownloadBackups2ListenCompleteDownload, UnitRefFromVariable("gv_downloadCenter2"), AbilityCommand("CybrosEscortDownloader", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_DownloadBackups2ListenCompleteDownload, UnitRefFromVariable("gv_downloadCenter2"), AbilityCommand("CybrosEscortDownloader", 1), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_DownloadBackups2ListenCompleteDownload, UnitRefFromVariable("gv_downloadCenter2"), AbilityCommand("CybrosEscortDownloader", 2), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DownloadCenter2 Dies - Fail
//--------------------------------------------------------------------------------------------------
bool gt_DownloadCenter2DiesFail_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((UnitIsAlive(gv_purifierGuardian) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TimerPause(gv_bonus2Timer, true);
    libNtve_gf_KillModel(libHots_gf_ActorForUnit(gv_downloadCenter2, 1));
    TextTagDestroy(libHots_gf_TextTagForUnit(gv_downloadCenter2, 1));
    TriggerEnable(gt_DownloadBackups2ListenStartDownload, false);
    TriggerEnable(gt_DownloadBackups2ListenCompleteDownload, false);
    TriggerExecute(gt_ObjectiveDownloadBackups2Failed, true, false);
    TriggerExecute(gt_ObjectiveDownloadBackups2FailedDestroyedQ, true, false);
    TriggerEnable(gt_ObjectiveDownloadBackupsUnderAttackQ, false);
    TriggerEnable(gt_ObjectiveDownloadBackups2TimeWarningLogicQ, false);
    TriggerEnable(gt_ObjectiveDownloadBackups2TimeFinalWarningLogicQ, false);
    libCOMI_gf_DestroyPingCoop(gv_bonus2Ping);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DownloadCenter2DiesFail_Init () {
    gt_DownloadCenter2DiesFail = TriggerCreate("gt_DownloadCenter2DiesFail_Func");
    TriggerEnable(gt_DownloadCenter2DiesFail, false);
    TriggerAddEventUnitDied(gt_DownloadCenter2DiesFail, UnitRefFromVariable("gv_downloadCenter2"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: DownloadBackups 2 Timer Expire - Fail
//--------------------------------------------------------------------------------------------------
bool gt_DownloadBackups2TimerExpireFail_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_downloadIter2 < gv_downloadMAX2))) {
            return false;
        }

        if (!((UnitIsAlive(gv_downloadCenter2) == true))) {
            return false;
        }

        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_KillModel(libHots_gf_ActorForUnit(gv_downloadCenter2, 1));
    TextTagDestroy(libHots_gf_TextTagForUnit(gv_downloadCenter2, 1));
    TriggerEnable(gt_DownloadBackups2ListenStartDownload, false);
    TriggerEnable(gt_DownloadBackups2ListenCompleteDownload, false);
    TriggerExecute(gt_ObjectiveDownloadBackups2Failed, true, false);
    TriggerExecute(gt_ObjectiveDownloadBackups2FailedTimerExpireQ, true, false);
    TriggerEnable(gt_ObjectiveDownloadBackupsUnderAttackQ, false);
    libCOMI_gf_DestroyPingCoop(gv_bonus2Ping);
    UnitSetOwner(gv_downloadCenter2, gv_pLAYER_06_BonusNetural, false);
    UnitAbilityEnable(gv_downloadCenter2, "ACGlobalShareUnitNoEnemy", false);
    UnitSetState(gv_downloadCenter2, c_unitStateInvulnerable, true);
    UnitSetState(gv_downloadCenter2, c_unitStateTargetable, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DownloadBackups2TimerExpireFail_Init () {
    gt_DownloadBackups2TimerExpireFail = TriggerCreate("gt_DownloadBackups2TimerExpireFail_Func");
    TriggerEnable(gt_DownloadBackups2TimerExpireFail, false);
    TriggerAddEventTimer(gt_DownloadBackups2TimerExpireFail, gv_bonus2Timer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective DownloadBackups 2 - Timer Update
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDownloadBackups2TimerUpdate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(6.0, c_timeGame);
    TimerStart(gv_bonus2Timer, 240.0, false, c_timeAI);
    while ((libCOMI_gf_GameIsOver() == false) && (TimerGetRemaining(gv_bonus2Timer) >= 0.0) && (UnitIsAlive(gv_downloadCenter2) == true) && (gv_downloadIter2 < gv_downloadMAX2)) {
        TriggerExecute(gt_ObjectiveDownloadBackups2Update, true, false);
        Wait(1.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDownloadBackups2TimerUpdate_Init () {
    gt_ObjectiveDownloadBackups2TimerUpdate = TriggerCreate("gt_ObjectiveDownloadBackups2TimerUpdate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective DownloadBackups 1 - Start Q
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDownloadBackups1StartQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    if ((RandomInt(0, 1) == 1)) {
        libCOMI_gf_SendMissionTransmission("BonusFirstIntro1CE", true, -1);
    }
    else {
        libCOMI_gf_SendMissionTransmission("BonusFirstIntro2CE", true, -1);
    }
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDownloadBackups1StartQ_Init () {
    gt_ObjectiveDownloadBackups1StartQ = TriggerCreate("gt_ObjectiveDownloadBackups1StartQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective DownloadBackups 1 - Failed Timer Expire Q
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDownloadBackups1FailedTimerExpireQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("BonusFailTimerExpireCE", true, -1);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDownloadBackups1FailedTimerExpireQ_Init () {
    gt_ObjectiveDownloadBackups1FailedTimerExpireQ = TriggerCreate("gt_ObjectiveDownloadBackups1FailedTimerExpireQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective DownloadBackups 1 - Failed Destroyed Q
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDownloadBackups1FailedDestroyedQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("BonusFailDestroyedCE", true, -1);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDownloadBackups1FailedDestroyedQ_Init () {
    gt_ObjectiveDownloadBackups1FailedDestroyedQ = TriggerCreate("gt_ObjectiveDownloadBackups1FailedDestroyedQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective DownloadBackups 1 - Success Q
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDownloadBackups1SuccessQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("BonusSuccessCE", true, -1);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDownloadBackups1SuccessQ_Init () {
    gt_ObjectiveDownloadBackups1SuccessQ = TriggerCreate("gt_ObjectiveDownloadBackups1SuccessQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective DownloadBackups - Download Complete Q
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDownloadBackupsDownloadCompleteQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(10.0, c_timeAI);
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("BonusDownloadCompleteCE", true, -1);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDownloadBackupsDownloadCompleteQ_Init () {
    gt_ObjectiveDownloadBackupsDownloadCompleteQ = TriggerCreate("gt_ObjectiveDownloadBackupsDownloadCompleteQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective DownloadBackups 1 - Time Warning Logic Q
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDownloadBackups1TimeWarningLogicQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((TimerGetRemaining(gv_bonus1Timer) <= 120.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("BonusTimerWarningCE", true, -1);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    Wait(1.0, c_timeGame);
    TriggerEnable(gt_ObjectiveDownloadBackupsTimeFinalWarningLogicQ, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDownloadBackups1TimeWarningLogicQ_Init () {
    gt_ObjectiveDownloadBackups1TimeWarningLogicQ = TriggerCreate("gt_ObjectiveDownloadBackups1TimeWarningLogicQ_Func");
    TriggerEnable(gt_ObjectiveDownloadBackups1TimeWarningLogicQ, false);
    TriggerAddEventTimePeriodic(gt_ObjectiveDownloadBackups1TimeWarningLogicQ, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective DownloadBackups - Time Final Warning Logic Q
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDownloadBackupsTimeFinalWarningLogicQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((TimerGetRemaining(gv_bonus1Timer) <= 60.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("BonusTimerWarningFinalCE", true, -1);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDownloadBackupsTimeFinalWarningLogicQ_Init () {
    gt_ObjectiveDownloadBackupsTimeFinalWarningLogicQ = TriggerCreate("gt_ObjectiveDownloadBackupsTimeFinalWarningLogicQ_Func");
    TriggerEnable(gt_ObjectiveDownloadBackupsTimeFinalWarningLogicQ, false);
    TriggerAddEventTimePeriodic(gt_ObjectiveDownloadBackupsTimeFinalWarningLogicQ, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective DownloadBackups 2 - Start Q
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDownloadBackups2StartQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("BonusSecondIntro2CE", true, -1);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDownloadBackups2StartQ_Init () {
    gt_ObjectiveDownloadBackups2StartQ = TriggerCreate("gt_ObjectiveDownloadBackups2StartQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective DownloadBackups 2 - Failed Timer Expire Q
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDownloadBackups2FailedTimerExpireQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("BonusFailTimerExpireCE", true, -1);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDownloadBackups2FailedTimerExpireQ_Init () {
    gt_ObjectiveDownloadBackups2FailedTimerExpireQ = TriggerCreate("gt_ObjectiveDownloadBackups2FailedTimerExpireQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective DownloadBackups 2 - Failed Destroyed Q
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDownloadBackups2FailedDestroyedQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("BonusFailDestroyedCE", true, -1);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDownloadBackups2FailedDestroyedQ_Init () {
    gt_ObjectiveDownloadBackups2FailedDestroyedQ = TriggerCreate("gt_ObjectiveDownloadBackups2FailedDestroyedQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective DownloadBackups 2 - Success Q
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDownloadBackups2SuccessQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("BonusSuccessCE", true, -1);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDownloadBackups2SuccessQ_Init () {
    gt_ObjectiveDownloadBackups2SuccessQ = TriggerCreate("gt_ObjectiveDownloadBackups2SuccessQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective DownloadBackups 2 - Time Warning Logic Q 
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDownloadBackups2TimeWarningLogicQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((TimerGetRemaining(gv_bonus2Timer) <= 120.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("BonusTimerWarningCE", true, -1);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    Wait(1.0, c_timeGame);
    TriggerEnable(gt_ObjectiveDownloadBackups2TimeFinalWarningLogicQ, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDownloadBackups2TimeWarningLogicQ_Init () {
    gt_ObjectiveDownloadBackups2TimeWarningLogicQ = TriggerCreate("gt_ObjectiveDownloadBackups2TimeWarningLogicQ_Func");
    TriggerEnable(gt_ObjectiveDownloadBackups2TimeWarningLogicQ, false);
    TriggerAddEventTimePeriodic(gt_ObjectiveDownloadBackups2TimeWarningLogicQ, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective DownloadBackups 2 - Time Final Warning Logic Q
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDownloadBackups2TimeFinalWarningLogicQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((TimerGetRemaining(gv_bonus2Timer) <= 60.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("BonusTimerWarningFinalCE", true, -1);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDownloadBackups2TimeFinalWarningLogicQ_Init () {
    gt_ObjectiveDownloadBackups2TimeFinalWarningLogicQ = TriggerCreate("gt_ObjectiveDownloadBackups2TimeFinalWarningLogicQ_Func");
    TriggerEnable(gt_ObjectiveDownloadBackups2TimeFinalWarningLogicQ, false);
    TriggerAddEventTimePeriodic(gt_ObjectiveDownloadBackups2TimeFinalWarningLogicQ, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective DownloadBackups - Under Attack Q
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDownloadBackupsUnderAttackQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetPropertyFixed(EventUnit(), c_unitPropVitalityPercent, c_unitPropCurrent) >= 10.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("BonusUnderAttackCE", true, -1);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    libCOMI_gf_PingMinimapCampaign(PlayerGroupAll(), UnitGetPosition(EventUnit()), 2.0, Color(100.00, 0.00, 0.00));
    TriggerQueueExit();
    Wait(30.0, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDownloadBackupsUnderAttackQ_Init () {
    gt_ObjectiveDownloadBackupsUnderAttackQ = TriggerCreate("gt_ObjectiveDownloadBackupsUnderAttackQ_Func");
    TriggerEnable(gt_ObjectiveDownloadBackupsUnderAttackQ, false);
    TriggerAddEventUnitDamaged(gt_ObjectiveDownloadBackupsUnderAttackQ, UnitRefFromUnit(UnitFromId(823409936)), c_unitDamageTypeAny, c_unitDamageNonFatal, null);
    TriggerAddEventUnitDamaged(gt_ObjectiveDownloadBackupsUnderAttackQ, UnitRefFromUnit(UnitFromId(1225937925)), c_unitDamageTypeAny, c_unitDamageNonFatal, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: SuppressionTower Death Actions
//--------------------------------------------------------------------------------------------------
bool gt_SuppressionTowerDeathActions_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((UnitIsAlive(gv_purifierGuardian) == true))) {
            return false;
        }

        if (!(((UnitGetType(EventUnit()) == "CybrosEscortTowerUp") || (UnitGetType(EventUnit()) == "CybrosEscortTowerDown")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_DestroyPingCoop(libHots_gf_PingStoredForUnit(EventUnit(), 1));
    SoundPlayForPlayer(SoundLink("CybrosEscort_TowerDestroyed_EventTrig", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("TowerDestroyedCE", true, -1);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SuppressionTowerDeathActions_Init () {
    gt_SuppressionTowerDeathActions = TriggerCreate("gt_SuppressionTowerDeathActions_Func");
    TriggerAddEventUnitDied(gt_SuppressionTowerDeathActions, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Escort Holdout - Lock 2
//--------------------------------------------------------------------------------------------------
bool gt_EscortHoldoutLock2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_harassResourceAmount;
    int lv_harassTechLevel;
    point lv_nextTowerPt;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_harassResourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
    lv_harassTechLevel = libCOMI_ge_CoopAITechLevelBuckets__1Early;

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((UnitIsAlive(gv_purifierGuardian) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_towerHealth = libCOMI_gf_MinimumDifficultyValueCoopInteger(1500, 1500, 2000, 2500, 0, 0);
    gv_towerShields = libCOMI_gf_MinimumDifficultyValueCoopInteger(2000, 2000, 3000, 3500, 0, 0);
    lv_harassResourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__2Smaller;
    lv_harassTechLevel = libCOMI_ge_CoopAITechLevelBuckets__2EarlyMid;
    while (!(((UnitIsAlive(gv_purifierGuardian) == false) || (TimerGetElapsed(gv_purifierGuardianChannelingTimer) >= 15.0)))) {
        Wait(1.0, c_timeGame);
    }
    if ((UnitIsAlive(gv_purifierGuardian) == false)) {
        return true;
    }

    TriggerExecute(gt_HoldoutStartingVOQ, true, false);
    gf_SpawnHarassWavesatLocation(2, 5, lv_harassResourceAmount, lv_harassTechLevel, gv_purifierGuardian);
    while (!(((UnitIsAlive(gv_purifierGuardian) == false) || (TimerGetElapsed(gv_purifierGuardianChannelingTimer) >= 30.0)))) {
        Wait(1.0, c_timeGame);
    }
    if ((UnitIsAlive(gv_purifierGuardian) == false)) {
        return true;
    }

    gf_SpawnHarassWavesatLocation(2, 5, lv_harassResourceAmount, lv_harassTechLevel, gv_purifierGuardian);
    while (!(((UnitIsAlive(gv_purifierGuardian) == false) || (TimerGetElapsed(gv_purifierGuardianChannelingTimer) >= 50.0)))) {
        Wait(1.0, c_timeGame);
    }
    if ((UnitIsAlive(gv_purifierGuardian) == false)) {
        return true;
    }

    if ((RandomInt(0, 1) == 1)) {
        gf_SpawnSuppressionTower(PointFromId(390162398));
        lv_nextTowerPt = PointFromId(2077824209);
    }
    else {
        gf_SpawnSuppressionTower(PointFromId(1417863293));
        lv_nextTowerPt = PointFromId(390162398);
    }
    TriggerExecute(gt_HoldoutDefenseTowerSoloSpawnQ, true, false);
    while (!(((UnitIsAlive(gv_purifierGuardian) == false) || (TimerGetElapsed(gv_purifierGuardianChannelingTimer) >= 65.0)))) {
        Wait(1.0, c_timeGame);
    }
    if ((UnitIsAlive(gv_purifierGuardian) == false)) {
        return true;
    }

    gf_SpawnHarassWavesatLocation(2, 5, lv_harassResourceAmount, lv_harassTechLevel, gv_purifierGuardian);
    while (!(((UnitIsAlive(gv_purifierGuardian) == false) || (TimerGetElapsed(gv_purifierGuardianChannelingTimer) >= 83.0)))) {
        Wait(1.0, c_timeGame);
    }
    if ((UnitIsAlive(gv_purifierGuardian) == false)) {
        return true;
    }

    TriggerExecute(gt_HoldoutHalfDoneVOQ, true, false);
    while (!(((UnitIsAlive(gv_purifierGuardian) == false) || (TimerGetElapsed(gv_purifierGuardianChannelingTimer) >= 85.0)))) {
        Wait(1.0, c_timeGame);
    }
    if ((UnitIsAlive(gv_purifierGuardian) == false)) {
        return true;
    }

    if ((libCOMI_gf_MinimumDifficultyValueCoopInteger(0, 0, 1, 1, 0, 0) > 0)) {
        gf_SpawnHarassWavesatLocation(2, 5, lv_harassResourceAmount, lv_harassTechLevel, gv_purifierGuardian);
    }

    gf_SpawnSuppressionTower(lv_nextTowerPt);
    TriggerExecute(gt_HoldoutDefenseTowerSoloSpawnQ, true, false);
    while (!(((UnitIsAlive(gv_purifierGuardian) == false) || (TimerGetElapsed(gv_purifierGuardianChannelingTimer) >= 105.0)))) {
        Wait(1.0, c_timeGame);
    }
    if ((UnitIsAlive(gv_purifierGuardian) == false)) {
        return true;
    }

    gf_SpawnHarassWavesatLocation(2, 5, lv_harassResourceAmount, lv_harassTechLevel, gv_purifierGuardian);
    while (!(((UnitIsAlive(gv_purifierGuardian) == false) || (TimerGetElapsed(gv_purifierGuardianChannelingTimer) >= 124.0)))) {
        Wait(1.0, c_timeGame);
    }
    if ((UnitIsAlive(gv_purifierGuardian) == false)) {
        return true;
    }

    gf_SpawnHarassWavesatLocation(2, 5, lv_harassResourceAmount, lv_harassTechLevel, gv_purifierGuardian);
    TriggerExecute(gt_HoldoutAlmostDoneVOQ, true, false);
    if ((libCOMI_gf_MinimumDifficultyValueCoopInteger(0, 0, 1, 1, 0, 0) > 0)) {
        while (!(((UnitIsAlive(gv_purifierGuardian) == false) || (TimerGetElapsed(gv_purifierGuardianChannelingTimer) >= 145.0)))) {
            Wait(1.0, c_timeGame);
        }
        if ((UnitIsAlive(gv_purifierGuardian) == false)) {
            return true;
        }

        gf_SpawnHarassWavesatLocation(2, 5, lv_harassResourceAmount, lv_harassTechLevel, gv_purifierGuardian);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EscortHoldoutLock2_Init () {
    gt_EscortHoldoutLock2 = TriggerCreate("gt_EscortHoldoutLock2_Func");
    TriggerAddEventChatMessage(gt_EscortHoldoutLock2, c_playerAny, "-lock 2", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Escort Holdout - Lock 3
//--------------------------------------------------------------------------------------------------
bool gt_EscortHoldoutLock3_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_harassResourceAmount;
    int lv_harassTechLevel;
    int lv_reinforceResourceAmount;
    int lv_reinforceTechLevel;
    int lv_defensePattern;
    unitgroup lv_reinforceWaveGroup;
    unit lv_reinforceWaveIter;

    // Automatic Variable Declarations
    unitgroup auto2C6C36B0_g;
    int auto2C6C36B0_u;
    unitgroup autoE6FD77BE_g;
    int autoE6FD77BE_u;

    // Variable Initialization
    lv_harassResourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
    lv_harassTechLevel = libCOMI_ge_CoopAITechLevelBuckets__1Early;
    lv_reinforceResourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
    lv_reinforceTechLevel = libCOMI_ge_CoopAITechLevelBuckets__1Early;
    lv_reinforceWaveGroup = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((UnitIsAlive(gv_purifierGuardian) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_towerHealth = libCOMI_gf_MinimumDifficultyValueCoopInteger(1500, 1500, 2000, 2500, 0, 0);
    gv_towerShields = libCOMI_gf_MinimumDifficultyValueCoopInteger(2000, 2000, 3000, 3500, 0, 0);
    lv_harassResourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__5Large;
    lv_harassTechLevel = libCOMI_ge_CoopAITechLevelBuckets__4LateMid;
    lv_reinforceResourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__4Medium;
    lv_reinforceTechLevel = libCOMI_ge_CoopAITechLevelBuckets__4LateMid;
    if (((RandomInt(1, 100) >= 1) && (RandomInt(1, 100) <= 50))) {
        lv_defensePattern = 1;
    }
    else {
        lv_defensePattern = 2;
    }
    lv_harassResourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__3Small;
    lv_harassTechLevel = libCOMI_ge_CoopAITechLevelBuckets__3Mid;
    while (!(((UnitIsAlive(gv_purifierGuardian) == false) || (TimerGetElapsed(gv_purifierGuardianChannelingTimer) >= 20.0)))) {
        Wait(1.0, c_timeGame);
    }
    if ((UnitIsAlive(gv_purifierGuardian) == false)) {
        return true;
    }

    TriggerExecute(gt_HoldoutStartingVOQ, true, false);
    gf_SpawnHarassWavesatLocation(3, 4, lv_harassResourceAmount, lv_harassTechLevel, gv_purifierGuardian);
    while (!(((UnitIsAlive(gv_purifierGuardian) == false) || (TimerGetElapsed(gv_purifierGuardianChannelingTimer) >= 25.0)))) {
        Wait(1.0, c_timeGame);
    }
    if ((UnitIsAlive(gv_purifierGuardian) == false)) {
        return true;
    }

    if ((lv_defensePattern == 1)) {
        gf_SpawnSuppressionTower(PointFromId(1138711045));
        TriggerExecute(gt_HoldoutDefenseTowerSoloSpawnQ, true, false);
    }
    else {
        gf_SpawnSuppressionTower(PointFromId(458301982));
        TriggerExecute(gt_HoldoutDefenseTowerSoloSpawnQ, true, false);
    }
    lv_harassResourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__5Large;
    lv_harassTechLevel = libCOMI_ge_CoopAITechLevelBuckets__5Late;
    while (!(((UnitIsAlive(gv_purifierGuardian) == false) || (TimerGetElapsed(gv_purifierGuardianChannelingTimer) >= 65.0)))) {
        Wait(1.0, c_timeGame);
    }
    if ((UnitIsAlive(gv_purifierGuardian) == false)) {
        return true;
    }

    gf_SpawnHarassWavesatLocation(3, 4, lv_harassResourceAmount, lv_harassTechLevel, gv_purifierGuardian);
    while (!(((UnitIsAlive(gv_purifierGuardian) == false) || (TimerGetElapsed(gv_purifierGuardianChannelingTimer) >= 83.0)))) {
        Wait(1.0, c_timeGame);
    }
    if ((UnitIsAlive(gv_purifierGuardian) == false)) {
        return true;
    }

    TriggerExecute(gt_HoldoutHalfDoneVOQ, true, false);
    while (!(((UnitIsAlive(gv_purifierGuardian) == false) || (TimerGetElapsed(gv_purifierGuardianChannelingTimer) >= 90.0)))) {
        Wait(1.0, c_timeGame);
    }
    if ((UnitIsAlive(gv_purifierGuardian) == false)) {
        return true;
    }

    if ((lv_defensePattern == 1)) {
        gf_SpawnSuppressionTower(PointFromId(1969729852));
        TriggerExecute(gt_HoldoutDefenseTowerSoloSpawnQ, true, false);
    }
    else {
        gf_SpawnSuppressionTower(PointFromId(2065893819));
        TriggerExecute(gt_HoldoutDefenseTowerSoloSpawnQ, true, false);
        if ((libCOMI_gf_MinimumDifficultyValueCoopInteger(0, 0, 1, 1, 0, 0) > 0)) {
            Wait(5.0, c_timeGame);
            libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_Player01Enemy, gv_pLAYER_04_Player02Enemy, lv_reinforceResourceAmount, lv_reinforceTechLevel, PointFromId(2041113308), false);
            UnitGroupAddUnitGroup(lv_reinforceWaveGroup, libCOMI_gf_LastCreatedCoopAttackForce());
            auto2C6C36B0_g = lv_reinforceWaveGroup;
            auto2C6C36B0_u = UnitGroupCount(auto2C6C36B0_g, c_unitCountAll);
            for (;; auto2C6C36B0_u -= 1) {
                lv_reinforceWaveIter = UnitGroupUnitFromEnd(auto2C6C36B0_g, auto2C6C36B0_u);
                if (lv_reinforceWaveIter == null) { break; }
                UnitBehaviorAdd(lv_reinforceWaveIter, "PurifierWarpIn", lv_reinforceWaveIter, 1);
            }
        }

    }
    lv_harassResourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__4Medium;
    lv_harassTechLevel = libCOMI_ge_CoopAITechLevelBuckets__4LateMid;
    while (!(((UnitIsAlive(gv_purifierGuardian) == false) || (TimerGetElapsed(gv_purifierGuardianChannelingTimer) >= 110.0)))) {
        Wait(1.0, c_timeGame);
    }
    if ((UnitIsAlive(gv_purifierGuardian) == false)) {
        return true;
    }

    gf_SpawnHarassWavesatLocation(3, 4, lv_harassResourceAmount, lv_harassTechLevel, gv_purifierGuardian);
    while (!(((UnitIsAlive(gv_purifierGuardian) == false) || (TimerGetElapsed(gv_purifierGuardianChannelingTimer) >= 124.0)))) {
        Wait(1.0, c_timeGame);
    }
    if ((UnitIsAlive(gv_purifierGuardian) == false)) {
        return true;
    }

    TriggerExecute(gt_HoldoutAlmostDoneVOQ, true, false);
    lv_reinforceResourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__5Large;
    lv_reinforceTechLevel = libCOMI_ge_CoopAITechLevelBuckets__4LateMid;
    while (!(((UnitIsAlive(gv_purifierGuardian) == false) || (TimerGetElapsed(gv_purifierGuardianChannelingTimer) >= 132.0)))) {
        Wait(1.0, c_timeGame);
    }
    if ((UnitIsAlive(gv_purifierGuardian) == false)) {
        return true;
    }

    if ((lv_defensePattern == 1)) {
        gf_SpawnSuppressionTower(PointFromId(815313770));
        TriggerExecute(gt_HoldoutDefenseTowerSoloSpawnQ, true, false);
        if ((libCOMI_gf_MinimumDifficultyValueCoopInteger(0, 0, 1, 1, 0, 0) > 0)) {
            Wait(5.0, c_timeGame);
            libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_Player01Enemy, gv_pLAYER_04_Player02Enemy, lv_reinforceResourceAmount, lv_reinforceTechLevel, PointFromId(1128005883), false);
            UnitGroupAddUnitGroup(lv_reinforceWaveGroup, libCOMI_gf_LastCreatedCoopAttackForce());
            autoE6FD77BE_g = lv_reinforceWaveGroup;
            autoE6FD77BE_u = UnitGroupCount(autoE6FD77BE_g, c_unitCountAll);
            for (;; autoE6FD77BE_u -= 1) {
                lv_reinforceWaveIter = UnitGroupUnitFromEnd(autoE6FD77BE_g, autoE6FD77BE_u);
                if (lv_reinforceWaveIter == null) { break; }
                UnitBehaviorAdd(lv_reinforceWaveIter, "PurifierWarpIn", lv_reinforceWaveIter, 1);
            }
        }

    }
    else {
        gf_SpawnSuppressionTower(PointFromId(1138711045));
        TriggerExecute(gt_HoldoutDefenseTowerSoloSpawnQ, true, false);
    }
    lv_harassResourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__5Large;
    lv_harassTechLevel = libCOMI_ge_CoopAITechLevelBuckets__4LateMid;
    while (!(((UnitIsAlive(gv_purifierGuardian) == false) || (TimerGetElapsed(gv_purifierGuardianChannelingTimer) >= 150.0)))) {
        Wait(1.0, c_timeGame);
    }
    if ((UnitIsAlive(gv_purifierGuardian) == false)) {
        return true;
    }

    gf_SpawnHarassWavesatLocation(3, 4, lv_harassResourceAmount, lv_harassTechLevel, gv_purifierGuardian);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EscortHoldoutLock3_Init () {
    gt_EscortHoldoutLock3 = TriggerCreate("gt_EscortHoldoutLock3_Func");
    TriggerAddEventChatMessage(gt_EscortHoldoutLock3, c_playerAny, "-lock 3", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Escort Holdout - Lock 4
//--------------------------------------------------------------------------------------------------
bool gt_EscortHoldoutLock4_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_harassResourceAmount;
    int lv_harassTechLevel;
    int lv_reinforceResourceAmount;
    int lv_reinforceTechLevel;
    int lv_defensePattern;
    unitgroup lv_reinforceWaveGroup;
    unit lv_reinforceWaveIter;

    // Automatic Variable Declarations
    unitgroup auto3DD39C61_g;
    int auto3DD39C61_u;
    unitgroup auto86E4F807_g;
    int auto86E4F807_u;
    unitgroup auto24E6F294_g;
    int auto24E6F294_u;
    unitgroup autoF085D618_g;
    int autoF085D618_u;
    unitgroup autoEABD1103_g;
    int autoEABD1103_u;
    unitgroup auto91988E6B_g;
    int auto91988E6B_u;

    // Variable Initialization
    lv_harassResourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
    lv_harassTechLevel = libCOMI_ge_CoopAITechLevelBuckets__1Early;
    lv_reinforceResourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
    lv_reinforceTechLevel = libCOMI_ge_CoopAITechLevelBuckets__1Early;
    lv_reinforceWaveGroup = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((UnitIsAlive(gv_purifierGuardian) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SendActorMessageToGameRegionWithFilters(RegionFromId(15), c_actorIntersectAgainstRadiusContact, "Signal WorkOn", "Doodad", "");
    gv_towerHealth = libCOMI_gf_MinimumDifficultyValueCoopInteger(1500, 1500, 2000, 2500, 0, 0);
    gv_towerShields = libCOMI_gf_MinimumDifficultyValueCoopInteger(2000, 2000, 3000, 3500, 0, 0);
    lv_harassResourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__5Large;
    lv_harassTechLevel = libCOMI_ge_CoopAITechLevelBuckets__5Late;
    lv_reinforceResourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__4Medium;
    lv_reinforceTechLevel = libCOMI_ge_CoopAITechLevelBuckets__5Late;
    if (((RandomInt(1, 100) >= 1) && (RandomInt(1, 100) <= 50))) {
        lv_defensePattern = 1;
    }
    else {
        lv_defensePattern = 2;
    }
    lv_harassResourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__4Medium;
    lv_harassTechLevel = libCOMI_ge_CoopAITechLevelBuckets__4LateMid;
    while (!(((UnitIsAlive(gv_purifierGuardian) == false) || (TimerGetElapsed(gv_purifierGuardianChannelingTimer) >= 15.0)))) {
        Wait(1.0, c_timeGame);
    }
    if ((UnitIsAlive(gv_purifierGuardian) == false)) {
        return true;
    }

    TriggerExecute(gt_HoldoutStartingVOQ, true, false);
    gf_SpawnHarassWavesatLocation(4, 4, lv_harassResourceAmount, lv_harassTechLevel, gv_purifierGuardian);
    while (!(((UnitIsAlive(gv_purifierGuardian) == false) || (TimerGetElapsed(gv_purifierGuardianChannelingTimer) >= 35.0)))) {
        Wait(1.0, c_timeGame);
    }
    if ((UnitIsAlive(gv_purifierGuardian) == false)) {
        return true;
    }

    if ((lv_defensePattern == 1)) {
        gf_SpawnSuppressionTower(PointFromId(296174173));
        TriggerExecute(gt_HoldoutDefenseTowerSoloSpawnQ, true, false);
    }
    else {
        gf_SpawnSuppressionTower(PointFromId(847982644));
        TriggerExecute(gt_HoldoutDefenseTowerSoloSpawnQ, true, false);
    }
    lv_harassResourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__5Large;
    lv_harassTechLevel = libCOMI_ge_CoopAITechLevelBuckets__5Late;
    while (!(((UnitIsAlive(gv_purifierGuardian) == false) || (TimerGetElapsed(gv_purifierGuardianChannelingTimer) >= 50.0)))) {
        Wait(1.0, c_timeGame);
    }
    if ((UnitIsAlive(gv_purifierGuardian) == false)) {
        return true;
    }

    gf_SpawnHarassWavesatLocation(4, 4, lv_harassResourceAmount, lv_harassTechLevel, gv_purifierGuardian);
    while (!(((UnitIsAlive(gv_purifierGuardian) == false) || (TimerGetElapsed(gv_purifierGuardianChannelingTimer) >= 70.0)))) {
        Wait(1.0, c_timeGame);
    }
    if ((UnitIsAlive(gv_purifierGuardian) == false)) {
        return true;
    }

    if ((lv_defensePattern == 1)) {
        gf_SpawnSuppressionTower(PointFromId(1145547285));
        TriggerExecute(gt_HoldoutDefenseTowerSoloSpawnQ, true, false);
        if ((libCOMI_gf_MinimumDifficultyValueCoopInteger(0, 0, 1, 1, 0, 0) > 0)) {
            Wait(5.0, c_timeGame);
            libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_Player01Enemy, gv_pLAYER_04_Player02Enemy, lv_reinforceResourceAmount, lv_reinforceTechLevel, PointFromId(1746947394), false);
            UnitGroupAddUnitGroup(lv_reinforceWaveGroup, libCOMI_gf_LastCreatedCoopAttackForce());
            auto86E4F807_g = lv_reinforceWaveGroup;
            auto86E4F807_u = UnitGroupCount(auto86E4F807_g, c_unitCountAll);
            for (;; auto86E4F807_u -= 1) {
                lv_reinforceWaveIter = UnitGroupUnitFromEnd(auto86E4F807_g, auto86E4F807_u);
                if (lv_reinforceWaveIter == null) { break; }
                UnitBehaviorAdd(lv_reinforceWaveIter, "PurifierWarpIn", lv_reinforceWaveIter, 1);
            }
        }

    }
    else {
        gf_SpawnSuppressionTower(PointFromId(173290176));
        TriggerExecute(gt_HoldoutDefenseTowerSoloSpawnQ, true, false);
        if ((libCOMI_gf_MinimumDifficultyValueCoopInteger(0, 0, 1, 1, 0, 0) > 0)) {
            Wait(5.0, c_timeGame);
            libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_Player01Enemy, gv_pLAYER_04_Player02Enemy, lv_reinforceResourceAmount, lv_reinforceTechLevel, PointFromId(568074272), false);
            UnitGroupAddUnitGroup(lv_reinforceWaveGroup, libCOMI_gf_LastCreatedCoopAttackForce());
            auto3DD39C61_g = lv_reinforceWaveGroup;
            auto3DD39C61_u = UnitGroupCount(auto3DD39C61_g, c_unitCountAll);
            for (;; auto3DD39C61_u -= 1) {
                lv_reinforceWaveIter = UnitGroupUnitFromEnd(auto3DD39C61_g, auto3DD39C61_u);
                if (lv_reinforceWaveIter == null) { break; }
                UnitBehaviorAdd(lv_reinforceWaveIter, "PurifierWarpIn", lv_reinforceWaveIter, 1);
            }
        }

    }
    lv_harassResourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__4Medium;
    lv_harassTechLevel = libCOMI_ge_CoopAITechLevelBuckets__5Late;
    while (!(((UnitIsAlive(gv_purifierGuardian) == false) || (TimerGetElapsed(gv_purifierGuardianChannelingTimer) >= 83.0)))) {
        Wait(1.0, c_timeGame);
    }
    if ((UnitIsAlive(gv_purifierGuardian) == false)) {
        return true;
    }

    gf_SpawnHarassWavesatLocation(4, 4, lv_harassResourceAmount, lv_harassTechLevel, gv_purifierGuardian);
    TriggerExecute(gt_HoldoutHalfDoneVOQ, true, false);
    lv_reinforceResourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__4Medium;
    lv_reinforceTechLevel = libCOMI_ge_CoopAITechLevelBuckets__4LateMid;
    while (!(((UnitIsAlive(gv_purifierGuardian) == false) || (TimerGetElapsed(gv_purifierGuardianChannelingTimer) >= 110.0)))) {
        Wait(1.0, c_timeGame);
    }
    if ((UnitIsAlive(gv_purifierGuardian) == false)) {
        return true;
    }

    if ((lv_defensePattern == 1)) {
        gf_SpawnSuppressionTower(PointFromId(741191537));
        gf_SpawnSuppressionTower(PointFromId(173290176));
        TriggerExecute(gt_HoldoutDefenseTowerMultiSpawnQ, true, false);
        if ((libCOMI_gf_MinimumDifficultyValueCoopInteger(0, 0, 1, 1, 0, 0) > 0)) {
            Wait(5.0, c_timeGame);
            libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_Player01Enemy, gv_pLAYER_04_Player02Enemy, lv_reinforceResourceAmount, lv_reinforceTechLevel, PointFromId(1729732645), false);
            UnitGroupAddUnitGroup(lv_reinforceWaveGroup, libCOMI_gf_LastCreatedCoopAttackForce());
            autoEABD1103_g = lv_reinforceWaveGroup;
            autoEABD1103_u = UnitGroupCount(autoEABD1103_g, c_unitCountAll);
            for (;; autoEABD1103_u -= 1) {
                lv_reinforceWaveIter = UnitGroupUnitFromEnd(autoEABD1103_g, autoEABD1103_u);
                if (lv_reinforceWaveIter == null) { break; }
                UnitBehaviorAdd(lv_reinforceWaveIter, "PurifierWarpIn", lv_reinforceWaveIter, 1);
            }
            libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_Player01Enemy, gv_pLAYER_04_Player02Enemy, lv_reinforceResourceAmount, lv_reinforceTechLevel, PointFromId(568074272), false);
            UnitGroupAddUnitGroup(lv_reinforceWaveGroup, libCOMI_gf_LastCreatedCoopAttackForce());
            auto91988E6B_g = lv_reinforceWaveGroup;
            auto91988E6B_u = UnitGroupCount(auto91988E6B_g, c_unitCountAll);
            for (;; auto91988E6B_u -= 1) {
                lv_reinforceWaveIter = UnitGroupUnitFromEnd(auto91988E6B_g, auto91988E6B_u);
                if (lv_reinforceWaveIter == null) { break; }
                UnitBehaviorAdd(lv_reinforceWaveIter, "PurifierWarpIn", lv_reinforceWaveIter, 1);
            }
        }

    }
    else {
        gf_SpawnSuppressionTower(PointFromId(741191537));
        gf_SpawnSuppressionTower(PointFromId(296174173));
        TriggerExecute(gt_HoldoutDefenseTowerMultiSpawnQ, true, false);
        if ((libCOMI_gf_MinimumDifficultyValueCoopInteger(0, 0, 1, 1, 0, 0) > 0)) {
            Wait(5.0, c_timeGame);
            libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_Player01Enemy, gv_pLAYER_04_Player02Enemy, lv_reinforceResourceAmount, lv_reinforceTechLevel, PointFromId(1729732645), false);
            UnitGroupAddUnitGroup(lv_reinforceWaveGroup, libCOMI_gf_LastCreatedCoopAttackForce());
            auto24E6F294_g = lv_reinforceWaveGroup;
            auto24E6F294_u = UnitGroupCount(auto24E6F294_g, c_unitCountAll);
            for (;; auto24E6F294_u -= 1) {
                lv_reinforceWaveIter = UnitGroupUnitFromEnd(auto24E6F294_g, auto24E6F294_u);
                if (lv_reinforceWaveIter == null) { break; }
                UnitBehaviorAdd(lv_reinforceWaveIter, "PurifierWarpIn", lv_reinforceWaveIter, 1);
            }
            libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_Player01Enemy, gv_pLAYER_04_Player02Enemy, lv_reinforceResourceAmount, lv_reinforceTechLevel, PointFromId(1421362787), false);
            UnitGroupAddUnitGroup(lv_reinforceWaveGroup, libCOMI_gf_LastCreatedCoopAttackForce());
            autoF085D618_g = lv_reinforceWaveGroup;
            autoF085D618_u = UnitGroupCount(autoF085D618_g, c_unitCountAll);
            for (;; autoF085D618_u -= 1) {
                lv_reinforceWaveIter = UnitGroupUnitFromEnd(autoF085D618_g, autoF085D618_u);
                if (lv_reinforceWaveIter == null) { break; }
                UnitBehaviorAdd(lv_reinforceWaveIter, "PurifierWarpIn", lv_reinforceWaveIter, 1);
            }
        }

    }
    while (!(((UnitIsAlive(gv_purifierGuardian) == false) || (TimerGetElapsed(gv_purifierGuardianChannelingTimer) >= 124.0)))) {
        Wait(1.0, c_timeGame);
    }
    if ((UnitIsAlive(gv_purifierGuardian) == false)) {
        return true;
    }

    TriggerExecute(gt_HoldoutAlmostDoneVOQ, true, false);
    lv_harassResourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__5Large;
    lv_harassTechLevel = libCOMI_ge_CoopAITechLevelBuckets__5Late;
    while (!(((UnitIsAlive(gv_purifierGuardian) == false) || (TimerGetElapsed(gv_purifierGuardianChannelingTimer) >= 135.0)))) {
        Wait(1.0, c_timeGame);
    }
    if ((UnitIsAlive(gv_purifierGuardian) == false)) {
        return true;
    }

    gf_SpawnHarassWavesatLocation(4, 4, lv_harassResourceAmount, lv_harassTechLevel, gv_purifierGuardian);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EscortHoldoutLock4_Init () {
    gt_EscortHoldoutLock4 = TriggerCreate("gt_EscortHoldoutLock4_Func");
    TriggerAddEventChatMessage(gt_EscortHoldoutLock4, c_playerAny, "-lock 4", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Escort Holdout - Lock 1
//--------------------------------------------------------------------------------------------------
bool gt_EscortHoldoutLock1_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_harassResourceAmount;
    int lv_harassTechLevel;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_harassResourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
    lv_harassTechLevel = libCOMI_ge_CoopAITechLevelBuckets__1Early;

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((UnitIsAlive(gv_purifierGuardian) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_towerHealth = libCOMI_gf_MinimumDifficultyValueCoopInteger(1000, 1000, 1500, 2000, 0, 0);
    gv_towerShields = libCOMI_gf_MinimumDifficultyValueCoopInteger(2000, 2000, 2750, 3000, 0, 0);
    lv_harassResourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
    lv_harassTechLevel = libCOMI_ge_CoopAITechLevelBuckets__1Early;
    while (!(((UnitIsAlive(gv_purifierGuardian) == false) || (TimerGetElapsed(gv_purifierGuardianChannelingTimer) >= 20.0)))) {
        Wait(1.0, c_timeGame);
    }
    if ((UnitIsAlive(gv_purifierGuardian) == false)) {
        return true;
    }

    TriggerExecute(gt_HoldoutStartingVOQ, true, false);
    gf_SpawnHarassWavesatLocation(1, 3, lv_harassResourceAmount, lv_harassTechLevel, gv_purifierGuardian);
    while (!(((UnitIsAlive(gv_purifierGuardian) == false) || (TimerGetElapsed(gv_purifierGuardianChannelingTimer) >= 45.0)))) {
        Wait(1.0, c_timeGame);
    }
    if ((UnitIsAlive(gv_purifierGuardian) == false)) {
        return true;
    }

    gf_SpawnHarassWavesatLocation(1, 3, lv_harassResourceAmount, lv_harassTechLevel, gv_purifierGuardian);
    while (!(((UnitIsAlive(gv_purifierGuardian) == false) || (TimerGetElapsed(gv_purifierGuardianChannelingTimer) >= 70.0)))) {
        Wait(1.0, c_timeGame);
    }
    if ((UnitIsAlive(gv_purifierGuardian) == false)) {
        return true;
    }

    gf_SpawnHarassWavesatLocation(1, 3, lv_harassResourceAmount, lv_harassTechLevel, gv_purifierGuardian);
    while (!(((UnitIsAlive(gv_purifierGuardian) == false) || (TimerGetElapsed(gv_purifierGuardianChannelingTimer) >= 83.0)))) {
        Wait(1.0, c_timeGame);
    }
    if ((UnitIsAlive(gv_purifierGuardian) == false)) {
        return true;
    }

    TriggerExecute(gt_HoldoutHalfDoneVOQ, true, false);
    lv_harassResourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__2Smaller;
    lv_harassTechLevel = libCOMI_ge_CoopAITechLevelBuckets__1Early;
    while (!(((UnitIsAlive(gv_purifierGuardian) == false) || (TimerGetElapsed(gv_purifierGuardianChannelingTimer) >= 95.0)))) {
        Wait(1.0, c_timeGame);
    }
    if ((UnitIsAlive(gv_purifierGuardian) == false)) {
        return true;
    }

    gf_SpawnHarassWavesatLocation(1, 3, lv_harassResourceAmount, lv_harassTechLevel, gv_purifierGuardian);
    while (!(((UnitIsAlive(gv_purifierGuardian) == false) || (TimerGetElapsed(gv_purifierGuardianChannelingTimer) >= 105.0)))) {
        Wait(1.0, c_timeGame);
    }
    if ((UnitIsAlive(gv_purifierGuardian) == false)) {
        return true;
    }

    if (((RandomInt(1, 100) >= 1) && (RandomInt(1, 100) <= 50))) {
        gf_SpawnSuppressionTower(PointFromId(1564074852));
    }
    else {
        gf_SpawnSuppressionTower(PointFromId(256693928));
    }
    TriggerExecute(gt_HoldoutDefenseTowerFirstSpawnQ, true, false);
    while (!(((UnitIsAlive(gv_purifierGuardian) == false) || (TimerGetElapsed(gv_purifierGuardianChannelingTimer) >= 125.0)))) {
        Wait(1.0, c_timeGame);
    }
    if ((UnitIsAlive(gv_purifierGuardian) == false)) {
        return true;
    }

    TriggerExecute(gt_HoldoutAlmostDoneVOQ, true, false);
    while (!(((UnitIsAlive(gv_purifierGuardian) == false) || (TimerGetElapsed(gv_purifierGuardianChannelingTimer) >= 145.0)))) {
        Wait(1.0, c_timeGame);
    }
    if ((UnitIsAlive(gv_purifierGuardian) == false)) {
        return true;
    }

    gf_SpawnHarassWavesatLocation(1, 3, lv_harassResourceAmount, lv_harassTechLevel, gv_purifierGuardian);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EscortHoldoutLock1_Init () {
    gt_EscortHoldoutLock1 = TriggerCreate("gt_EscortHoldoutLock1_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Holdout Starting VO Q
//--------------------------------------------------------------------------------------------------
bool gt_HoldoutStartingVOQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("HoldoutHarassCE", true, -1);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    Wait(20.0, c_timeAI);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HoldoutStartingVOQ_Init () {
    gt_HoldoutStartingVOQ = TriggerCreate("gt_HoldoutStartingVOQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Holdout Half Done VO Q
//--------------------------------------------------------------------------------------------------
bool gt_HoldoutHalfDoneVOQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("HoldoutProgress50CE", true, -1);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    Wait(20.0, c_timeAI);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HoldoutHalfDoneVOQ_Init () {
    gt_HoldoutHalfDoneVOQ = TriggerCreate("gt_HoldoutHalfDoneVOQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Holdout Almost Done VO Q
//--------------------------------------------------------------------------------------------------
bool gt_HoldoutAlmostDoneVOQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("HoldoutProgress75CE", true, -1);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    Wait(20.0, c_timeAI);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HoldoutAlmostDoneVOQ_Init () {
    gt_HoldoutAlmostDoneVOQ = TriggerCreate("gt_HoldoutAlmostDoneVOQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Holdout - Defense Tower First Spawn Q
//--------------------------------------------------------------------------------------------------
bool gt_HoldoutDefenseTowerFirstSpawnQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("TowerDetectedFirstCE", true, -1);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HoldoutDefenseTowerFirstSpawnQ_Init () {
    gt_HoldoutDefenseTowerFirstSpawnQ = TriggerCreate("gt_HoldoutDefenseTowerFirstSpawnQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Holdout - Defense Tower Solo Spawn Q
//--------------------------------------------------------------------------------------------------
bool gt_HoldoutDefenseTowerSoloSpawnQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("TowerDetectedSingleCE", true, -1);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HoldoutDefenseTowerSoloSpawnQ_Init () {
    gt_HoldoutDefenseTowerSoloSpawnQ = TriggerCreate("gt_HoldoutDefenseTowerSoloSpawnQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Holdout - Defense Tower Multi Spawn Q
//--------------------------------------------------------------------------------------------------
bool gt_HoldoutDefenseTowerMultiSpawnQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("TowerDetectedMultipleCE", true, -1);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HoldoutDefenseTowerMultiSpawnQ_Init () {
    gt_HoldoutDefenseTowerMultiSpawnQ = TriggerCreate("gt_HoldoutDefenseTowerMultiSpawnQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Holdout - Defense Tower Destroyed Q
//--------------------------------------------------------------------------------------------------
bool gt_HoldoutDefenseTowerDestroyedQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "VoidThrasher"))) {
            return false;
        }

        if (!((libHots_gf_PingStoredForUnit(EventUnit(), 1) != c_invalidPingId))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_DestroyPingCoop(libHots_gf_PingStoredForUnit(EventUnit(), 1));
    SoundPlayForPlayer(SoundLink("CybrosEscort_TowerDestroyed_EventTrig", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("TowerDestroyedCE", true, -1);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HoldoutDefenseTowerDestroyedQ_Init () {
    gt_HoldoutDefenseTowerDestroyedQ = TriggerCreate("gt_HoldoutDefenseTowerDestroyedQ_Func");
    TriggerAddEventUnitDied(gt_HoldoutDefenseTowerDestroyedQ, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Purifier Guardian Progression
//--------------------------------------------------------------------------------------------------
bool gt_PurifierGuardianProgression_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_nextLockPoint;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((UnitIsAlive(gv_purifierGuardian) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(14.0, c_timeReal);
    gf_DisplayPurifierProgressBar(gv_purifierGuardian, FixedToInt(gv_purifierGuardianStartupTime));
    while (!(((UnitIsAlive(gv_purifierGuardian) == false) || (TimerGetRemaining(gv_purifierGuardianChannelingTimer) <= 0.0)))) {
        Wait(1.0, c_timeGame);
    }
    if ((UnitIsAlive(gv_purifierGuardian) == false)) {
        return true;
    }

    gv_purifierLockIndex = (gv_purifierLockIndex + 1);
    TriggerExecute(gt_ObjectiveActivatePurifierLocksUpdate, true, false);
    UnitSetState(gv_purifierGuardian, c_unitStateInvulnerable, true);
    gf_PurifierGuardianLockLogic(PointFromId(65632967), UnitFromId(1193780311), UnitFromId(1818811500), 1, gt_EscortHoldoutLock1);
    if ((UnitIsAlive(gv_purifierGuardian) == false)) {
        return true;
    }

    libCOMI_gf_SetMissionEffort(33.0);
    libNtve_gf_SendActorMessageToGameRegionWithFilters(RegionFromId(2), c_actorIntersectAgainstRadiusContact, "Signal WorkOff", "Doodad", "");
    gf_PurifierGuardianLockLogic(PointFromId(1359675866), UnitFromId(1818811500), UnitFromId(961044562), 2, gt_EscortHoldoutLock2);
    if ((UnitIsAlive(gv_purifierGuardian) == false)) {
        return true;
    }

    libCOMI_gf_SetMissionEffort(66.0);
    libNtve_gf_SendActorMessageToGameRegionWithFilters(RegionFromId(13), c_actorIntersectAgainstRadiusContact, "Signal WorkOff", "Doodad", "");
    gf_PurifierGuardianLockLogic(PointFromId(894022767), UnitFromId(961044562), UnitFromId(2144491625), 3, gt_EscortHoldoutLock3);
    if ((UnitIsAlive(gv_purifierGuardian) == false)) {
        return true;
    }

    libCOMI_gf_SetMissionEffort(100.0);
    libNtve_gf_SendActorMessageToGameRegionWithFilters(RegionFromId(14), c_actorIntersectAgainstRadiusContact, "Signal WorkOff", "Doodad", "");
    gf_PurifierGuardianLockLogic(PointFromId(1549405367), UnitFromId(2144491625), UnitFromId(1851122710), 4, gt_EscortHoldoutLock4);
    if ((UnitIsAlive(gv_purifierGuardian) == false)) {
        return true;
    }

    libNtve_gf_SendActorMessageToGameRegionWithFilters(RegionEntireMap(), c_actorIntersectAgainstRadiusContact, "Signal WorkOff", "Doodad", "");
    UnitSetState(gv_purifierGuardian, c_unitStateInvulnerable, true);
    libCOMI_gf_SetAllianceCoop(gv_pLAYER_03_Player01Enemy, gv_pLAYER_05_PurifierGuardian, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SendActorMessageToUnit(UnitFromId(1851122710), "Signal Ready");
    Wait(5.0, c_timeGame);
    UnitIssueOrder(gv_purifierGuardian, OrderTargetingUnit(AbilityCommand("MegalithCutterDock", 0), UnitFromId(1851122710)), c_orderQueueReplace);
    TriggerExecute(gt_VictoryActivatePurifierLocksCompleted, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PurifierGuardianProgression_Init () {
    gt_PurifierGuardianProgression = TriggerCreate("gt_PurifierGuardianProgression_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Purifier Guardian Pause on Barrage
//--------------------------------------------------------------------------------------------------
bool gt_PurifierGuardianPauseonBarrage_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((UnitIsAlive(gv_purifierGuardian) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TimerStart(gv_barrageHitTimer, 11.0, false, c_timeGame);
    UnitBehaviorAdd(gv_purifierGuardian, "CybrosEscortBarrageHitTimer", gv_purifierGuardian, 1);
    TimerPause(gv_purifierGuardianChannelingTimer, true);
    TriggerExecute(gt_PurifierGuardianPauseonBarrageQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PurifierGuardianPauseonBarrage_Init () {
    gt_PurifierGuardianPauseonBarrage = TriggerCreate("gt_PurifierGuardianPauseonBarrage_Func");
    TriggerAddEventUnitDamaged(gt_PurifierGuardianPauseonBarrage, UnitRefFromVariable("gv_purifierGuardian"), c_unitDamageTypeAny, c_unitDamageEither, "CybrosEscortTowerMissileDamage");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Purifier Guardian UnPause Holdout Timer
//--------------------------------------------------------------------------------------------------
bool gt_PurifierGuardianUnPauseHoldoutTimer_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((UnitIsAlive(gv_purifierGuardian) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TimerPause(gv_purifierGuardianChannelingTimer, false);
    SoundPlayForPlayer(SoundLink("CybrosEscort_PurifierGuardian_Restore_PowerUp_EventTrig", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    UnitBehaviorRemove(gv_purifierGuardian, "CybrosEscortBarrageHitTimer", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PurifierGuardianUnPauseHoldoutTimer_Init () {
    gt_PurifierGuardianUnPauseHoldoutTimer = TriggerCreate("gt_PurifierGuardianUnPauseHoldoutTimer_Func");
    TriggerAddEventTimer(gt_PurifierGuardianUnPauseHoldoutTimer, gv_barrageHitTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Purifier Guardian Dies Event
//--------------------------------------------------------------------------------------------------
bool gt_PurifierGuardianDiesEvent_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_purifierDeathPoint = UnitGetPosition(EventUnit());
    TriggerExecute(gt_ObjectiveActivatePurifierLocksFailed, true, false);
    SoundPlayForPlayer(SoundLink("CybrosEscort_PurifierDestroyed_EventTrig", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    TriggerExecute(gt_DefeatPrimaryObjectiveFailed, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PurifierGuardianDiesEvent_Init () {
    gt_PurifierGuardianDiesEvent = TriggerCreate("gt_PurifierGuardianDiesEvent_Func");
    TriggerAddEventUnitDied(gt_PurifierGuardianDiesEvent, UnitRefFromVariable("gv_purifierGuardian"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Purifier Guardian Is Under Attack Behavior
//--------------------------------------------------------------------------------------------------
bool gt_PurifierGuardianIsUnderAttackBehavior_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((UnitIsAlive(gv_purifierGuardian) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_PurifierGuardianEnemiesAreNearBehavior, false);
    UnitSetPropertyFixed(gv_purifierGuardian, c_unitPropMovementSpeed, gv_purifierGuardianSLOWSPEED);
    Wait(7.0, c_timeAI);
    UnitSetPropertyFixed(gv_purifierGuardian, c_unitPropMovementSpeed, gv_purifierGuardianMAXSPEED);
    TriggerEnable(gt_PurifierGuardianEnemiesAreNearBehavior, true);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PurifierGuardianIsUnderAttackBehavior_Init () {
    gt_PurifierGuardianIsUnderAttackBehavior = TriggerCreate("gt_PurifierGuardianIsUnderAttackBehavior_Func");
    TriggerAddEventUnitDamaged(gt_PurifierGuardianIsUnderAttackBehavior, UnitRefFromVariable("gv_purifierGuardian"), c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Purifier Guardian Enemies Are Near Behavior
//--------------------------------------------------------------------------------------------------
bool gt_PurifierGuardianEnemiesAreNearBehavior_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((UnitIsAlive(gv_purifierGuardian) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGroupCount(UnitGroupAlliance(gv_pLAYER_05_PurifierGuardian, c_unitAllianceEnemy, RegionCircle(UnitGetPosition(gv_purifierGuardian), 12.0), UnitFilter(0, 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterCloaked), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0)) {
        UnitSetPropertyFixed(gv_purifierGuardian, c_unitPropMovementSpeed, gv_purifierGuardianNEARSPEED);
    }
    else {
        UnitSetPropertyFixed(gv_purifierGuardian, c_unitPropMovementSpeed, gv_purifierGuardianMAXSPEED);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PurifierGuardianEnemiesAreNearBehavior_Init () {
    gt_PurifierGuardianEnemiesAreNearBehavior = TriggerCreate("gt_PurifierGuardianEnemiesAreNearBehavior_Func");
    TriggerAddEventTimePeriodic(gt_PurifierGuardianEnemiesAreNearBehavior, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Turn ON all Taking Damage Warning Qs
//--------------------------------------------------------------------------------------------------
bool gt_TurnONallTakingDamageWarningQs_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetPropertyFixed(gv_purifierGuardian, c_unitPropLife, c_unitPropCurrent) <= 10000.0) && (libCOMI_gf_MinimumDifficultyValueCoopInteger(1, 1, 0, 0, 0, 0) == 1)) {
        TriggerEnable(gt_PurifierGuardianTakingDamageWarningCasualNormFirstQ, true);
        TriggerEnable(gt_PurifierGuardianTakingDamageWarningCasualNormQ, true);
        TriggerEnable(gt_PurifierGuardianTakingDamageWarningFirstQ, true);
        TriggerEnable(gt_PurifierGuardianTakingDamageWarning1Q, true);
        TriggerEnable(gt_PurifierGuardianTakingDamageWarning2Q, true);
        TriggerEnable(gt_PurifierGuardianTakingDamageCriticalQ, true);
    }

    if ((UnitGetPropertyFixed(gv_purifierGuardian, c_unitPropLife, c_unitPropCurrent) <= 9000.0) && (libCOMI_gf_MinimumDifficultyValueCoopInteger(1, 1, 0, 0, 0, 0) == 1)) {
        TriggerEnable(gt_PurifierGuardianTakingDamageWarningCasualNormQ, true);
        TriggerEnable(gt_PurifierGuardianTakingDamageWarningFirstQ, true);
        TriggerEnable(gt_PurifierGuardianTakingDamageWarning1Q, true);
        TriggerEnable(gt_PurifierGuardianTakingDamageWarning2Q, true);
        TriggerEnable(gt_PurifierGuardianTakingDamageCriticalQ, true);
    }

    if ((UnitGetPropertyFixed(gv_purifierGuardian, c_unitPropLife, c_unitPropCurrent) <= 8000.0) && (libCOMI_gf_MinimumDifficultyValueCoopInteger(1, 1, 0, 0, 0, 0) == 1)) {
        TriggerEnable(gt_PurifierGuardianTakingDamageWarningFirstQ, true);
        TriggerEnable(gt_PurifierGuardianTakingDamageWarning1Q, true);
        TriggerEnable(gt_PurifierGuardianTakingDamageWarning2Q, true);
        TriggerEnable(gt_PurifierGuardianTakingDamageCriticalQ, true);
    }

    if ((UnitGetPropertyFixed(gv_purifierGuardian, c_unitPropLife, c_unitPropCurrent) <= 6000.0)) {
        TriggerEnable(gt_PurifierGuardianTakingDamageWarning1Q, true);
        TriggerEnable(gt_PurifierGuardianTakingDamageWarning2Q, true);
        TriggerEnable(gt_PurifierGuardianTakingDamageCriticalQ, true);
    }

    if ((UnitGetPropertyFixed(gv_purifierGuardian, c_unitPropLife, c_unitPropCurrent) <= 4000.0)) {
        TriggerEnable(gt_PurifierGuardianTakingDamageWarning2Q, true);
        TriggerEnable(gt_PurifierGuardianTakingDamageCriticalQ, true);
    }

    if ((UnitGetPropertyFixed(gv_purifierGuardian, c_unitPropLife, c_unitPropCurrent) <= 3000.0)) {
        TriggerEnable(gt_PurifierGuardianTakingDamageCriticalQ, true);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TurnONallTakingDamageWarningQs_Init () {
    gt_TurnONallTakingDamageWarningQs = TriggerCreate("gt_TurnONallTakingDamageWarningQs_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Purifier Guardian Taking Damage Warning Casual/Norm First Q
//--------------------------------------------------------------------------------------------------
bool gt_PurifierGuardianTakingDamageWarningCasualNormFirstQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libCOMI_gf_MinimumDifficultyValueCoopInteger(1, 1, 0, 0, 0, 0) == 1))) {
            return false;
        }

        if (!((UnitGetPropertyFixed(EventUnit(), c_unitPropLife, c_unitPropCurrent) <= 10000.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("TakingDamageCE", true, -1);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PurifierGuardianTakingDamageWarningCasualNormFirstQ_Init () {
    gt_PurifierGuardianTakingDamageWarningCasualNormFirstQ = TriggerCreate("gt_PurifierGuardianTakingDamageWarningCasualNormFirstQ_Func");
    TriggerAddEventUnitDamaged(gt_PurifierGuardianTakingDamageWarningCasualNormFirstQ, UnitRefFromVariable("gv_purifierGuardian"), c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Purifier Guardian Taking Damage Warning Casual/Norm Q
//--------------------------------------------------------------------------------------------------
bool gt_PurifierGuardianTakingDamageWarningCasualNormQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libCOMI_gf_MinimumDifficultyValueCoopInteger(1, 1, 0, 0, 0, 0) == 1))) {
            return false;
        }

        if (!((UnitGetPropertyFixed(EventUnit(), c_unitPropLife, c_unitPropCurrent) <= 9000.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("TakingDamageCE", true, -1);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PurifierGuardianTakingDamageWarningCasualNormQ_Init () {
    gt_PurifierGuardianTakingDamageWarningCasualNormQ = TriggerCreate("gt_PurifierGuardianTakingDamageWarningCasualNormQ_Func");
    TriggerAddEventUnitDamaged(gt_PurifierGuardianTakingDamageWarningCasualNormQ, UnitRefFromVariable("gv_purifierGuardian"), c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Purifier Guardian Taking Damage Warning First Q
//--------------------------------------------------------------------------------------------------
bool gt_PurifierGuardianTakingDamageWarningFirstQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetPropertyFixed(EventUnit(), c_unitPropLife, c_unitPropCurrent) <= 8000.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("TakingDamageCE", true, -1);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PurifierGuardianTakingDamageWarningFirstQ_Init () {
    gt_PurifierGuardianTakingDamageWarningFirstQ = TriggerCreate("gt_PurifierGuardianTakingDamageWarningFirstQ_Func");
    TriggerAddEventUnitDamaged(gt_PurifierGuardianTakingDamageWarningFirstQ, UnitRefFromVariable("gv_purifierGuardian"), c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Purifier Guardian Taking Damage Warning 1 Q
//--------------------------------------------------------------------------------------------------
bool gt_PurifierGuardianTakingDamageWarning1Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetPropertyFixed(EventUnit(), c_unitPropLife, c_unitPropCurrent) <= 6000.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("TakingDamageCE", true, -1);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PurifierGuardianTakingDamageWarning1Q_Init () {
    gt_PurifierGuardianTakingDamageWarning1Q = TriggerCreate("gt_PurifierGuardianTakingDamageWarning1Q_Func");
    TriggerAddEventUnitDamaged(gt_PurifierGuardianTakingDamageWarning1Q, UnitRefFromVariable("gv_purifierGuardian"), c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Purifier Guardian Taking Damage Warning 2 Q
//--------------------------------------------------------------------------------------------------
bool gt_PurifierGuardianTakingDamageWarning2Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetPropertyFixed(EventUnit(), c_unitPropLife, c_unitPropCurrent) <= 4000.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("TakingDamageCE", true, -1);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PurifierGuardianTakingDamageWarning2Q_Init () {
    gt_PurifierGuardianTakingDamageWarning2Q = TriggerCreate("gt_PurifierGuardianTakingDamageWarning2Q_Func");
    TriggerAddEventUnitDamaged(gt_PurifierGuardianTakingDamageWarning2Q, UnitRefFromVariable("gv_purifierGuardian"), c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Purifier Guardian Taking Damage Critical Q
//--------------------------------------------------------------------------------------------------
bool gt_PurifierGuardianTakingDamageCriticalQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetPropertyFixed(EventUnit(), c_unitPropLife, c_unitPropCurrent) <= 3000.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("TakingDamageCriticalCE", true, -1);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    Wait(15.0, c_timeAI);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PurifierGuardianTakingDamageCriticalQ_Init () {
    gt_PurifierGuardianTakingDamageCriticalQ = TriggerCreate("gt_PurifierGuardianTakingDamageCriticalQ_Func");
    TriggerAddEventUnitDamaged(gt_PurifierGuardianTakingDamageCriticalQ, UnitRefFromVariable("gv_purifierGuardian"), c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Purifier Guardian Moving Q
//--------------------------------------------------------------------------------------------------
bool gt_PurifierGuardianMovingQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("EscortMovingCE", true, -1);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PurifierGuardianMovingQ_Init () {
    gt_PurifierGuardianMovingQ = TriggerCreate("gt_PurifierGuardianMovingQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Purifier Guardian About to Move Generic Q
//--------------------------------------------------------------------------------------------------
bool gt_PurifierGuardianAbouttoMoveGenericQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("AboutToMoveCE", true, -1);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PurifierGuardianAbouttoMoveGenericQ_Init () {
    gt_PurifierGuardianAbouttoMoveGenericQ = TriggerCreate("gt_PurifierGuardianAbouttoMoveGenericQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Purifier Guardian About to Move to Mid Lock Q
//--------------------------------------------------------------------------------------------------
bool gt_PurifierGuardianAbouttoMovetoMidLockQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("AboutToMove3rdLockCE", true, -1);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PurifierGuardianAbouttoMovetoMidLockQ_Init () {
    gt_PurifierGuardianAbouttoMovetoMidLockQ = TriggerCreate("gt_PurifierGuardianAbouttoMovetoMidLockQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Purifier Guardian About to Move to Final Lock Q
//--------------------------------------------------------------------------------------------------
bool gt_PurifierGuardianAbouttoMovetoFinalLockQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("AboutToMoveFinalCE", true, -1);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PurifierGuardianAbouttoMovetoFinalLockQ_Init () {
    gt_PurifierGuardianAbouttoMovetoFinalLockQ = TriggerCreate("gt_PurifierGuardianAbouttoMovetoFinalLockQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Purifier Guardian Holdout Start Q
//--------------------------------------------------------------------------------------------------
bool gt_PurifierGuardianHoldoutStartQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("HoldoutStartCE", true, -1);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PurifierGuardianHoldoutStartQ_Init () {
    gt_PurifierGuardianHoldoutStartQ = TriggerCreate("gt_PurifierGuardianHoldoutStartQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Purifier Guardian Holdout Complete Generic Q
//--------------------------------------------------------------------------------------------------
bool gt_PurifierGuardianHoldoutCompleteGenericQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("HoldoutCompleteRepeat", true, -1);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PurifierGuardianHoldoutCompleteGenericQ_Init () {
    gt_PurifierGuardianHoldoutCompleteGenericQ = TriggerCreate("gt_PurifierGuardianHoldoutCompleteGenericQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Purifier Guardian Holdout Complete First Q
//--------------------------------------------------------------------------------------------------
bool gt_PurifierGuardianHoldoutCompleteFirstQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("HoldoutCompleteFirstCE", true, -1);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PurifierGuardianHoldoutCompleteFirstQ_Init () {
    gt_PurifierGuardianHoldoutCompleteFirstQ = TriggerCreate("gt_PurifierGuardianHoldoutCompleteFirstQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Purifier Guardian Pause on Barrage Q
//--------------------------------------------------------------------------------------------------
bool gt_PurifierGuardianPauseonBarrageQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    SoundPlayForPlayer(SoundLink("CybrosEscort_PurifierGuardian_Disrupt_PowerDown_EventTrig", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("HoldoutPausedCE", true, -1);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    Wait(45.0, c_timeAI);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PurifierGuardianPauseonBarrageQ_Init () {
    gt_PurifierGuardianPauseonBarrageQ = TriggerCreate("gt_PurifierGuardianPauseonBarrageQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug - Create Suppression Tower
//--------------------------------------------------------------------------------------------------
bool gt_DebugCreateSuppressionTower_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_purifierLockIndex = StringToInt(StringWord(EventChatMessage(false), 2));
    gv_towerHealth = libCOMI_gf_MinimumDifficultyValueCoopInteger(1000, 1000, 1500, 2000, 0, 0);
    gv_towerShields = libCOMI_gf_MinimumDifficultyValueCoopInteger(2000, 2000, 2750, 3000, 0, 0);
    UnitCreate(1, "CybrosEscortTowerDown", 0, gv_pLAYER_03_Player01Enemy, CameraGetTarget(EventPlayer()), 270.0);
    gf_SpawnSuppressionTower(CameraGetTarget(EventPlayer()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebugCreateSuppressionTower_Init () {
    gt_DebugCreateSuppressionTower = TriggerCreate("gt_DebugCreateSuppressionTower_Func");
    TriggerAddEventChatMessage(gt_DebugCreateSuppressionTower, c_playerAny, "mktower", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 02 Loading Complete
//--------------------------------------------------------------------------------------------------
bool gt_Init02LoadingComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_Init03Players, true, false);
    TriggerExecute(gt_Init05Units, true, false);
    TriggerExecute(gt_Init07Environment, true, false);
    TriggerExecute(gt_Init08Difficulties, true, false);
    TriggerExecute(gt_StartAI, true, false);
    TriggerExecute(gt_StartGameQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init02LoadingComplete_Init () {
    gt_Init02LoadingComplete = TriggerCreate("gt_Init02LoadingComplete_Func");
    TriggerAddEventGeneric(gt_Init02LoadingComplete, libCOMI_gv_COOP_MISSION_STARTED_EVENT);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 03 Players
//--------------------------------------------------------------------------------------------------
bool gt_Init03Players_Func (bool testConds, bool runActions) {
    // Variable Declarations
    playergroup lv_humanPlayersAndAllies;
    playergroup lv_enemyPlayers;
    int lv_humanIter;
    int lv_enemyIter;
    string lv_enemyFaction;

    // Automatic Variable Declarations
    playergroup auto86440D1C_g;
    int auto86440D1C_var;
    playergroup auto545EF099_g;
    int auto545EF099_var;
    playergroup auto3BEAEC1D_g;
    int auto3BEAEC1D_var;

    // Variable Initialization
    lv_humanPlayersAndAllies = PlayerGroupEmpty();
    lv_enemyPlayers = PlayerGroupEmpty();
    lv_enemyFaction = libCOMI_gf_GetEnemyFaction();

    // Actions
    if (!runActions) {
        return true;
    }

    gv_pLAYER_01_USER = libCOMI_gf_GetRolePlayer(1);
    gv_pLAYER_02_USER = libCOMI_gf_GetRolePlayer(2);
    if (((lv_enemyFaction == "Terran") || (lv_enemyFaction == "Protoss") || (lv_enemyFaction == "Zerg"))) {
        auto86440D1C_g = libCOMI_gf_GetEnemyPlayers();
        auto86440D1C_var = -1;
        while (true) {
            auto86440D1C_var = PlayerGroupNextPlayer(auto86440D1C_g, auto86440D1C_var);
            if (auto86440D1C_var < 0) { break; }
            libNtve_gf_PlayerApplySkinReplacingExistingUnit(auto86440D1C_var, "PurifierHologram", true);
        }
    }

    auto545EF099_g = libCOMI_gf_GetEnemyPlayers();
    auto545EF099_var = -1;
    while (true) {
        auto545EF099_var = PlayerGroupNextPlayer(auto545EF099_g, auto545EF099_var);
        if (auto545EF099_var < 0) { break; }
        libCOMI_gf_SetAllianceCoop(auto545EF099_var, gv_pLAYER_06_BonusNetural, libNtve_ge_AllianceSetting_Neutral);
        libCOMI_gf_SetAllianceCoop(auto545EF099_var, gv_pLAYER_09_BonusHostileFlag1, libNtve_ge_AllianceSetting_Neutral);
        libCOMI_gf_SetAllianceCoop(auto545EF099_var, gv_pLAYER_10_BonusHostileFlag2, libNtve_ge_AllianceSetting_Neutral);
    }
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(gv_pLAYER_05_PurifierGuardian, "PurifierGuardian", true);
    auto3BEAEC1D_g = libCOMI_gf_GetAlliedCommandersPlayers();
    auto3BEAEC1D_var = -1;
    while (true) {
        auto3BEAEC1D_var = PlayerGroupNextPlayer(auto3BEAEC1D_g, auto3BEAEC1D_var);
        if (auto3BEAEC1D_var < 0) { break; }
        libCOMI_gf_SetAllianceCoop(auto3BEAEC1D_var, gv_pLAYER_06_BonusNetural, libNtve_ge_AllianceSetting_Neutral);
        libCOMI_gf_SetAllianceCoop(auto3BEAEC1D_var, gv_pLAYER_09_BonusHostileFlag1, libNtve_ge_AllianceSetting_Neutral);
        libCOMI_gf_SetAllianceCoop(auto3BEAEC1D_var, gv_pLAYER_10_BonusHostileFlag2, libNtve_ge_AllianceSetting_Neutral);
        libCOMI_gf_SetAllianceAspectCoop(auto3BEAEC1D_var, c_allianceIdSpend, gv_pLAYER_09_BonusHostileFlag1, true);
        libCOMI_gf_SetAllianceAspectCoop(auto3BEAEC1D_var, c_allianceIdSpend, gv_pLAYER_10_BonusHostileFlag2, true);
    }
    libCOMI_gf_SetAllianceCoop(gv_pLAYER_05_PurifierGuardian, gv_pLAYER_06_BonusNetural, libNtve_ge_AllianceSetting_Neutral);
    libCOMI_gf_SetAllianceCoop(gv_pLAYER_05_PurifierGuardian, gv_pLAYER_09_BonusHostileFlag1, libNtve_ge_AllianceSetting_Neutral);
    libCOMI_gf_SetAllianceCoop(gv_pLAYER_05_PurifierGuardian, gv_pLAYER_10_BonusHostileFlag2, libNtve_ge_AllianceSetting_Neutral);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init03Players_Init () {
    gt_Init03Players = TriggerCreate("gt_Init03Players_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 05 Units
//--------------------------------------------------------------------------------------------------
bool gt_Init05Units_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_arrayIter;

    // Automatic Variable Declarations
    unitgroup autoDE653E90_g;
    int autoDE653E90_u;
    unit autoDE653E90_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsAtPoint2(1, "MegalithCutter", 0, gv_pLAYER_05_PurifierGuardian, PointFromId(1752754899));
    gv_purifierGuardian = UnitLastCreated();
    libCOMI_gf_SetUnitInfoTextCampaign(gv_purifierGuardian, null, StringExternal("Param/Value/DD4BBCDE"), null);
    gv_purifierLockPtArray[0] = PointFromId(1365053019);
    gv_purifierLockPtArray[1] = PointFromId(65632967);
    gv_purifierLockPtArray[2] = PointFromId(1359675866);
    gv_purifierLockPtArray[3] = PointFromId(894022767);
    gv_purifierLockPtArray[4] = PointFromId(1549405367);
    UnitSetPropertyFixed(gv_purifierGuardian, c_unitPropMovementSpeed, gv_purifierGuardianMAXSPEED);
    UnitAbilityEnable(gv_purifierGuardian, "attack", false);
    UnitAbilityEnable(gv_purifierGuardian, "MegalithCutterBeam", false);
    UnitStatusBarOverride(gv_purifierGuardian, c_unitStatusGroupAll);
    libNtve_gf_AttachActorToUnit(gv_purifierGuardian, "SensorTowerRadar", "Ref_Head");
    UnitBehaviorAdd(gv_purifierGuardian, "SensorTowerRadar", gv_purifierGuardian, 1);
    gv_downloadCenter1 = UnitFromId(823409936);
    UnitAbilityEnable(gv_downloadCenter1, "ACGlobalShareUnitNoEnemy", false);
    gv_downloadCenter2 = UnitFromId(1225937925);
    UnitAbilityEnable(gv_downloadCenter2, "ACGlobalShareUnitNoEnemy", false);
    UnitSetState(gv_downloadCenter1, c_unitStateTargetable, false);
    UnitSetState(gv_downloadCenter1, c_unitStateInvulnerable, true);
    UnitSetState(gv_downloadCenter2, c_unitStateTargetable, false);
    UnitSetState(gv_downloadCenter2, c_unitStateInvulnerable, true);
    libCOMI_gf_SetUnitInfoTextCampaign(gv_downloadCenter1, null, StringExternal("Param/Value/6A98C1E9"), null);
    libCOMI_gf_SetUnitInfoTextCampaign(gv_downloadCenter2, null, StringExternal("Param/Value/62B7CF9F"), null);
    CatalogFieldValueSet(c_gameCatalogAbil, "CybrosEscortDownloader", "InfoArray[" + IntToString(0) + "].Resource[" + IntToString(0) + "]", gv_pLAYER_09_BonusHostileFlag1, "350");
    CatalogFieldValueSet(c_gameCatalogAbil, "CybrosEscortDownloader", "InfoArray[" + IntToString(0) + "].Resource[" + IntToString(1) + "]", gv_pLAYER_09_BonusHostileFlag1, "100");
    CatalogFieldValueSet(c_gameCatalogAbil, "CybrosEscortDownloader", "InfoArray[" + IntToString(0) + "].Time", gv_pLAYER_09_BonusHostileFlag1, "15");
    CatalogFieldValueSet(c_gameCatalogAbil, "CybrosEscortDownloader", "InfoArray[" + IntToString(1) + "].Resource[" + IntToString(0) + "]", gv_pLAYER_09_BonusHostileFlag1, "350");
    CatalogFieldValueSet(c_gameCatalogAbil, "CybrosEscortDownloader", "InfoArray[" + IntToString(1) + "].Resource[" + IntToString(1) + "]", gv_pLAYER_09_BonusHostileFlag1, "100");
    CatalogFieldValueSet(c_gameCatalogAbil, "CybrosEscortDownloader", "InfoArray[" + IntToString(1) + "].Time", gv_pLAYER_09_BonusHostileFlag1, "15");
    CatalogFieldValueSet(c_gameCatalogAbil, "CybrosEscortDownloader", "InfoArray[" + IntToString(2) + "].Resource[" + IntToString(0) + "]", gv_pLAYER_09_BonusHostileFlag1, "350");
    CatalogFieldValueSet(c_gameCatalogAbil, "CybrosEscortDownloader", "InfoArray[" + IntToString(2) + "].Resource[" + IntToString(1) + "]", gv_pLAYER_09_BonusHostileFlag1, "100");
    CatalogFieldValueSet(c_gameCatalogAbil, "CybrosEscortDownloader", "InfoArray[" + IntToString(2) + "].Time", gv_pLAYER_09_BonusHostileFlag1, "15");
    CatalogFieldValueSet(c_gameCatalogAbil, "CybrosEscortDownloader", "InfoArray[" + IntToString(0) + "].Resource[" + IntToString(0) + "]", gv_pLAYER_10_BonusHostileFlag2, "350");
    CatalogFieldValueSet(c_gameCatalogAbil, "CybrosEscortDownloader", "InfoArray[" + IntToString(0) + "].Resource[" + IntToString(1) + "]", gv_pLAYER_10_BonusHostileFlag2, "100");
    CatalogFieldValueSet(c_gameCatalogAbil, "CybrosEscortDownloader", "InfoArray[" + IntToString(0) + "].Time", gv_pLAYER_10_BonusHostileFlag2, "15");
    CatalogFieldValueSet(c_gameCatalogAbil, "CybrosEscortDownloader", "InfoArray[" + IntToString(1) + "].Resource[" + IntToString(0) + "]", gv_pLAYER_10_BonusHostileFlag2, "350");
    CatalogFieldValueSet(c_gameCatalogAbil, "CybrosEscortDownloader", "InfoArray[" + IntToString(1) + "].Resource[" + IntToString(1) + "]", gv_pLAYER_10_BonusHostileFlag2, "100");
    CatalogFieldValueSet(c_gameCatalogAbil, "CybrosEscortDownloader", "InfoArray[" + IntToString(1) + "].Time", gv_pLAYER_10_BonusHostileFlag2, "15");
    CatalogFieldValueSet(c_gameCatalogAbil, "CybrosEscortDownloader", "InfoArray[" + IntToString(2) + "].Resource[" + IntToString(0) + "]", gv_pLAYER_10_BonusHostileFlag2, "350");
    CatalogFieldValueSet(c_gameCatalogAbil, "CybrosEscortDownloader", "InfoArray[" + IntToString(2) + "].Resource[" + IntToString(1) + "]", gv_pLAYER_10_BonusHostileFlag2, "100");
    CatalogFieldValueSet(c_gameCatalogAbil, "CybrosEscortDownloader", "InfoArray[" + IntToString(2) + "].Time", gv_pLAYER_10_BonusHostileFlag2, "15");
    CatalogFieldValueSet(c_gameCatalogButton, "DownloadBackupPart1", "Name", gv_pLAYER_10_BonusHostileFlag2, "Button/Name/DownloadBackupV2Part1");
    CatalogFieldValueSet(c_gameCatalogButton, "DownloadBackupPart1", "Tooltip", gv_pLAYER_10_BonusHostileFlag2, "Button/Tooltip/DownloadBackupV2Part1");
    CatalogFieldValueSet(c_gameCatalogButton, "DownloadBackupPart1", "AlertTooltip", gv_pLAYER_10_BonusHostileFlag2, "Button/Tooltip/DownloadBackupV2Part1");
    CatalogFieldValueSet(c_gameCatalogButton, "DownloadBackupPart2", "Name", gv_pLAYER_10_BonusHostileFlag2, "Button/Name/DownloadBackupV2Part2");
    CatalogFieldValueSet(c_gameCatalogButton, "DownloadBackupPart2", "Tooltip", gv_pLAYER_10_BonusHostileFlag2, "Button/Tooltip/DownloadBackupV2Part2");
    CatalogFieldValueSet(c_gameCatalogButton, "DownloadBackupPart2", "AlertTooltip", gv_pLAYER_10_BonusHostileFlag2, "Button/Tooltip/DownloadBackupV2Part2");
    CatalogFieldValueSet(c_gameCatalogButton, "DownloadBackupPart3", "Name", gv_pLAYER_10_BonusHostileFlag2, "Button/Name/DownloadBackupV2Part3");
    CatalogFieldValueSet(c_gameCatalogButton, "DownloadBackupPart3", "Tooltip", gv_pLAYER_10_BonusHostileFlag2, "Button/Tooltip/DownloadBackupV2Part3");
    CatalogFieldValueSet(c_gameCatalogButton, "DownloadBackupPart3", "AlertTooltip", gv_pLAYER_10_BonusHostileFlag2, "Button/Tooltip/DownloadBackupV2Part3");
    UnitSetState(gv_purifierGuardian, c_unitStateSelectable, true);
    UnitSetState(gv_purifierGuardian, c_unitStateTargetable, false);
    autoDE653E90_g = UnitGroup("CybrosEscortTowerDown", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoDE653E90_u = UnitGroupCount(autoDE653E90_g, c_unitCountAll);
    for (;; autoDE653E90_u -= 1) {
        autoDE653E90_var = UnitGroupUnitFromEnd(autoDE653E90_g, autoDE653E90_u);
        if (autoDE653E90_var == null) { break; }
        libCOMI_gf_SetUnitInfoTextCampaign(autoDE653E90_var, null, UnitGetName(autoDE653E90_var), null);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init05Units_Init () {
    gt_Init05Units = TriggerCreate("gt_Init05Units_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 07 Environment
//--------------------------------------------------------------------------------------------------
bool gt_Init07Environment_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SendActorMessageToGameRegionWithFilters(RegionEntireMap(), c_actorIntersectAgainstRadiusContact, "Signal WorkOn", "Doodad", "");
    libNtve_gf_SendActorMessageToGameRegionWithFilters(RegionFromId(7), c_actorIntersectAgainstRadiusContact, "Signal WorkOff", "Doodad", "");
    libNtve_gf_SendActorMessageToGameRegionWithFilters(RegionFromId(16), c_actorIntersectAgainstRadiusContact, "Signal WorkOff", "Doodad", "");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init07Environment_Init () {
    gt_Init07Environment = TriggerCreate("gt_Init07Environment_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 08 Difficulties
//--------------------------------------------------------------------------------------------------
bool gt_Init08Difficulties_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto24904E8A_ae = gv_pURIFIER_LOCK_COUNT;
    int auto24904E8A_var;

    // Actions
    if (!runActions) {
        return true;
    }

    gv_purifierGuardianHealth = libCOMI_gf_MinimumDifficultyValueCoopInteger(10000, 10000, 8000, 8000, 0, 0);
    gv_purifierGuardianShields = libCOMI_gf_MinimumDifficultyValueCoopInteger(0, 0, 0, 0, 0, 0);
    gv_purifierGuardianShieldRegen = libCOMI_gf_MinimumDifficultyValueCoopInteger(0, 0, 0, 0, 0, 0);
    UnitSetPropertyFixed(gv_purifierGuardian, c_unitPropLifeMax, gv_purifierGuardianHealth);
    UnitSetPropertyFixed(gv_purifierGuardian, c_unitPropLifePercent, 100.0);
    UnitSetPropertyFixed(gv_purifierGuardian, c_unitPropShieldsMax, gv_purifierGuardianShields);
    UnitSetPropertyFixed(gv_purifierGuardian, c_unitPropShieldsPercent, 100.0);
    UnitSetPropertyFixed(gv_purifierGuardian, c_unitPropShieldsRegen, gv_purifierGuardianShieldRegen);
    gv_suppressionTower_MultiShotCooldown = libCOMI_gf_MinimumDifficultyValueCoopReal(18.0, 18.0, 12.0, 7.0, 0.0, 0.0);
    gv_suppressionTower_SingleShotCooldown = libCOMI_gf_MinimumDifficultyValueCoopReal(30.0, 30.0, 16.0, 11.0, 0.0, 0.0);
    gv_suppressionTower_BarrageCooldown = libCOMI_gf_MinimumDifficultyValueCoopReal(8.0, 8.0, 6.0, 6.0, 0.0, 0.0);
    gv_suppressionTower_AntiKitingTimer = libCOMI_gf_MinimumDifficultyValueCoopReal(524287.0, 524287.0, 45.0, 30.0, 0.0, 0.0);
    gv_suppressionTower_EnrageTimer = libCOMI_gf_MinimumDifficultyValueCoopReal(524287.0, 524287.0, 240.0, 180.0, 0.0, 0.0);
    auto24904E8A_var = 1;
    for ( ; auto24904E8A_var <= auto24904E8A_ae; auto24904E8A_var += 1 ) {
        gv_suppressionTowerAttackRange[auto24904E8A_var] = libCOMI_gf_MinimumDifficultyValueCoopReal(6.0, 6.0, 10.0, 12.0, 0.0, 0.0);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init08Difficulties_Init () {
    gt_Init08Difficulties = TriggerCreate("gt_Init08Difficulties_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start AI
//--------------------------------------------------------------------------------------------------
bool gt_StartAI_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_missionMechanicPlayer;
    playergroup lv_enemyAIPlayers;
    unitgroup lv_enemyZergTownHalls;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_enemyAIPlayers = PlayerGroupEmpty();
    lv_enemyZergTownHalls = UnitGroupEmpty();

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartAI_Init () {
    gt_StartAI = TriggerCreate("gt_StartAI_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Game Q
//--------------------------------------------------------------------------------------------------
bool gt_StartGameQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto974C4B71_val;

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_DisplaySingularBossBarVoidCampaign("Assets\\Textures\\megalithportrait_static.dds", StringExternal("Param/Value/F6E555FA"), 100);
    libCOMI_gf_SetSingularBossBarBossVoidCampaign(gv_purifierGuardian, true);
    TriggerExecute(gt_PurifierGuardianProgression, true, false);
    TriggerExecute(gt_RunAttackWaves, true, false);
    TriggerEnable(gt_ObjectiveDownloadBackups1Initialization, true);
    TriggerEnable(gt_ObjectiveDownloadBackups2Initialization, true);
    Wait(7.0, c_timeReal);
    TriggerExecute(gt_ObjectivePurifierGuardianMustSurviveCreate, true, true);
    TriggerExecute(gt_ObjectiveActivatePurifierLocksCreate, true, true);
    libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_Primary, UnitGetPosition(gv_purifierGuardian), StringExternal("Param/Value/74E15581"));
    gv_purifierGuardianPing = PingLastCreated();
    libHots_gf_StorePingForUnit(gv_purifierGuardian, 1, gv_purifierGuardianPing);
    PingSetUnit(gv_purifierGuardianPing, gv_purifierGuardian);
    Wait(3.0, c_timeReal);
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    auto974C4B71_val = RandomInt(0, 2);
    if (auto974C4B71_val == 0) {
        libCOMI_gf_SendMissionTransmission("Intro1CE", true, -1);
    }
    else if (auto974C4B71_val == 1) {
        libCOMI_gf_SendMissionTransmission("Intro2CE", true, -1);
    }
    else {
        libCOMI_gf_SendMissionTransmission("Intro3CE", true, -1);
    }
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartGameQ_Init () {
    gt_StartGameQ = TriggerCreate("gt_StartGameQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger Initialization
//--------------------------------------------------------------------------------------------------
void InitTriggers () {
    gt_ObjectiveDownloadBackups1Create_Init();
    gt_ObjectiveDownloadBackups1Complete_Init();
    gt_ObjectiveDownloadBackups1Update_Init();
    gt_ObjectiveDownloadBackups1Failed_Init();
    gt_ObjectiveDownloadBackups2Create_Init();
    gt_ObjectiveDownloadBackups2Complete_Init();
    gt_ObjectiveDownloadBackups2Update_Init();
    gt_ObjectiveDownloadBackups2Failed_Init();
    gt_ObjectivePurifierGuardianMustSurviveCreate_Init();
    gt_ObjectivePurifierGuardianMustSurviveComplete_Init();
    gt_ObjectivePurifierGuardianMustSurviveFailed_Init();
    gt_ObjectiveActivatePurifierLocksCreate_Init();
    gt_ObjectiveActivatePurifierLocksComplete_Init();
    gt_ObjectiveActivatePurifierLocksUpdate_Init();
    gt_ObjectiveActivatePurifierLocksFailed_Init();
    gt_ScoreScreenHarvesterDamage_Init();
    gt_SuppressionTowerAttackDistance_Init();
    gt_RunAttackWaves_Init();
    gt_AttackWave01_Init();
    gt_AttackWave02_Init();
    gt_AttackWave03MainBaseAttack_Init();
    gt_EnemyAttackingFirstQ_Init();
    gt_EnemyAttackingQ_Init();
    gt_DefeatPrimaryObjectiveFailed_Init();
    gt_VictoryActivatePurifierLocksCompleted_Init();
    gt_ObjectiveDownloadBackups1Initialization_Init();
    gt_DownloadBackups1ListenStartDownload_Init();
    gt_DownloadBackups1AttackWaves_Init();
    gt_DownloadBackups1ListenCompleteDownload_Init();
    gt_DownloadCenter1DiesFail_Init();
    gt_DownloadBackups1TimerExpireFail_Init();
    gt_ObjectiveDownloadBackups1TimerUpdate_Init();
    gt_ObjectiveDownloadBackups2Initialization_Init();
    gt_DownloadBackups2ListenStartDownload_Init();
    gt_DownloadBackups2AttackWaves_Init();
    gt_DownloadBackups2ListenCompleteDownload_Init();
    gt_DownloadCenter2DiesFail_Init();
    gt_DownloadBackups2TimerExpireFail_Init();
    gt_ObjectiveDownloadBackups2TimerUpdate_Init();
    gt_ObjectiveDownloadBackups1StartQ_Init();
    gt_ObjectiveDownloadBackups1FailedTimerExpireQ_Init();
    gt_ObjectiveDownloadBackups1FailedDestroyedQ_Init();
    gt_ObjectiveDownloadBackups1SuccessQ_Init();
    gt_ObjectiveDownloadBackupsDownloadCompleteQ_Init();
    gt_ObjectiveDownloadBackups1TimeWarningLogicQ_Init();
    gt_ObjectiveDownloadBackupsTimeFinalWarningLogicQ_Init();
    gt_ObjectiveDownloadBackups2StartQ_Init();
    gt_ObjectiveDownloadBackups2FailedTimerExpireQ_Init();
    gt_ObjectiveDownloadBackups2FailedDestroyedQ_Init();
    gt_ObjectiveDownloadBackups2SuccessQ_Init();
    gt_ObjectiveDownloadBackups2TimeWarningLogicQ_Init();
    gt_ObjectiveDownloadBackups2TimeFinalWarningLogicQ_Init();
    gt_ObjectiveDownloadBackupsUnderAttackQ_Init();
    gt_SuppressionTowerDeathActions_Init();
    gt_EscortHoldoutLock2_Init();
    gt_EscortHoldoutLock3_Init();
    gt_EscortHoldoutLock4_Init();
    gt_EscortHoldoutLock1_Init();
    gt_HoldoutStartingVOQ_Init();
    gt_HoldoutHalfDoneVOQ_Init();
    gt_HoldoutAlmostDoneVOQ_Init();
    gt_HoldoutDefenseTowerFirstSpawnQ_Init();
    gt_HoldoutDefenseTowerSoloSpawnQ_Init();
    gt_HoldoutDefenseTowerMultiSpawnQ_Init();
    gt_HoldoutDefenseTowerDestroyedQ_Init();
    gt_PurifierGuardianProgression_Init();
    gt_PurifierGuardianPauseonBarrage_Init();
    gt_PurifierGuardianUnPauseHoldoutTimer_Init();
    gt_PurifierGuardianDiesEvent_Init();
    gt_PurifierGuardianIsUnderAttackBehavior_Init();
    gt_PurifierGuardianEnemiesAreNearBehavior_Init();
    gt_TurnONallTakingDamageWarningQs_Init();
    gt_PurifierGuardianTakingDamageWarningCasualNormFirstQ_Init();
    gt_PurifierGuardianTakingDamageWarningCasualNormQ_Init();
    gt_PurifierGuardianTakingDamageWarningFirstQ_Init();
    gt_PurifierGuardianTakingDamageWarning1Q_Init();
    gt_PurifierGuardianTakingDamageWarning2Q_Init();
    gt_PurifierGuardianTakingDamageCriticalQ_Init();
    gt_PurifierGuardianMovingQ_Init();
    gt_PurifierGuardianAbouttoMoveGenericQ_Init();
    gt_PurifierGuardianAbouttoMovetoMidLockQ_Init();
    gt_PurifierGuardianAbouttoMovetoFinalLockQ_Init();
    gt_PurifierGuardianHoldoutStartQ_Init();
    gt_PurifierGuardianHoldoutCompleteGenericQ_Init();
    gt_PurifierGuardianHoldoutCompleteFirstQ_Init();
    gt_PurifierGuardianPauseonBarrageQ_Init();
    gt_DebugCreateSuppressionTower_Init();
    gt_Init02LoadingComplete_Init();
    gt_Init03Players_Init();
    gt_Init05Units_Init();
    gt_Init07Environment_Init();
    gt_Init08Difficulties_Init();
    gt_StartAI_Init();
    gt_StartGameQ_Init();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void InitMap () {
    InitLibs();
    InitGlobals();
    InitTriggers();
}
