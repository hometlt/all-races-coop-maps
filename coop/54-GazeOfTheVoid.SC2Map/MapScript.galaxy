//==================================================================================================
// 
// Generated Map Script
// 
// Name:   Gaze of the Void RTC2017
// 
//==================================================================================================
include "TriggerLibs/NativeLib"
include "libARRA"
include "LibCOMI"
include "aiF917F4D7"

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void InitLibs () {
    libNtve_InitLib();
    libARRA_InitLib();
    libCOMI_InitLib();
}

//--------------------------------------------------------------------------------------------------
// Constants
//--------------------------------------------------------------------------------------------------
const int gv_pLAYER_01_USER = 1;
const int gv_pLAYER_02_USER = 2;
const int gv_pLAYER_03_ENEMY = 3;
const int gv_pLAYER_04_ENEMY = 4;

//--------------------------------------------------------------------------------------------------
// Global Variables
//--------------------------------------------------------------------------------------------------
playergroup gv_enemyGroup;
int[6] gv_counter;
unit gv_voidbeast;
region gv_current;
region[16] gv_c;
region[16] gv_region;
point[3] gv_spawnloc;
string[4] gv_unitstospawn;
string[4] gv_unitstospawn2;
point gv_victoryCompletePan;
int gv_objectiveDestroyTheEnemyBase;
int gv_objectivePreventTimerExpire2;
unitgroup gv_corruption;
int gv_objectivePreventTimerExpire;

void InitGlobals () {
    gv_enemyGroup = PlayerGroupEmpty();
    gv_voidbeast = UnitFromId(1302312793);
    gv_current = RegionFromId(32);
    gv_objectiveDestroyTheEnemyBase = c_invalidObjectiveId;
    gv_objectivePreventTimerExpire2 = c_invalidObjectiveId;
    gv_corruption = UnitGroupEmpty();
    gv_objectivePreventTimerExpire = c_invalidObjectiveId;
}

//--------------------------------------------------------------------------------------------------
// Global Function Declarations
//--------------------------------------------------------------------------------------------------
void gf_RunMissionEvent (trigger lp_missionEventTrigger, fixed lp_missionEventTime);
void gf_RunAttackWaveatMissionTime (trigger lp_attackWave, fixed lp_time);

//--------------------------------------------------------------------------------------------------
// Trigger Variables
//--------------------------------------------------------------------------------------------------
trigger gt_Init01LoadData;
trigger gt_Init02Players;
trigger gt_Init03LoadingComplete;
trigger gt_Init04Technology;
trigger gt_Init05Units;
trigger gt_Init06MusicSound;
trigger gt_Init07Environment;
trigger gt_Init08Difficulties;
trigger gt_DebugCantFail;
trigger gt_StartGameQ;
trigger gt_enemyvoid;
trigger gt_shield;
trigger gt_QWERTY;
trigger gt_trydetr;
trigger gt_Hulk;
trigger gt_ShowandUpdateObjectiveMarkers;
trigger gt_mc;
trigger gt_Defcorruption;
trigger gt_Defcorruption2;
trigger gt_spawn;
trigger gt_kindofai;
trigger gt_laststand;
trigger gt_EnemyAttackingQ;
trigger gt_DefeatBaseDead;
trigger gt_DefeatPrimaryObjectiveFailed;
trigger gt_VictoryPrimaryObjectiveComplete;
trigger gt_VictorySequence;
trigger gt_VictoryFanfareQ;
trigger gt_Victory;
trigger gt_Corruption;
trigger gt_Defeat;
trigger gt_StartAI;
trigger gt_AIAttackWaves;
trigger gt_AttackWave01;
trigger gt_AttackWave02;
trigger gt_AttackWave03;
trigger gt_AttackWave04;
trigger gt_AttackWave05;
trigger gt_AttackWave06;
trigger gt_AttackWave07;
trigger gt_ObjectiveDestroyTheEnemyBaseCreate;
trigger gt_ObjectiveDestroyTheEnemyBaseComplete;
trigger gt_ObjectiveDestroyTheEnemyBaseUpdate;
trigger gt_ObjectiveDestroyTheEnemyBaseFailed;
trigger gt_ObjectivePreventTimerExpireCreate2;
trigger gt_ObjectivePreventTimerExpireComplete2;
trigger gt_ObjectivePreventTimerExpireUpdate2;
trigger gt_ObjectivePreventTimerExpireFailed2;
trigger gt_ObjectivePreventTimerExpireCreate;
trigger gt_ObjectivePreventTimerExpireComplete;
trigger gt_ObjectivePreventTimerExpireUpdate;
trigger gt_ObjectivePreventTimerExpireFailed;

//--------------------------------------------------------------------------------------------------
// Custom AI Functions
//--------------------------------------------------------------------------------------------------
string[17] cai_playerAI;

//--------------------------------------------------------------------------------------------------
void InitCustomAI () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        cai_playerAI[init_i] = null;
    }
}

//--------------------------------------------------------------------------------------------------
void cai_start (string ai, int p) {
    if (p < 0 || p >= 16) {
        return;
    }
    cai_playerAI[p] = ai;

    if (cai_playerAI[p] == "aiF917F4D7") { aiF917F4D7_start(p); }
}

//--------------------------------------------------------------------------------------------------
void cai_setDefGather (int p, point val) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "aiF917F4D7") { aiF917F4D7_setDefGather(p, val); }
}

//--------------------------------------------------------------------------------------------------
string cai_getCustomData (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "aiF917F4D7") { return aiF917F4D7_getCustomData(p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
wave cai_getLastWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "aiF917F4D7") { return aiF917F4D7_getLastWave(p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
void cai_waves_run (int p, playergroup target) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "aiF917F4D7") { aiF917F4D7_waves_run(p, target); }
}

//--------------------------------------------------------------------------------------------------
void cai_waves_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "aiF917F4D7") { aiF917F4D7_waves_enable(p, val); }
}

//--------------------------------------------------------------------------------------------------
void cai_waves_stop (string ai) {
    if (ai == "aiF917F4D7") { aiF917F4D7_waves_stop(); }
}

//--------------------------------------------------------------------------------------------------
void cai_wave_run (int w, int p, playergroup target, bool wait) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "aiF917F4D7") { aiF917F4D7_wave_run(w, p, target, wait); }
}

//--------------------------------------------------------------------------------------------------
void cai_wave_enable (int w, int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "aiF917F4D7") { aiF917F4D7_wave_enable(w, p, val); }
}

//--------------------------------------------------------------------------------------------------
bool cai_wave_isEnabled (int w, int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    if (cai_playerAI[p] == "aiF917F4D7") { return aiF917F4D7_wave_isEnabled(w, p); }
    return false;
}

//--------------------------------------------------------------------------------------------------
unitgroup cai_wave_createdUnits (int w, int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "aiF917F4D7") { return aiF917F4D7_wave_createdUnits(w, p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
wave cai_wave_createdWave (int w, int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "aiF917F4D7") { return aiF917F4D7_wave_createdWave(w, p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
void cai_startall () {
    cai_start("aiF917F4D7", 7);
    AICampaignStart(3);
    AICampaignStart(4);
}

//--------------------------------------------------------------------------------------------------
void cai_runall () {
    playergroup target = PlayerGroupEmpty();
}

//--------------------------------------------------------------------------------------------------
// Global Functions
//--------------------------------------------------------------------------------------------------
trigger auto_gf_RunMissionEvent_Trigger = null;
trigger auto_gf_RunMissionEvent_lp_missionEventTrigger;
fixed auto_gf_RunMissionEvent_lp_missionEventTime;

void gf_RunMissionEvent (trigger lp_missionEventTrigger, fixed lp_missionEventTime) {
    auto_gf_RunMissionEvent_lp_missionEventTrigger = lp_missionEventTrigger;
    auto_gf_RunMissionEvent_lp_missionEventTime = lp_missionEventTime;

    if (auto_gf_RunMissionEvent_Trigger == null) {
        auto_gf_RunMissionEvent_Trigger = TriggerCreate("auto_gf_RunMissionEvent_TriggerFunc");
    }

    TriggerExecute(auto_gf_RunMissionEvent_Trigger, false, false);
}

bool auto_gf_RunMissionEvent_TriggerFunc (bool testConds, bool runActions) {
    trigger lp_missionEventTrigger = auto_gf_RunMissionEvent_lp_missionEventTrigger;
    fixed lp_missionEventTime = auto_gf_RunMissionEvent_lp_missionEventTime;

    // Implementation
    while (!((GameGetMissionTime() >= lp_missionEventTime))) {
        Wait(0.5, c_timeAI);
    }
    if ((libCOMI_gf_GameIsOver() == false)) {
        TriggerExecute(lp_missionEventTrigger, true, false);
    }

    return true;
}

trigger auto_gf_RunAttackWaveatMissionTime_Trigger = null;
trigger auto_gf_RunAttackWaveatMissionTime_lp_attackWave;
fixed auto_gf_RunAttackWaveatMissionTime_lp_time;

void gf_RunAttackWaveatMissionTime (trigger lp_attackWave, fixed lp_time) {
    auto_gf_RunAttackWaveatMissionTime_lp_attackWave = lp_attackWave;
    auto_gf_RunAttackWaveatMissionTime_lp_time = lp_time;

    if (auto_gf_RunAttackWaveatMissionTime_Trigger == null) {
        auto_gf_RunAttackWaveatMissionTime_Trigger = TriggerCreate("auto_gf_RunAttackWaveatMissionTime_TriggerFunc");
    }

    TriggerExecute(auto_gf_RunAttackWaveatMissionTime_Trigger, false, false);
}

bool auto_gf_RunAttackWaveatMissionTime_TriggerFunc (bool testConds, bool runActions) {
    trigger lp_attackWave = auto_gf_RunAttackWaveatMissionTime_lp_attackWave;
    fixed lp_time = auto_gf_RunAttackWaveatMissionTime_lp_time;

    // Implementation
    while (!((lp_time <= GameGetMissionTime()))) {
        Wait(0.3, c_timeAI);
    }
    if ((libCOMI_gf_GameIsOver() == false)) {
        TriggerExecute(lp_attackWave, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 01 Load Data
//--------------------------------------------------------------------------------------------------
bool gt_Init01LoadData_Func (bool testConds, bool runActions) {
    playergroup auto0B258D10_g;
    int auto0B258D10_p;
    string auto834F8A5E_val;

    // Variable Declarations
    int lv_indexPlayer;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto0B258D10_g = libCOMI_gf_HumanPlayers();
    auto0B258D10_p = 1;
    for ( ; auto0B258D10_p <= PlayerGroupCount(auto0B258D10_g) ; auto0B258D10_p += BoolToInt(lv_indexPlayer == PlayerGroupPlayer(auto0B258D10_g, auto0B258D10_p)) ) {
        lv_indexPlayer = PlayerGroupPlayer(auto0B258D10_g, auto0B258D10_p);
        auto834F8A5E_val = GameAttributePlayerValue("[bnet:local/0.0/357507]1", lv_indexPlayer);
        if (auto834F8A5E_val == "0003") {
            PlayerSetCommander(lv_indexPlayer, "Artanis");
        }
        else if (auto834F8A5E_val == "0002") {
            PlayerSetCommander(lv_indexPlayer, "Kerrigan");
        }
        else if (auto834F8A5E_val == "0001") {
            PlayerSetCommander(lv_indexPlayer, "Raynor");
        }
        else {
            if ((lv_indexPlayer == 1)) {
                PlayerSetCommander(lv_indexPlayer, "Raynor");
            }
            else {
                PlayerSetCommander(lv_indexPlayer, "Artanis");
            }
        }
    }
    libCOMI_gf_EnableArcadeContestMode();
    TriggerExecute(gt_Init02Players, true, false);
    libCOMI_gf_LoadCoopMission("COOP_Placeholder", gt_Init03LoadingComplete);
    gv_spawnloc[0] = PointFromId(708);
    gv_spawnloc[1] = PointFromId(710);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init01LoadData_Init () {
    gt_Init01LoadData = TriggerCreate("gt_Init01LoadData_Func");
    TriggerAddEventMapInit(gt_Init01LoadData);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 02 Players
//--------------------------------------------------------------------------------------------------
bool gt_Init02Players_Func (bool testConds, bool runActions) {
    playergroup autoE0EF2853_g;
    int autoE0EF2853_p;
    playergroup autoB969537F_g;
    int autoB969537F_p;

    // Variable Declarations
    int lv_playerIterEnemy;
    int lv_playerIterAlly;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetPlayerGroupAlliance(libCOMI_gf_HumanPlayers(), libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    PlayerGroupAdd(gv_enemyGroup, gv_pLAYER_03_ENEMY);
    PlayerGroupAdd(gv_enemyGroup, gv_pLAYER_04_ENEMY);
    libNtve_gf_SetPlayerGroupAlliance(gv_enemyGroup, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    autoE0EF2853_g = gv_enemyGroup; 
    autoE0EF2853_p = 1;
    for ( ; autoE0EF2853_p <= PlayerGroupCount(autoE0EF2853_g) ; autoE0EF2853_p += BoolToInt(lv_playerIterEnemy == PlayerGroupPlayer(autoE0EF2853_g, autoE0EF2853_p)) ) {
        lv_playerIterEnemy = PlayerGroupPlayer(autoE0EF2853_g, autoE0EF2853_p);
        PlayerSetState(lv_playerIterEnemy, c_playerStateMineralCostIgnored, true);
        PlayerSetState(lv_playerIterEnemy, c_playerStateVespeneCostIgnored, true);
        PlayerSetState(lv_playerIterEnemy, c_playerStateFoodIgnored, true);
        PlayerSetColorIndex(lv_playerIterEnemy, libCOMI_gf_EnemyPlayerColor(), true);
        autoB969537F_g = libCOMI_gf_HumanPlayers();
        autoB969537F_p = 1;
        for ( ; autoB969537F_p <= PlayerGroupCount(autoB969537F_g) ; autoB969537F_p += BoolToInt(lv_playerIterAlly == PlayerGroupPlayer(autoB969537F_g, autoB969537F_p)) ) {
            lv_playerIterAlly = PlayerGroupPlayer(autoB969537F_g, autoB969537F_p);
            libNtve_gf_SetAlliance(lv_playerIterAlly, lv_playerIterEnemy, libNtve_ge_AllianceSetting_Enemy);
        }
    }
    PlayerSetAlliance(gv_pLAYER_03_ENEMY, c_allianceIdPower, gv_pLAYER_04_ENEMY, true);
    PlayerSetAlliance(gv_pLAYER_04_ENEMY, c_allianceIdPower, gv_pLAYER_03_ENEMY, true);
    libCOMI_gf_StartCoopAI(gv_pLAYER_03_ENEMY, gv_pLAYER_01_USER);
    libCOMI_gf_StartCoopAI(gv_pLAYER_04_ENEMY, gv_pLAYER_02_USER);
    libCOMI_gf_SetAlliedCommandersstartingResources();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init02Players_Init () {
    gt_Init02Players = TriggerCreate("gt_Init02Players_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 03 Loading Complete
//--------------------------------------------------------------------------------------------------
bool gt_Init03LoadingComplete_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_Init04Technology, true, false);
    libCOMI_gf_PurchaseStorymodeTech();
    TriggerExecute(gt_Init05Units, true, false);
    TriggerExecute(gt_Init06MusicSound, true, false);
    TriggerExecute(gt_Init07Environment, true, false);
    TriggerExecute(gt_Init08Difficulties, true, false);
    libCOMI_gf_PlayMapIntroZoom(false);
    TriggerExecute(gt_StartGameQ, true, false);
    TriggerExecute(gt_laststand, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init03LoadingComplete_Init () {
    gt_Init03LoadingComplete = TriggerCreate("gt_Init03LoadingComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 04 Technology
//--------------------------------------------------------------------------------------------------
bool gt_Init04Technology_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_SetTechRestrictionsCallback(TriggerGetCurrent());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init04Technology_Init () {
    gt_Init04Technology = TriggerCreate("gt_Init04Technology_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 05 Units
//--------------------------------------------------------------------------------------------------
bool gt_Init05Units_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAdd(gv_corruption, UnitFromId(1022967334));
    UnitGroupAdd(gv_corruption, UnitFromId(950221666));
    UnitIssueOrder(UnitFromId(1302312793), Order(AbilityCommand("move", 4)), c_orderQueueReplace);
    libCOMI_gf_SetWorkerRallyPointsPlayersNexuses(gv_pLAYER_01_USER);
    libCOMI_gf_SetWorkerRallyPointsPlayersNexuses(gv_pLAYER_02_USER);
    UnitGroupLoopBegin(gv_corruption);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitBehaviorAddPlayer(UnitGroupLoopCurrent(), "DonttakeDamage2", 4, 1);
    }
    UnitGroupLoopEnd();
    UnitBehaviorAddPlayer(UnitFromId(1302312793), "DonttakeDamage2", 4, 1);
    gv_unitstospawn[0] = "Zealot";
    gv_unitstospawn[1] = "Marine";
    gv_unitstospawn[2] = "HotSSwarmling";
    gv_unitstospawn2[0] = "Stalker";
    gv_unitstospawn2[1] = "Goliath";
    gv_unitstospawn2[2] = "HydraliskACGluescreenDummy";
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init05Units_Init () {
    gt_Init05Units = TriggerCreate("gt_Init05Units_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 06 Music/Sound
//--------------------------------------------------------------------------------------------------
bool gt_Init06MusicSound_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libARRA_gf_PlaySoundLinkasMusic(SoundLink("PEpilogue03_Music_Main", -1), true, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init06MusicSound_Init () {
    gt_Init06MusicSound = TriggerCreate("gt_Init06MusicSound_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 07 Environment
//--------------------------------------------------------------------------------------------------
bool gt_Init07Environment_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_ShowHideDoodadsInRegion(false, RegionFromId(31), null);
    libNtve_gf_ShowHideDoodadsInRegion(true, RegionFromId(17), null);
    libNtve_gf_ShowHideDoodadsInRegion(true, RegionFromId(32), null);
    gv_c[0] = RegionFromId(17);
    gv_c[1] = RegionFromId(18);
    gv_c[2] = RegionFromId(19);
    gv_c[3] = RegionFromId(20);
    gv_c[4] = RegionFromId(21);
    gv_c[5] = RegionFromId(22);
    gv_c[6] = RegionFromId(23);
    gv_c[7] = RegionFromId(24);
    gv_c[8] = RegionFromId(25);
    gv_c[9] = RegionFromId(26);
    gv_c[10] = RegionFromId(27);
    gv_c[11] = RegionFromId(28);
    gv_c[12] = RegionFromId(29);
    gv_c[13] = RegionFromId(30);
    gv_region[0] = RegionFromId(2);
    gv_region[1] = RegionFromId(5);
    gv_region[2] = RegionFromId(6);
    gv_region[3] = RegionFromId(7);
    gv_region[4] = RegionFromId(8);
    gv_region[5] = RegionFromId(9);
    gv_region[6] = RegionFromId(10);
    gv_region[7] = RegionFromId(11);
    gv_region[8] = RegionFromId(12);
    gv_region[9] = RegionFromId(13);
    gv_region[10] = RegionFromId(14);
    gv_region[11] = RegionFromId(15);
    gv_region[12] = RegionFromId(16);
    gv_region[13] = RegionFromId(30);
    GameTimeOfDaySet("08:00:00");
    VisExploreArea(gv_pLAYER_01_USER, RegionFromId(3), true, false);
    VisExploreArea(gv_pLAYER_02_USER, RegionFromId(4), true, false);
    gv_counter[2] = 1;
    IntLoopBegin(1, 14);
    for ( ; !IntLoopDone() ; IntLoopStep() ) {
        VisExploreArea(gv_pLAYER_01_USER, gv_region[IntLoopCurrent()], true, false);
        VisExploreArea(gv_pLAYER_02_USER, gv_region[IntLoopCurrent()], true, false);
    }
    IntLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionFromId(31), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "PathingBlocker2x2")) {
            libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), false);
        }

    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionCircle(RegionGetCenter(RegionFromId(32)), 12.0), UnitFilter(0, 0, 0, (1 << (c_targetFilterDead - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "PathingBlocker2x2")) {
            libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
        }

    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init07Environment_Init () {
    gt_Init07Environment = TriggerCreate("gt_Init07Environment_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 08 Difficulties
//--------------------------------------------------------------------------------------------------
bool gt_Init08Difficulties_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_bonusObjectiveLife;
    fixed lv_mainObjectiveLife;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_01_USER) == 4)) {
    }

    if ((libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_02_USER) == 4)) {
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init08Difficulties_Init () {
    gt_Init08Difficulties = TriggerCreate("gt_Init08Difficulties_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug - Can't Fail
//--------------------------------------------------------------------------------------------------
bool gt_DebugCantFail_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryPublic) == true))) {
            return false;
        }

        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyFixed(gv_pLAYER_01_USER, c_playerPropDamageTakenPercent, c_playerPropOperSetTo, 0.0);
    PlayerModifyPropertyFixed(gv_pLAYER_02_USER, c_playerPropDamageTakenPercent, c_playerPropOperSetTo, 0.0);
    TriggerEnable(gt_DefeatBaseDead, false);
    TriggerEnable(gt_DefeatPrimaryObjectiveFailed, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebugCantFail_Init () {
    gt_DebugCantFail = TriggerCreate("gt_DebugCantFail_Func");
    TriggerAddEventChatMessage(gt_DebugCantFail, c_playerAny, "cantfail", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Game Q
//--------------------------------------------------------------------------------------------------
bool gt_StartGameQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    region lv_enemyBase;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    VisRevealArea(1, RegionFromId(1), 2.0, false);
    VisRevealArea(2, RegionFromId(1), 2.0, false);
    VisRevealArea(1, RegionFromId(33), 2.0, false);
    VisRevealArea(2, RegionFromId(33), 2.0, false);
    VisRevealArea(1, RegionFromId(4), 2.0, false);
    VisRevealArea(2, RegionFromId(3), 2.0, false);
    VisRevealArea(1, RegionFromId(3), 2.0, false);
    VisRevealArea(2, RegionFromId(4), 2.0, false);
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/068743D5"), null, PlayerStartLocation(gv_pLAYER_01_USER));
    UIAlertPoint("Trigger", gv_pLAYER_02_USER, StringExternal("Param/Value/187E0E6E"), null, PlayerStartLocation(gv_pLAYER_02_USER));
    Wait(7.0, c_timeReal);
    TriggerQueueEnter();
    TriggerExecute(gt_ObjectiveDestroyTheEnemyBaseCreate, true, true);
    TriggerExecute(gt_ShowandUpdateObjectiveMarkers, true, false);
    Wait(1.0, c_timeGame);
    TriggerExecute(gt_ObjectivePreventTimerExpireCreate, true, true);
    Wait(2.0, c_timeGame);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendTransmissionCampaignPlaceHolder(null, "Scientist1Portrait", StringExternal("Param/Value/D18DF786"), StringExternal("Param/Value/E5EC7BC6"), 5.0, true, libCOMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libCOMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", UnitGetPosition(UnitFromId(457238258)), ColorWithAlpha(0.00, 90.98, 22.75, 0.00), 60.0, 270.0);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/985FDBBA"));
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", UnitGetPosition(UnitFromId(1022967334)), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 60.0, 270.0);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/C770E261"));
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", UnitGetPosition(UnitFromId(950221666)), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 60.0, 270.0);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/8214E369"));
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartGameQ_Init () {
    gt_StartGameQ = TriggerCreate("gt_StartGameQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: enemyvoid
//--------------------------------------------------------------------------------------------------
bool gt_enemyvoid_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((UnitGetOwner(EventUnit()) == 3) || (UnitGetOwner(EventUnit()) == 4)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAddPlayer(EventUnit(), "VoidShade", UnitGetOwner(EventUnit()), 1);
    if ((gv_counter[2] < 11) && (UnitGetType(EventUnit()) != "Voidbeast")) {
        UnitBehaviorAddPlayer(EventUnit(), "voidwalk", UnitGetOwner(EventUnit()), 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_enemyvoid_Init () {
    gt_enemyvoid = TriggerCreate("gt_enemyvoid_Func");
    TriggerAddEventUnitRegion(gt_enemyvoid, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: shield
//--------------------------------------------------------------------------------------------------
bool gt_shield_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAddPlayer(UnitFromId(1302312793), "DonttakeDamage", 4, 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_shield_Init () {
    gt_shield = TriggerCreate("gt_shield_Func");
    TriggerAddEventTimePeriodic(gt_shield, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: QWERTY
//--------------------------------------------------------------------------------------------------
bool gt_QWERTY_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    IntLoopBegin(gv_counter[2], 12);
    for ( ; !IntLoopDone() ; IntLoopStep() ) {
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingArrow", RegionGetCenter(gv_region[IntLoopCurrent()]), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 4.0, AngleBetweenPoints(RegionGetCenter(gv_region[IntLoopCurrent()]), UnitGetPosition(UnitFromId(457238258))));
    }
    IntLoopEnd();
    TriggerExecute(gt_Hulk, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_QWERTY_Init () {
    gt_QWERTY = TriggerCreate("gt_QWERTY_Func");
    TriggerAddEventTimePeriodic(gt_QWERTY, (240 / libCOMI_gf_DifficultyValueInt2(PlayerDifficulty(gv_pLAYER_04_ENEMY), 1, 2, 3, 4, 5, 6)), c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: trydetr
//--------------------------------------------------------------------------------------------------
bool gt_trydetr_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_QWERTY, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_trydetr_Init () {
    gt_trydetr = TriggerCreate("gt_trydetr_Func");
    TriggerAddEventChatMessage(gt_trydetr, c_playerAny, "cmon", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hulk
//--------------------------------------------------------------------------------------------------
bool gt_Hulk_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    RegionSetCenter(gv_current, RegionGetCenter(gv_region[(gv_counter[2] - 1)]));
    libCOMI_gf_CreatePingCoop(PlayerGroupAll(), "PingWarning", RegionGetCenter(gv_region[(gv_counter[2] - 1)]), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 2.0);
    VisRevealArea(1, RegionCircle(RegionGetCenter(gv_region[(gv_counter[2] - 1)]), 10.0), 15.0, false);
    VisRevealArea(2, RegionCircle(RegionGetCenter(gv_region[(gv_counter[2] - 1)]), 10.0), 15.0, false);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitFromId(1302312793)), c_animNameDefault, "Attack", 0, c_animTimeDefault);
    libNtve_gf_ShowHideDoodadsInRegion(true, RegionCircle(RegionGetCenter(gv_region[(gv_counter[2] - 1)]), 1.5), null);
    SoundPlayAtPointForPlayer(SoundLink("Event_Aiur05Victory_AmonAwake", -1), c_maxPlayers, PlayerGroupAll(), UnitGetPosition(UnitFromId(1302312793)), 0.0, 150.0, 0.0);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionCircle(RegionGetCenter(gv_region[(gv_counter[2] - 1)]), 1.5), null, c_animNameDefault, "Stand Work Start", 0, c_animTimeDefault);
    Wait(2.0, c_timeGame);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionCircle(RegionGetCenter(gv_region[(gv_counter[2] - 1)]), 1.5), null, c_animNameDefault, "Stand Work", 0, c_animTimeDefault);
    Wait(5.0, c_timeGame);
    SoundPlayAtPointForPlayer(SoundLink("PEpilogue03_WorldCleaverExplosion", -1), c_maxPlayers, PlayerGroupAll(), UnitGetPosition(UnitFromId(1302312793)), 0.0, 200.0, 0.0);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionCircle(RegionGetCenter(gv_region[(gv_counter[2] - 1)]), 1.5), null, c_animNameDefault, "Stand Work End", 0, c_animTimeDefault);
    TerrainShowRegion(gv_region[(gv_counter[2] - 1)], false);
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, gv_region[(gv_counter[2] - 1)], UnitFilter(0, 0, 0, (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) != "PathingBlocker2x2") && (UnitGroupLoopCurrent() != UnitFromId(1302312793))) {
            UnitKill(UnitGroupLoopCurrent());
        }

    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionCircle(RegionGetCenter(gv_region[(gv_counter[2] - 1)]), 12.0), UnitFilter(0, 0, 0, (1 << (c_targetFilterDead - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "PathingBlocker2x2")) {
            libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
        }

    }
    UnitGroupLoopEnd();
    libNtve_gf_ShowHideDoodadsInRegion(true, gv_c[gv_counter[2]], null);
    libNtve_gf_ShowHideDoodadsInRegion(true, RegionCircle(RegionGetCenter(gv_region[(gv_counter[2] - 1)]), 10.0), null);
    libNtve_gf_ShowHideDoodadsInRegion(false, gv_c[(gv_counter[2] - 1)], null);
    libNtve_gf_ShowHideDoodadsInRegion(false, RegionFromId(17), null);
    if ((gv_counter[2] >= 2)) {
        libNtve_gf_ShowHideDoodadsInRegion(false, RegionCircle(RegionGetCenter(gv_region[(gv_counter[2] - 2)]), 1.5), null);
    }

    Wait(2.0, c_timeGame);
    libNtve_gf_ShowHideDoodadsInRegion(false, RegionCircle(RegionGetCenter(gv_region[(gv_counter[2] - 1)]), 1.5), null);
    UnitIssueOrder(UnitFromId(1302312793), OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(gv_region[(gv_counter[2] - 1)])), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(1302312793), Order(AbilityCommand("move", 4)), c_orderQueueReplace);
    gv_counter[2] += 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Hulk_Init () {
    gt_Hulk = TriggerCreate("gt_Hulk_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Show and Update Objective Markers
//--------------------------------------------------------------------------------------------------
bool gt_ShowandUpdateObjectiveMarkers_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_baseIter;
    region lv_enemyBase;
    int lv_activePingsDesired;
    int lv_activePingsTotal;
    int lv_activePingsPrevious;
    unitgroup lv_enemyBaseTargets;

    // Variable Initialization
    lv_enemyBaseTargets = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingBoss", PointFromId(249), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 524287.0, 270.0);
    PingSetUnit(PingLastCreated(), UnitFromId(1302312793));
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/AF1926B7"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ShowandUpdateObjectiveMarkers_Init () {
    gt_ShowandUpdateObjectiveMarkers = TriggerCreate("gt_ShowandUpdateObjectiveMarkers_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: mc
//--------------------------------------------------------------------------------------------------
bool gt_mc_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventUnit() == UnitFromId(1302312793)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitFilterMatch(EventUnitTarget(), 1, UnitFilter(0, 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterHeroic) | (1 << c_targetFilterUser1) | (1 << c_targetFilterRawResource) | (1 << c_targetFilterHarvestableResource) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterMapBoss - 32)))) == true)) {
        TriggerEnable(TriggerGetCurrent(), false);
        UnitBehaviorAddPlayer(EventUnitTarget(), "PermanentMindControl", 4, 1);
        UnitBehaviorAddPlayer(EventUnitTarget(), "VoidShade", 4, 1);
        UnitBehaviorAddPlayer(EventUnitTarget(), "voidwalk", 4, 1);
        Wait(libCOMI_gf_DifficultyValueInt2(PlayerDifficulty(gv_pLAYER_01_USER), 10, 8, 6, 4, 2, 1), c_timeGame);
        TriggerEnable(TriggerGetCurrent(), true);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_mc_Init () {
    gt_mc = TriggerCreate("gt_mc_Func");
    TriggerAddEventUnitAttacked2(gt_mc, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defcorruption
//--------------------------------------------------------------------------------------------------
bool gt_Defcorruption_Func (bool testConds, bool runActions) {
    // Variable Declarations
    actor lv_actor;
    point lv_point;
    int lv_rnd;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventUnit() == UnitFromId(950221666)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    lv_rnd = RandomInt(0, 2);
    lv_point = RegionRandomPoint(RegionCircle(UnitGetPosition(EventUnit()), 2.0));
    libNtve_gf_CreateActorAtPoint("Epilogue02VoidRift", lv_point);
    lv_actor = libNtve_gf_ActorLastCreated();
    libNtve_gf_CreateUnitsWithDefaultFacing((libCOMI_gf_DifficultyValueInt2(PlayerDifficulty(EventPlayer()), 5, 7, 9, 11, 13, 15) + lv_rnd), gv_unitstospawn[lv_rnd], 0, 4, lv_point);
    Wait(2.0, c_timeGame);
    libNtve_gf_KillModel(lv_actor);
    Wait(3.0, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Defcorruption_Init () {
    gt_Defcorruption = TriggerCreate("gt_Defcorruption_Func");
    TriggerAddEventUnitAttacked2(gt_Defcorruption, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defcorruption 2
//--------------------------------------------------------------------------------------------------
bool gt_Defcorruption2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    actor lv_actor;
    point lv_point;
    int lv_rnd;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventUnit() == UnitFromId(1022967334)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    lv_rnd = RandomInt(0, 2);
    lv_point = RegionRandomPoint(RegionCircle(UnitGetPosition(EventUnit()), 2.0));
    libNtve_gf_CreateActorAtPoint("Epilogue02VoidRift", lv_point);
    lv_actor = libNtve_gf_ActorLastCreated();
    libNtve_gf_CreateUnitsWithDefaultFacing((libCOMI_gf_DifficultyValueInt2(PlayerDifficulty(EventPlayer()), 5, 7, 9, 11, 13, 15) + lv_rnd), gv_unitstospawn[lv_rnd], 0, 4, lv_point);
    Wait(2.0, c_timeGame);
    libNtve_gf_KillModel(lv_actor);
    Wait(3.0, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Defcorruption2_Init () {
    gt_Defcorruption2 = TriggerCreate("gt_Defcorruption2_Func");
    TriggerAddEventUnitAttacked2(gt_Defcorruption2, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: spawn
//--------------------------------------------------------------------------------------------------
bool gt_spawn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    actor lv_actor;
    int lv_rnd;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing((libCOMI_gf_DifficultyValueInt2(PlayerDifficulty(EventPlayer()), 5, 7, 9, 11, 13, 15) + (lv_rnd + RandomInt(0, 11))), gv_unitstospawn[lv_rnd], 0, 4, gv_spawnloc[RandomInt(0, 1)]);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_spawn_Init () {
    gt_spawn = TriggerCreate("gt_spawn_Func");
    TriggerAddEventTimePeriodic(gt_spawn, (60 / libCOMI_gf_DifficultyValueInt2(PlayerDifficulty(gv_pLAYER_04_ENEMY), 1, 2, 3, 4, 5, 6)), c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: kind of ai
//--------------------------------------------------------------------------------------------------
bool gt_kindofai_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_d091D0B5D0B7D18BD0BCD18FD0BDD0BDD0B0D18FD0BFD0B5D180D0B5D0BCD0B5D0BDD0BDD0B0D18F001;
    int[3] lv_rnd;

    // Variable Initialization
    lv_d091D0B5D0B7D18BD0BCD18FD0BDD0BDD0B0D18FD0BFD0B5D180D0B5D0BCD0B5D0BDD0BDD0B0D18F001 = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_corruption, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    AIAttackWaveSetTargetPoint(4, PointFromId(249));
    if ((libNtve_gf_UnitGroupIsDead(gv_corruption) == true)) {
        libCOMI_gf_SendTransmissionCampaignPlaceHolder(null, "Scientist1Portrait", StringExternal("Param/Value/5B2159F9"), StringExternal("Param/Value/DB2C603B"), 2.0, false, libCOMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libCOMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libNtve_gf_CreateUnitsWithDefaultFacing(libCOMI_gf_DifficultyValueInt2(PlayerDifficulty(EventPlayer()), 10, 12, 14, 16, 18, 20), gv_unitstospawn[RandomInt(0, 2)], 0, 4, gv_spawnloc[(1 - lv_rnd[0])]);
        libNtve_gf_CreateUnitsWithDefaultFacing(libCOMI_gf_DifficultyValueInt2(PlayerDifficulty(EventPlayer()), 7, 9, 11, 13, 15, 17), gv_unitstospawn2[RandomInt(0, 2)], 0, 4, gv_spawnloc[(1 - lv_rnd[0])]);
    }
    else {
        libCOMI_gf_SendTransmissionCampaignPlaceHolder(null, "Scientist1Portrait", StringExternal("Param/Value/D95E60DD"), StringExternal("Param/Value/653FD7FF"), 2.0, false, libCOMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libCOMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        lv_rnd[0] = RandomInt(0, 1);
        libNtve_gf_CreateUnitsWithDefaultFacing(libCOMI_gf_DifficultyValueInt2(PlayerDifficulty(EventPlayer()), 10, 12, 14, 16, 18, 20), gv_unitstospawn[RandomInt(0, 2)], 0, 4, gv_spawnloc[lv_rnd[0]]);
        libNtve_gf_CreateUnitsWithDefaultFacing(libCOMI_gf_DifficultyValueInt2(PlayerDifficulty(EventPlayer()), 7, 9, 11, 13, 15, 17), gv_unitstospawn2[RandomInt(0, 2)], 0, 4, gv_spawnloc[lv_rnd[0]]);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_kindofai_Init () {
    gt_kindofai = TriggerCreate("gt_kindofai_Func");
    TriggerAddEventUnitDied(gt_kindofai, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: last stand
//--------------------------------------------------------------------------------------------------
bool gt_laststand_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    while (!((gv_counter[2] >= 11))) {
        Wait(20.0, c_timeGame);
    }
    libARRA_gf_PlaySoundLinkasMusic(SoundLink("PEpilogue03_Music_Mid", -1), true, true);
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_04_ENEMY, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGroupLoopCurrent() != UnitFromId(1302312793))) {
            UnitBehaviorRemovePlayer(UnitGroupLoopCurrent(), "voidwalk", 4, 1);
            UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(249)), c_orderQueueReplace);
        }

    }
    UnitGroupLoopEnd();
    libCOMI_gf_SendTransmissionCampaignPlaceHolder(null, "Scientist1Portrait", StringExternal("Param/Value/DF9F019D"), StringExternal("Param/Value/713C01B7"), 5.0, true, libCOMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libCOMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_laststand_Init () {
    gt_laststand = TriggerCreate("gt_laststand_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Enemy Attacking Q
//--------------------------------------------------------------------------------------------------
bool gt_EnemyAttackingQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("AttackWave", true, RandomInt(gv_pLAYER_01_USER, gv_pLAYER_02_USER));
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    Wait(20.0, c_timeAI);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EnemyAttackingQ_Init () {
    gt_EnemyAttackingQ = TriggerCreate("gt_EnemyAttackingQ_Func");
    TriggerAddEventPlayerAIWave(gt_EnemyAttackingQ, gv_pLAYER_03_ENEMY);
    TriggerAddEventPlayerAIWave(gt_EnemyAttackingQ, gv_pLAYER_04_ENEMY);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Base Dead
//--------------------------------------------------------------------------------------------------
bool gt_DefeatBaseDead_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_cameraTarget;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!(((libNtve_gf_UnitGroupIsDead(UnitGroup(null, gv_pLAYER_01_USER, null, UnitFilter((1 << c_targetFilterPreventDefeat), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1)) == true) || (libNtve_gf_UnitGroupIsDead(UnitGroup(null, gv_pLAYER_02_USER, null, UnitFilter((1 << c_targetFilterPreventDefeat), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1)) == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_GameOver(libCOMI_ge_CampaignMissionGameResultType_Defeat);
    TransmissionClearAll();
    TriggerQueuePause(true);
    TriggerQueueClear(c_triggerQueueRemove);
    libCOMI_gf_CinematicModeCampaign(true, 1.5, true);
    TriggerExecute(gt_ObjectiveDestroyTheEnemyBaseFailed, true, false);
    if ((libNtve_gf_UnitGroupIsDead(UnitGroup(null, gv_pLAYER_01_USER, null, UnitFilter((1 << c_targetFilterPreventDefeat), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1)) == true)) {
        libCOMI_gf_DisplayCampaignMessage(PlayerGroupSingle(gv_pLAYER_01_USER), libCOMI_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/6166427B"), libCOMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
        libCOMI_gf_DisplayCampaignMessage(PlayerGroupSingle(gv_pLAYER_02_USER), libCOMI_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/7A60698B"), libCOMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
        lv_cameraTarget = PlayerStartLocation(gv_pLAYER_01_USER);
    }
    else {
        libCOMI_gf_DisplayCampaignMessage(PlayerGroupSingle(gv_pLAYER_02_USER), libCOMI_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/FAF74290"), libCOMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
        libCOMI_gf_DisplayCampaignMessage(PlayerGroupSingle(gv_pLAYER_01_USER), libCOMI_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/D7FCB0EB"), libCOMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
        lv_cameraTarget = PlayerStartLocation(gv_pLAYER_02_USER);
    }
    Wait(2.0, c_timeReal);
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_MakeUnitInvulnerable(UnitGroupLoopCurrent(), true);
    }
    UnitGroupLoopEnd();
    CameraLockInput(gv_pLAYER_01_USER, true);
    CameraLockInput(gv_pLAYER_02_USER, true);
    UnitClearSelection(gv_pLAYER_01_USER);
    UnitClearSelection(gv_pLAYER_02_USER);
    UISetSelectionTypeEnabled(PlayerGroupAll(), c_localSelectionTypeUnknown, false);
    if ((RegionContainsPoint(RegionCircle(lv_cameraTarget, 8.0), CameraGetTarget(gv_pLAYER_01_USER)) == false)) {
        CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoDefault(), 2.0, -1, 10.0, false);
        CameraPan(gv_pLAYER_01_USER, lv_cameraTarget, 2.0, -1, 10.0, false);
    }

    if ((RegionContainsPoint(RegionCircle(lv_cameraTarget, 8.0), CameraGetTarget(gv_pLAYER_02_USER)) == false)) {
        CameraApplyInfo(gv_pLAYER_02_USER, CameraInfoDefault(), 2.0, -1, 10.0, false);
        CameraPan(gv_pLAYER_02_USER, lv_cameraTarget, 2.0, -1, 10.0, false);
    }

    Wait(4.0, c_timeReal);
    UISetCursorVisible(PlayerGroupAll(), true);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatBaseDead_Init () {
    gt_DefeatBaseDead = TriggerCreate("gt_DefeatBaseDead_Func");
    TriggerAddEventTimePeriodic(gt_DefeatBaseDead, 1.0, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Primary Objective Failed
//--------------------------------------------------------------------------------------------------
bool gt_DefeatPrimaryObjectiveFailed_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_GameOver(libCOMI_ge_CampaignMissionGameResultType_Defeat);
    TransmissionClearAll();
    TriggerQueuePause(true);
    TriggerQueueClear(c_triggerQueueRemove);
    libCOMI_gf_SendMissionTransmission("DestroyedReminder", false, -1);
    libCOMI_gf_CinematicModeCampaign(true, 1.5, true);
    TriggerExecute(gt_ObjectivePreventTimerExpireFailed, true, false);
    libCOMI_gf_DisplayCampaignMessage(libCOMI_gf_HumanPlayers(), libCOMI_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/79462FB3"), libCOMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
    CameraLockInput(gv_pLAYER_01_USER, true);
    CameraLockInput(gv_pLAYER_02_USER, true);
    UnitClearSelection(gv_pLAYER_01_USER);
    UnitClearSelection(gv_pLAYER_02_USER);
    UISetSelectionTypeEnabled(PlayerGroupAll(), c_localSelectionTypeUnknown, false);
    CameraPan(gv_pLAYER_01_USER, UnitGetPosition(UnitFromId(1302312793)), 1.5, -1, 10.0, false);
    CameraPan(gv_pLAYER_02_USER, UnitGetPosition(UnitFromId(1302312793)), 1.5, -1, 10.0, false);
    libCOMI_gf_WaitForMissionTransmission();
    UISetCursorVisible(PlayerGroupAll(), true);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatPrimaryObjectiveFailed_Init () {
    gt_DefeatPrimaryObjectiveFailed = TriggerCreate("gt_DefeatPrimaryObjectiveFailed_Func");
    TriggerAddEventUnitDied(gt_DefeatPrimaryObjectiveFailed, UnitRefFromUnit(UnitFromId(457238258)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Primary Objective Complete
//--------------------------------------------------------------------------------------------------
bool gt_VictoryPrimaryObjectiveComplete_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_VictorySequence, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryPrimaryObjectiveComplete_Init () {
    gt_VictoryPrimaryObjectiveComplete = TriggerCreate("gt_VictoryPrimaryObjectiveComplete_Func");
    TriggerAddEventUnitDied(gt_VictoryPrimaryObjectiveComplete, UnitRefFromVariable("gv_voidbeast"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Sequence
//--------------------------------------------------------------------------------------------------
bool gt_VictorySequence_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_GameOver(libCOMI_ge_CampaignMissionGameResultType_Victory);
    Wait(2.0, c_timeReal);
    TriggerExecute(gt_ObjectiveDestroyTheEnemyBaseComplete, true, false);
    libCOMI_gf_RunMissionVictorySequence(gt_VictoryFanfareQ);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictorySequence_Init () {
    gt_VictorySequence = TriggerCreate("gt_VictorySequence_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Fanfare Q
//--------------------------------------------------------------------------------------------------
bool gt_VictoryFanfareQ_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TransmissionClearAll();
    TriggerQueueEnter();
    libCOMI_gf_CinematicModeCampaign(true, c_transitionDurationDefault, true);
    libCOMI_gf_SendMissionTransmission("PrimaryObjectiveDestroyed", false, -1);
    UnitPauseAll(true);
    CameraLockInput(gv_pLAYER_01_USER, true);
    CameraLockInput(gv_pLAYER_02_USER, true);
    UnitClearSelection(gv_pLAYER_01_USER);
    UnitClearSelection(gv_pLAYER_02_USER);
    UISetSelectionTypeEnabled(PlayerGroupAll(), c_localSelectionTypeUnknown, false);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoDefault(), 2.0, -1, 10.0, false);
    CameraPan(gv_pLAYER_01_USER, gv_victoryCompletePan, 2.0, -1, 10.0, false);
    CameraApplyInfo(gv_pLAYER_02_USER, CameraInfoDefault(), 2.0, -1, 10.0, false);
    CameraPan(gv_pLAYER_02_USER, gv_victoryCompletePan, 2.0, -1, 10.0, false);
    libCOMI_gf_DisplayCampaignMessage(PlayerGroupSingle(gv_pLAYER_01_USER), libCOMI_ge_CampaignMessageType_MissionVictory, StringExternal("Param/Value/684A78B4"), libCOMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
    libCOMI_gf_DisplayCampaignMessage(PlayerGroupSingle(gv_pLAYER_02_USER), libCOMI_ge_CampaignMessageType_MissionVictory, StringExternal("Param/Value/E5C8709E"), libCOMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
    libCOMI_gf_WaitForMissionTransmission();
    Wait(libCOMI_gv_campaignVictoryDelay, c_timeGame);
    UISetCursorVisible(PlayerGroupAll(), true);
    TriggerExecute(gt_Victory, true, false);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryFanfareQ_Init () {
    gt_VictoryFanfareQ = TriggerCreate("gt_VictoryFanfareQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory
//--------------------------------------------------------------------------------------------------
bool gt_Victory_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_EndCampaignMission(c_gameOverVictory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Victory_Init () {
    gt_Victory = TriggerCreate("gt_Victory_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Corruption
//--------------------------------------------------------------------------------------------------
bool gt_Corruption_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_corruption, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_ObjectivePreventTimerExpireUpdate2, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Corruption_Init () {
    gt_Corruption = TriggerCreate("gt_Corruption_Func");
    TriggerAddEventUnitDied(gt_Corruption, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat
//--------------------------------------------------------------------------------------------------
bool gt_Defeat_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_EndCampaignMission(c_gameOverDefeat);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Defeat_Init () {
    gt_Defeat = TriggerCreate("gt_Defeat_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start AI
//--------------------------------------------------------------------------------------------------
bool gt_StartAI_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_StartCoopAI(gv_pLAYER_03_ENEMY, gv_pLAYER_01_USER);
    libCOMI_gf_StartCoopAI(gv_pLAYER_04_ENEMY, gv_pLAYER_02_USER);
    TriggerExecute(gt_AIAttackWaves, true, false);
    SoundPlayAtPointForPlayer(SoundLink("Event_Aiur05Victory_AmonAwake", -1), c_maxPlayers, PlayerGroupAll(), UnitGetPosition(UnitFromId(1302312793)), 0.0, 100.0, 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartAI_Init () {
    gt_StartAI = TriggerCreate("gt_StartAI_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Attack Waves
//--------------------------------------------------------------------------------------------------
bool gt_AIAttackWaves_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gf_RunAttackWaveatMissionTime(gt_AttackWave01, (2.0 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_AttackWave02, (5.0 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_AttackWave03, (8.0 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_AttackWave04, (11.0 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_AttackWave05, (14.0 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_AttackWave06, (17.0 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_AttackWave07, (20.0 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_AttackWave07, (22.0 * 60.0));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIAttackWaves_Init () {
    gt_AIAttackWaves = TriggerCreate("gt_AIAttackWaves_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave 01
//--------------------------------------------------------------------------------------------------
bool gt_AttackWave01_Func (bool testConds, bool runActions) {
    // Variable Declarations
    actor lv_actor;
    int lv_resourceBucket;
    int lv_techBucket;
    int lv_rnd;

    // Variable Initialization
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__1Early;

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_03_ENEMY) != 1))) {
            return false;
        }

        if (!((libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_03_ENEMY) != 2))) {
            return false;
        }

        if (!((libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_04_ENEMY) != 1))) {
            return false;
        }

        if (!((libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_04_ENEMY) != 2))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
    lv_rnd = RandomInt(0, 1);
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__1Early;
    AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, PointFromId(249));
    AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, PointFromId(249));
    libNtve_gf_CreateActorAtPoint("Epilogue02VoidRift", gv_spawnloc[lv_rnd]);
    lv_actor = libNtve_gf_ActorLastCreated();
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, lv_resourceBucket, lv_techBucket, gv_spawnloc[lv_rnd], false);
    libNtve_gf_KillModel(lv_actor);
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWave01_Init () {
    gt_AttackWave01 = TriggerCreate("gt_AttackWave01_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave 02
//--------------------------------------------------------------------------------------------------
bool gt_AttackWave02_Func (bool testConds, bool runActions) {
    // Variable Declarations
    actor lv_actor;
    int lv_rnd;
    int lv_resourceBucket;
    int lv_techBucket;

    // Variable Initialization
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__2Smaller;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__2EarlyMid;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__2Smaller;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__2EarlyMid;
    AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, PointFromId(249));
    AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, PointFromId(249));
    lv_rnd = RandomInt(0, 1);
    libNtve_gf_CreateActorAtPoint("Epilogue02VoidRift", gv_spawnloc[lv_rnd]);
    lv_actor = libNtve_gf_ActorLastCreated();
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, lv_resourceBucket, lv_techBucket, gv_spawnloc[lv_rnd], false);
    libNtve_gf_KillModel(lv_actor);
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWave02_Init () {
    gt_AttackWave02 = TriggerCreate("gt_AttackWave02_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave 03
//--------------------------------------------------------------------------------------------------
bool gt_AttackWave03_Func (bool testConds, bool runActions) {
    // Variable Declarations
    actor lv_actor;
    int lv_rnd;
    int lv_resourceBucket;
    int lv_techBucket;
    int lv_numberOfStructures_ExpLeft;
    int lv_numberOfStructures_ExpRight;
    point lv_attackPathWaypoint;

    // Variable Initialization
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__3Small;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__3Mid;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_rnd = RandomInt(0, 1);
    libNtve_gf_CreateActorAtPoint("Epilogue02VoidRift", gv_spawnloc[lv_rnd]);
    lv_actor = libNtve_gf_ActorLastCreated();
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__3Small;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__3Mid;
    AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, PointFromId(249));
    AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, PointFromId(249));
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, lv_resourceBucket, lv_techBucket, gv_spawnloc[lv_rnd], false);
    libNtve_gf_KillModel(lv_actor);
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWave03_Init () {
    gt_AttackWave03 = TriggerCreate("gt_AttackWave03_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave 04
//--------------------------------------------------------------------------------------------------
bool gt_AttackWave04_Func (bool testConds, bool runActions) {
    // Variable Declarations
    actor lv_actor;
    int lv_rnd;
    int lv_resourceBucket;
    int lv_techBucket;
    int lv_attackingAI;
    int lv_defendingPlayer;

    // Variable Initialization
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__4Medium;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__4LateMid;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_rnd = RandomInt(0, 1);
    libNtve_gf_CreateActorAtPoint("Epilogue02VoidRift", gv_spawnloc[lv_rnd]);
    lv_actor = libNtve_gf_ActorLastCreated();
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__4Medium;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__4LateMid;
    AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, PointFromId(249));
    AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, PointFromId(249));
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, lv_resourceBucket, lv_techBucket, gv_spawnloc[lv_rnd], false);
    libNtve_gf_KillModel(lv_actor);
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWave04_Init () {
    gt_AttackWave04 = TriggerCreate("gt_AttackWave04_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave 05
//--------------------------------------------------------------------------------------------------
bool gt_AttackWave05_Func (bool testConds, bool runActions) {
    // Variable Declarations
    actor lv_actor;
    int lv_rnd;
    int lv_resourceBucket;
    int lv_techBucket;

    // Variable Initialization
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__1Early;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_rnd = RandomInt(0, 1);
    libNtve_gf_CreateActorAtPoint("Epilogue02VoidRift", gv_spawnloc[lv_rnd]);
    lv_actor = libNtve_gf_ActorLastCreated();
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__5Large;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__5Late;
    AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, PointFromId(249));
    AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, PointFromId(249));
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, lv_resourceBucket, lv_techBucket, gv_spawnloc[lv_rnd], false);
    libNtve_gf_KillModel(lv_actor);
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWave05_Init () {
    gt_AttackWave05 = TriggerCreate("gt_AttackWave05_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave 06
//--------------------------------------------------------------------------------------------------
bool gt_AttackWave06_Func (bool testConds, bool runActions) {
    // Variable Declarations
    actor lv_actor;
    int lv_rnd;
    int lv_resourceBucket;
    int lv_techBucket;

    // Variable Initialization
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__6Larger;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets_TechLevel06;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_rnd = RandomInt(0, 1);
    libNtve_gf_CreateActorAtPoint("Epilogue02VoidRift", gv_spawnloc[lv_rnd]);
    lv_actor = libNtve_gf_ActorLastCreated();
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__6Larger;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets_TechLevel06;
    AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, PointFromId(249));
    AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, PointFromId(249));
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, lv_resourceBucket, lv_techBucket, gv_spawnloc[lv_rnd], false);
    libNtve_gf_KillModel(lv_actor);
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWave06_Init () {
    gt_AttackWave06 = TriggerCreate("gt_AttackWave06_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave 07
//--------------------------------------------------------------------------------------------------
bool gt_AttackWave07_Func (bool testConds, bool runActions) {
    // Variable Declarations
    actor lv_actor;
    int lv_rnd;
    int lv_resourceBucket;
    int lv_techBucket;

    // Variable Initialization
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__7Largest;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets_TechLevel07;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_rnd = RandomInt(0, 1);
    libNtve_gf_CreateActorAtPoint("Epilogue02VoidRift", gv_spawnloc[lv_rnd]);
    lv_actor = libNtve_gf_ActorLastCreated();
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__7Largest;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets_TechLevel07;
    AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, PointFromId(249));
    AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, PointFromId(249));
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, lv_resourceBucket, lv_techBucket, gv_spawnloc[lv_rnd], false);
    libNtve_gf_KillModel(lv_actor);
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWave07_Init () {
    gt_AttackWave07 = TriggerCreate("gt_AttackWave07_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - DestroyTheEnemyBase - Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyTheEnemyBaseCreate_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_CreateObjectiveCampaign("PlaceholderPrimary");
    gv_objectiveDestroyTheEnemyBase = ObjectiveLastCreated();
    ObjectiveSetPriority(ObjectiveLastCreated(), 10);
    ObjectiveSetName(gv_objectiveDestroyTheEnemyBase, TextExpressionAssemble("Param/Expression/089DE02D"));
    TriggerExecute(gt_ObjectiveDestroyTheEnemyBaseUpdate, true, false);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyTheEnemyBaseCreate_Init () {
    gt_ObjectiveDestroyTheEnemyBaseCreate = TriggerCreate("gt_ObjectiveDestroyTheEnemyBaseCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - DestroyTheEnemyBase - Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyTheEnemyBaseComplete_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveDestroyTheEnemyBaseCreate, true, false);
    ObjectiveSetState(gv_objectiveDestroyTheEnemyBase, c_objectiveStateCompleted);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyTheEnemyBaseComplete_Init () {
    gt_ObjectiveDestroyTheEnemyBaseComplete = TriggerCreate("gt_ObjectiveDestroyTheEnemyBaseComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - DestroyTheEnemyBase - Update
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyTheEnemyBaseUpdate_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_ObjectiveDestroyTheEnemyBaseCreate, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyTheEnemyBaseUpdate_Init () {
    gt_ObjectiveDestroyTheEnemyBaseUpdate = TriggerCreate("gt_ObjectiveDestroyTheEnemyBaseUpdate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - DestroyTheEnemyBase - Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyTheEnemyBaseFailed_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveDestroyTheEnemyBaseCreate, true, false);
    ObjectiveSetState(gv_objectiveDestroyTheEnemyBase, c_objectiveStateFailed);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyTheEnemyBaseFailed_Init () {
    gt_ObjectiveDestroyTheEnemyBaseFailed = TriggerCreate("gt_ObjectiveDestroyTheEnemyBaseFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - PreventTimerExpire - Create 2
//--------------------------------------------------------------------------------------------------
bool gt_ObjectivePreventTimerExpireCreate2_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_CreateObjectiveCampaign("PlaceholderPrimary");
    gv_objectivePreventTimerExpire2 = ObjectiveLastCreated();
    ObjectiveSetPriority(ObjectiveLastCreated(), 8);
    TextExpressionSetToken("Param/Expression/6D0B4092", "A", IntToText(UnitGroupCount(gv_corruption, c_unitCountAlive)));
    ObjectiveSetName(gv_objectivePreventTimerExpire2, TextExpressionAssemble("Param/Expression/6D0B4092"));
    TriggerExecute(gt_ObjectivePreventTimerExpireUpdate2, true, false);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectivePreventTimerExpireCreate2_Init () {
    gt_ObjectivePreventTimerExpireCreate2 = TriggerCreate("gt_ObjectivePreventTimerExpireCreate2_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - PreventTimerExpire - Complete 2
//--------------------------------------------------------------------------------------------------
bool gt_ObjectivePreventTimerExpireComplete2_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_shield, false);
    TriggerExecute(gt_ObjectivePreventTimerExpireCreate2, true, false);
    ObjectiveSetState(gv_objectivePreventTimerExpire2, c_objectiveStateCompleted);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectivePreventTimerExpireComplete2_Init () {
    gt_ObjectivePreventTimerExpireComplete2 = TriggerCreate("gt_ObjectivePreventTimerExpireComplete2_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - PreventTimerExpire - Update 2
//--------------------------------------------------------------------------------------------------
bool gt_ObjectivePreventTimerExpireUpdate2_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_ObjectivePreventTimerExpireCreate2, true, false);
    TextExpressionSetToken("Param/Expression/5D059550", "A", IntToText(UnitGroupCount(gv_corruption, c_unitCountAlive)));
    ObjectiveSetName(gv_objectivePreventTimerExpire2, TextExpressionAssemble("Param/Expression/5D059550"));
    if ((libNtve_gf_UnitGroupIsDead(gv_corruption) == true)) {
        TriggerExecute(gt_ObjectivePreventTimerExpireComplete2, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectivePreventTimerExpireUpdate2_Init () {
    gt_ObjectivePreventTimerExpireUpdate2 = TriggerCreate("gt_ObjectivePreventTimerExpireUpdate2_Func");
    TriggerAddEventTimePeriodic(gt_ObjectivePreventTimerExpireUpdate2, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - PreventTimerExpire - Failed 2
//--------------------------------------------------------------------------------------------------
bool gt_ObjectivePreventTimerExpireFailed2_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectivePreventTimerExpireCreate2, true, false);
    ObjectiveSetState(gv_objectivePreventTimerExpire2, c_objectiveStateFailed);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectivePreventTimerExpireFailed2_Init () {
    gt_ObjectivePreventTimerExpireFailed2 = TriggerCreate("gt_ObjectivePreventTimerExpireFailed2_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - PreventTimerExpire - Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectivePreventTimerExpireCreate_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_CreateObjectiveCampaign("PlaceholderPrimary");
    gv_objectivePreventTimerExpire = ObjectiveLastCreated();
    ObjectiveSetPriority(ObjectiveLastCreated(), 8);
    ObjectiveSetName(gv_objectivePreventTimerExpire, TextExpressionAssemble("Param/Expression/F6A42A6B"));
    TriggerExecute(gt_ObjectivePreventTimerExpireUpdate, true, false);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectivePreventTimerExpireCreate_Init () {
    gt_ObjectivePreventTimerExpireCreate = TriggerCreate("gt_ObjectivePreventTimerExpireCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - PreventTimerExpire - Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectivePreventTimerExpireComplete_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectivePreventTimerExpireCreate, true, false);
    ObjectiveSetState(gv_objectivePreventTimerExpire, c_objectiveStateCompleted);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectivePreventTimerExpireComplete_Init () {
    gt_ObjectivePreventTimerExpireComplete = TriggerCreate("gt_ObjectivePreventTimerExpireComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - PreventTimerExpire - Update
//--------------------------------------------------------------------------------------------------
bool gt_ObjectivePreventTimerExpireUpdate_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitIsAlive(UnitFromId(457238258)) == false)) {
        TriggerExecute(gt_ObjectivePreventTimerExpireFailed, true, false);
    }

    TriggerExecute(gt_ObjectivePreventTimerExpireCreate, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectivePreventTimerExpireUpdate_Init () {
    gt_ObjectivePreventTimerExpireUpdate = TriggerCreate("gt_ObjectivePreventTimerExpireUpdate_Func");
    TriggerAddEventTimePeriodic(gt_ObjectivePreventTimerExpireUpdate, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - PreventTimerExpire - Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectivePreventTimerExpireFailed_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectivePreventTimerExpireCreate, true, false);
    ObjectiveSetState(gv_objectivePreventTimerExpire, c_objectiveStateFailed);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectivePreventTimerExpireFailed_Init () {
    gt_ObjectivePreventTimerExpireFailed = TriggerCreate("gt_ObjectivePreventTimerExpireFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger Initialization
//--------------------------------------------------------------------------------------------------
void InitTriggers () {
    gt_Init01LoadData_Init();
    gt_Init02Players_Init();
    gt_Init03LoadingComplete_Init();
    gt_Init04Technology_Init();
    gt_Init05Units_Init();
    gt_Init06MusicSound_Init();
    gt_Init07Environment_Init();
    gt_Init08Difficulties_Init();
    gt_DebugCantFail_Init();
    gt_StartGameQ_Init();
    gt_enemyvoid_Init();
    gt_shield_Init();
    gt_QWERTY_Init();
    gt_trydetr_Init();
    gt_Hulk_Init();
    gt_ShowandUpdateObjectiveMarkers_Init();
    gt_mc_Init();
    gt_Defcorruption_Init();
    gt_Defcorruption2_Init();
    gt_spawn_Init();
    gt_kindofai_Init();
    gt_laststand_Init();
    gt_EnemyAttackingQ_Init();
    gt_DefeatBaseDead_Init();
    gt_DefeatPrimaryObjectiveFailed_Init();
    gt_VictoryPrimaryObjectiveComplete_Init();
    gt_VictorySequence_Init();
    gt_VictoryFanfareQ_Init();
    gt_Victory_Init();
    gt_Corruption_Init();
    gt_Defeat_Init();
    gt_StartAI_Init();
    gt_AIAttackWaves_Init();
    gt_AttackWave01_Init();
    gt_AttackWave02_Init();
    gt_AttackWave03_Init();
    gt_AttackWave04_Init();
    gt_AttackWave05_Init();
    gt_AttackWave06_Init();
    gt_AttackWave07_Init();
    gt_ObjectiveDestroyTheEnemyBaseCreate_Init();
    gt_ObjectiveDestroyTheEnemyBaseComplete_Init();
    gt_ObjectiveDestroyTheEnemyBaseUpdate_Init();
    gt_ObjectiveDestroyTheEnemyBaseFailed_Init();
    gt_ObjectivePreventTimerExpireCreate2_Init();
    gt_ObjectivePreventTimerExpireComplete2_Init();
    gt_ObjectivePreventTimerExpireUpdate2_Init();
    gt_ObjectivePreventTimerExpireFailed2_Init();
    gt_ObjectivePreventTimerExpireCreate_Init();
    gt_ObjectivePreventTimerExpireComplete_Init();
    gt_ObjectivePreventTimerExpireUpdate_Init();
    gt_ObjectivePreventTimerExpireFailed_Init();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void InitMap () {
    InitLibs();
    InitGlobals();
    InitCustomAI();
    InitTriggers();
}
