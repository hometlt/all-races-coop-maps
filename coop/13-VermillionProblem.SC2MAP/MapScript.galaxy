//==================================================================================================
// 
// Generated Map Script
// 
// Name:   [ARC] The Vermillion Problem
// 
//==================================================================================================
include "TriggerLibs/NativeLib"
include "libARRA"
include "LibARRA"
include "LibCOMI"

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void InitLibs () {
    libNtve_InitLib();
    libARRA_InitLib();
    libARRA_InitLib();
    libCOMI_InitLib();
}

//--------------------------------------------------------------------------------------------------
// Constants
//--------------------------------------------------------------------------------------------------
const string gv_c_PickupItemType = "FuelCellPickupUnit";
const fixed gv_c_LavaDeathHeight_Absolute = 8.8;
const fixed gv_c_LavaHeight01 = 1.0;
const fixed gv_c_LavaHeight02 = 7.0;
const fixed gv_c_LavaHeight03 = 8.8;
const fixed gv_c_LavaHeight04 = 14.0;
const fixed gv_lavaTransition_DefaultTo01 = 4.0;
const fixed gv_lavaTransition_01To02 = 4.0;
const fixed gv_lavaTransition_02ToDefault = 10.0;
const int gv_cRITTER_GROUPS = 7;
const int gv_c_AttackWaveBaseIndex = 10;
const int gv_c_AttackWaveOrigin_Count = 4;
const int gv_c_HunterWaveIndex = 1;
const int gv_pLAYER_03_Player01_Bullies = 6;
const int gv_pLAYER_04_Player02_Bullies = 7;
const int gv_pLAYER_05_Player01_AttackWaves = 6;
const int gv_pLAYER_06_Player02_AttackWaves = 7;
const int gv_pLAYER_09_BonusObjective = 9;
const int gv_pLAYER_10_Civilians = 10;

//--------------------------------------------------------------------------------------------------
// Global Preset Declarations
//--------------------------------------------------------------------------------------------------
const int ge_LavaHeightType_CurrentHeight = 0;
const int ge_LavaHeightType_AbsoluteHeight = 1;
const int ge_ReminderTransmissions_Alert4mins = 0;
const int ge_ReminderTransmissions_Alert3mins = 1;
const int ge_ReminderTransmissions_Alert2mins = 2;
const int ge_ReminderTransmissions_Alert1min = 3;
const int ge_AIWaveType_AttackWave = 0;
const int ge_AIWaveType_WorkerHunterWave = 1;

//--------------------------------------------------------------------------------------------------
// Global Variables
//--------------------------------------------------------------------------------------------------
int gv_leaderboardTimeScore;
int gv_leaderboardLavaScore;
int gv_leaderboardBonusScoreFinal;
int gv_lavaScore;
timer gv_failure_Timer;
unitgroup gv_scrambleFuelCells;
fixed gv_dropOffTimerIncrease;
fixed gv_initialTimer;
int gv_fuelCell_Surge04;
int gv_fuelCell_Surge05;
int gv_fuelCell_Surge06;
int gv_fuelCell_Surge08;
unitgroup gv_movingToCollect;
unitgroup gv_targetedForCollection;
unitgroup gv_crystalCarriers;
int gv_missedFuelCells_Total;
int gv_missedFuelCells_Bank;
timer[5] gv_timerReminderTransmissions;
int gv_missedFuelCells_Prev;
fixed gv_abilCD_Min_Tunnel;
fixed gv_abilCD_Min_SpitFire;
fixed gv_abilCD_Min_FireLine;
point[4] gv_bonusObjectiveLocations;
fixed gv_bonusObjectiveLife;
bool gv_bonusObjectiveActive;
unit gv_bonusObjectiveUnit;
fixed gv_lavaDeathHeight_Current;
unitgroup gv_immuneToLava;
timer gv_lava_TurnOn;
timer gv_lava_TurnOff;
timer gv_warningSoon;
timer gv_warningNow;
timer gv_warningLavaDanger;
fixed gv_warningTimeSoon;
fixed gv_warningTimeNow;
fixed gv_lavaInterval;
bool gv_lavaTransitioning;
unitgroup gv_damagedByLavaBurst;
timer gv_lavaBurstDamageCooldown;
unitgroup[16] gv_critterGroups;
region[16] gv_critterHavens;
unitgroup gv_avoidedLavaUnits;
bool gv_lavaDanger;
playergroup gv_attackWavePlayers;
playergroup gv_defendingPlayers;
int gv_attackWaveIndex;
point[gv_c_AttackWaveOrigin_Count + 1] gv_attackWaveOrigins;
region[gv_c_AttackWaveOrigin_Count + 1] gv_attackWaveOwnership;
fixed[gv_c_AttackWaveOrigin_Count + 1] gv_attackWaveOriginCostInitial;
fixed[gv_c_AttackWaveOrigin_Count + 1] gv_attackWaveOriginCostCurrent;
playergroup gv_huntingPlayers;
unit gv_victoryUnit;
fixed[3] gv_statScore_WorkerTime;
int gv_c_ObjectsToMove;
int gv_objectsMoved;
int gv_objectiveCollectSolarite;
int gv_objectiveDestroyZergBase;
int gv_objectiveKillSalamander;
bool gv_lowGroundIsSafe;
int gv_lavaSurgeCounter;
int gv_pLAYER_01_USER;
int gv_pLAYER_02_USER;
playergroup gv_enemyPlayerGroup;

void InitGlobals () {
    int init_i;

    gv_failure_Timer = TimerCreate();
    gv_scrambleFuelCells = UnitGroupEmpty();
    gv_movingToCollect = UnitGroupEmpty();
    gv_targetedForCollection = UnitGroupEmpty();
    gv_crystalCarriers = UnitGroupEmpty();
    for (init_i = 0; init_i <= 4; init_i += 1) {
        gv_timerReminderTransmissions[init_i] = TimerCreate();
    }
    gv_immuneToLava = UnitGroupEmpty();
    gv_lava_TurnOn = TimerCreate();
    gv_lava_TurnOff = TimerCreate();
    gv_warningSoon = TimerCreate();
    gv_warningNow = TimerCreate();
    gv_warningLavaDanger = TimerCreate();
    gv_warningTimeSoon = 35.0;
    gv_warningTimeNow = 20.0;
    gv_lavaInterval = 240.0;
    gv_damagedByLavaBurst = UnitGroupEmpty();
    gv_lavaBurstDamageCooldown = TimerCreate();
    for (init_i = 0; init_i <= 15; init_i += 1) {
        gv_critterGroups[init_i] = UnitGroupEmpty();
    }
    gv_avoidedLavaUnits = UnitGroupEmpty();
    gv_attackWavePlayers = PlayerGroupEmpty();
    gv_defendingPlayers = PlayerGroupEmpty();
    gv_huntingPlayers = PlayerGroupEmpty();
    gv_c_ObjectsToMove = 20;
    gv_objectiveCollectSolarite = c_invalidObjectiveId;
    gv_objectiveDestroyZergBase = c_invalidObjectiveId;
    gv_objectiveKillSalamander = c_invalidObjectiveId;
    gv_lowGroundIsSafe = true;
    gv_pLAYER_01_USER = 1;
    gv_pLAYER_02_USER = 2;
    gv_enemyPlayerGroup = PlayerGroupEmpty();
}

//--------------------------------------------------------------------------------------------------
// Global Function Declarations
//--------------------------------------------------------------------------------------------------
void gf_AttachReticleEffectAndTextTagonUnitCoop (int lp_player, int lp_size, text lp_text, unit lp_target, string lp_attachPoint, int lp_ping);
text gf_TextforRace (int lp_player, text lp_protText, text lp_terrText, text lp_zergText);
point gf_GetPointName (string lp_pointName, int lp_index, int lp_player);
bool gf_LocationisSafefromLava (point lp_location, int lp_heightType);
void gf_CreateFuelCellMarkers (unit lp_fuelCell);
void gf_CreateFuelCell (point lp_fuelCellSpawn);
void gf_DisplayRewardFloatingText (point lp_location, int lp_resourceAmount, string lp_resourceIcon, text lp_resourceText, playergroup lp_player);
string gf_CrystalUI_Worker_GetTableName (unit lp_crystal);
void gf_ShowHideCrystalCollectUI (unit lp_crystal, unit lp_worker);
void gf_BonusObjectiveAI (unit lp_bObjUnit);
fixed gf_GetLavaInterval ();
void gf_SetLavaInterval (fixed lp_time);
void gf_ChangeLava (string lp_waterState, fixed lp_duration);
unitgroup gf_CrittersInRegion (region lp_area);
bool gf_PointStoredForUnit (unit lp_unit, int lp_index);
void gf_StorePointForUnit (unit lp_unit, int lp_index, bool lp_burrowed);
void gf_CivilianGatherSupplies (unit lp_civilian, point lp_suppliesLocation, point lp_dropLocation);
void gf_AssignAttackWavePing (wave lp_wave, int lp_wavePlayer);
void gf_DefendArea (unitgroup lp_defenseUnits, region lp_defenseArea, unitgroup lp_defendUnitGroup);
int gf_GetWaveIndex ();
void gf_NextAttackWaveIndex ();
fixed gf_GetVarianceNext (fixed lp_varianceTotal);
point gf_GetAttackWaveSpawn ();
void gf_AttackWaveatTime (fixed lp_time, trigger lp_aIAttackWave);
void gf_SendAttackWave (unitgroup lp_attackWave, point lp_spawnLocation, point lp_attackDestination, playergroup lp_attackingPlayers);
point gf_FindSafePlacefromLava (point lp_testLocation);
point gf_GetSafePlacePointfromIndex (int lp_index);
void gf_DropAttack (unitgroup lp_attackWave, point lp_spawnLocation);
void gf_SendHunterWave (unitgroup lp_attackWave, point lp_spawnLocation, point lp_dropLocation);
void gf_RemoveEmptyTransports (unit lp_transport);
point gf_GetBaseDropLocation (point lp_startingLocation);
void gf_UpdateStatScore (int lp_player, fixed lp_time);

//--------------------------------------------------------------------------------------------------
// Trigger Variables
//--------------------------------------------------------------------------------------------------
trigger gt_PlanetExplodesBar;
trigger gt_CreateFuelCellEvents;
trigger gt_DropOffCell;
trigger gt_TransmissionFuelCelldiestoLavaQ;
trigger gt_TransmissionEnemyAttacktowardsWorkersQ;
trigger gt_EnironmentalStabilizerAnimationController;
trigger gt_FuelCellPickedUp;
trigger gt_FuelCellDropped;
trigger gt_WorkerMarkCrystalforCollection;
trigger gt_TimerReminderTransmissionsUpdate;
trigger gt_TimerReminderTransmissionsRun;
trigger gt_TransmissionTimerReminder4MinAlertQ;
trigger gt_TransmissionTimerReminder3MinAlertQ;
trigger gt_TransmissionTimerReminder2MinAlertQ;
trigger gt_TransmissionTimerReminder1MinAlertQ;
trigger gt_ObjectiveReminder;
trigger gt_TransmissionObjectiveReminderQ;
trigger gt_StartBonusObjective;
trigger gt_BonusObjectiveCivilians;
trigger gt_BonusObjectiveSurface;
trigger gt_BonusObjectiveBurrow;
trigger gt_BonusObjectiveSetupTransmissionQ;
trigger gt_BonusObjectiveResurfaceTransmissionQ;
trigger gt_BonusObjectiveCompleteTransmissionQ;
trigger gt_LavaInitialization;
trigger gt_LavaSurgeMusic;
trigger gt_LavaTurnsON;
trigger gt_LavaTurnsOFF;
trigger gt_LavaDamageAir;
trigger gt_LavaDamageGround;
trigger gt_LavaDanger;
trigger gt_LavaSoonLavaTransition;
trigger gt_LavaNow;
trigger gt_TransmissionLavaSoonWarningQ;
trigger gt_TransmissionLavaNowWarningQ;
trigger gt_TransmissionItsSafeQ;
trigger gt_TransmissionLavaBurstWarningQ;
trigger gt_TransmissionLavaBurstDamageQ;
trigger gt_TransmissionFuelCellCarrierDiesQ;
trigger gt_CritterInit;
trigger gt_MakeCrittersFlee;
trigger gt_MakeCrittersReturn;
trigger gt_CiviliansFlee;
trigger gt_CiviliansGatherManager;
trigger gt_TransmissionStabilizerStablized25Q;
trigger gt_TransmissionStabilizerStablized50Q;
trigger gt_TransmissionStabilizerStablized75Q;
trigger gt_TransmissionFirstTurnInQ;
trigger gt_RunAttackWaves;
trigger gt_InitializeAttackWaveSpawnFallBack;
trigger gt_AttackWave01;
trigger gt_AttackWave02;
trigger gt_AttackWave03;
trigger gt_AttackWave04;
trigger gt_AttackWave05;
trigger gt_AttackWave06;
trigger gt_AttackWave07;
trigger gt_AttackWave08;
trigger gt_EnemyAttackingQ;
trigger gt_DefeatPrimaryObjectiveFailed;
trigger gt_VictoryStabilizerRefueledCompleted;
trigger gt_VictoryEnvironmentalPlatformAnim;
trigger gt_ObjectiveCollectSolariteCreate;
trigger gt_ObjectiveCollectSolariteComplete;
trigger gt_ObjectiveCollectSolariteUpdate;
trigger gt_ObjectiveCollectSolariteFailed;
trigger gt_ObjectiveDontLetThePlanetExpodeCreate;
trigger gt_ObjectiveDontLetThePlanetExpodeComplete;
trigger gt_ObjectiveDontLetThePlanetExpodeUpdate;
trigger gt_ObjectiveDontLetThePlanetExpodeFailed;
trigger gt_ObjectiveKillSalamanderCreate;
trigger gt_ObjectiveKillSalamanderComplete;
trigger gt_ObjectiveKillSalamanderFailed;
trigger gt_Init03LoadingComplete;
trigger gt_Init02Players;
trigger gt_Init05Units;
trigger gt_Init07Environment;
trigger gt_Init08Difficulties;
trigger gt_StartAI;
trigger gt_StartGameQ;

//--------------------------------------------------------------------------------------------------
// Global Presets
//--------------------------------------------------------------------------------------------------

//--------------------------------------------------------------------------------------------------
// Global Functions
//--------------------------------------------------------------------------------------------------
trigger auto_gf_AttachReticleEffectAndTextTagonUnitCoop_Trigger = null;
int auto_gf_AttachReticleEffectAndTextTagonUnitCoop_lp_player;
int auto_gf_AttachReticleEffectAndTextTagonUnitCoop_lp_size;
text auto_gf_AttachReticleEffectAndTextTagonUnitCoop_lp_text;
unit auto_gf_AttachReticleEffectAndTextTagonUnitCoop_lp_target;
string auto_gf_AttachReticleEffectAndTextTagonUnitCoop_lp_attachPoint;
int auto_gf_AttachReticleEffectAndTextTagonUnitCoop_lp_ping;

void gf_AttachReticleEffectAndTextTagonUnitCoop (int lp_player, int lp_size, text lp_text, unit lp_target, string lp_attachPoint, int lp_ping) {
    auto_gf_AttachReticleEffectAndTextTagonUnitCoop_lp_player = lp_player;
    auto_gf_AttachReticleEffectAndTextTagonUnitCoop_lp_size = lp_size;
    auto_gf_AttachReticleEffectAndTextTagonUnitCoop_lp_text = lp_text;
    auto_gf_AttachReticleEffectAndTextTagonUnitCoop_lp_target = lp_target;
    auto_gf_AttachReticleEffectAndTextTagonUnitCoop_lp_attachPoint = lp_attachPoint;
    auto_gf_AttachReticleEffectAndTextTagonUnitCoop_lp_ping = lp_ping;

    if (auto_gf_AttachReticleEffectAndTextTagonUnitCoop_Trigger == null) {
        auto_gf_AttachReticleEffectAndTextTagonUnitCoop_Trigger = TriggerCreate("auto_gf_AttachReticleEffectAndTextTagonUnitCoop_TriggerFunc");
    }

    TriggerExecute(auto_gf_AttachReticleEffectAndTextTagonUnitCoop_Trigger, false, false);
}

bool auto_gf_AttachReticleEffectAndTextTagonUnitCoop_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_gf_AttachReticleEffectAndTextTagonUnitCoop_lp_player;
    int lp_size = auto_gf_AttachReticleEffectAndTextTagonUnitCoop_lp_size;
    text lp_text = auto_gf_AttachReticleEffectAndTextTagonUnitCoop_lp_text;
    unit lp_target = auto_gf_AttachReticleEffectAndTextTagonUnitCoop_lp_target;
    string lp_attachPoint = auto_gf_AttachReticleEffectAndTextTagonUnitCoop_lp_attachPoint;
    int lp_ping = auto_gf_AttachReticleEffectAndTextTagonUnitCoop_lp_ping;

    // Variable Declarations
    int lv_reticleTarget;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_reticleTarget = libCOMI_ge_CampaginReticleType_TerranMainObjective;
    libCOMI_gf_AttachReticleEffectAndTextTagOnUnit(lv_reticleTarget, lp_size, lp_text, lp_target, lp_attachPoint);
    if ((libCOMI_gf_MutatorIsEnabled("BlackFog") == false)) {
        TextTagFogofWar(TextTagLastCreated(), false);
    }

    TextTagSetFontSize(TextTagLastCreated(), 32);
    libARRA_gf_StoreActorForUnit(lp_target, 1, libNtve_gf_ActorLastCreated());
    libARRA_gf_StoreTextTagForUnit(lp_target, 1, TextTagLastCreated());
    while (!((UnitIsAlive(lp_target) == false))) {
        Wait(0.25, c_timeGame);
    }
    libNtve_gf_KillModel(libNtve_gf_ActorLastCreated());
    TextTagDestroy(TextTagLastCreated());
    PingDestroy(lp_ping);
    return true;
}

text gf_TextforRace (int lp_player, text lp_protText, text lp_terrText, text lp_zergText) {
    // Automatic Variable Declarations
    string autoC48F5B0F_val;

    // Implementation
    autoC48F5B0F_val = PlayerRace(lp_player);
    if (autoC48F5B0F_val == "Prot") {
        return lp_protText;
    }
    else if (autoC48F5B0F_val == "Terr") {
        return lp_terrText;
    }
    else if (autoC48F5B0F_val == "Zerg") {
        return lp_zergText;
    }
    else {
        return StringExternal("Param/Value/4BA3C7DC");
    }
}

point gf_GetPointName (string lp_pointName, int lp_index, int lp_player) {
    // Variable Declarations
    string lv_pointStringName;
    point lv_returnValue;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_pointStringName = "";

    // Implementation
    if ((lp_index < 10)) {
        lv_pointStringName = (lp_pointName + "0" + IntToString(lp_index));
    }
    else {
        lv_pointStringName = (lp_pointName + IntToString(lp_index));
    }
    if ((lp_player != c_playerAny)) {
        lv_pointStringName = (lv_pointStringName + " P" + IntToString(lp_player));
    }

    lv_returnValue = PointFromName(lv_pointStringName);
    if ((lv_returnValue == null)) {
        TextExpressionSetToken("Param/Expression/D9ACB281", "A", StringToText(lv_pointStringName));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/D9ACB281"), true);
        breakpoint;
    }

    return lv_returnValue;
}

bool gf_LocationisSafefromLava (point lp_location, int lp_heightType) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_heightType == ge_LavaHeightType_AbsoluteHeight)) {
        if ((WorldHeight(c_heightMapGround, lp_location) <= gv_c_LavaDeathHeight_Absolute)) {
            return false;
        }
        else {
            return true;
        }
    }
    else {
        if ((WorldHeight(c_heightMapGround, lp_location) <= gv_lavaDeathHeight_Current)) {
            return false;
        }
        else {
            return true;
        }
    }
}

trigger auto_gf_CreateFuelCellMarkers_Trigger = null;
unit auto_gf_CreateFuelCellMarkers_lp_fuelCell;

void gf_CreateFuelCellMarkers (unit lp_fuelCell) {
    auto_gf_CreateFuelCellMarkers_lp_fuelCell = lp_fuelCell;

    if (auto_gf_CreateFuelCellMarkers_Trigger == null) {
        auto_gf_CreateFuelCellMarkers_Trigger = TriggerCreate("auto_gf_CreateFuelCellMarkers_TriggerFunc");
    }

    TriggerExecute(auto_gf_CreateFuelCellMarkers_Trigger, false, false);
}

bool auto_gf_CreateFuelCellMarkers_TriggerFunc (bool testConds, bool runActions) {
    unit lp_fuelCell = auto_gf_CreateFuelCellMarkers_lp_fuelCell;

    // Variable Declarations
    bool lv_onHighGround;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    libCOMI_gf_CreatePingFacingAngleCoop(libCOMI_gf_HumanPlayers(), UnitGetPosition(lp_fuelCell), 270.0, "PingXenonCrystalIcon", ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/358A46FE"));
    PingSetScale(PingLastCreated(), 0.2);
    libARRA_gf_StorePingForUnit(lp_fuelCell, 1, PingLastCreated());
    gf_AttachReticleEffectAndTextTagonUnitCoop(UnitGetOwner(lp_fuelCell), libCOMI_ge_CampaginReticleSize_Medium, StringExternal("Param/Value/37F46ABC"), lp_fuelCell, "Ref_Center", PingLastCreated());
    libCOMI_gf_ShareVisionofUnitWithHumansCoop(lp_fuelCell, true);
    lv_onHighGround = gf_LocationisSafefromLava(UnitGetPosition(lp_fuelCell), ge_LavaHeightType_AbsoluteHeight);
    if ((lv_onHighGround == false)) {
        while ((UnitIsAlive(lp_fuelCell) == true)) {
            if ((gv_lowGroundIsSafe == false)) {
                gv_missedFuelCells_Bank += 1;
                gv_missedFuelCells_Total += 1;
                UnitRemove(lp_fuelCell);
                TriggerExecute(gt_TransmissionFuelCelldiestoLavaQ, true, false);
            }

            Wait(0.1, c_timeGame);
        }
    }

    return true;
}

void gf_CreateFuelCell (point lp_fuelCellSpawn) {
    // Variable Declarations
    fixed lv_geyserScale;
    actor lv_geyserActor;
    int lv_lavaSurge;
    unit lv_fuelCell;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    UnitCreate(1, gv_c_PickupItemType, 0, 0, lp_fuelCellSpawn, libNtve_gf_RandomAngle());
    lv_fuelCell = UnitLastCreated();
    UnitGroupAdd(gv_scrambleFuelCells, lv_fuelCell);
    gf_CreateFuelCellMarkers(lv_fuelCell);
    ActorSend(libNtve_gf_MainActorofUnit(lv_fuelCell), libNtve_gf_Signal("LavaCreated"));
}

void gf_DisplayRewardFloatingText (point lp_location, int lp_resourceAmount, string lp_resourceIcon, text lp_resourceText, playergroup lp_player) {
    // Variable Declarations
    text lv_text;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    TextExpressionSetToken("Param/Expression/C5B5D8B0", "A", StringToText(("Kicker_Zerg")));
    TextExpressionSetToken("Param/Expression/C5B5D8B0", "B", IntToText(lp_resourceAmount));
    lv_text = TextExpressionAssemble("Param/Expression/C5B5D8B0");
    if (((lp_resourceText != null) == true)) {
        TextExpressionSetToken("Param/Expression/7389FD18", "A", lv_text);
        TextExpressionSetToken("Param/Expression/7389FD18", "B", lp_resourceText);
        lv_text = TextExpressionAssemble("Param/Expression/7389FD18");
    }

    if ((lp_resourceIcon != null)) {
        TextExpressionSetToken("Param/Expression/7B4595A7", "A", lv_text);
        TextExpressionSetToken("Param/Expression/7B4595A7", "B", StringToText(lp_resourceIcon));
        lv_text = TextExpressionAssemble("Param/Expression/7B4595A7");
    }

    SoundPlay(SoundLink("UI_ResourcePickup", 0), lp_player, 100.0, 0.0);
    TextTagCreate(lv_text, 24, lp_location, 2.0, true, false, lp_player);
    TextTagSetVelocity(TextTagLastCreated(), 0.7, 90.0);
    TextTagSetBackgroundImage(TextTagLastCreated(), "Assets\\Textures\\blank.dds", true);
    TextTagShowBackground(TextTagLastCreated(), true);
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 3.0);
}

string gf_CrystalUI_Worker_GetTableName (unit lp_crystal) {
    // Variable Declarations
    const string lv_c_CrystalUI_Workers_StorageName = "WorkerOrdered";
    string lv_dataTableNameStorage;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_dataTableNameStorage = "";

    // Implementation
    lv_dataTableNameStorage = (lv_c_CrystalUI_Workers_StorageName + "_" + IntToString(UnitGetTag(lp_crystal)));
    return lv_dataTableNameStorage;
}

trigger auto_gf_ShowHideCrystalCollectUI_Trigger = null;
unit auto_gf_ShowHideCrystalCollectUI_lp_crystal;
unit auto_gf_ShowHideCrystalCollectUI_lp_worker;

void gf_ShowHideCrystalCollectUI (unit lp_crystal, unit lp_worker) {
    auto_gf_ShowHideCrystalCollectUI_lp_crystal = lp_crystal;
    auto_gf_ShowHideCrystalCollectUI_lp_worker = lp_worker;

    if (auto_gf_ShowHideCrystalCollectUI_Trigger == null) {
        auto_gf_ShowHideCrystalCollectUI_Trigger = TriggerCreate("auto_gf_ShowHideCrystalCollectUI_TriggerFunc");
    }

    TriggerExecute(auto_gf_ShowHideCrystalCollectUI_Trigger, false, false);
}

bool auto_gf_ShowHideCrystalCollectUI_TriggerFunc (bool testConds, bool runActions) {
    unit lp_crystal = auto_gf_ShowHideCrystalCollectUI_lp_crystal;
    unit lp_worker = auto_gf_ShowHideCrystalCollectUI_lp_worker;

    // Variable Declarations
    string lv_dataTableNameStorage;
    int lv_workersOrderedIndex;
    unit lv_fuelCell;
    actor lv_onMyWayMarker;
    int lv_onMyWayPing;
    int lv_owningPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_dataTableNameStorage = "";
    lv_onMyWayPing = c_invalidPingId;

    // Implementation
    lv_owningPlayer = UnitGetOwner(lp_worker);
    lv_dataTableNameStorage = gf_CrystalUI_Worker_GetTableName(lp_crystal);
    lv_workersOrderedIndex = DataTableGetInt(true, lv_dataTableNameStorage);
    lv_fuelCell = lp_crystal;
    libCOMI_gf_ShowHidePingCoop(libARRA_gf_PingStoredForUnit(lv_fuelCell, 1), false);
    if ((libARRA_gf_PingStoredForUnit(lp_crystal, 2) == c_invalidPingId)) {
        libCOMI_gf_CreatePingFacingAngleCoop(libCOMI_gf_HumanPlayers(), UnitGetPosition(lv_fuelCell), 270.0, "PingPanelPingOnMyWay", libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_owningPlayer, false)), 0.0);
        PingSetScale(PingLastCreated(), 0.5);
        TextExpressionSetToken("Param/Expression/58803ECE", "PlayerName", PlayerName(lv_owningPlayer));
        TextExpressionSetToken("Param/Expression/58803ECE", "FuelCell", UnitTypeGetName(UnitGetType(lp_crystal)));
        PingSetTooltip(PingLastCreated(), TextExpressionAssemble("Param/Expression/58803ECE"));
        libARRA_gf_StorePingForUnit(lp_crystal, 2, PingLastCreated());
        lv_onMyWayPing = PingLastCreated();
    }
    else {
        lv_onMyWayPing = libARRA_gf_PingStoredForUnit(lp_crystal, 2);
    }
    if ((libARRA_gf_ActorForUnit(lp_crystal, 2) == null)) {
        libNtve_gf_CreateModelAtPoint("PingPanelBeaconOnMyWay", UnitGetPosition(lv_fuelCell));
        libARRA_gf_StoreActorForUnit(lp_crystal, 2, libNtve_gf_ActorLastCreated());
        lv_onMyWayMarker = libNtve_gf_ActorLastCreated();
    }
    else {
        lv_onMyWayMarker = libARRA_gf_ActorForUnit(lp_crystal, 2);
    }
    ActorSend(lv_onMyWayMarker, "TakeSnapshot");
    TextTagShow(libARRA_gf_TextTagForUnit(lv_fuelCell, 1), PlayerGroupAll(), false);
    ActorSend(libARRA_gf_ActorForUnit(lv_fuelCell, 1), libNtve_gf_SetVisibility(false));
    while ((DataTableGetBool(true, ("WorkerChasingCrystal_" + IntToString(UnitGetTag(lp_worker)) + "_" + IntToString(UnitGetTag(lp_crystal)))) == true)) {
        ActorSend(lv_onMyWayMarker, libNtve_gf_SetTintColor(libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_owningPlayer, false)), 3.0, 0.2));
        Wait(0.15, c_timeGame);
    }
    lv_workersOrderedIndex = DataTableGetInt(true, lv_dataTableNameStorage);
    if ((lv_workersOrderedIndex == 0)) {
        libNtve_gf_KillModel(lv_onMyWayMarker);
        libCOMI_gf_DestroyPingCoop(lv_onMyWayPing);
        libARRA_gf_StorePingForUnit(lp_crystal, 2, c_invalidPingId);
        libARRA_gf_StoreActorForUnit(lp_crystal, 2, null);
        if ((UnitIsAlive(lv_fuelCell) == true)) {
            ActorSend(libARRA_gf_ActorForUnit(lv_fuelCell, 1), libNtve_gf_SetVisibility(true));
            TextTagShow(libARRA_gf_TextTagForUnit(lv_fuelCell, 1), PlayerGroupAll(), true);
            libCOMI_gf_ShowHidePingCoop(libARRA_gf_PingStoredForUnit(lv_fuelCell, 1), true);
        }

    }

    return true;
}

void gf_BonusObjectiveAI (unit lp_bObjUnit) {
    // Variable Declarations
    timer lv_abilCD_General;
    timer lv_abilCD_Tunnel;
    timer lv_abilCD_SpitFire;
    timer lv_abilCD_FireLine;
    unitgroup lv_potentialTargets;
    point lv_bonusObjectiveLocationTemp;
    int lv_bonusObjectiveIndex;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_abilCD_General = TimerCreate();
    lv_abilCD_Tunnel = TimerCreate();
    lv_abilCD_SpitFire = TimerCreate();
    lv_abilCD_FireLine = TimerCreate();
    lv_potentialTargets = UnitGroupEmpty();

    // Implementation
    lv_bonusObjectiveIndex = 1;
    gv_bonusObjectiveActive = true;
    VisRevealerCreate(gv_pLAYER_09_BonusObjective, RegionPlayableMap());
    UnitIssueOrder(lp_bObjUnit, Order(AbilityCommand("BurrowRedstoneSalamanderUp", 0)), c_orderQueueReplace);
    TimerStart(lv_abilCD_Tunnel, gv_abilCD_Min_Tunnel, false, c_timeAI);
    while ((UnitIsAlive(lp_bObjUnit) == true)) {
        if ((gv_bonusObjectiveActive == true)) {
            if ((TimerGetRemaining(lv_abilCD_General) <= 0.0)) {
                lv_potentialTargets = UnitGroupAlliance(UnitGetOwner(lp_bObjUnit), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_bObjUnit), 20.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
                if ((UnitGroupCount(lv_potentialTargets, c_unitCountAlive) > 0)) {
                    if ((TimerGetRemaining(lv_abilCD_FireLine) <= 0.0)) {
                        UnitIssueOrder(lp_bObjUnit, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
                        UnitIssueOrder(lp_bObjUnit, OrderTargetingUnit(AbilityCommand("RedstoneSalamanderFirebreath", 0), UnitGroupRandomUnit(lv_potentialTargets, c_unitCountAlive)), c_orderQueueAddToEnd);
                        TimerStart(lv_abilCD_FireLine, gv_abilCD_Min_FireLine, false, c_timeAI);
                        TimerStart(lv_abilCD_General, 5.0, false, c_timeAI);
                    }
                    else if ((TimerGetRemaining(lv_abilCD_SpitFire) <= 0.0)) {
                        UnitIssueOrder(lp_bObjUnit, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
                        UnitIssueOrder(lp_bObjUnit, OrderTargetingUnit(AbilityCommand("RedstoneSalamanderFirebreath", 0), UnitGroupRandomUnit(lv_potentialTargets, c_unitCountAlive)), c_orderQueueAddToEnd);
                        TimerStart(lv_abilCD_SpitFire, gv_abilCD_Min_SpitFire, false, c_timeAI);
                        TimerStart(lv_abilCD_General, 2.0, false, c_timeAI);
                    }
                    else if ((TimerGetRemaining(lv_abilCD_Tunnel) <= 0.0)) {
                        UnitIssueOrder(lp_bObjUnit, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
                        lv_bonusObjectiveIndex = RandomInt(2, 3);
                        lv_bonusObjectiveLocationTemp = gv_bonusObjectiveLocations[1];
                        gv_bonusObjectiveLocations[1] = gv_bonusObjectiveLocations[lv_bonusObjectiveIndex];
                        gv_bonusObjectiveLocations[lv_bonusObjectiveIndex] = lv_bonusObjectiveLocationTemp;
                        UnitIssueOrder(lp_bObjUnit, OrderTargetingPoint(AbilityCommand("RedstoneSalamanderTunnel", 0), gv_bonusObjectiveLocations[1]), c_orderQueueAddToEnd);
                        TimerStart(lv_abilCD_Tunnel, gv_abilCD_Min_Tunnel, false, c_timeAI);
                        TimerStart(lv_abilCD_General, 6.0, false, c_timeAI);
                    }
                }

            }

        }
        else {
            while ((UnitOrderCount(lp_bObjUnit) >= 1)) {
                UnitIssueOrder(lp_bObjUnit, Order(AbilityCommand("stop", 0)), c_orderQueueAddToEnd);
                Wait(0.25, c_timeGame);
            }
            if ((UnitIsAlive(lp_bObjUnit) == false)) {
                break;
            }

            libNtve_gf_MakeUnitInvulnerable(lp_bObjUnit, true);
            UnitSetState(lp_bObjUnit, c_unitStateTargetable, false);
            Wait(1.0, c_timeGame);
            if ((UnitIsAlive(lp_bObjUnit) == false)) {
                break;
            }

            UnitIssueOrder(lp_bObjUnit, Order(AbilityCommand("BurrowRedstoneSalamanderDown", 0)), c_orderQueueReplace);
            Wait(10.0, c_timeGame);
            if ((UnitIsAlive(lp_bObjUnit) == false)) {
                break;
            }

            libNtve_gf_ShowHideUnit(lp_bObjUnit, false);
            libNtve_gf_PauseUnit(lp_bObjUnit, true);
            libCOMI_gf_DestroyPingCoop(libARRA_gf_PingStoredForUnit(lp_bObjUnit, 1));
            while (!((gv_bonusObjectiveActive == true))) {
                Wait(1.0, c_timeAI);
            }
            if ((UnitIsAlive(lp_bObjUnit) == false)) {
                break;
            }

            TimerStart(lv_abilCD_Tunnel, gv_abilCD_Min_Tunnel, false, c_timeAI);
            TimerStart(lv_abilCD_SpitFire, gv_abilCD_Min_SpitFire, false, c_timeAI);
            TimerStart(lv_abilCD_FireLine, gv_abilCD_Min_FireLine, false, c_timeAI);
            libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_Secondary, UnitGetPosition(lp_bObjUnit), StringExternal("Param/Value/51944F38"));
            libARRA_gf_StorePingForUnit(lp_bObjUnit, 1, PingLastCreated());
            UnitSetState(lp_bObjUnit, c_unitStateTargetable, true);
            libNtve_gf_ShowHideUnit(lp_bObjUnit, true);
            libNtve_gf_PauseUnit(lp_bObjUnit, false);
            libNtve_gf_MakeUnitInvulnerable(lp_bObjUnit, false);
            UnitIssueOrder(lp_bObjUnit, Order(AbilityCommand("BurrowRedstoneSalamanderUp", 0)), c_orderQueueReplace);
            TriggerExecute(gt_BonusObjectiveResurfaceTransmissionQ, true, false);
        }
        Wait(0.5, c_timeAI);
    }
    libCOMI_gf_DestroyPingCoop(libARRA_gf_PingStoredForUnit(lp_bObjUnit, 1));
    VisRevealerDestroy(VisRevealerLastCreated());
    TriggerExecute(gt_ObjectiveKillSalamanderComplete, true, false);
    TriggerExecute(gt_BonusObjectiveCompleteTransmissionQ, true, false);
}

fixed gf_GetLavaInterval () {
    // Automatic Variable Declarations
    // Implementation
    return gv_lavaInterval;
}

void gf_SetLavaInterval (fixed lp_time) {
    // Automatic Variable Declarations
    // Implementation
    gv_lavaInterval = (lp_time + RandomFixed(-15.0, 15.0));
}

trigger auto_gf_ChangeLava_Trigger = null;
string auto_gf_ChangeLava_lp_waterState;
fixed auto_gf_ChangeLava_lp_duration;

void gf_ChangeLava (string lp_waterState, fixed lp_duration) {
    auto_gf_ChangeLava_lp_waterState = lp_waterState;
    auto_gf_ChangeLava_lp_duration = lp_duration;

    if (auto_gf_ChangeLava_Trigger == null) {
        auto_gf_ChangeLava_Trigger = TriggerCreate("auto_gf_ChangeLava_TriggerFunc");
    }

    TriggerExecute(auto_gf_ChangeLava_Trigger, false, false);
}

bool auto_gf_ChangeLava_TriggerFunc (bool testConds, bool runActions) {
    string lp_waterState = auto_gf_ChangeLava_lp_waterState;
    fixed lp_duration = auto_gf_ChangeLava_lp_duration;

    // Variable Declarations
    timer lv_lavaTransitionTimer;
    fixed lv_heightDestination;
    fixed lv_heightCurrent;
    unit lv_lavaDamageIter;

    // Automatic Variable Declarations
    string auto74BE7459_val;

    // Variable Initialization
    lv_lavaTransitionTimer = TimerCreate();

    // Implementation
    if ((gv_lavaTransitioning == false)) {
        gv_lavaTransitioning = true;
        WaterSetState(lp_waterState, lp_duration, c_wtcLinear);
        auto74BE7459_val = lp_waterState;
        if (auto74BE7459_val == "Redstone|[Default]") {
            lv_heightDestination = gv_c_LavaHeight01;
            lv_heightCurrent = gv_c_LavaHeight03;
        }
        else if (auto74BE7459_val == "Redstone|Alternate Setting") {
            lv_heightDestination = gv_c_LavaHeight02;
            lv_heightCurrent = gv_c_LavaHeight01;
        }
        else if (auto74BE7459_val == "Redstone|Alternate Setting 2") {
            lv_heightDestination = gv_c_LavaHeight03;
            lv_heightCurrent = gv_c_LavaHeight02;
        }
        else if (auto74BE7459_val == "Redstone|Alternate Setting 3") {
            lv_heightDestination = gv_c_LavaHeight03;
            lv_heightCurrent = gv_lavaDeathHeight_Current;
        }
        else {
        }
        TimerStart(lv_lavaTransitionTimer, lp_duration, false, c_timeGame);
        while ((TimerGetRemaining(lv_lavaTransitionTimer) > 0.0)) {
            gv_lavaDeathHeight_Current = libCOMI_gf_Lerp(lv_heightDestination, lv_heightCurrent, (TimerGetRemaining(lv_lavaTransitionTimer) / TimerGetDuration(lv_lavaTransitionTimer)));
            Wait(0.5, c_timeGame);
        }
        gv_lavaTransitioning = false;
    }

    return true;
}

unitgroup gf_CrittersInRegion (region lp_area) {
    // Variable Declarations
    unit lv_unitIter;
    unitgroup lv_critters;

    // Automatic Variable Declarations
    unitgroup auto6CDCD5C3_g;
    int auto6CDCD5C3_u;

    // Variable Initialization
    lv_critters = UnitGroupEmpty();

    // Implementation
    auto6CDCD5C3_g = UnitGroup(null, 0, lp_area, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto6CDCD5C3_u = UnitGroupCount(auto6CDCD5C3_g, c_unitCountAll);
    for (;; auto6CDCD5C3_u -= 1) {
        lv_unitIter = UnitGroupUnitFromEnd(auto6CDCD5C3_g, auto6CDCD5C3_u);
        if (lv_unitIter == null) { break; }
        if (((UnitGetType(lv_unitIter) == "CarrionBird") || (UnitGetType(lv_unitIter) == "CleaningBot"))) {
            UnitGroupAdd(lv_critters, lv_unitIter);
        }

    }
    return lv_critters;
}

bool gf_PointStoredForUnit (unit lp_unit, int lp_index) {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetBool(true, libARRA_gf__UnitDataName(5, lp_unit, lp_index));
}

void gf_StorePointForUnit (unit lp_unit, int lp_index, bool lp_burrowed) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetBool(true, libARRA_gf__UnitDataName(5, lp_unit, lp_index), lp_burrowed);
}

trigger auto_gf_CivilianGatherSupplies_Trigger = null;
unit auto_gf_CivilianGatherSupplies_lp_civilian;
point auto_gf_CivilianGatherSupplies_lp_suppliesLocation;
point auto_gf_CivilianGatherSupplies_lp_dropLocation;

void gf_CivilianGatherSupplies (unit lp_civilian, point lp_suppliesLocation, point lp_dropLocation) {
    auto_gf_CivilianGatherSupplies_lp_civilian = lp_civilian;
    auto_gf_CivilianGatherSupplies_lp_suppliesLocation = lp_suppliesLocation;
    auto_gf_CivilianGatherSupplies_lp_dropLocation = lp_dropLocation;

    if (auto_gf_CivilianGatherSupplies_Trigger == null) {
        auto_gf_CivilianGatherSupplies_Trigger = TriggerCreate("auto_gf_CivilianGatherSupplies_TriggerFunc");
    }

    TriggerExecute(auto_gf_CivilianGatherSupplies_Trigger, false, false);
}

bool auto_gf_CivilianGatherSupplies_TriggerFunc (bool testConds, bool runActions) {
    unit lp_civilian = auto_gf_CivilianGatherSupplies_lp_civilian;
    point lp_suppliesLocation = auto_gf_CivilianGatherSupplies_lp_suppliesLocation;
    point lp_dropLocation = auto_gf_CivilianGatherSupplies_lp_dropLocation;

    // Automatic Variable Declarations
    fixed autoB8529437_at;
    fixed auto6F4BD988_at;

    // Implementation
    UnitSetState(lp_civilian, c_unitStateStatusBar, false);
    if ((gv_lowGroundIsSafe == true)) {
        if ((RandomInt(0, 1) == 1)) {
            UnitBehaviorAdd(lp_civilian, "Run", lp_civilian, 1);
        }

    }
    else {
        UnitBehaviorAdd(lp_civilian, "Scared", lp_civilian, 1);
        UnitIssueOrder(lp_civilian, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(lp_civilian), 1.0, (UnitGetFacing(lp_civilian) + RandomFixed(-15.0, 15.0)))), c_orderQueueReplace);
        while (!((gv_lowGroundIsSafe == true))) {
            Wait(1.0, c_timeAI);
        }
        UnitBehaviorRemove(lp_civilian, "Scared", 1);
    }
    UnitIssueOrder(lp_civilian, OrderTargetingPoint(AbilityCommand("move", 0), lp_suppliesLocation), c_orderQueueReplace);
    autoB8529437_at = 0;
    while (!((gv_lowGroundIsSafe == false) && (UnitIsAlive(lp_civilian) == true) && (DistanceBetweenPoints(UnitGetPosition(lp_civilian), lp_suppliesLocation) <= 0.1)) && autoB8529437_at <= 10.0) {
        Wait(1.0, c_timeAI);
        autoB8529437_at = autoB8529437_at + 1.0;
    }
    if ((UnitIsAlive(lp_civilian) == false)) {
        return true;
    }

    if ((gv_lowGroundIsSafe == true)) {
        UnitSetFacing(lp_civilian, PointGetFacing(lp_suppliesLocation), 2.0);
        UnitBehaviorAdd(lp_civilian, "Gather", lp_civilian, 1);
        Wait(RandomFixed(3.0, 6.0), c_timeAI);
        UnitBehaviorRemove(lp_civilian, "Gather", 1);
        UnitBehaviorRemove(lp_civilian, "Run", 1);
        UnitBehaviorAdd(lp_civilian, "ColonistCarry", lp_civilian, 1);
    }
    else {
        UnitBehaviorAdd(lp_civilian, "Scared", lp_civilian, 1);
    }
    UnitIssueOrder(lp_civilian, OrderTargetingPoint(AbilityCommand("move", 0), lp_dropLocation), c_orderQueueReplace);
    auto6F4BD988_at = 0;
    while (!((UnitIsAlive(lp_civilian) == true) && (DistanceBetweenPoints(UnitGetPosition(lp_civilian), lp_dropLocation) <= 0.1)) && auto6F4BD988_at <= 10.0) {
        Wait(0.1, c_timeAI);
        auto6F4BD988_at = auto6F4BD988_at + 0.1;
    }
    UnitRemove(lp_civilian);
    return true;
}

void gf_AssignAttackWavePing (wave lp_wave, int lp_wavePlayer) {
    // Variable Declarations
    wave lv_existingWave;
    int lv_emptyWaveIndex;

    // Automatic Variable Declarations
    const int auto3CD09F8A_ae = libCOMI_gv_cMC_CoopAI_MaxWaveCount;
    const int auto3CD09F8A_ai = 1;

    // Variable Initialization

    // Implementation
    lv_emptyWaveIndex = 0;
    for ( ; ( (auto3CD09F8A_ai >= 0 && lv_emptyWaveIndex <= auto3CD09F8A_ae) || (auto3CD09F8A_ai < 0 && lv_emptyWaveIndex >= auto3CD09F8A_ae) ) ; lv_emptyWaveIndex += auto3CD09F8A_ai ) {
        if ((libCOMI_gv_cM_CoopAIPlayer_AttackWaves[lp_wavePlayer][lv_emptyWaveIndex] == null)) {
            if ((lv_emptyWaveIndex > libCOMI_gv_cM_CoopAIPlayer_AttackWaveHighWaterMark)) {
                libCOMI_gv_cM_CoopAIPlayer_AttackWaveHighWaterMark = lv_emptyWaveIndex;
            }

            break;
        }

    }
    libCOMI_gv_cM_CoopAIPlayer_AttackWaves[lp_wavePlayer][lv_emptyWaveIndex] = lp_wave;
}

trigger auto_gf_DefendArea_Trigger = null;
unitgroup auto_gf_DefendArea_lp_defenseUnits;
region auto_gf_DefendArea_lp_defenseArea;
unitgroup auto_gf_DefendArea_lp_defendUnitGroup;

void gf_DefendArea (unitgroup lp_defenseUnits, region lp_defenseArea, unitgroup lp_defendUnitGroup) {
    auto_gf_DefendArea_lp_defenseUnits = lp_defenseUnits;
    auto_gf_DefendArea_lp_defenseArea = lp_defenseArea;
    auto_gf_DefendArea_lp_defendUnitGroup = lp_defendUnitGroup;

    if (auto_gf_DefendArea_Trigger == null) {
        auto_gf_DefendArea_Trigger = TriggerCreate("auto_gf_DefendArea_TriggerFunc");
    }

    TriggerExecute(auto_gf_DefendArea_Trigger, false, false);
}

bool auto_gf_DefendArea_TriggerFunc (bool testConds, bool runActions) {
    unitgroup lp_defenseUnits = auto_gf_DefendArea_lp_defenseUnits;
    region lp_defenseArea = auto_gf_DefendArea_lp_defenseArea;
    unitgroup lp_defendUnitGroup = auto_gf_DefendArea_lp_defendUnitGroup;

    int init_i;

    // Variable Declarations
    const int lv_c_DefensePlayerMax = 4;
    playergroup lv_defensePlayers;
    int lv_playerGroupIter;
    int lv_playerIter;
    unit lv_defensiveUnitIter;
    unitgroup lv_attackingUnits;
    waveinfo[lv_c_DefensePlayerMax + 1] lv_waveInfo;
    wave[lv_c_DefensePlayerMax + 1] lv_wave;
    int lv_waveIndex;
    wavetarget lv_waveTarget;
    bool lv_lavaDanger_Prev;
    point lv_safeLocation;
    bool lv_defendingUnitGroup;

    // Automatic Variable Declarations
    unitgroup auto654C0970_g;
    int auto654C0970_u;
    int autoA0CA4DA4_ae;
    const int autoA0CA4DA4_ai = 1;
    unitgroup auto916AD101_g;
    int auto916AD101_u;
    int auto5EF67B50_ae;
    const int auto5EF67B50_ai = 1;
    int auto53A5FE6F_ae;
    const int auto53A5FE6F_ai = 1;
    int autoE158975C_ae;
    const int autoE158975C_ai = 1;
    unitgroup auto6F9D0A49_g;
    int auto6F9D0A49_u;
    unit auto6F9D0A49_var;

    // Variable Initialization
    lv_defensePlayers = PlayerGroupEmpty();
    lv_attackingUnits = UnitGroupEmpty();
    for (init_i = 0; init_i <= lv_c_DefensePlayerMax; init_i += 1) {
        lv_waveInfo[init_i] = AIWaveInfoCreate();
    }

    // Implementation
    if ((UnitGroupCount(lp_defendUnitGroup, c_unitCountAlive) > 0)) {
        lv_defendingUnitGroup = true;
    }

    if ((UnitGroupCount(lp_defenseUnits, c_unitCountAlive) == 0)) {
        breakpoint;
    }

    AISetGroupScriptControlled(lp_defenseUnits, false);
    auto654C0970_g = lp_defenseUnits;
    auto654C0970_u = UnitGroupCount(auto654C0970_g, c_unitCountAll);
    for (;; auto654C0970_u -= 1) {
        lv_defensiveUnitIter = UnitGroupUnitFromEnd(auto654C0970_g, auto654C0970_u);
        if (lv_defensiveUnitIter == null) { break; }
        PlayerGroupAdd(lv_defensePlayers, UnitGetOwner(lv_defensiveUnitIter));
    }
    gf_NextAttackWaveIndex();
    lv_waveIndex = gf_GetWaveIndex();
    autoA0CA4DA4_ae = PlayerGroupCount(lv_defensePlayers);
    lv_playerGroupIter = 1;
    for ( ; ( (autoA0CA4DA4_ai >= 0 && lv_playerGroupIter <= autoA0CA4DA4_ae) || (autoA0CA4DA4_ai < 0 && lv_playerGroupIter >= autoA0CA4DA4_ae) ) ; lv_playerGroupIter += autoA0CA4DA4_ai ) {
        lv_playerIter = PlayerGroupPlayer(lv_defensePlayers, lv_playerGroupIter);
        lv_wave[lv_playerGroupIter] = AIWaveCreate(lv_waveInfo[lv_playerGroupIter], lv_playerIter, RegionGetCenter(lp_defenseArea));
        AIWaveInfoAttack(AIWaveInfo(lv_wave[lv_playerGroupIter]), lv_playerIter, RegionGetCenter(lp_defenseArea), AIWaveTargetRegion(lp_defenseArea, 0), 5);
        AIWaveSet(lv_playerIter, lv_waveIndex, lv_wave[lv_playerGroupIter]);
        AIWaveSetType(lv_wave[lv_playerGroupIter], c_waveStateDefend, lv_waveTarget);
    }
    auto916AD101_g = lp_defenseUnits;
    auto916AD101_u = UnitGroupCount(auto916AD101_g, c_unitCountAll);
    for (;; auto916AD101_u -= 1) {
        lv_defensiveUnitIter = UnitGroupUnitFromEnd(auto916AD101_g, auto916AD101_u);
        if (lv_defensiveUnitIter == null) { break; }
        auto5EF67B50_ae = PlayerGroupCount(lv_defensePlayers);
        lv_playerGroupIter = 1;
        for ( ; ( (auto5EF67B50_ai >= 0 && lv_playerGroupIter <= auto5EF67B50_ae) || (auto5EF67B50_ai < 0 && lv_playerGroupIter >= auto5EF67B50_ae) ) ; lv_playerGroupIter += auto5EF67B50_ai ) {
            if ((UnitGetOwner(lv_defensiveUnitIter) == PlayerGroupPlayer(lv_defensePlayers, lv_playerGroupIter))) {
                AIWaveAddUnit(lv_wave[lv_playerGroupIter], lv_defensiveUnitIter);
            }

        }
    }
    lv_waveTarget = AIWaveTargetRegion(lp_defenseArea, 0);
    while ((libCOMI_gf_GameIsOver() == false) && (UnitGroupCount(lp_defenseUnits, c_unitCountAlive) > 0)) {
        if ((lv_defendingUnitGroup == true) && (UnitGroupCount(lp_defendUnitGroup, c_unitCountAlive) == 0)) {
            lv_defendingUnitGroup = false;
            lv_waveTarget = AIWaveTargetPlayer(libCOMI_gf_HumanPlayers());
        }

        if ((gv_lavaDanger != lv_lavaDanger_Prev)) {
            if ((gv_lavaDanger == true)) {
                lv_safeLocation = gf_FindSafePlacefromLava(UnitGroupCenterOfGroup(lp_defenseUnits));
                auto53A5FE6F_ae = PlayerGroupCount(lv_defensePlayers);
                lv_playerGroupIter = 1;
                for ( ; ( (auto53A5FE6F_ai >= 0 && lv_playerGroupIter <= auto53A5FE6F_ae) || (auto53A5FE6F_ai < 0 && lv_playerGroupIter >= auto53A5FE6F_ae) ) ; lv_playerGroupIter += auto53A5FE6F_ai ) {
                    AIWaveSetType(lv_wave[lv_playerGroupIter], c_waveStateRetreat, AIWaveTargetPoint(lv_safeLocation));
                }
            }
            else {
                autoE158975C_ae = PlayerGroupCount(lv_defensePlayers);
                lv_playerGroupIter = 1;
                for ( ; ( (autoE158975C_ai >= 0 && lv_playerGroupIter <= autoE158975C_ae) || (autoE158975C_ai < 0 && lv_playerGroupIter >= autoE158975C_ae) ) ; lv_playerGroupIter += autoE158975C_ai ) {
                    AIWaveSetType(lv_wave[lv_playerGroupIter], c_waveStateDefend, lv_waveTarget);
                }
            }
        }

        if ((gv_lavaDanger == true)) {
            auto6F9D0A49_g = lp_defenseUnits;
            auto6F9D0A49_u = UnitGroupCount(auto6F9D0A49_g, c_unitCountAll);
            for (;; auto6F9D0A49_u -= 1) {
                auto6F9D0A49_var = UnitGroupUnitFromEnd(auto6F9D0A49_g, auto6F9D0A49_u);
                if (auto6F9D0A49_var == null) { break; }
                if ((gf_LocationisSafefromLava(UnitGetPosition(auto6F9D0A49_var), ge_LavaHeightType_AbsoluteHeight) == false)) {
                    libNtve_gf_AICast(auto6F9D0A49_var, OrderTargetingPoint(AbilityCommand("move", 0), lv_safeLocation));
                }

            }
        }

        lv_lavaDanger_Prev = gv_lavaDanger;
        Wait(2.0, c_timeAI);
    }
    return true;
}

int gf_GetWaveIndex () {
    // Variable Declarations
    wave lv_existingWave;
    int lv_emptyWaveIndex;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    return (gv_c_AttackWaveBaseIndex + gv_attackWaveIndex);
}

void gf_NextAttackWaveIndex () {
    // Automatic Variable Declarations
    // Implementation
    gv_attackWaveIndex += 1;
}

fixed gf_GetVarianceNext (fixed lp_varianceTotal) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_varianceTotal > 0.0)) {
        return RandomFixed(-1.5, 0.0);
    }
    else {
        return RandomFixed(0.0, 1.5);
    }
}

point gf_GetAttackWaveSpawn () {
    // Variable Declarations
    int lv_attackWaveOriginIter;
    unit lv_ownershipAreaIter;
    int[gv_c_AttackWaveOrigin_Count + 1] lv_originOrder;

    // Automatic Variable Declarations
    int auto0C6F559B_ae;
    const int auto0C6F559B_ai = 1;
    unitgroup auto6B846678_g;
    int auto6B846678_u;

    // Variable Initialization

    // Implementation
    lv_originOrder[1] = 1;
    if ((RandomInt(0, 1) == 1)) {
        lv_originOrder[2] = 2;
        lv_originOrder[3] = 3;
    }
    else {
        lv_originOrder[2] = 3;
        lv_originOrder[3] = 2;
    }
    lv_originOrder[4] = 4;
    auto0C6F559B_ae = (gv_c_AttackWaveOrigin_Count - 1);
    lv_attackWaveOriginIter = 1;
    for ( ; ( (auto0C6F559B_ai >= 0 && lv_attackWaveOriginIter <= auto0C6F559B_ae) || (auto0C6F559B_ai < 0 && lv_attackWaveOriginIter >= auto0C6F559B_ae) ) ; lv_attackWaveOriginIter += auto0C6F559B_ai ) {
        gv_attackWaveOriginCostCurrent[lv_originOrder[lv_attackWaveOriginIter]] = 0.0;
        auto6B846678_g = UnitGroupAlliance(gv_pLAYER_01_USER, c_unitAllianceEnemy, gv_attackWaveOwnership[lv_originOrder[lv_attackWaveOriginIter]], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto6B846678_u = UnitGroupCount(auto6B846678_g, c_unitCountAll);
        for (;; auto6B846678_u -= 1) {
            lv_ownershipAreaIter = UnitGroupUnitFromEnd(auto6B846678_g, auto6B846678_u);
            if (lv_ownershipAreaIter == null) { break; }
            gv_attackWaveOriginCostCurrent[lv_originOrder[lv_attackWaveOriginIter]] += UnitTypeGetCost(UnitGetType(lv_ownershipAreaIter), c_unitCostSumMineralsVespene);
        }
        if (((gv_attackWaveOriginCostCurrent[lv_originOrder[lv_attackWaveOriginIter]] / gv_attackWaveOriginCostInitial[lv_originOrder[lv_attackWaveOriginIter]]) > 0.85)) {
            return gv_attackWaveOrigins[lv_originOrder[lv_attackWaveOriginIter]];
        }

    }
    return gv_attackWaveOrigins[gv_c_AttackWaveOrigin_Count];
}

void gf_AttackWaveatTime (fixed lp_time, trigger lp_aIAttackWave) {
    // Automatic Variable Declarations
    // Implementation
    while (!((lp_time <= GameGetMissionTime()))) {
        Wait(0.3, c_timeAI);
    }
    if ((libCOMI_gf_GameIsOver() == false)) {
        TriggerExecute(lp_aIAttackWave, true, false);
    }

}

trigger auto_gf_SendAttackWave_Trigger = null;
unitgroup auto_gf_SendAttackWave_lp_attackWave;
point auto_gf_SendAttackWave_lp_spawnLocation;
point auto_gf_SendAttackWave_lp_attackDestination;
playergroup auto_gf_SendAttackWave_lp_attackingPlayers;

void gf_SendAttackWave (unitgroup lp_attackWave, point lp_spawnLocation, point lp_attackDestination, playergroup lp_attackingPlayers) {
    auto_gf_SendAttackWave_lp_attackWave = lp_attackWave;
    auto_gf_SendAttackWave_lp_spawnLocation = lp_spawnLocation;
    auto_gf_SendAttackWave_lp_attackDestination = lp_attackDestination;
    auto_gf_SendAttackWave_lp_attackingPlayers = lp_attackingPlayers;

    if (auto_gf_SendAttackWave_Trigger == null) {
        auto_gf_SendAttackWave_Trigger = TriggerCreate("auto_gf_SendAttackWave_TriggerFunc");
    }

    TriggerExecute(auto_gf_SendAttackWave_Trigger, false, false);
}

bool auto_gf_SendAttackWave_TriggerFunc (bool testConds, bool runActions) {
    unitgroup lp_attackWave = auto_gf_SendAttackWave_lp_attackWave;
    point lp_spawnLocation = auto_gf_SendAttackWave_lp_spawnLocation;
    point lp_attackDestination = auto_gf_SendAttackWave_lp_attackDestination;
    playergroup lp_attackingPlayers = auto_gf_SendAttackWave_lp_attackingPlayers;

    int init_i;

    // Variable Declarations
    const int lv_c_AttackingPlayerMax = 2;
    int[lv_c_AttackingPlayerMax + 1] lv_attackingPlayers;
    waveinfo[lv_c_AttackingPlayerMax + 1] lv_waveInfo;
    wave[lv_c_AttackingPlayerMax + 1] lv_wave;
    int[lv_c_AttackingPlayerMax + 1] lv_waveIndex;
    wavetarget[lv_c_AttackingPlayerMax + 1] lv_waveTarget;
    bool lv_lavaDanger_Prev;
    point lv_safeLocation;
    int lv_playerIter;
    unit lv_attackWaveIter;

    // Automatic Variable Declarations
    int auto418EA2D1_ae;
    const int auto418EA2D1_ai = 1;
    unitgroup autoABDB38D9_g;
    int autoABDB38D9_u;
    unit autoABDB38D9_var;
    const int autoBBA965EE_ae = lv_c_AttackingPlayerMax;
    const int autoBBA965EE_ai = 1;
    string autoD3B167E6_val;
    int autoD0147F25_ae;
    const int autoD0147F25_ai = 1;
    int auto42392B03_ae;
    const int auto42392B03_ai = 1;
    unitgroup auto0D3D2173_g;
    int auto0D3D2173_u;
    unit auto0D3D2173_var;

    // Variable Initialization
    for (init_i = 0; init_i <= lv_c_AttackingPlayerMax; init_i += 1) {
        lv_waveInfo[init_i] = AIWaveInfoCreate();
    }

    // Implementation
    gf_NextAttackWaveIndex();
    libCOMI_gf_CT_Mutator_AttackWaveHook_WaveSent(gv_pLAYER_05_Player01_AttackWaves, lp_attackWave, lp_spawnLocation, libCOMI_ge_CM_CoopAI_WaveAttackTargetType_PlayerBase);
    libCOMI_gf_CT_Mutator_AttackWaveHook_WaveSent(gv_pLAYER_06_Player02_AttackWaves, lp_attackWave, lp_spawnLocation, libCOMI_ge_CM_CoopAI_WaveAttackTargetType_PlayerBase);
    auto418EA2D1_ae = PlayerGroupCount(lp_attackingPlayers);
    lv_playerIter = 1;
    for ( ; ( (auto418EA2D1_ai >= 0 && lv_playerIter <= auto418EA2D1_ae) || (auto418EA2D1_ai < 0 && lv_playerIter >= auto418EA2D1_ae) ) ; lv_playerIter += auto418EA2D1_ai ) {
        lv_attackingPlayers[lv_playerIter] = PlayerGroupPlayer(lp_attackingPlayers, lv_playerIter);
        lv_wave[lv_playerIter] = AIWaveCreate(lv_waveInfo[lv_playerIter], lv_attackingPlayers[lv_playerIter], lp_spawnLocation);
        lv_waveIndex[lv_playerIter] = gf_GetWaveIndex();
        lv_waveInfo[lv_playerIter] = AIWaveInfo(lv_wave[lv_playerIter]);
        AIWaveSet(lv_attackingPlayers[lv_playerIter], lv_waveIndex[lv_playerIter], lv_wave[lv_playerIter]);
        AIWaveInfoAttack(lv_waveInfo[lv_playerIter], lv_attackingPlayers[lv_playerIter], lp_spawnLocation, AIWaveTargetPoint(lp_attackDestination), 0);
        lv_waveTarget[lv_playerIter] = AIWaveTargetPoint(lp_attackDestination);
        AIWaveSetType(lv_wave[lv_playerIter], c_waveStateAttack, lv_waveTarget[lv_playerIter]);
        gf_AssignAttackWavePing(lv_wave[lv_playerIter], lv_attackingPlayers[lv_playerIter]);
    }
    autoABDB38D9_g = lp_attackWave;
    autoABDB38D9_u = UnitGroupCount(autoABDB38D9_g, c_unitCountAll);
    for (;; autoABDB38D9_u -= 1) {
        autoABDB38D9_var = UnitGroupUnitFromEnd(autoABDB38D9_g, autoABDB38D9_u);
        if (autoABDB38D9_var == null) { break; }
        lv_playerIter = 1;
        for ( ; ( (autoBBA965EE_ai >= 0 && lv_playerIter <= autoBBA965EE_ae) || (autoBBA965EE_ai < 0 && lv_playerIter >= autoBBA965EE_ae) ) ; lv_playerIter += autoBBA965EE_ai ) {
            if ((UnitGetOwner(autoABDB38D9_var) == lv_attackingPlayers[lv_playerIter])) {
                AISetUnitScriptControlled(autoABDB38D9_var, false);
                autoD3B167E6_val = UnitGetType(autoABDB38D9_var);
                if (autoD3B167E6_val == "Ghost") {
                    AIWaveAddUnitPriority(lv_wave[lv_playerIter], autoABDB38D9_var, c_prioNuke);
                }
                else {
                    AIWaveAddUnit(lv_wave[lv_playerIter], autoABDB38D9_var);
                }
            }

        }
    }
    while ((libCOMI_gf_GameIsOver() == false) && (UnitGroupCount(lp_attackWave, c_unitCountAlive) > 0)) {
        if ((gv_lavaDanger != lv_lavaDanger_Prev)) {
            if ((gv_lavaDanger == true)) {
                lv_safeLocation = gf_FindSafePlacefromLava(UnitGroupCenterOfGroup(lp_attackWave));
                autoD0147F25_ae = PlayerGroupCount(lp_attackingPlayers);
                lv_playerIter = 1;
                for ( ; ( (autoD0147F25_ai >= 0 && lv_playerIter <= autoD0147F25_ae) || (autoD0147F25_ai < 0 && lv_playerIter >= autoD0147F25_ae) ) ; lv_playerIter += autoD0147F25_ai ) {
                    if ((lv_safeLocation != PointFromId(4)) && (lv_safeLocation != PointFromId(3))) {
                        AIWaveSetType(lv_wave[lv_playerIter], c_waveStateDefend, AIWaveTargetPoint(lv_safeLocation));
                    }
                    else {
                        AIWaveSetType(lv_wave[lv_playerIter], c_waveStateDefend, AIWaveTargetPoint(PlayerStartLocation(PlayerGroupPlayer(libCOMI_gf_HumanPlayers(), lv_playerIter))));
                    }
                }
            }
            else {
                auto42392B03_ae = PlayerGroupCount(lp_attackingPlayers);
                lv_playerIter = 1;
                for ( ; ( (auto42392B03_ai >= 0 && lv_playerIter <= auto42392B03_ae) || (auto42392B03_ai < 0 && lv_playerIter >= auto42392B03_ae) ) ; lv_playerIter += auto42392B03_ai ) {
                    AIWaveSetType(lv_wave[lv_playerIter], c_waveStateAttack, lv_waveTarget[lv_playerIter]);
                }
            }
        }

        if ((gv_lavaDanger == true)) {
            auto0D3D2173_g = lp_attackWave;
            auto0D3D2173_u = UnitGroupCount(auto0D3D2173_g, c_unitCountAll);
            for (;; auto0D3D2173_u -= 1) {
                auto0D3D2173_var = UnitGroupUnitFromEnd(auto0D3D2173_g, auto0D3D2173_u);
                if (auto0D3D2173_var == null) { break; }
                if ((gf_LocationisSafefromLava(UnitGetPosition(auto0D3D2173_var), ge_LavaHeightType_AbsoluteHeight) == false)) {
                    libNtve_gf_AICast(auto0D3D2173_var, OrderTargetingPoint(AbilityCommand("move", 0), lv_safeLocation));
                }

            }
        }

        lv_lavaDanger_Prev = gv_lavaDanger;
        Wait(2.0, c_timeAI);
    }
    return true;
}

point gf_FindSafePlacefromLava (point lp_testLocation) {
    // Variable Declarations
    int lv_safePlaceIter;
    point lv_testClosestSafePlace;
    point lv_closestSafePlace;
    fixed lv_closestSafeDistance;
    fixed lv_testClosestSafeDistance;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_closestSafeDistance = 524287.0;

    // Implementation
    lv_safePlaceIter = 1;
    lv_testClosestSafePlace = PointFromId(21);
    while ((lv_testClosestSafePlace != null)) {
        lv_testClosestSafeDistance = DistanceSquaredBetweenPoints(lp_testLocation, lv_testClosestSafePlace);
        if ((lv_testClosestSafeDistance < lv_closestSafeDistance)) {
            lv_closestSafePlace = lv_testClosestSafePlace;
            lv_closestSafeDistance = lv_testClosestSafeDistance;
        }

        lv_safePlaceIter += 1;
        lv_testClosestSafePlace = gf_GetSafePlacePointfromIndex(lv_safePlaceIter);
    }
    return lv_closestSafePlace;
}

point gf_GetSafePlacePointfromIndex (int lp_index) {
    // Variable Declarations
    const string lv_c_SafePlaceString = "AI Safe From Lava";
    string lv_pointName;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_pointName = "";

    // Implementation
    lv_pointName = lv_c_SafePlaceString;
    if ((lp_index < 10)) {
        lv_pointName = (lv_pointName + " 00");
    }
    else if ((lp_index < 100)) {
        lv_pointName = (lv_pointName + " 0");
    }
    else if (true) {
        lv_pointName = (lv_pointName + " ");
    }
    return PointFromName((lv_pointName + IntToString(lp_index)));
}

void gf_DropAttack (unitgroup lp_attackWave, point lp_spawnLocation) {
    // Variable Declarations
    unitgroup lv_targetedUnits;
    int lv_safeFromLavaIter;
    point lv_safeFromLavaTarget;
    point lv_dropLocation;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_targetedUnits = UnitGroupEmpty();

    // Implementation
    lv_safeFromLavaIter = 1;
    lv_safeFromLavaTarget = gf_GetSafePlacePointfromIndex(lv_safeFromLavaIter);
    lv_dropLocation = gf_GetBaseDropLocation(lp_spawnLocation);
    gf_SendHunterWave(lp_attackWave, lp_spawnLocation, lv_dropLocation);
}

trigger auto_gf_SendHunterWave_Trigger = null;
unitgroup auto_gf_SendHunterWave_lp_attackWave;
point auto_gf_SendHunterWave_lp_spawnLocation;
point auto_gf_SendHunterWave_lp_dropLocation;

void gf_SendHunterWave (unitgroup lp_attackWave, point lp_spawnLocation, point lp_dropLocation) {
    auto_gf_SendHunterWave_lp_attackWave = lp_attackWave;
    auto_gf_SendHunterWave_lp_spawnLocation = lp_spawnLocation;
    auto_gf_SendHunterWave_lp_dropLocation = lp_dropLocation;

    if (auto_gf_SendHunterWave_Trigger == null) {
        auto_gf_SendHunterWave_Trigger = TriggerCreate("auto_gf_SendHunterWave_TriggerFunc");
    }

    TriggerExecute(auto_gf_SendHunterWave_Trigger, false, false);
}

bool auto_gf_SendHunterWave_TriggerFunc (bool testConds, bool runActions) {
    unitgroup lp_attackWave = auto_gf_SendHunterWave_lp_attackWave;
    point lp_spawnLocation = auto_gf_SendHunterWave_lp_spawnLocation;
    point lp_dropLocation = auto_gf_SendHunterWave_lp_dropLocation;

    int init_i;

    // Variable Declarations
    const int lv_c_HuntingPlayerMax = 4;
    waveinfo[lv_c_HuntingPlayerMax + 1] lv_waveInfo;
    wave[lv_c_HuntingPlayerMax + 1] lv_wave;
    int lv_waveIndex;
    wavetarget lv_waveTarget;
    bool lv_lavaDanger_Prev;
    fixed[lv_c_HuntingPlayerMax + 1] lv_cargoTotal;
    string lv_transportType;
    fixed lv_transportCargoCapacity;
    int lv_transportCount;
    unit lv_droppedFuelCell;
    unitgroup lv_defenseUnits;
    playergroup lv_huntAttackPlayers;
    int lv_playerGroupIter;
    int lv_playerIter;
    unit lv_huntingUnitIter;

    // Automatic Variable Declarations
    unitgroup autoACE5FE04_g;
    int autoACE5FE04_u;
    int auto1D7E487C_ae;
    const int auto1D7E487C_ai = 1;
    unitgroup auto6EBCA59D_g;
    int auto6EBCA59D_u;
    int auto95CA3571_ae;
    const int auto95CA3571_ai = 1;
    int auto788AB3A1_ae;
    const int auto788AB3A1_ai = 1;
    unitgroup auto05EB28E1_g;
    int auto05EB28E1_u;
    int autoBB5D3791_ae;
    const int autoBB5D3791_ai = 1;
    int auto82DEA7CB_ae;
    const int auto82DEA7CB_ai = 1;

    // Variable Initialization
    for (init_i = 0; init_i <= lv_c_HuntingPlayerMax; init_i += 1) {
        lv_waveInfo[init_i] = AIWaveInfoCreate();
    }
    lv_defenseUnits = UnitGroupEmpty();
    lv_huntAttackPlayers = PlayerGroupEmpty();

    // Implementation
    autoACE5FE04_g = lp_attackWave;
    autoACE5FE04_u = UnitGroupCount(autoACE5FE04_g, c_unitCountAll);
    for (;; autoACE5FE04_u -= 1) {
        lv_huntingUnitIter = UnitGroupUnitFromEnd(autoACE5FE04_g, autoACE5FE04_u);
        if (lv_huntingUnitIter == null) { break; }
        PlayerGroupAdd(lv_huntAttackPlayers, UnitGetOwner(lv_huntingUnitIter));
    }
    lv_waveTarget = AIWaveTargetPoint(PointFromId(103));
    gf_NextAttackWaveIndex();
    auto1D7E487C_ae = PlayerGroupCount(lv_huntAttackPlayers);
    lv_playerGroupIter = 1;
    for ( ; ( (auto1D7E487C_ai >= 0 && lv_playerGroupIter <= auto1D7E487C_ae) || (auto1D7E487C_ai < 0 && lv_playerGroupIter >= auto1D7E487C_ae) ) ; lv_playerGroupIter += auto1D7E487C_ai ) {
        lv_playerIter = PlayerGroupPlayer(lv_huntAttackPlayers, lv_playerGroupIter);
        lv_wave[lv_playerGroupIter] = AIWaveCreate(lv_waveInfo[lv_playerGroupIter], lv_playerIter, lp_spawnLocation);
        AIWaveInfoAttack(AIWaveInfo(lv_wave[lv_playerGroupIter]), lv_playerIter, lp_spawnLocation, lv_waveTarget, 180);
        AIWaveSet(lv_playerIter, gf_GetWaveIndex(), lv_wave[lv_playerGroupIter]);
        AIWaveTargetAddWaypoint(lv_waveTarget, lp_dropLocation, true, 0);
        AIWaveTargetAddWaypoint(lv_waveTarget, PlayerStartLocation(PlayerGroupPlayer(libCOMI_gf_HumanPlayers(), lv_playerGroupIter)), false, 1);
        AIWaveSetType(lv_wave[lv_playerGroupIter], c_waveStateDropAttack, lv_waveTarget);
    }
    auto6EBCA59D_g = lp_attackWave;
    auto6EBCA59D_u = UnitGroupCount(auto6EBCA59D_g, c_unitCountAll);
    for (;; auto6EBCA59D_u -= 1) {
        lv_huntingUnitIter = UnitGroupUnitFromEnd(auto6EBCA59D_g, auto6EBCA59D_u);
        if (lv_huntingUnitIter == null) { break; }
        auto95CA3571_ae = PlayerGroupCount(lv_huntAttackPlayers);
        lv_playerGroupIter = 1;
        for ( ; ( (auto95CA3571_ai >= 0 && lv_playerGroupIter <= auto95CA3571_ae) || (auto95CA3571_ai < 0 && lv_playerGroupIter >= auto95CA3571_ae) ) ; lv_playerGroupIter += auto95CA3571_ai ) {
            if ((UnitGetOwner(lv_huntingUnitIter) == PlayerGroupPlayer(lv_huntAttackPlayers, lv_playerGroupIter))) {
                AISetUnitScriptControlled(lv_huntingUnitIter, false);
                AIWaveAddUnitPriority(lv_wave[lv_playerGroupIter], lv_huntingUnitIter, c_prioWave);
                lv_cargoTotal[lv_playerGroupIter] += CatalogFieldValueGetAsInt(c_gameCatalogUnit, UnitGetType(lv_huntingUnitIter), "CargoSize", PlayerGroupPlayer(lv_huntAttackPlayers, lv_playerGroupIter));
            }

        }
    }
    auto788AB3A1_ae = PlayerGroupCount(lv_huntAttackPlayers);
    lv_playerGroupIter = 1;
    for ( ; ( (auto788AB3A1_ai >= 0 && lv_playerGroupIter <= auto788AB3A1_ae) || (auto788AB3A1_ai < 0 && lv_playerGroupIter >= auto788AB3A1_ae) ) ; lv_playerGroupIter += auto788AB3A1_ai ) {
        lv_transportType = libCOMI_gf_CoopAIUnitCategory(libCOMI_ge_UnitCategory_Transport, gv_pLAYER_03_Player01_Bullies);
        UnitCreate(1, lv_transportType, 0, gv_pLAYER_03_Player01_Bullies, lp_spawnLocation, libNtve_gf_RandomAngle());
        lv_transportCargoCapacity = libARRA_gf_GetUnitCargoSize(UnitLastCreated());
        lv_transportCount = RoundI(Floor((lv_cargoTotal[lv_playerGroupIter] / lv_transportCargoCapacity)));
        UnitCreate(lv_transportCount, lv_transportType, 0, PlayerGroupPlayer(lv_huntAttackPlayers, lv_playerGroupIter), lp_spawnLocation, libNtve_gf_RandomAngle());
        auto05EB28E1_g = UnitLastCreatedGroup();
        auto05EB28E1_u = UnitGroupCount(auto05EB28E1_g, c_unitCountAll);
        for (;; auto05EB28E1_u -= 1) {
            lv_huntingUnitIter = UnitGroupUnitFromEnd(auto05EB28E1_g, auto05EB28E1_u);
            if (lv_huntingUnitIter == null) { break; }
            AISetUnitScriptControlled(lv_huntingUnitIter, false);
            AIWaveAddUnitPriority(lv_wave[lv_playerGroupIter], lv_huntingUnitIter, c_prioTransport);
            gf_RemoveEmptyTransports(lv_huntingUnitIter);
        }
    }
    Wait(3.0, c_timeAI);
    autoBB5D3791_ae = PlayerGroupCount(lv_huntAttackPlayers);
    lv_playerGroupIter = 1;
    for ( ; ( (autoBB5D3791_ai >= 0 && lv_playerGroupIter <= autoBB5D3791_ae) || (autoBB5D3791_ai < 0 && lv_playerGroupIter >= autoBB5D3791_ae) ) ; lv_playerGroupIter += autoBB5D3791_ai ) {
        lv_playerIter = PlayerGroupPlayer(lv_huntAttackPlayers, lv_playerGroupIter);
        gf_AssignAttackWavePing(lv_wave[lv_playerGroupIter], lv_playerIter);
    }
    while (!((UnitGroupCount(lp_attackWave, c_unitCountAlive) == 0))) {
        Wait(1.0, c_timeGame);
    }
    if ((UnitGroupCount(lp_attackWave, c_unitCountAlive) > 0)) {
        auto82DEA7CB_ae = PlayerGroupCount(lv_huntAttackPlayers);
        lv_playerGroupIter = 1;
        for ( ; ( (auto82DEA7CB_ai >= 0 && lv_playerGroupIter <= auto82DEA7CB_ae) || (auto82DEA7CB_ai < 0 && lv_playerGroupIter >= auto82DEA7CB_ae) ) ; lv_playerGroupIter += auto82DEA7CB_ai ) {
            UnitGroupAddUnitGroup(lv_defenseUnits, AIWaveGetUnits(lv_wave[lv_playerGroupIter]));
            AIWaveDelete(lv_wave[lv_playerGroupIter]);
        }
        AISetGroupScriptControlled(lv_defenseUnits, true);
        gf_SendAttackWave(lv_defenseUnits, UnitGroupCenterOfGroup(lv_defenseUnits), AIGetBestTarget(PlayerGroupPlayer(lv_huntAttackPlayers, 1), libCOMI_gf_HumanPlayers(), UnitGroupCenterOfGroup(lv_defenseUnits), 49), lv_huntAttackPlayers);
    }

    return true;
}

trigger auto_gf_RemoveEmptyTransports_Trigger = null;
unit auto_gf_RemoveEmptyTransports_lp_transport;

void gf_RemoveEmptyTransports (unit lp_transport) {
    auto_gf_RemoveEmptyTransports_lp_transport = lp_transport;

    if (auto_gf_RemoveEmptyTransports_Trigger == null) {
        auto_gf_RemoveEmptyTransports_Trigger = TriggerCreate("auto_gf_RemoveEmptyTransports_TriggerFunc");
    }

    TriggerExecute(auto_gf_RemoveEmptyTransports_Trigger, false, false);
}

bool auto_gf_RemoveEmptyTransports_TriggerFunc (bool testConds, bool runActions) {
    unit lp_transport = auto_gf_RemoveEmptyTransports_lp_transport;

    // Automatic Variable Declarations
    // Implementation
    Wait(60.0, c_timeGame);
    while (true) {
        if ((UnitIsValid(lp_transport) == false)) {
            return true;
        }

        if ((UnitOrderCount(lp_transport) == 0) && (UnitCargoValue(lp_transport, c_unitCargoUnitCount) == 0) && (libNtve_gf_UnitInRegion(lp_transport, RegionCircle(PlayerStartLocation(UnitGetOwner(lp_transport)), 10.0)) == true)) {
            UnitSetHeight(lp_transport, 20.0, 6.0);
            Wait(6.0, c_timeGame);
            UnitRemove(lp_transport);
            return true;
        }

        Wait(10.0, c_timeGame);
    }
    return true;
}

point gf_GetBaseDropLocation (point lp_startingLocation) {
    // Automatic Variable Declarations
    point auto6129DC97_val;
    int auto84FECD10_val;

    // Implementation
    auto6129DC97_val = lp_startingLocation;
    if (auto6129DC97_val == PointFromId(74)) {
        return libNtve_gf_RandomPointBetweenPoints(PointFromId(1), PointFromId(1621));
    }
    else if (auto6129DC97_val == PointFromId(97)) {
        return libNtve_gf_RandomPointBetweenPoints(PointFromId(82), PointFromId(1621));
    }
    else if (auto6129DC97_val == PointFromId(98)) {
        return libNtve_gf_RandomPointBetweenPoints(PointFromId(1), PointFromId(1620));
    }
    else {
        auto84FECD10_val = RandomInt(0, 1);
        if (auto84FECD10_val == 0) {
            return libNtve_gf_RandomPointBetweenPoints(PointFromId(1), PointFromId(82));
        }
        else {
            return libNtve_gf_RandomPointBetweenPoints(PointFromId(1620), PointFromId(1621));
        }
    }
}

void gf_UpdateStatScore (int lp_player, fixed lp_time) {
    // Automatic Variable Declarations
    playergroup autoFADED9B1_g;
    int autoFADED9B1_var;

    // Implementation
    gv_statScore_WorkerTime[lp_player] += lp_time;
    autoFADED9B1_g = libCOMI_gf_GetAlliedCommandersPlayers();
    autoFADED9B1_var = -1;
    while (true) {
        autoFADED9B1_var = PlayerGroupNextPlayer(autoFADED9B1_g, autoFADED9B1_var);
        if (autoFADED9B1_var < 0) { break; }
        PlayerScoreValueSetFromInt(autoFADED9B1_var, "Veridia", FixedToInt(gv_statScore_WorkerTime[autoFADED9B1_var]));
    }
}

//--------------------------------------------------------------------------------------------------
// Trigger: Planet Explodes Bar
//--------------------------------------------------------------------------------------------------
bool gt_PlanetExplodesBar_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_progress;
    fixed lv_durationOfFailTimer_Max;
    timer lv_waitfortextWriteout;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_waitfortextWriteout = TimerCreate();

    // Actions
    if (!runActions) {
        return true;
    }

    TimerStart(lv_waitfortextWriteout, 3.0, false, c_timeReal);
    libCOMI_gf_DisplayProgressBar(StringExternal("Param/Value/61C7F2A8"), 0, 100);
    libCOMI_gf_SetProgressBarColor(Color(42.75, 68.24, 16.86));
    while ((libCOMI_gf_GameIsOver() == false)) {
        TextExpressionSetToken("Param/Expression/117A94C2", "A", FormatDuration(FixedToInt(TimerGetRemaining(gv_failure_Timer))));
        libCOMI_gf_SetProgressBarTitle(TextExpressionAssemble("Param/Expression/117A94C2"));
        if ((TimerIsPaused(gv_failure_Timer) == false)) {
            libCOMI_gf_SetProgressBarLabel(StringToText(""));
        }
        else {
            libCOMI_gf_SetProgressBarLabel(StringExternal("Param/Value/ED8F9406"));
        }
        if ((lv_durationOfFailTimer_Max < TimerGetDuration(gv_failure_Timer))) {
            lv_durationOfFailTimer_Max = TimerGetDuration(gv_failure_Timer);
        }

        lv_progress = TruncI(((TimerGetRemaining(gv_failure_Timer) / lv_durationOfFailTimer_Max) * 100.0));
        libCOMI_gf_SetProgressBarProgress(lv_progress);
        if ((lv_progress <= 25)) {
            libCOMI_gf_SetProgressBarColor(Color(100.00, 0.00, 0.00));
        }
        else if ((lv_progress <= 50)) {
            libCOMI_gf_SetProgressBarColor(Color(100.00, 100.00, 0.00));
        }
        else if ((lv_progress > 50)) {
            libCOMI_gf_SetProgressBarColor(Color(42.75, 68.24, 16.86));
        }
        if ((TimerGetRemaining(lv_waitfortextWriteout) <= 0.0)) {
            TriggerExecute(gt_ObjectiveDontLetThePlanetExpodeUpdate, true, false);
        }

        Wait(0.5, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlanetExplodesBar_Init () {
    gt_PlanetExplodesBar = TriggerCreate("gt_PlanetExplodesBar_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Create Fuel Cell Events
//--------------------------------------------------------------------------------------------------
bool gt_CreateFuelCellEvents_Func (bool testConds, bool runActions) {
    int init_i;

    // Variable Declarations
    string lv_scrambleSet;
    string lv_scrambleSetChar;
    int lv_scrableSetIter;
    string lv_spawnLocationName;
    point lv_spawnLocation;
    int lv_randomSegment;
    string lv_specialSpawnLocations;
    const int lv_c_PossibleSpawnLocationsMax = 6;
    point[lv_c_PossibleSpawnLocationsMax + 1] lv_possibleSpawnLocations;
    int lv_possibleSpawnLocationIter;
    int lv_possibleSpawnLocation_ArrayEnd;
    point lv_possibleSpawnLocationTemp;
    int lv_spawnCount;
    const int lv_c_PatrolRegionMax = 4;
    region lv_patrolRegionCurrent;
    region[lv_c_PatrolRegionMax + 1] lv_patrolRegionList;
    unitgroup[lv_c_PatrolRegionMax + 1] lv_patrolDefendUnits;
    int lv_patrolRegionIter;
    int lv_resourceAmount;
    int lv_techLevel;
    bool lv_spawnBullies;
    point[lv_c_PatrolRegionMax + 1] lv_bullySpawnLocation;
    fixed lv_lavaDownTime;
    int lv_perSegmentSpawn;
    int lv_bankedCrystalsUsed;

    // Automatic Variable Declarations
    int auto57CC069A_val;
    int autoECABA0AA_val;
    int auto84E5EBD3_val;
    int auto9D0162B9_val;
    int auto17B7790F_val;
    const int auto5081B801_ae = lv_c_PossibleSpawnLocationsMax;
    const int auto5081B801_ai = 1;
    int auto42A1FCFD_n;
    int auto42A1FCFD_i;
    int autoB2E091D6_ae;
    int autoB2E091D6_var;

    // Variable Initialization
    lv_scrambleSet = "";
    lv_scrambleSetChar = "";
    lv_spawnLocationName = "";
    lv_specialSpawnLocations = "mnopqrt";
    for (init_i = 0; init_i <= lv_c_PatrolRegionMax; init_i += 1) {
        lv_patrolDefendUnits[init_i] = UnitGroupEmpty();
    }
    lv_resourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
    lv_techLevel = libCOMI_ge_CoopAITechLevelBuckets__1Early;

    // Actions
    if (!runActions) {
        return true;
    }

    auto57CC069A_val = gv_lavaSurgeCounter;
    if (auto57CC069A_val == 0) {
        return true;
    }
    else if (auto57CC069A_val == 1) {
        lv_lavaDownTime = 90.0;
        lv_scrambleSet = "a";
        lv_spawnCount = 2;
        lv_spawnBullies = false;
    }
    else if (auto57CC069A_val == 2) {
        lv_lavaDownTime = 150.0;
        lv_scrambleSet = "A";
        lv_spawnCount = 2;
        lv_spawnBullies = false;
    }
    else if (auto57CC069A_val == 3) {
        lv_lavaDownTime = 210.0;
        lv_scrambleSet = "BD";
        lv_spawnCount = 4;
        lv_spawnBullies = true;
        lv_resourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
        lv_techLevel = libCOMI_ge_CoopAITechLevelBuckets__1Early;
        TriggerExecute(gt_TransmissionEnemyAttacktowardsWorkersQ, true, false);
    }
    else if (auto57CC069A_val == 4) {
        lv_lavaDownTime = 150.0;
        autoECABA0AA_val = gv_fuelCell_Surge04;
        if (autoECABA0AA_val == 0) {
            lv_scrambleSet = "m";
            lv_resourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__3Small;
            lv_techLevel = libCOMI_ge_CoopAITechLevelBuckets__3Mid;
        }
        else if (autoECABA0AA_val == 1) {
            lv_scrambleSet = "t";
            lv_resourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__3Small;
            lv_techLevel = libCOMI_ge_CoopAITechLevelBuckets__3Mid;
        }
        else {
            lv_scrambleSet = "Amt";
            lv_resourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__2Smaller;
            lv_techLevel = libCOMI_ge_CoopAITechLevelBuckets__2EarlyMid;
        }
        lv_spawnCount = 3;
        lv_spawnBullies = true;
    }
    else if (auto57CC069A_val == 5) {
        lv_lavaDownTime = 210.0;
        auto84E5EBD3_val = gv_fuelCell_Surge05;
        if (auto84E5EBD3_val == 0) {
            lv_scrambleSet = "Gpr";
        }
        else {
            lv_scrambleSet = "Epr";
        }
        lv_spawnCount = 3;
        lv_spawnBullies = true;
        lv_resourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__3Small;
        lv_techLevel = libCOMI_ge_CoopAITechLevelBuckets__3Mid;
    }
    else if (auto57CC069A_val == 6) {
        lv_lavaDownTime = 150.0;
        auto9D0162B9_val = gv_fuelCell_Surge06;
        if (auto9D0162B9_val == 0) {
            lv_scrambleSet = "C";
            lv_resourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__3Small;
            lv_techLevel = libCOMI_ge_CoopAITechLevelBuckets__3Mid;
        }
        else if (auto9D0162B9_val == 1) {
            lv_scrambleSet = "F";
            lv_resourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__3Small;
            lv_techLevel = libCOMI_ge_CoopAITechLevelBuckets__3Mid;
        }
        else {
            lv_scrambleSet = "CFn";
            lv_resourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
            lv_techLevel = libCOMI_ge_CoopAITechLevelBuckets__1Early;
        }
        lv_spawnCount = 3;
        lv_spawnBullies = true;
    }
    else if (auto57CC069A_val == 7) {
        lv_lavaDownTime = 210.0;
        lv_scrambleSet = "JSq";
        lv_spawnCount = 3;
        lv_spawnBullies = true;
        lv_resourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__3Small;
        lv_techLevel = libCOMI_ge_CoopAITechLevelBuckets__2EarlyMid;
    }
    else if (auto57CC069A_val == 8) {
        lv_lavaDownTime = 150.0;
        lv_spawnCount = 2;
        lv_spawnBullies = true;
        lv_resourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__4Medium;
        lv_techLevel = libCOMI_ge_CoopAITechLevelBuckets__3Mid;
        auto17B7790F_val = gv_fuelCell_Surge08;
        if (auto17B7790F_val == 0) {
            lv_scrambleSet = "Ko";
        }
        else if (auto17B7790F_val == 1) {
            lv_scrambleSet = "FH";
        }
        else {
            lv_scrambleSet = "o";
        }
    }
    else {
        lv_lavaDownTime = 120.0;
        lv_scrambleSet = "EK";
        lv_spawnCount = 2;
        lv_spawnBullies = true;
        lv_resourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__5Large;
        lv_techLevel = libCOMI_ge_CoopAITechLevelBuckets__4LateMid;
    }
    gf_SetLavaInterval(lv_lavaDownTime);
    lv_scrableSetIter = 1;
    lv_scrambleSetChar = StringSub(lv_scrambleSet, lv_scrableSetIter, lv_scrableSetIter);
    while ((lv_scrambleSetChar != "")) {
        lv_possibleSpawnLocationIter = 1;
        for ( ; ( (auto5081B801_ai >= 0 && lv_possibleSpawnLocationIter <= auto5081B801_ae) || (auto5081B801_ai < 0 && lv_possibleSpawnLocationIter >= auto5081B801_ae) ) ; lv_possibleSpawnLocationIter += auto5081B801_ai ) {
            lv_spawnLocationName = ("Scramble Spawn" + " " + lv_scrambleSetChar + " " + IntToString(lv_possibleSpawnLocationIter));
            lv_spawnLocation = PointFromName(lv_spawnLocationName);
            if ((lv_spawnLocation != null)) {
                lv_possibleSpawnLocations[lv_possibleSpawnLocationIter] = lv_spawnLocation;
                lv_spawnLocation = null;
            }
            else {
                break;
            }
        }
        lv_possibleSpawnLocation_ArrayEnd = (lv_possibleSpawnLocationIter - 1);
        lv_bankedCrystalsUsed = 0;
        if ((gv_missedFuelCells_Bank > 0) && (StringContains(lv_specialSpawnLocations, lv_scrambleSetChar, c_stringAnywhere, c_stringCase) == true)) {
            if ((gv_missedFuelCells_Total < 3)) {
                gv_missedFuelCells_Bank -= 1;
                lv_bankedCrystalsUsed += 1;
            }
            else {
                gv_missedFuelCells_Bank -= 2;
                lv_bankedCrystalsUsed += 2;
            }
        }

        lv_perSegmentSpawn = (FixedToInt((lv_spawnCount / StringLength(lv_scrambleSet))) + lv_bankedCrystalsUsed);
        lv_perSegmentSpawn = MinI(MaxI(lv_perSegmentSpawn, 1), lv_c_PossibleSpawnLocationsMax);
        auto42A1FCFD_n = lv_perSegmentSpawn;
        for (auto42A1FCFD_i = 1; auto42A1FCFD_i <= auto42A1FCFD_n; auto42A1FCFD_i += 1) {
            lv_randomSegment = RandomInt(1, lv_possibleSpawnLocation_ArrayEnd);
            lv_spawnLocation = lv_possibleSpawnLocations[lv_randomSegment];
            lv_possibleSpawnLocations[lv_randomSegment] = lv_possibleSpawnLocations[lv_possibleSpawnLocation_ArrayEnd];
            lv_possibleSpawnLocations[lv_possibleSpawnLocation_ArrayEnd] = lv_spawnLocation;
            lv_possibleSpawnLocation_ArrayEnd -= 1;
            gf_CreateFuelCell(lv_spawnLocation);
            if ((lv_spawnBullies == true)) {
                if ((lv_patrolRegionCurrent == null)) {
                    lv_patrolRegionIter += 1;
                    lv_patrolRegionCurrent = RegionCircle(lv_spawnLocation, 15.0);
                }
                else {
                    RegionAddRegion(lv_patrolRegionCurrent, RegionCircle(lv_spawnLocation, 15.0));
                }
                UnitGroupAdd(lv_patrolDefendUnits[lv_patrolRegionIter], UnitLastCreated());
            }

        }
        if ((lv_patrolRegionCurrent != null)) {
            lv_patrolRegionList[lv_patrolRegionIter] = lv_patrolRegionCurrent;
            lv_bullySpawnLocation[lv_patrolRegionIter] = PointFromName(("Scramble Spawn" + " " + lv_scrambleSetChar + " " + "Spawn"));
        }

        lv_patrolRegionCurrent = null;
        lv_scrableSetIter += 1;
        lv_scrambleSetChar = StringSub(lv_scrambleSet, lv_scrableSetIter, lv_scrableSetIter);
        lv_spawnLocation = null;
    }
    autoB2E091D6_ae = lv_patrolRegionIter;
    autoB2E091D6_var = 1;
    for ( ; autoB2E091D6_var <= autoB2E091D6_ae; autoB2E091D6_var += 1 ) {
        libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_05_Player01_AttackWaves, gv_pLAYER_06_Player02_AttackWaves, lv_resourceAmount, lv_techLevel, lv_bullySpawnLocation[autoB2E091D6_var], true);
        gf_DefendArea(libCOMI_gf_LastCreatedCoopAttackForce(), lv_patrolRegionList[autoB2E091D6_var], lv_patrolDefendUnits[autoB2E091D6_var]);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CreateFuelCellEvents_Init () {
    gt_CreateFuelCellEvents = TriggerCreate("gt_CreateFuelCellEvents_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Drop Off Cell
//--------------------------------------------------------------------------------------------------
bool gt_DropOffCell_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_dropZoneIter;
    fixed lv_percentComplete;

    // Automatic Variable Declarations
    unitgroup auto96CFF64C_g;
    int auto96CFF64C_u;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    while ((libCOMI_gf_GameIsOver() == false)) {
        auto96CFF64C_g = UnitGroup(null, c_playerAny, RegionFromId(61), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto96CFF64C_u = UnitGroupCount(auto96CFF64C_g, c_unitCountAll);
        for (;; auto96CFF64C_u -= 1) {
            lv_dropZoneIter = UnitGroupUnitFromEnd(auto96CFF64C_g, auto96CFF64C_u);
            if (lv_dropZoneIter == null) { break; }
            if ((UnitHasBehavior2(lv_dropZoneIter, "FuelCellPickupUnit") == true)) {
                gv_objectsMoved += 1;
                TriggerExecute(gt_ObjectiveCollectSolariteUpdate, true, false);
                gf_DisplayRewardFloatingText(UnitGetPosition(lv_dropZoneIter), FixedToInt(gv_dropOffTimerIncrease), "Assets\\Textures\\ui-editoricon-triggercategories_timer.dds", StringExternal("Param/Value/266C9C9C"), libCOMI_gf_HumanPlayers());
                if ((gv_objectsMoved < gv_c_ObjectsToMove)) {
                    UnitBehaviorRemove(lv_dropZoneIter, "FuelCellPickupUnit", 1);
                    UnitCreateEffectUnit(lv_dropZoneIter, "FuelCellTurninLM", UnitFromId(890));
                    TimerStart(gv_failure_Timer, (TimerGetRemaining(gv_failure_Timer) + gv_dropOffTimerIncrease), false, c_timeAI);
                }
                else {
                    UnitIssueOrder(lv_dropZoneIter, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
                    libNtve_gf_PauseUnit(lv_dropZoneIter, true);
                    gv_victoryUnit = lv_dropZoneIter;
                    TriggerExecute(gt_VictoryStabilizerRefueledCompleted, true, true);
                    return true;
                }
                TriggerExecute(gt_TimerReminderTransmissionsUpdate, true, false);
                TriggerExecute(gt_TransmissionFirstTurnInQ, true, false);
                if ((gv_objectsMoved >= 15)) {
                    TriggerExecute(gt_TransmissionStabilizerStablized75Q, true, false);
                }
                else if ((gv_objectsMoved >= 10)) {
                    TriggerExecute(gt_TransmissionStabilizerStablized50Q, true, false);
                }
                else if ((gv_objectsMoved >= 5)) {
                    TriggerExecute(gt_TransmissionStabilizerStablized25Q, true, false);
                }
                libCOMI_gf_SetMissionEffort((((gv_objectsMoved - 2.0) / (gv_c_ObjectsToMove - 5.0)) * 100));
            }

        }
        Wait(1.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DropOffCell_Init () {
    gt_DropOffCell = TriggerCreate("gt_DropOffCell_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Fuel Cell dies to Lava Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionFuelCelldiestoLavaQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("FuelDestroyedRC", true, -1);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    Wait(30.0, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionFuelCelldiestoLavaQ_Init () {
    gt_TransmissionFuelCelldiestoLavaQ = TriggerCreate("gt_TransmissionFuelCelldiestoLavaQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Enemy Attack towards Workers Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionEnemyAttacktowardsWorkersQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(20.0, c_timeGame);
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("EnemyAttackRC", true, -1);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    Wait(30.0, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionEnemyAttacktowardsWorkersQ_Init () {
    gt_TransmissionEnemyAttacktowardsWorkersQ = TriggerCreate("gt_TransmissionEnemyAttacktowardsWorkersQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Enironmental Stabilizer Animation Controller
//--------------------------------------------------------------------------------------------------
bool gt_EnironmentalStabilizerAnimationController_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_crystalCarriersIter;
    bool lv_changeAnimation;

    // Automatic Variable Declarations
    unitgroup auto0BACFDCF_g;
    int auto0BACFDCF_u;
    unitgroup auto4B002169_g;
    int auto4B002169_u;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    while ((libCOMI_gf_GameIsOver() == false)) {
        while ((libCOMI_gf_GameIsOver() == false)) {
            lv_changeAnimation = false;
            auto0BACFDCF_g = gv_crystalCarriers;
            auto0BACFDCF_u = UnitGroupCount(auto0BACFDCF_g, c_unitCountAll);
            for (;; auto0BACFDCF_u -= 1) {
                lv_crystalCarriersIter = UnitGroupUnitFromEnd(auto0BACFDCF_g, auto0BACFDCF_u);
                if (lv_crystalCarriersIter == null) { break; }
                if ((DistanceBetweenPoints(UnitGetPosition(lv_crystalCarriersIter), RegionGetCenter(RegionFromId(61))) <= 6.0)) {
                    lv_changeAnimation = true;
                    break;
                }

            }
            if ((lv_changeAnimation == false)) {
                Wait(0.5, c_timeGame);
                continue;
            }
            else {
                break;
            }
        }
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitFromId(890)), "CollectCrystal", "Stand Work Start", c_animFlagNonLooping, c_animTimeDefault);
        AnimWait(libNtve_gf_MainActorofUnit(UnitFromId(890)), "CollectCrystal", 0.0, c_animationOffsetEnd);
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitFromId(890)), c_animNameDefault, "Stand Work", c_animFlagAssetDrivenLooping, c_animTimeDefault);
        while ((libCOMI_gf_GameIsOver() == false)) {
            lv_changeAnimation = true;
            auto4B002169_g = gv_crystalCarriers;
            auto4B002169_u = UnitGroupCount(auto4B002169_g, c_unitCountAll);
            for (;; auto4B002169_u -= 1) {
                lv_crystalCarriersIter = UnitGroupUnitFromEnd(auto4B002169_g, auto4B002169_u);
                if (lv_crystalCarriersIter == null) { break; }
                if ((DistanceBetweenPoints(UnitGetPosition(lv_crystalCarriersIter), RegionGetCenter(RegionFromId(61))) < 8.0)) {
                    lv_changeAnimation = false;
                    break;
                }

            }
            if ((lv_changeAnimation == false)) {
                Wait(0.5, c_timeGame);
                continue;
            }
            else {
                break;
            }
        }
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitFromId(890)), "CrystalCollected", "Stand Work End", c_animFlagNonLooping, c_animTimeDefault);
        AnimWait(libNtve_gf_MainActorofUnit(UnitFromId(890)), "CrystalCollected", 0.0, c_animationOffsetEnd);
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitFromId(890)), c_animNameDefault, "Stand", c_animFlagAssetDrivenLooping, c_animTimeDefault);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EnironmentalStabilizerAnimationController_Init () {
    gt_EnironmentalStabilizerAnimationController = TriggerCreate("gt_EnironmentalStabilizerAnimationController_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Fuel Cell Picked Up
//--------------------------------------------------------------------------------------------------
bool gt_FuelCellPickedUp_Func (bool testConds, bool runActions) {
    int init_i;

    // Variable Declarations
    unit lv_carryingUnit;
    int[16] lv_carryingPing;
    int[16] lv_workerPath;
    point lv_lastKnownLocation;
    bool lv_lavaDeath;
    string lv_crystalPingModel;
    fixed lv_crystalPingScale;
    string lv_stepIconAsModel;
    string lv_stepIconAsImage;

    // Automatic Variable Declarations
    playergroup autoE6A53393_g;
    int autoE6A53393_var;
    playergroup auto68FC0ED0_g;
    int auto68FC0ED0_var;

    // Variable Initialization
    for (init_i = 0; init_i <= 15; init_i += 1) {
        lv_carryingPing[init_i] = c_invalidPingId;
    }

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_carryingUnit = EventUnit();
    if ((UnitHasBehavior2(lv_carryingUnit, "FuelCellPickupUnit") == false)) {
        return true;
    }

    UnitGroupAdd(gv_crystalCarriers, lv_carryingUnit);
    UnitIssueOrder(lv_carryingUnit, OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(RegionFromId(61))), c_orderQueueAddToFront);
    autoE6A53393_g = libCOMI_gf_HumanPlayers();
    autoE6A53393_var = -1;
    while (true) {
        autoE6A53393_var = PlayerGroupNextPlayer(autoE6A53393_g, autoE6A53393_var);
        if (autoE6A53393_var < 0) { break; }
        if ((UnitGetOwner(lv_carryingUnit) == autoE6A53393_var)) {
            lv_crystalPingModel = "PingXenonCrystalGreenIcon";
            lv_crystalPingScale = 0.25;
        }
        else {
            if ((autoE6A53393_var == gv_pLAYER_01_USER)) {
                lv_crystalPingModel = "PingXenonCrystalOrangeIcon";
            }
            else {
                lv_crystalPingModel = "PingXenonCrystalBlueIcon";
            }
            lv_crystalPingScale = 0.2;
        }
        libCOMI_gf_CreatePingFacingAngleCoop(PlayerGroupSingle(autoE6A53393_var), UnitGetPosition(lv_carryingUnit), 270.0, lv_crystalPingModel, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0);
        PingSetScale(PingLastCreated(), lv_crystalPingScale);
        lv_carryingPing[autoE6A53393_var] = PingLastCreated();
        PingSetUnit(lv_carryingPing[autoE6A53393_var], lv_carryingUnit);
        PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/4ED04F45"));
        PathCreateForUnit(PlayerGroupSingle(autoE6A53393_var), lv_carryingUnit);
        lv_workerPath[autoE6A53393_var] = PathLastCreated();
        PathSetVisible(lv_workerPath[autoE6A53393_var], c_pathLocationAll, true);
        PathSetDestinationPoint(lv_workerPath[autoE6A53393_var], RegionGetCenter(RegionFromId(61)));
        if ((UnitGetOwner(lv_carryingUnit) == autoE6A53393_var)) {
            PathSetColor(lv_workerPath[autoE6A53393_var], c_pathLocationAll, Color(0.00, 100.00, 0.00));
        }
        else {
            PathSetColor(lv_workerPath[autoE6A53393_var], c_pathLocationAll, libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(UnitGetOwner(lv_carryingUnit), false)));
        }
        lv_stepIconAsModel = "Assets\\Units\\Test\\InvisibleUnit\\InvisibleUnit.m3";
        lv_stepIconAsImage = lv_stepIconAsModel;
        PathSetStepModel(lv_workerPath[autoE6A53393_var], c_pathLocationWorld, lv_stepIconAsImage);
    }
    while ((UnitIsAlive(lv_carryingUnit) == true) && (UnitHasBehavior2(lv_carryingUnit, "FuelCellPickupUnit") == true)) {
        gf_UpdateStatScore(UnitGetOwner(lv_carryingUnit), 0.25);
        Wait(0.25, c_timeGame);
    }
    if ((UnitIsAlive(lv_carryingUnit) == false)) {
        TriggerExecute(gt_TransmissionFuelCellCarrierDiesQ, true, false);
    }

    auto68FC0ED0_g = libCOMI_gf_GetAlliedCommandersPlayers();
    auto68FC0ED0_var = -1;
    while (true) {
        auto68FC0ED0_var = PlayerGroupNextPlayer(auto68FC0ED0_g, auto68FC0ED0_var);
        if (auto68FC0ED0_var < 0) { break; }
        PingDestroy(lv_carryingPing[auto68FC0ED0_var]);
        PathDestroy(lv_workerPath[auto68FC0ED0_var]);
    }
    UnitGroupRemove(gv_crystalCarriers, lv_carryingUnit);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FuelCellPickedUp_Init () {
    gt_FuelCellPickedUp = TriggerCreate("gt_FuelCellPickedUp_Func");
    TriggerAddEventUnitAbility(gt_FuelCellPickedUp, null, AbilityCommand("MapObjectInteract", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Fuel Cell Dropped
//--------------------------------------------------------------------------------------------------
bool gt_FuelCellDropped_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_fuelCell;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(libCOMI_gf_GetAlliedCommandersPlayers(), EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_fuelCell = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    if ((lv_fuelCell == null)) {
        breakpoint;
    }

    libCOMI_gf_PingMinimapCampaign(PlayerGroupAll(), UnitGetPosition(lv_fuelCell), 2.0, Color(100.00, 0.00, 0.00));
    TriggerExecute(gt_TransmissionFuelCellCarrierDiesQ, true, false);
    gf_CreateFuelCellMarkers(lv_fuelCell);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FuelCellDropped_Init () {
    gt_FuelCellDropped = TriggerCreate("gt_FuelCellDropped_Func");
    TriggerAddEventPlayerEffectUsed(gt_FuelCellDropped, c_playerAny, "FuelCellPickupUnitCreateLinkDummy");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Worker Mark Crystal for Collection
//--------------------------------------------------------------------------------------------------
bool gt_WorkerMarkCrystalforCollection_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_worker;
    unit lv_fuelCell;
    int lv_workerCrystalIndex;
    int lv_unitOrderIter;
    bool lv_destroyFuelCellCollectionMarker;

    // Automatic Variable Declarations
    const int autoE10C71CB_ae = 31;
    int autoE10C71CB_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_worker = EventUnit();
    lv_fuelCell = EventUnitTargetUnit();
    if ((DataTableGetBool(true, ("WorkerChasingCrystal_" + IntToString(UnitGetTag(lv_worker)) + "_" + IntToString(UnitGetTag(lv_fuelCell)))) == true)) {
        return true;
    }

    lv_workerCrystalIndex = (DataTableGetInt(true, gf_CrystalUI_Worker_GetTableName(lv_fuelCell)) + 1);
    DataTableSetInt(true, gf_CrystalUI_Worker_GetTableName(lv_fuelCell), lv_workerCrystalIndex);
    DataTableSetBool(true, ("WorkerChasingCrystal_" + IntToString(UnitGetTag(lv_worker)) + "_" + IntToString(UnitGetTag(lv_fuelCell))), true);
    gf_ShowHideCrystalCollectUI(lv_fuelCell, lv_worker);
    while ((UnitIsAlive(lv_worker) == true) && (lv_destroyFuelCellCollectionMarker == false)) {
        lv_destroyFuelCellCollectionMarker = true;
        autoE10C71CB_var = 0;
        for ( ; autoE10C71CB_var <= autoE10C71CB_ae; autoE10C71CB_var += 1 ) {
            if ((UnitIsAlive(lv_worker) == true) && (OrderGetTargetUnit(UnitOrder(lv_worker, autoE10C71CB_var)) == lv_fuelCell)) {
                lv_destroyFuelCellCollectionMarker = false;
                break;
            }

        }
        Wait(0.1, c_timeGame);
    }
    DataTableSetInt(true, gf_CrystalUI_Worker_GetTableName(lv_fuelCell), (DataTableGetInt(true, gf_CrystalUI_Worker_GetTableName(lv_fuelCell)) - 1));
    DataTableSetBool(true, ("WorkerChasingCrystal_" + IntToString(UnitGetTag(lv_worker)) + "_" + IntToString(UnitGetTag(lv_fuelCell))), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_WorkerMarkCrystalforCollection_Init () {
    gt_WorkerMarkCrystalforCollection = TriggerCreate("gt_WorkerMarkCrystalforCollection_Func");
    TriggerAddEventUnitAbility(gt_WorkerMarkCrystalforCollection, null, AbilityCommand("MapObjectInteract", 0), c_unitAbilStageQueue, false);
    TriggerAddEventUnitAbility(gt_WorkerMarkCrystalforCollection, null, AbilityCommand("MapObjectInteract", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Timer Reminder Transmissions - Update
//--------------------------------------------------------------------------------------------------
bool gt_TimerReminderTransmissionsUpdate_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed[5] lv_reminderTime;
    int lv_reminderTimerIter;

    // Automatic Variable Declarations
    const int auto554EAE42_ae = 4;
    const int auto554EAE42_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_reminderTimerIter = 1;
    for ( ; ( (auto554EAE42_ai >= 0 && lv_reminderTimerIter <= auto554EAE42_ae) || (auto554EAE42_ai < 0 && lv_reminderTimerIter >= auto554EAE42_ae) ) ; lv_reminderTimerIter += auto554EAE42_ai ) {
        lv_reminderTime[lv_reminderTimerIter] = (TimerGetRemaining(gv_failure_Timer) - (lv_reminderTimerIter * 60.0));
        if ((lv_reminderTime[lv_reminderTimerIter] > 0.0)) {
            TimerStart(gv_timerReminderTransmissions[lv_reminderTimerIter], lv_reminderTime[lv_reminderTimerIter], false, c_timeAI);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TimerReminderTransmissionsUpdate_Init () {
    gt_TimerReminderTransmissionsUpdate = TriggerCreate("gt_TimerReminderTransmissionsUpdate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Timer Reminder Transmissions - Run
//--------------------------------------------------------------------------------------------------
bool gt_TimerReminderTransmissionsRun_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_reminderTimerIter;
    int lv_reminderTimerIndex;

    // Automatic Variable Declarations
    const int auto71E97DC1_ae = 4;
    const int auto71E97DC1_ai = 1;
    int auto037D0E93_val;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_reminderTimerIter = 1;
    for ( ; ( (auto71E97DC1_ai >= 0 && lv_reminderTimerIter <= auto71E97DC1_ae) || (auto71E97DC1_ai < 0 && lv_reminderTimerIter >= auto71E97DC1_ae) ) ; lv_reminderTimerIter += auto71E97DC1_ai ) {
        if ((gv_timerReminderTransmissions[lv_reminderTimerIter] == EventTimer())) {
            lv_reminderTimerIndex = lv_reminderTimerIter;
            break;
        }

    }
    if ((lv_reminderTimerIndex == 0)) {
        return true;
    }

    auto037D0E93_val = lv_reminderTimerIndex;
    if (auto037D0E93_val == 1) {
        TriggerExecute(gt_TransmissionTimerReminder1MinAlertQ, true, false);
    }
    else if (auto037D0E93_val == 2) {
        TriggerExecute(gt_TransmissionTimerReminder2MinAlertQ, true, false);
    }
    else if (auto037D0E93_val == 3) {
        TriggerExecute(gt_TransmissionTimerReminder3MinAlertQ, true, false);
    }
    else if (auto037D0E93_val == 4) {
        TriggerExecute(gt_TransmissionTimerReminder4MinAlertQ, true, false);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TimerReminderTransmissionsRun_Init () {
    gt_TimerReminderTransmissionsRun = TriggerCreate("gt_TimerReminderTransmissionsRun_Func");
    TriggerAddEventTimer(gt_TimerReminderTransmissionsRun, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Timer Reminder 4 Min Alert Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionTimerReminder4MinAlertQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_missionTimeCurrent;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    lv_missionTimeCurrent = GameGetMissionTime();
    TriggerQueueEnter();
    if (((GameGetMissionTime() - lv_missionTimeCurrent) > 10.0)) {
        return true;
    }

    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("Timer4minRC", true, -1);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    Wait(90.0, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionTimerReminder4MinAlertQ_Init () {
    gt_TransmissionTimerReminder4MinAlertQ = TriggerCreate("gt_TransmissionTimerReminder4MinAlertQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Timer Reminder 3 Min Alert Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionTimerReminder3MinAlertQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_missionTimeCurrent;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    lv_missionTimeCurrent = GameGetMissionTime();
    TriggerQueueEnter();
    if (((GameGetMissionTime() - lv_missionTimeCurrent) > 10.0)) {
        return true;
    }

    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("Timer3minRC", true, -1);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    Wait(90.0, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionTimerReminder3MinAlertQ_Init () {
    gt_TransmissionTimerReminder3MinAlertQ = TriggerCreate("gt_TransmissionTimerReminder3MinAlertQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Timer Reminder 2 Min Alert Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionTimerReminder2MinAlertQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_missionTimeCurrent;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    lv_missionTimeCurrent = GameGetMissionTime();
    TriggerQueueEnter();
    if (((GameGetMissionTime() - lv_missionTimeCurrent) > 10.0)) {
        return true;
    }

    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("Timer2minRC", true, -1);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    Wait(90.0, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionTimerReminder2MinAlertQ_Init () {
    gt_TransmissionTimerReminder2MinAlertQ = TriggerCreate("gt_TransmissionTimerReminder2MinAlertQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Timer Reminder 1 Min Alert Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionTimerReminder1MinAlertQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_missionTimeCurrent;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    lv_missionTimeCurrent = GameGetMissionTime();
    TriggerQueueEnter();
    if (((GameGetMissionTime() - lv_missionTimeCurrent) > 10.0)) {
        return true;
    }

    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("Timer1minRC", true, -1);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    Wait(90.0, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionTimerReminder1MinAlertQ_Init () {
    gt_TransmissionTimerReminder1MinAlertQ = TriggerCreate("gt_TransmissionTimerReminder1MinAlertQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Reminder
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveReminder_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_objectsMove_Current;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_objectsMove_Current = gv_objectsMoved;
    if ((gv_lavaSurgeCounter > 0) && (gv_missedFuelCells_Total > gv_missedFuelCells_Prev)) {
        Wait(45.0, c_timeGame);
        if ((gv_objectsMoved == lv_objectsMove_Current)) {
            TriggerExecute(gt_TransmissionObjectiveReminderQ, true, false);
        }

    }

    gv_missedFuelCells_Prev = gv_missedFuelCells_Total;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveReminder_Init () {
    gt_ObjectiveReminder = TriggerCreate("gt_ObjectiveReminder_Func");
    TriggerAddEventTimer(gt_ObjectiveReminder, gv_lava_TurnOff);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Objective Reminder Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionObjectiveReminderQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("ReminderObjRC", true, -1);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    Wait(90.0, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionObjectiveReminderQ_Init () {
    gt_TransmissionObjectiveReminderQ = TriggerCreate("gt_TransmissionObjectiveReminderQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Bonus Objective
//--------------------------------------------------------------------------------------------------
bool gt_StartBonusObjective_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    while (!((gv_bonusObjectiveActive == true))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt_ObjectiveKillSalamanderCreate, true, false);
    TriggerExecute(gt_BonusObjectiveSetupTransmissionQ, true, false);
    gv_bonusObjectiveLocations[1] = PointFromId(112);
    gv_bonusObjectiveLocations[2] = PointFromId(113);
    gv_bonusObjectiveLocations[3] = PointFromId(114);
    UnitCreate(1, "RedstoneSalamanderBurrowed", 0, gv_pLAYER_09_BonusObjective, gv_bonusObjectiveLocations[1], 270.0);
    libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_Secondary, UnitGetPosition(UnitLastCreated()), StringExternal("Param/Value/6067163A"));
    PingSetUnit(PingLastCreated(), UnitLastCreated());
    libARRA_gf_StorePingForUnit(UnitLastCreated(), 1, PingLastCreated());
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, gv_bonusObjectiveLife);
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifePercent, 100.0);
    UnitBehaviorAdd(UnitLastCreated(), "LavaDamageCoopImmune", UnitLastCreated(), 1);
    UnitGroupAdd(gv_immuneToLava, UnitLastCreated());
    gv_bonusObjectiveUnit = UnitLastCreated();
    gf_BonusObjectiveAI(UnitLastCreated());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartBonusObjective_Init () {
    gt_StartBonusObjective = TriggerCreate("gt_StartBonusObjective_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bonus Objective Civilians
//--------------------------------------------------------------------------------------------------
bool gt_BonusObjectiveCivilians_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_wanderingCivilians;
    int lv_wanderingCiviliansCount;
    unitgroup lv_redstoneArmy;
    unit lv_civilainIter;
    timer lv_moreCivilians;
    string lv_civilianType;
    string lv_dataTableName;

    // Automatic Variable Declarations
    unitgroup auto65DF9997_g;
    int auto65DF9997_u;
    unitgroup auto92A9AB41_g;
    int auto92A9AB41_u;
    const int auto8B7856F2_n = 2;
    int auto8B7856F2_i;
    int auto5579A256_val;

    // Variable Initialization
    lv_wanderingCivilians = UnitGroupEmpty();
    lv_redstoneArmy = UnitGroupEmpty();
    lv_moreCivilians = TimerCreate();
    lv_dataTableName = "BonusObjective_";

    // Actions
    if (!runActions) {
        return true;
    }

    lv_wanderingCivilians = UnitGroup(null, c_playerAny, RegionFromId(62), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    lv_wanderingCiviliansCount = UnitGroupCount(lv_wanderingCivilians, c_unitCountAlive);
    auto65DF9997_g = lv_wanderingCivilians;
    auto65DF9997_u = UnitGroupCount(auto65DF9997_g, c_unitCountAll);
    for (;; auto65DF9997_u -= 1) {
        lv_civilainIter = UnitGroupUnitFromEnd(auto65DF9997_g, auto65DF9997_u);
        if (lv_civilainIter == null) { break; }
        if (((UnitGetType(lv_civilainIter) == "Civilian") || (UnitGetType(lv_civilainIter) == "CivilianFemale") || (UnitGetType(lv_civilainIter) == "MinerMale"))) {
            DataTableSetFixed(false, (lv_dataTableName + IntToString(UnitGetTag(lv_civilainIter)) + "_Timer"), (GameGetMissionTime() + RandomFixed(0.0, 10.0)));
        }

    }
    while ((libCOMI_gf_GameIsOver() == false)) {
        auto92A9AB41_g = lv_wanderingCivilians;
        auto92A9AB41_u = UnitGroupCount(auto92A9AB41_g, c_unitCountAll);
        for (;; auto92A9AB41_u -= 1) {
            lv_civilainIter = UnitGroupUnitFromEnd(auto92A9AB41_g, auto92A9AB41_u);
            if (lv_civilainIter == null) { break; }
            if ((gv_bonusObjectiveActive == true)) {
                UnitBehaviorAddPlayer(lv_civilainIter, "Scared", gv_pLAYER_10_Civilians, 1);
            }
            else {
                UnitBehaviorRemove(lv_civilainIter, "Scared", 1);
            }
            if ((GameGetMissionTime() > DataTableGetFixed(false, (lv_dataTableName + IntToString(UnitGetTag(lv_civilainIter)) + "_Timer")))) {
                UnitIssueOrder(lv_civilainIter, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(63))), c_orderQueueReplace);
                DataTableSetFixed(false, (lv_dataTableName + IntToString(UnitGetTag(lv_civilainIter)) + "_Timer"), (GameGetMissionTime() + RandomFixed(2.0, 10.0)));
            }

        }
        if ((TimerGetRemaining(lv_moreCivilians) <= 0.0) && (UnitGroupCount(lv_wanderingCivilians, c_unitCountAlive) <= lv_wanderingCiviliansCount) && (UnitGroupCount(UnitGroupFromId(3), c_unitCountAlive) > 0)) {
            TimerStart(lv_moreCivilians, 4.0, false, c_timeGame);
            for (auto8B7856F2_i = 1; auto8B7856F2_i <= auto8B7856F2_n; auto8B7856F2_i += 1) {
                auto5579A256_val = RandomInt(0, 2);
                if (auto5579A256_val == 0) {
                    lv_civilianType = "Civilian";
                }
                else if (auto5579A256_val == 1) {
                    lv_civilianType = "CivilianFemale";
                }
                else {
                    lv_civilianType = "MinerMale";
                }
                UnitCreate(1, lv_civilianType, 0, gv_pLAYER_10_Civilians, UnitGetPosition(UnitGroupRandomUnit(UnitGroupFromId(3), c_unitCountAlive)), libNtve_gf_RandomAngle());
                UnitGroupAdd(lv_wanderingCivilians, UnitLastCreated());
                DataTableSetFixed(false, (lv_dataTableName + IntToString(UnitGetTag(UnitLastCreated())) + "_Timer"), (GameGetMissionTime() + RandomFixed(1.0, 2.0)));
            }
        }

        Wait(0.5, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BonusObjectiveCivilians_Init () {
    gt_BonusObjectiveCivilians = TriggerCreate("gt_BonusObjectiveCivilians_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bonus Objective Surface
//--------------------------------------------------------------------------------------------------
bool gt_BonusObjectiveSurface_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_bonusObjectiveActive = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BonusObjectiveSurface_Init () {
    gt_BonusObjectiveSurface = TriggerCreate("gt_BonusObjectiveSurface_Func");
    TriggerAddEventTimer(gt_BonusObjectiveSurface, gv_lava_TurnOn);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bonus Objective Burrow
//--------------------------------------------------------------------------------------------------
bool gt_BonusObjectiveBurrow_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_bonusObjectiveActive = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BonusObjectiveBurrow_Init () {
    gt_BonusObjectiveBurrow = TriggerCreate("gt_BonusObjectiveBurrow_Func");
    TriggerAddEventTimer(gt_BonusObjectiveBurrow, gv_lava_TurnOff);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bonus Objective Setup Transmission Q
//--------------------------------------------------------------------------------------------------
bool gt_BonusObjectiveSetupTransmissionQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_missionTimeCurrent;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_missionTimeCurrent = GameGetMissionTime();
    TriggerQueueEnter();
    if (((GameGetMissionTime() - lv_missionTimeCurrent) > 4.0)) {
        return true;
    }

    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("BonusNewRC", true, -1);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BonusObjectiveSetupTransmissionQ_Init () {
    gt_BonusObjectiveSetupTransmissionQ = TriggerCreate("gt_BonusObjectiveSetupTransmissionQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bonus Objective Resurface Transmission Q
//--------------------------------------------------------------------------------------------------
bool gt_BonusObjectiveResurfaceTransmissionQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_missionTimeCurrent;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_missionTimeCurrent = GameGetMissionTime();
    while ((TriggerQueueIsEmpty() == false)) {
        Wait(1.0, c_timeAI);
    }
    TriggerQueueEnter();
    if (((GameGetMissionTime() - lv_missionTimeCurrent) > 4.0)) {
        return true;
    }

    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("BonusResurfaceRC", true, -1);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BonusObjectiveResurfaceTransmissionQ_Init () {
    gt_BonusObjectiveResurfaceTransmissionQ = TriggerCreate("gt_BonusObjectiveResurfaceTransmissionQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bonus Objective Complete Transmission Q
//--------------------------------------------------------------------------------------------------
bool gt_BonusObjectiveCompleteTransmissionQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("BonusCompleteRC", true, -1);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BonusObjectiveCompleteTransmissionQ_Init () {
    gt_BonusObjectiveCompleteTransmissionQ = TriggerCreate("gt_BonusObjectiveCompleteTransmissionQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Lava Initialization
//--------------------------------------------------------------------------------------------------
bool gt_LavaInitialization_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_initialLavaTimer;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    gv_lowGroundIsSafe = true;
    lv_initialLavaTimer = 90.0;
    TimerStart(gv_warningLavaDanger, (lv_initialLavaTimer - 30.0), false, c_timeAI);
    TimerStart(gv_warningSoon, (lv_initialLavaTimer - gv_warningTimeSoon), false, c_timeAI);
    TimerStart(gv_warningNow, (lv_initialLavaTimer - gv_warningTimeNow), false, c_timeAI);
    TimerStart(gv_lava_TurnOn, lv_initialLavaTimer, false, c_timeAI);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionEntireMap(), "CharAshWeather", c_animNameDefault, "Death", c_animFlagPlayForever, c_animTimeDefault);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LavaInitialization_Init () {
    gt_LavaInitialization = TriggerCreate("gt_LavaInitialization_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Lava Surge Music
//--------------------------------------------------------------------------------------------------
bool gt_LavaSurgeMusic_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "LavaRiseEvent", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LavaSurgeMusic_Init () {
    gt_LavaSurgeMusic = TriggerCreate("gt_LavaSurgeMusic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Lava Turns ON
//--------------------------------------------------------------------------------------------------
bool gt_LavaTurnsON_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_reminderTimerIter;

    // Automatic Variable Declarations
    int auto62DB8241_val;
    const int auto4D44BEA3_ae = 4;
    const int auto4D44BEA3_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_lowGroundIsSafe == true))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_lavaSurgeCounter += 1;
    SoundPlay(SoundLink("TUILavaRising", -1), PlayerGroupAll(), 100.0, 0.0);
    SoundPlay(SoundLink("AC_BurningTide_Quake_Event", -1), PlayerGroupAll(), 100.0, 0.0);
    SoundPlay(SoundLink("AC_Lava_Quake_Bubbling", -1), PlayerGroupAll(), 100.0, 0.0);
    gf_ChangeLava("Redstone|Alternate Setting 2", gv_lavaTransition_01To02);
    GameSetLighting("TTosh01Eruption", 4.0);
    libNtve_gf_ClearAnimationOnDoodadsInRegion(RegionEntireMap(), "TTosh01FlameGeyser", "StandWork");
    gv_lowGroundIsSafe = false;
    TriggerExecute(gt_LavaDamageAir, true, false);
    TriggerExecute(gt_LavaDamageGround, true, false);
    auto62DB8241_val = gv_lavaSurgeCounter;
    if (auto62DB8241_val == 1) {
        TimerStart(gv_lava_TurnOff, 45.0, false, c_timeAI);
    }
    else if (auto62DB8241_val == 2) {
        TimerStart(gv_lava_TurnOff, 15.0, false, c_timeAI);
    }
    else {
        TimerStart(gv_lava_TurnOff, 30.0, false, c_timeAI);
    }
    TimerPause(gv_failure_Timer, true);
    lv_reminderTimerIter = 1;
    for ( ; ( (auto4D44BEA3_ai >= 0 && lv_reminderTimerIter <= auto4D44BEA3_ae) || (auto4D44BEA3_ai < 0 && lv_reminderTimerIter >= auto4D44BEA3_ae) ) ; lv_reminderTimerIter += auto4D44BEA3_ai ) {
        TimerPause(gv_timerReminderTransmissions[lv_reminderTimerIter], true);
    }
    Wait(2.0, c_timeReal);
    TriggerEnable(gt_LavaTurnsOFF, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LavaTurnsON_Init () {
    gt_LavaTurnsON = TriggerCreate("gt_LavaTurnsON_Func");
    TriggerAddEventTimer(gt_LavaTurnsON, gv_lava_TurnOn);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Lava Turns OFF
//--------------------------------------------------------------------------------------------------
bool gt_LavaTurnsOFF_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_lowGroundIsSafe == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    SoundPlay(SoundLink("TUILavaRising", -1), PlayerGroupAll(), 100.0, 0.0);
    SoundPlay(SoundLink("AC_BurningTide_Quake_Event", -1), PlayerGroupAll(), 100.0, 0.0);
    gf_ChangeLava("Redstone|[Default]", gv_lavaTransition_02ToDefault);
    GameSetLighting("TTosh01Normal", 10.0);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionEntireMap(), "CharAshWeather", c_animNameDefault, "Death", c_animFlagPlayForever, c_animTimeDefault);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionEntireMap(), "AlarmLight", c_animNameDefault, "Stand Unpowered", c_animFlagPlayForever, c_animTimeDefault);
    Wait(2.0, c_timeAI);
    gv_lowGroundIsSafe = true;
    gv_lavaDanger = false;
    gv_damagedByLavaBurst = UnitGroupEmpty();
    TriggerExecute(gt_CreateFuelCellEvents, true, false);
    gv_lavaInterval = gf_GetLavaInterval();
    TimerStart(gv_warningLavaDanger, (gv_lavaInterval - 30.0), false, c_timeAI);
    TimerStart(gv_warningSoon, (gv_lavaInterval - gv_warningTimeSoon), false, c_timeAI);
    TimerStart(gv_warningNow, (gv_lavaInterval - gv_warningTimeNow), false, c_timeAI);
    TimerStart(gv_lava_TurnOn, gv_lavaInterval, false, c_timeAI);
    TimerPause(gv_failure_Timer, false);
    TriggerExecute(gt_TimerReminderTransmissionsUpdate, true, false);
    Wait(2.0, c_timeAI);
    TriggerEnable(gt_LavaTurnsON, true);
    TriggerExecute(gt_TransmissionItsSafeQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LavaTurnsOFF_Init () {
    gt_LavaTurnsOFF = TriggerCreate("gt_LavaTurnsOFF_Func");
    TriggerEnable(gt_LavaTurnsOFF, false);
    TriggerAddEventTimer(gt_LavaTurnsOFF, gv_lava_TurnOff);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Lava Damage Air
//--------------------------------------------------------------------------------------------------
bool gt_LavaDamageAir_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_targetableAirUnits;
    unit lv_targetedAirUnit;

    // Automatic Variable Declarations
    const int auto59366D25_ae = 8;
    int auto59366D25_var;
    const int auto9B83F423_ae = 20;
    int auto9B83F423_var;
    playergroup autoBB910625_g;
    int autoBB910625_var;
    unitgroup auto3F190037_g;
    int auto3F190037_u;
    unit auto3F190037_var;
    int autoEA92B714_n;
    int autoEA92B714_i;

    // Variable Initialization
    lv_targetableAirUnits = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    auto59366D25_var = 1;
    for ( ; auto59366D25_var <= auto59366D25_ae; auto59366D25_var += 1 ) {
        PlayerCreateEffectPoint(gv_pLAYER_03_Player01_Bullies, "LavaBurstInitialCP", gf_GetPointName("Lava Burst ", auto59366D25_var, c_playerAny));
    }
    auto9B83F423_var = 9;
    for ( ; auto9B83F423_var <= auto9B83F423_ae; auto9B83F423_var += 1 ) {
        if ((libNtve_gf_RandomPercent() <= (15.0*gv_lavaSurgeCounter))) {
            PlayerCreateEffectPoint(gv_pLAYER_03_Player01_Bullies, "LavaBurstInitialCP", gf_GetPointName("Lava Burst ", auto9B83F423_var, c_playerAny));
        }

    }
    Wait(2.0, c_timeAI);
    while ((libCOMI_gf_GameIsOver() == false) && (gv_lowGroundIsSafe == false) && (TimerGetRemaining(gv_lava_TurnOff) >= 10.0)) {
        lv_targetableAirUnits = UnitGroupEmpty();
        autoBB910625_g = libCOMI_gf_HumanPlayers();
        autoBB910625_var = -1;
        while (true) {
            autoBB910625_var = PlayerGroupNextPlayer(autoBB910625_g, autoBB910625_var);
            if (autoBB910625_var < 0) { break; }
            UnitGroupAddUnitGroup(lv_targetableAirUnits, UnitGroup(null, autoBB910625_var, null, UnitFilter((1 << c_targetFilterAir), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        }
        auto3F190037_g = lv_targetableAirUnits;
        auto3F190037_u = UnitGroupCount(auto3F190037_g, c_unitCountAll);
        for (;; auto3F190037_u -= 1) {
            auto3F190037_var = UnitGroupUnitFromEnd(auto3F190037_g, auto3F190037_u);
            if (auto3F190037_var == null) { break; }
            if (((UnitFilterMatch(auto3F190037_var, UnitGetOwner(auto3F190037_var), UnitFilter((1 << c_targetFilterUser1), 0, 0, 0)) == true) || (gf_LocationisSafefromLava(UnitGetPosition(auto3F190037_var), ge_LavaHeightType_AbsoluteHeight) == true))) {
                UnitGroupRemove(lv_targetableAirUnits, auto3F190037_var);
            }

        }
        autoEA92B714_n = libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 3, 3, 6, 9, 0, 0);
        for (autoEA92B714_i = 1; autoEA92B714_i <= autoEA92B714_n; autoEA92B714_i += 1) {
            if ((UnitGroupCount(lv_targetableAirUnits, c_unitCountAlive) > 0)) {
                lv_targetedAirUnit = UnitGroupRandomUnit(lv_targetableAirUnits, c_unitCountAlive);
                PlayerCreateEffectPoint(gv_pLAYER_03_Player01_Bullies, "LavaBurstInitialCP", UnitGetPosition(lv_targetedAirUnit));
                UnitGroupRemove(lv_targetableAirUnits, lv_targetedAirUnit);
                TriggerExecute(gt_TransmissionLavaBurstWarningQ, true, false);
            }

        }
        Wait(4.0, c_timeAI);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LavaDamageAir_Init () {
    gt_LavaDamageAir = TriggerCreate("gt_LavaDamageAir_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Lava Damage Ground
//--------------------------------------------------------------------------------------------------
bool gt_LavaDamageGround_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    unit lv_groundunit;

    // Automatic Variable Declarations
    playergroup auto7DE13A44_g;
    unitgroup autoA76E3DC2_g;
    int autoA76E3DC2_u;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    while ((libCOMI_gf_GameIsOver() == false) && (gv_lowGroundIsSafe == false)) {
        auto7DE13A44_g = libCOMI_gf_GetNonDefeatedPlayers();
        lv_player = -1;
        while (true) {
            lv_player = PlayerGroupNextPlayer(auto7DE13A44_g, lv_player);
            if (lv_player < 0) { break; }
            autoA76E3DC2_g = UnitGroup(null, lv_player, RegionEntireMap(), UnitFilter((1 << c_targetFilterGround), 0, (1 << c_targetFilterRawResource) | (1 << c_targetFilterHarvestableResource) | (1 << c_targetFilterMissile), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
            autoA76E3DC2_u = UnitGroupCount(autoA76E3DC2_g, c_unitCountAll);
            for (;; autoA76E3DC2_u -= 1) {
                lv_groundunit = UnitGroupUnitFromEnd(autoA76E3DC2_g, autoA76E3DC2_u);
                if (lv_groundunit == null) { break; }
                if ((WorldHeight(c_heightMapGround, UnitGetPosition(lv_groundunit)) <= gv_lavaDeathHeight_Current)) {
                    PlayerCreateEffectUnit(0, "LavaDamageCoopApply", lv_groundunit);
                }

            }
        }
        Wait(0.5, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LavaDamageGround_Init () {
    gt_LavaDamageGround = TriggerCreate("gt_LavaDamageGround_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Lava Danger
//--------------------------------------------------------------------------------------------------
bool gt_LavaDanger_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_lavaDanger = true;
    TriggerExecute(gt_LavaSurgeMusic, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LavaDanger_Init () {
    gt_LavaDanger = TriggerCreate("gt_LavaDanger_Func");
    TriggerAddEventTimer(gt_LavaDanger, gv_warningLavaDanger);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Lava Soon - Lava Transition
//--------------------------------------------------------------------------------------------------
bool gt_LavaSoonLavaTransition_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoD9208192_g;
    int autoD9208192_var;

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_TransmissionLavaSoonWarningQ, true, false);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionEntireMap(), "CharAshWeather", c_animNameDefault, "Stand", c_animFlagPlayForever, c_animTimeDefault);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionEntireMap(), "TTosh01FlameGeyser", "StandWork", "Stand Work", c_animFlagPlayForever, c_animTimeDefault);
    Wait(5.0, c_timeAI);
    gf_ChangeLava("Redstone|Alternate Setting", gv_lavaTransition_DefaultTo01);
    GameSetLighting("TTosh01Warning", 15.0);
    autoD9208192_g = PlayerGroupAll();
    autoD9208192_var = -1;
    while (true) {
        autoD9208192_var = PlayerGroupNextPlayer(autoD9208192_g, autoD9208192_var);
        if (autoD9208192_var < 0) { break; }
        CameraShakeStart(autoD9208192_var, c_cameraPositionEye, c_cameraDirectionXY, 0.05, 2.0, 100.0, 2.0);
        SoundPlayForPlayer(SoundLink("AC_Lava_Volcanic_Rumble_Swells", -1), c_maxPlayers, PlayerGroupAll(), 60.0, 0.0);
        SoundPlayForPlayer(SoundLink("AC_SeismicSurge_2D_Event", -1), c_maxPlayers, PlayerGroupAll(), 60.0, 0.0);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LavaSoonLavaTransition_Init () {
    gt_LavaSoonLavaTransition = TriggerCreate("gt_LavaSoonLavaTransition_Func");
    TriggerAddEventTimer(gt_LavaSoonLavaTransition, gv_warningSoon);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Lava Now
//--------------------------------------------------------------------------------------------------
bool gt_LavaNow_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto292B3BB9_g;
    int auto292B3BB9_var;

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_TransmissionLavaNowWarningQ, true, false);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionEntireMap(), "AlarmLight", c_animNameDefault, "Stand", c_animFlagPlayForever, c_animTimeDefault);
    auto292B3BB9_g = PlayerGroupAll();
    auto292B3BB9_var = -1;
    while (true) {
        auto292B3BB9_var = PlayerGroupNextPlayer(auto292B3BB9_g, auto292B3BB9_var);
        if (auto292B3BB9_var < 0) { break; }
        CameraShakeStart(auto292B3BB9_var, c_cameraPositionEye, c_cameraDirectionXY, 0.1, 2.0, 100.0, 3.0);
        SoundPlayForPlayer(SoundLink("AC_Lava_Quake_Bubbling", -1), c_maxPlayers, PlayerGroupAll(), 80.0, 0.0);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LavaNow_Init () {
    gt_LavaNow = TriggerCreate("gt_LavaNow_Func");
    TriggerAddEventTimer(gt_LavaNow, gv_warningNow);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Lava Soon Warning Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionLavaSoonWarningQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int autoCF7899DD_val;

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    autoCF7899DD_val = gv_lavaSurgeCounter;
    if (autoCF7899DD_val == 0) {
        libCOMI_gf_SendMissionTransmission("LavaAlertFirstRC", true, -1);
    }
    else if (autoCF7899DD_val == 1) {
        libCOMI_gf_SendMissionTransmission("LavaAlertSecondRC", true, -1);
    }
    else {
        libCOMI_gf_SendMissionTransmission("LavaAlertRepeatRC", true, -1);
    }
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    SoundPlay(SoundLink("AC_Alarm_LavaRising_2D_Event", -1), PlayerGroupAll(), 100.0, 0.0);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionLavaSoonWarningQ_Init () {
    gt_TransmissionLavaSoonWarningQ = TriggerCreate("gt_TransmissionLavaSoonWarningQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Lava Now Warning Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionLavaNowWarningQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    if ((gv_lavaSurgeCounter == 0)) {
        libCOMI_gf_SendMissionTransmission("LavaRisingFirstRC", true, -1);
    }
    else {
        libCOMI_gf_SendMissionTransmission("LavaRisingRepeatRC", true, -1);
    }
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    SoundPlay(SoundLink("AC_Alarm_AirRaidSiren_2D_Event", -1), PlayerGroupAll(), 100.0, 0.0);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionLavaNowWarningQ_Init () {
    gt_TransmissionLavaNowWarningQ = TriggerCreate("gt_TransmissionLavaNowWarningQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - "It's Safe" Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionItsSafeQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    if ((gv_lavaSurgeCounter == 1)) {
        libCOMI_gf_SendMissionTransmission("LavaRecedingFirstRC", true, -1);
    }
    else {
        libCOMI_gf_SendMissionTransmission("LavaRecedingRepeatRC", true, -1);
    }
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionItsSafeQ_Init () {
    gt_TransmissionItsSafeQ = TriggerCreate("gt_TransmissionItsSafeQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Lava Burst Warning Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionLavaBurstWarningQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("AirSpoutAlertRC", true, -1);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionLavaBurstWarningQ_Init () {
    gt_TransmissionLavaBurstWarningQ = TriggerCreate("gt_TransmissionLavaBurstWarningQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Lava Burst Damage Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionLavaBurstDamageQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_missionTime_Current;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_missionTime_Current = GameGetMissionTime();
    if ((UnitGroupHasUnit(gv_damagedByLavaBurst, EventUnit()) != true)) {
        UnitGroupAdd(gv_damagedByLavaBurst, EventUnit());
        libCOMI_gf_PingMinimapCampaign(PlayerGroupAll(), UnitGetPosition(EventUnit()), 2.0, Color(100.00, 0.00, 0.00));
        if ((TimerGetRemaining(gv_lavaBurstDamageCooldown) <= 0.0)) {
            TriggerQueueEnter();
            if (((GameGetMissionTime() - lv_missionTime_Current) > 5.0)) {
                return true;
            }

            if ((TimerGetRemaining(gv_lavaBurstDamageCooldown) <= 0.0)) {
                TimerStart(gv_lavaBurstDamageCooldown, 15.0, false, c_timeGame);
                libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
                libCOMI_gf_SendMissionTransmission("AirSpoutDamageRC", true, -1);
                libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
            }

            TriggerQueueExit();
        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionLavaBurstDamageQ_Init () {
    gt_TransmissionLavaBurstDamageQ = TriggerCreate("gt_TransmissionLavaBurstDamageQ_Func");
    TriggerAddEventUnitDamaged(gt_TransmissionLavaBurstDamageQ, null, c_unitDamageTypeAny, c_unitDamageNonFatal, "LavaBurstDamage");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Fuel Cell Carrier Dies Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionFuelCellCarrierDiesQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_missionTimeCurrent;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    lv_missionTimeCurrent = GameGetMissionTime();
    TriggerQueueEnter();
    if (((GameGetMissionTime() - lv_missionTimeCurrent) > 4.0)) {
        return true;
    }

    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("WorkerDiesRC", true, -1);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    Wait(30.0, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionFuelCellCarrierDiesQ_Init () {
    gt_TransmissionFuelCellCarrierDiesQ = TriggerCreate("gt_TransmissionFuelCellCarrierDiesQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Critter Init
//--------------------------------------------------------------------------------------------------
bool gt_CritterInit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u;
    int lv_index;

    // Automatic Variable Declarations
    const int autoE7C0EFA7_ae = gv_cRITTER_GROUPS;
    const int autoE7C0EFA7_ai = 1;
    unitgroup autoA4396E18_g;
    int autoA4396E18_u;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    gv_critterHavens[1] = RegionFromId(6);
    gv_critterHavens[2] = RegionFromId(7);
    gv_critterHavens[3] = RegionFromId(17);
    gv_critterHavens[4] = RegionFromId(18);
    gv_critterHavens[5] = RegionFromId(19);
    gv_critterHavens[6] = RegionFromId(20);
    gv_critterHavens[7] = RegionFromId(21);
    gv_critterGroups[1] = gf_CrittersInRegion(RegionFromId(4));
    gv_critterGroups[2] = gf_CrittersInRegion(RegionFromId(5));
    gv_critterGroups[3] = gf_CrittersInRegion(RegionFromId(8));
    gv_critterGroups[4] = gf_CrittersInRegion(RegionFromId(9));
    gv_critterGroups[5] = gf_CrittersInRegion(RegionFromId(10));
    gv_critterGroups[6] = gf_CrittersInRegion(RegionFromId(11));
    gv_critterGroups[7] = gf_CrittersInRegion(RegionFromId(12));
    lv_index = 1;
    for ( ; ( (autoE7C0EFA7_ai >= 0 && lv_index <= autoE7C0EFA7_ae) || (autoE7C0EFA7_ai < 0 && lv_index >= autoE7C0EFA7_ae) ) ; lv_index += autoE7C0EFA7_ai ) {
        autoA4396E18_g = gv_critterGroups[lv_index];
        autoA4396E18_u = UnitGroupCount(autoA4396E18_g, c_unitCountAll);
        for (;; autoA4396E18_u -= 1) {
            lv_u = UnitGroupUnitFromEnd(autoA4396E18_g, autoA4396E18_u);
            if (lv_u == null) { break; }
            gf_StorePointForUnit(lv_u, 1, UnitFilterMatch(lv_u, UnitGetOwner(lv_u), UnitFilter((1 << c_targetFilterBuried), 0, 0, 0)));
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CritterInit_Init () {
    gt_CritterInit = TriggerCreate("gt_CritterInit_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Make Critters Flee
//--------------------------------------------------------------------------------------------------
bool gt_MakeCrittersFlee_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;
    unit lv_u;

    // Automatic Variable Declarations
    const int autoCE423D99_ae = gv_cRITTER_GROUPS;
    const int autoCE423D99_ai = 1;
    unitgroup autoBCE50E1C_g;
    int autoBCE50E1C_u;
    const int auto46E0A9B1_ae = gv_cRITTER_GROUPS;
    const int auto46E0A9B1_ai = 1;
    unitgroup auto785F692B_g;
    int auto785F692B_u;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_index = 1;
    for ( ; ( (autoCE423D99_ai >= 0 && lv_index <= autoCE423D99_ae) || (autoCE423D99_ai < 0 && lv_index >= autoCE423D99_ae) ) ; lv_index += autoCE423D99_ai ) {
        autoBCE50E1C_g = gv_critterGroups[lv_index];
        autoBCE50E1C_u = UnitGroupCount(autoBCE50E1C_g, c_unitCountAll);
        for (;; autoBCE50E1C_u -= 1) {
            lv_u = UnitGroupUnitFromEnd(autoBCE50E1C_g, autoBCE50E1C_u);
            if (lv_u == null) { break; }
            if ((gf_PointStoredForUnit(lv_u, 1) == true)) {
                UnitIssueOrder(lv_u, Order(AbilityCommand("RedstoneLavaCritterUnburrow", 0)), c_orderQueueReplace);
            }
            else {
                UnitIssueOrder(lv_u, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
            }
        }
    }
    Wait(1.0, c_timeAI);
    lv_index = 1;
    for ( ; ( (auto46E0A9B1_ai >= 0 && lv_index <= auto46E0A9B1_ae) || (auto46E0A9B1_ai < 0 && lv_index >= auto46E0A9B1_ae) ) ; lv_index += auto46E0A9B1_ai ) {
        auto785F692B_g = gv_critterGroups[lv_index];
        auto785F692B_u = UnitGroupCount(auto785F692B_g, c_unitCountAll);
        for (;; auto785F692B_u -= 1) {
            lv_u = UnitGroupUnitFromEnd(auto785F692B_g, auto785F692B_u);
            if (lv_u == null) { break; }
            libARRA_gf_StorePointForUnit(lv_u, 1, UnitGetPosition(lv_u));
            UnitIssueOrder(lv_u, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(gv_critterHavens[lv_index])), c_orderQueueReplace);
            if ((RandomInt(0, 3) != 0)) {
                UnitIssueOrder(lv_u, Order(AbilityCommand("RedstoneLavaCritterBurrow", 0)), c_orderQueueAddToEnd);
            }

            Wait(RandomFixed(0.5, 1.5), c_timeGame);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MakeCrittersFlee_Init () {
    gt_MakeCrittersFlee = TriggerCreate("gt_MakeCrittersFlee_Func");
    TriggerAddEventTimer(gt_MakeCrittersFlee, gv_warningSoon);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Make Critters Return
//--------------------------------------------------------------------------------------------------
bool gt_MakeCrittersReturn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;
    unit lv_u;

    // Automatic Variable Declarations
    const int auto8AFA55BA_ae = gv_cRITTER_GROUPS;
    const int auto8AFA55BA_ai = 1;
    unitgroup auto842096B4_g;
    int auto842096B4_u;
    const int auto0DFC0CC1_ae = gv_cRITTER_GROUPS;
    const int auto0DFC0CC1_ai = 1;
    unitgroup auto0AC63A4D_g;
    int auto0AC63A4D_u;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_index = 1;
    for ( ; ( (auto8AFA55BA_ai >= 0 && lv_index <= auto8AFA55BA_ae) || (auto8AFA55BA_ai < 0 && lv_index >= auto8AFA55BA_ae) ) ; lv_index += auto8AFA55BA_ai ) {
        auto842096B4_g = gv_critterGroups[lv_index];
        auto842096B4_u = UnitGroupCount(auto842096B4_g, c_unitCountAll);
        for (;; auto842096B4_u -= 1) {
            lv_u = UnitGroupUnitFromEnd(auto842096B4_g, auto842096B4_u);
            if (lv_u == null) { break; }
            UnitIssueOrder(lv_u, Order(AbilityCommand("RedstoneLavaCritterUnburrow", 0)), c_orderQueueReplace);
        }
    }
    Wait(1.0, c_timeAI);
    lv_index = 1;
    for ( ; ( (auto0DFC0CC1_ai >= 0 && lv_index <= auto0DFC0CC1_ae) || (auto0DFC0CC1_ai < 0 && lv_index >= auto0DFC0CC1_ae) ) ; lv_index += auto0DFC0CC1_ai ) {
        auto0AC63A4D_g = gv_critterGroups[lv_index];
        auto0AC63A4D_u = UnitGroupCount(auto0AC63A4D_g, c_unitCountAll);
        for (;; auto0AC63A4D_u -= 1) {
            lv_u = UnitGroupUnitFromEnd(auto0AC63A4D_g, auto0AC63A4D_u);
            if (lv_u == null) { break; }
            UnitIssueOrder(lv_u, OrderTargetingPoint(AbilityCommand("move", 0), libARRA_gf_PointStoredForUnit(lv_u, 1)), c_orderQueueReplace);
            if ((gf_PointStoredForUnit(lv_u, 1) == true)) {
                UnitIssueOrder(lv_u, Order(AbilityCommand("RedstoneLavaCritterBurrow", 0)), c_orderQueueAddToEnd);
            }
            else {
                UnitIssueOrder(lv_u, Order(AbilityCommand("stop", 0)), c_orderQueueAddToEnd);
            }
            Wait(RandomFixed(0.5, 1.5), c_timeGame);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MakeCrittersReturn_Init () {
    gt_MakeCrittersReturn = TriggerCreate("gt_MakeCrittersReturn_Func");
    TriggerAddEventTimer(gt_MakeCrittersReturn, gv_lava_TurnOff);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Civilians Flee
//--------------------------------------------------------------------------------------------------
bool gt_CiviliansFlee_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_fleeingCivilians;
    point lv_fleeTarget;

    // Automatic Variable Declarations
    unitgroup auto860F75F6_g;
    int auto860F75F6_u;
    unit auto860F75F6_var;
    int auto95AC08C6_val;
    unitgroup autoDE8FA5E1_g;
    int autoDE8FA5E1_u;
    unit autoDE8FA5E1_var;

    // Variable Initialization
    lv_fleeingCivilians = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAddUnitGroup(lv_fleeingCivilians, UnitGroupFromId(2));
    UnitGroupAddUnitGroup(lv_fleeingCivilians, UnitGroupFromId(1));
    auto860F75F6_g = lv_fleeingCivilians;
    auto860F75F6_u = UnitGroupCount(auto860F75F6_g, c_unitCountAll);
    for (;; auto860F75F6_u -= 1) {
        auto860F75F6_var = UnitGroupUnitFromEnd(auto860F75F6_g, auto860F75F6_u);
        if (auto860F75F6_var == null) { break; }
        UnitSetState(auto860F75F6_var, c_unitStateStatusBar, false);
        auto95AC08C6_val = RandomInt(0, 2);
        if (auto95AC08C6_val == 0) {
            UnitBehaviorAddPlayer(auto860F75F6_var, "Run", gv_pLAYER_10_Civilians, 1);
        }
        else {
            UnitBehaviorAddPlayer(auto860F75F6_var, "Scared", gv_pLAYER_10_Civilians, 1);
        }
        if ((UnitGroupHasUnit(UnitGroupFromId(2), auto860F75F6_var) == true)) {
            libARRA_gf_StorePointForUnit(auto860F75F6_var, 1, PointFromId(1162));
        }
        else {
            libARRA_gf_StorePointForUnit(auto860F75F6_var, 1, PointFromId(1163));
        }
    }
    while ((UnitGroupCount(lv_fleeingCivilians, c_unitCountAlive) > 0)) {
        autoDE8FA5E1_g = lv_fleeingCivilians;
        autoDE8FA5E1_u = UnitGroupCount(autoDE8FA5E1_g, c_unitCountAll);
        for (;; autoDE8FA5E1_u -= 1) {
            autoDE8FA5E1_var = UnitGroupUnitFromEnd(autoDE8FA5E1_g, autoDE8FA5E1_u);
            if (autoDE8FA5E1_var == null) { break; }
            if ((UnitGroupHasUnit(UnitGroupFromId(2), autoDE8FA5E1_var) == true)) {
                if ((libNtve_gf_RandomPercent() <= 5.0)) {
                    if ((libNtve_gf_RandomPercent() <= 50.0)) {
                        libARRA_gf_StorePointForUnit(autoDE8FA5E1_var, 1, PointFromId(1162));
                    }
                    else {
                        libARRA_gf_StorePointForUnit(autoDE8FA5E1_var, 1, PointFromId(1577));
                    }
                }

            }
            else {
                if ((libNtve_gf_RandomPercent() <= 5.0)) {
                    if ((libNtve_gf_RandomPercent() <= 50.0)) {
                        libARRA_gf_StorePointForUnit(autoDE8FA5E1_var, 1, PointFromId(1163));
                    }
                    else {
                        libARRA_gf_StorePointForUnit(autoDE8FA5E1_var, 1, PointFromId(1604));
                    }
                }

            }
            if ((libNtve_gf_UnitInRegion(autoDE8FA5E1_var, RegionCircle(libARRA_gf_PointStoredForUnit(autoDE8FA5E1_var, 1), 0.33)) == false)) {
                UnitIssueOrder(autoDE8FA5E1_var, OrderTargetingPoint(AbilityCommand("move", 0), libARRA_gf_PointStoredForUnit(autoDE8FA5E1_var, 1)), c_orderQueueReplace);
            }
            else {
                UnitRemove(autoDE8FA5E1_var);
            }
        }
        Wait(0.2, c_timeAI);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CiviliansFlee_Init () {
    gt_CiviliansFlee = TriggerCreate("gt_CiviliansFlee_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Civilians Gather Manager
//--------------------------------------------------------------------------------------------------
bool gt_CiviliansGatherManager_Func (bool testConds, bool runActions) {
    int init_i;

    // Variable Declarations
    const int lv_c_CivilianScavangerEventCountMax = 4;
    const int lv_c_CiviliansGatherCountMax = 3;
    int lv_civilianScavangerEventIter;
    bool[lv_c_CivilianScavangerEventCountMax + 1] lv_civilianAmbienceSafe;
    region[lv_c_CivilianScavangerEventCountMax + 1] lv_civilianAmbienceSafeZone;
    timer[lv_c_CivilianScavangerEventCountMax + 1] lv_civilianAmbienceMoreCivvies;
    int lv_civilianScavangersMax;
    unitgroup[lv_c_CivilianScavangerEventCountMax + 1] lv_civilianScavangers;
    point[lv_c_CivilianScavangerEventCountMax + 1] lv_civiliansGather_Drop;
    point[lv_c_CivilianScavangerEventCountMax + 1][lv_c_CiviliansGatherCountMax + 1] lv_civiliansGather_Gather;
    string lv_civilianType;

    // Automatic Variable Declarations
    const int autoA4C70FC4_ae = lv_c_CivilianScavangerEventCountMax;
    const int autoA4C70FC4_ai = 1;

    // Variable Initialization
    for (init_i = 0; init_i <= lv_c_CivilianScavangerEventCountMax; init_i += 1) {
        lv_civilianAmbienceMoreCivvies[init_i] = TimerCreate();
    }
    for (init_i = 0; init_i <= lv_c_CivilianScavangerEventCountMax; init_i += 1) {
        lv_civilianScavangers[init_i] = UnitGroupEmpty();
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_civiliansGather_Drop[1] = PointFromId(582);
    lv_civiliansGather_Drop[2] = PointFromId(583);
    lv_civiliansGather_Drop[3] = PointFromId(588);
    lv_civiliansGather_Drop[4] = PointFromId(579);
    lv_civiliansGather_Gather[1][1] = PointFromId(584);
    lv_civiliansGather_Gather[1][2] = PointFromId(585);
    lv_civiliansGather_Gather[1][3] = PointFromId(587);
    lv_civiliansGather_Gather[2][1] = PointFromId(586);
    lv_civiliansGather_Gather[2][2] = PointFromId(587);
    lv_civiliansGather_Gather[2][3] = PointFromId(592);
    lv_civiliansGather_Gather[3][1] = PointFromId(589);
    lv_civiliansGather_Gather[3][2] = PointFromId(590);
    lv_civiliansGather_Gather[3][3] = PointFromId(586);
    lv_civiliansGather_Gather[4][1] = PointFromId(580);
    lv_civiliansGather_Gather[4][2] = PointFromId(581);
    lv_civiliansGather_Gather[4][3] = PointFromId(591);
    lv_civilianAmbienceSafeZone[1] = RegionFromId(2);
    lv_civilianAmbienceSafeZone[2] = RegionFromId(3);
    lv_civilianAmbienceSafeZone[3] = RegionFromId(3);
    lv_civilianAmbienceSafeZone[4] = RegionFromId(13);
    while ((libCOMI_gf_GameIsOver() == false)) {
        lv_civilianScavangerEventIter = 1;
        for ( ; ( (autoA4C70FC4_ai >= 0 && lv_civilianScavangerEventIter <= autoA4C70FC4_ae) || (autoA4C70FC4_ai < 0 && lv_civilianScavangerEventIter >= autoA4C70FC4_ae) ) ; lv_civilianScavangerEventIter += autoA4C70FC4_ai ) {
            if ((lv_civilianAmbienceSafe[lv_civilianScavangerEventIter] == true)) {
                if ((UnitGroupCount(lv_civilianScavangers[lv_civilianScavangerEventIter], c_unitCountAlive) <= lv_civilianScavangersMax) && (TimerGetRemaining(lv_civilianAmbienceMoreCivvies[lv_civilianScavangerEventIter]) <= 0.0)) {
                    if ((RandomInt(0, 1) == 1)) {
                        lv_civilianType = "CivilianFemale";
                    }
                    else {
                        lv_civilianType = "Civilian";
                    }
                    UnitCreate(1, lv_civilianType, 0, gv_pLAYER_10_Civilians, lv_civiliansGather_Drop[lv_civilianScavangerEventIter], (PointGetFacing(lv_civiliansGather_Drop[lv_civilianScavangerEventIter]) + 180.0));
                    UnitGroupAdd(lv_civilianScavangers[lv_civilianScavangerEventIter], UnitLastCreated());
                    gf_CivilianGatherSupplies(UnitLastCreated(), lv_civiliansGather_Gather[lv_civilianScavangerEventIter][RandomInt(1, lv_c_CiviliansGatherCountMax)], lv_civiliansGather_Drop[lv_civilianScavangerEventIter]);
                    TimerStart(lv_civilianAmbienceMoreCivvies[lv_civilianScavangerEventIter], RandomFixed(2.0, 10.0), false, c_timeAI);
                }

            }
            else {
                if ((UnitGroupCount(UnitGroupAlliance(gv_pLAYER_01_USER, c_unitAllianceEnemy, lv_civilianAmbienceSafeZone[lv_civilianScavangerEventIter], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) == 0)) {
                    lv_civilianAmbienceSafe[lv_civilianScavangerEventIter] = true;
                    lv_civilianScavangersMax += 2;
                }

            }
            Wait(1.0, c_timeAI);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CiviliansGatherManager_Init () {
    gt_CiviliansGatherManager = TriggerCreate("gt_CiviliansGatherManager_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Stabilizer Stablized 25% Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionStabilizerStablized25Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("25PercentRC", true, -1);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionStabilizerStablized25Q_Init () {
    gt_TransmissionStabilizerStablized25Q = TriggerCreate("gt_TransmissionStabilizerStablized25Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Stabilizer Stablized 50% Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionStabilizerStablized50Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("50PercentRC", true, -1);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionStabilizerStablized50Q_Init () {
    gt_TransmissionStabilizerStablized50Q = TriggerCreate("gt_TransmissionStabilizerStablized50Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Stabilizer Stablized 75% Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionStabilizerStablized75Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("75PercentRC", true, -1);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionStabilizerStablized75Q_Init () {
    gt_TransmissionStabilizerStablized75Q = TriggerCreate("gt_TransmissionStabilizerStablized75Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - First Turn In Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionFirstTurnInQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("FirstTurnIn", true, -1);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionFirstTurnInQ_Init () {
    gt_TransmissionFirstTurnInQ = TriggerCreate("gt_TransmissionFirstTurnInQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Run Attack Waves
//--------------------------------------------------------------------------------------------------
bool gt_RunAttackWaves_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_varianceTotal;
    fixed lv_varianceNext;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_InitializeAttackWaveSpawnFallBack, true, false);
    gf_AttackWaveatTime((3.5 * 60.0), gt_AttackWave01);
    gf_AttackWaveatTime((6.0 * 60.0), gt_AttackWave02);
    lv_varianceNext = RandomFixed(-1.5, 1.5);
    gf_AttackWaveatTime(((9.0 + lv_varianceNext) * 60.0), gt_AttackWave03);
    lv_varianceTotal += lv_varianceNext;
    lv_varianceNext = gf_GetVarianceNext(lv_varianceTotal);
    gf_AttackWaveatTime(((12.0 + lv_varianceNext) * 60.0), gt_AttackWave04);
    lv_varianceTotal += lv_varianceNext;
    lv_varianceNext = gf_GetVarianceNext(lv_varianceTotal);
    gf_AttackWaveatTime(((15.0 + lv_varianceNext) * 60.0), gt_AttackWave05);
    lv_varianceTotal += lv_varianceNext;
    lv_varianceNext = gf_GetVarianceNext(lv_varianceTotal);
    gf_AttackWaveatTime(((18.0 + lv_varianceNext) * 60.0), gt_AttackWave06);
    lv_varianceTotal += lv_varianceNext;
    lv_varianceNext = gf_GetVarianceNext(lv_varianceTotal);
    gf_AttackWaveatTime(((21.0 + lv_varianceNext) * 60.0), gt_AttackWave07);
    lv_varianceTotal += lv_varianceNext;
    lv_varianceNext = gf_GetVarianceNext(lv_varianceTotal);
    gf_AttackWaveatTime(((24.0 + lv_varianceNext) * 60.0), gt_AttackWave08);
    lv_varianceTotal += lv_varianceNext;
    while (!((GameGetMissionTime() >= (25.0 * 60.0)))) {
        Wait(1.0, c_timeGame);
    }
    while ((libCOMI_gf_GameIsOver() == false)) {
        Wait(120.0, c_timeAI);
        TriggerExecute(gt_AttackWave07, true, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RunAttackWaves_Init () {
    gt_RunAttackWaves = TriggerCreate("gt_RunAttackWaves_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialize Attack Wave Spawn Fall Back
//--------------------------------------------------------------------------------------------------
bool gt_InitializeAttackWaveSpawnFallBack_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto9F802999_ae;
    int auto9F802999_var;
    unitgroup auto2CB417FB_g;
    int auto2CB417FB_u;
    unit auto2CB417FB_var;

    // Actions
    if (!runActions) {
        return true;
    }

    gv_attackWaveOrigins[1] = PointFromId(74);
    gv_attackWaveOwnership[1] = RegionFromId(55);
    if ((RandomInt(0, 1) != 0)) {
        gv_attackWaveOrigins[2] = PointFromId(97);
        gv_attackWaveOwnership[2] = RegionFromId(56);
        gv_attackWaveOrigins[3] = PointFromId(98);
        gv_attackWaveOwnership[3] = RegionFromId(57);
    }
    else {
        gv_attackWaveOrigins[2] = PointFromId(98);
        gv_attackWaveOwnership[2] = RegionFromId(57);
        gv_attackWaveOrigins[3] = PointFromId(97);
        gv_attackWaveOwnership[3] = RegionFromId(56);
    }
    gv_attackWaveOrigins[4] = PointFromId(99);
    auto9F802999_ae = (gv_c_AttackWaveOrigin_Count - 1);
    auto9F802999_var = 1;
    for ( ; auto9F802999_var <= auto9F802999_ae; auto9F802999_var += 1 ) {
        auto2CB417FB_g = UnitGroupAlliance(gv_pLAYER_01_USER, c_unitAllianceEnemy, gv_attackWaveOwnership[auto9F802999_var], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto2CB417FB_u = UnitGroupCount(auto2CB417FB_g, c_unitCountAll);
        for (;; auto2CB417FB_u -= 1) {
            auto2CB417FB_var = UnitGroupUnitFromEnd(auto2CB417FB_g, auto2CB417FB_u);
            if (auto2CB417FB_var == null) { break; }
            gv_attackWaveOriginCostInitial[auto9F802999_var] += UnitTypeGetCost(UnitGetType(auto2CB417FB_var), c_unitCostSumMineralsVespene);
        }
        gv_attackWaveOriginCostCurrent[auto9F802999_var] = gv_attackWaveOriginCostInitial[auto9F802999_var];
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InitializeAttackWaveSpawnFallBack_Init () {
    gt_InitializeAttackWaveSpawnFallBack = TriggerCreate("gt_InitializeAttackWaveSpawnFallBack_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave 01
//--------------------------------------------------------------------------------------------------
bool gt_AttackWave01_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceAmount;
    int lv_techLevel;
    point lv_attackWaveSpawnLocation;
    point lv_attackDestination;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_resourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
    lv_techLevel = libCOMI_ge_CoopAITechLevelBuckets__1Early;

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_MinimumDifficultyValueCoopInteger(0, 0, 1, 1, 2, 2) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_resourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
    lv_techLevel = libCOMI_ge_CoopAITechLevelBuckets__1Early;
    lv_attackWaveSpawnLocation = gf_GetAttackWaveSpawn();
    lv_attackDestination = PointFromId(103);
    TriggerExecute(gt_EnemyAttackingQ, true, false);
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(PlayerGroupPlayer(gv_attackWavePlayers, 1), PlayerGroupPlayer(gv_attackWavePlayers, 2), lv_resourceAmount, lv_techLevel, lv_attackWaveSpawnLocation, true);
    gf_SendAttackWave(libCOMI_gf_LastCreatedCoopAttackForce(), lv_attackWaveSpawnLocation, lv_attackDestination, gv_attackWavePlayers);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWave01_Init () {
    gt_AttackWave01 = TriggerCreate("gt_AttackWave01_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave 02
//--------------------------------------------------------------------------------------------------
bool gt_AttackWave02_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceAmount;
    int lv_techLevel;
    point lv_attackWaveSpawnLocation;
    point lv_attackDestination;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_resourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
    lv_techLevel = libCOMI_ge_CoopAITechLevelBuckets__1Early;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_resourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__2Smaller;
    lv_techLevel = libCOMI_ge_CoopAITechLevelBuckets__2EarlyMid;
    lv_attackWaveSpawnLocation = gf_GetAttackWaveSpawn();
    lv_attackDestination = PointFromId(103);
    TriggerExecute(gt_EnemyAttackingQ, true, false);
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(PlayerGroupPlayer(gv_attackWavePlayers, 1), PlayerGroupPlayer(gv_attackWavePlayers, 2), lv_resourceAmount, lv_techLevel, lv_attackWaveSpawnLocation, true);
    if ((libCOMI_gf_MinimumDifficultyValueCoopInteger(0, 0, 1, 1, 0, 0) == 0)) {
        gf_SendAttackWave(libCOMI_gf_LastCreatedCoopAttackForce(), lv_attackWaveSpawnLocation, lv_attackDestination, gv_attackWavePlayers);
    }
    else {
        gf_DropAttack(libCOMI_gf_LastCreatedCoopAttackForce(), lv_attackWaveSpawnLocation);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWave02_Init () {
    gt_AttackWave02 = TriggerCreate("gt_AttackWave02_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave 03
//--------------------------------------------------------------------------------------------------
bool gt_AttackWave03_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceAmount;
    int lv_techLevel;
    point lv_attackWaveSpawnLocation;
    point lv_attackDestination;
    unitgroup lv_attackWave;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_resourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
    lv_techLevel = libCOMI_ge_CoopAITechLevelBuckets__1Early;
    lv_attackWave = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_resourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__4Medium;
    lv_techLevel = libCOMI_ge_CoopAITechLevelBuckets__3Mid;
    lv_attackWaveSpawnLocation = gf_GetAttackWaveSpawn();
    lv_attackDestination = AIGetBestTarget(gv_pLAYER_03_Player01_Bullies, libCOMI_gf_HumanPlayers(), lv_attackWaveSpawnLocation, 64);
    TriggerExecute(gt_EnemyAttackingQ, true, false);
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(PlayerGroupPlayer(gv_attackWavePlayers, 1), PlayerGroupPlayer(gv_attackWavePlayers, 2), lv_resourceAmount, lv_techLevel, lv_attackWaveSpawnLocation, true);
    if ((libCOMI_gf_MinimumDifficultyValueCoopInteger(0, 0, 1, 1, 0, 0) == 0)) {
        gf_SendAttackWave(libCOMI_gf_LastCreatedCoopAttackForce(), lv_attackWaveSpawnLocation, lv_attackDestination, gv_attackWavePlayers);
    }
    else {
        if ((TimerGetRemaining(gv_lava_TurnOn) > 60.0)) {
            gf_SendAttackWave(libCOMI_gf_LastCreatedCoopAttackForce(), lv_attackWaveSpawnLocation, lv_attackDestination, gv_attackWavePlayers);
        }
        else {
            gf_DropAttack(libCOMI_gf_LastCreatedCoopAttackForce(), lv_attackWaveSpawnLocation);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWave03_Init () {
    gt_AttackWave03 = TriggerCreate("gt_AttackWave03_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave 04
//--------------------------------------------------------------------------------------------------
bool gt_AttackWave04_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceAmount;
    int lv_techLevel;
    point lv_attackDestination;
    unitgroup lv_attackWave;
    int lv_attackingPlayerIter;
    int lv_enemyTarget;
    point[3] lv_spawnLocation;
    int lv_player;

    // Automatic Variable Declarations
    int auto4B6E49F3_ae;
    const int auto4B6E49F3_ai = 1;

    // Variable Initialization
    lv_resourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
    lv_techLevel = libCOMI_ge_CoopAITechLevelBuckets__1Early;
    lv_attackWave = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_resourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__4Medium;
    lv_techLevel = libCOMI_ge_CoopAITechLevelBuckets__3Mid;
    if ((gf_GetAttackWaveSpawn() == PointFromId(74))) {
        lv_spawnLocation[1] = PointFromId(74);
        lv_spawnLocation[2] = PointFromId(97);
    }
    else if ((gf_GetAttackWaveSpawn() == PointFromId(97))) {
        lv_spawnLocation[1] = PointFromId(97);
        lv_spawnLocation[2] = PointFromId(98);
    }
    else if (true) {
        lv_spawnLocation[1] = PointFromId(99);
        lv_spawnLocation[2] = PointFromId(99);
    }
    auto4B6E49F3_ae = PlayerGroupCount(gv_attackWavePlayers);
    lv_attackingPlayerIter = 1;
    for ( ; ( (auto4B6E49F3_ai >= 0 && lv_attackingPlayerIter <= auto4B6E49F3_ae) || (auto4B6E49F3_ai < 0 && lv_attackingPlayerIter >= auto4B6E49F3_ae) ) ; lv_attackingPlayerIter += auto4B6E49F3_ai ) {
        lv_player = PlayerGroupPlayer(gv_attackWavePlayers, lv_attackingPlayerIter);
        lv_attackDestination = AIGetBestTarget(lv_player, PlayerGroupSingle(PlayerGroupPlayer(libCOMI_gf_HumanPlayers(), lv_attackingPlayerIter)), lv_spawnLocation[lv_attackingPlayerIter], 64);
        libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(lv_player, c_playerAny, lv_resourceAmount, lv_techLevel, lv_spawnLocation[lv_attackingPlayerIter], true);
        lv_attackWave = libCOMI_gf_LastCreatedCoopAttackForce();
        TriggerExecute(gt_EnemyAttackingQ, true, false);
        if ((libCOMI_gf_MinimumDifficultyValueCoopInteger(0, 0, 1, 1, 0, 0) == 0)) {
            gf_SendAttackWave(libCOMI_gf_LastCreatedCoopAttackForce(), lv_spawnLocation[lv_attackingPlayerIter], lv_attackDestination, gv_attackWavePlayers);
        }
        else {
            if ((TimerGetRemaining(gv_lava_TurnOn) > 60.0)) {
                gf_SendAttackWave(libCOMI_gf_LastCreatedCoopAttackForce(), lv_spawnLocation[lv_attackingPlayerIter], lv_attackDestination, gv_attackWavePlayers);
            }
            else {
                gf_DropAttack(libCOMI_gf_LastCreatedCoopAttackForce(), lv_spawnLocation[lv_attackingPlayerIter]);
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWave04_Init () {
    gt_AttackWave04 = TriggerCreate("gt_AttackWave04_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave 05
//--------------------------------------------------------------------------------------------------
bool gt_AttackWave05_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceAmount;
    int lv_techLevel;
    point lv_attackWaveSpawnLocation;
    point lv_attackDestination;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_resourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
    lv_techLevel = libCOMI_ge_CoopAITechLevelBuckets__1Early;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_resourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__5Large;
    lv_techLevel = libCOMI_ge_CoopAITechLevelBuckets__5Late;
    lv_attackWaveSpawnLocation = gf_GetAttackWaveSpawn();
    lv_attackDestination = PointFromId(103);
    TriggerExecute(gt_EnemyAttackingQ, true, false);
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(PlayerGroupPlayer(gv_attackWavePlayers, 1), PlayerGroupPlayer(gv_attackWavePlayers, 2), lv_resourceAmount, lv_techLevel, lv_attackWaveSpawnLocation, true);
    if ((libCOMI_gf_MinimumDifficultyValueCoopInteger(0, 0, 1, 1, 0, 0) == 0)) {
        gf_SendAttackWave(libCOMI_gf_LastCreatedCoopAttackForce(), lv_attackWaveSpawnLocation, lv_attackDestination, gv_attackWavePlayers);
    }
    else {
        if ((TimerGetRemaining(gv_lava_TurnOn) > 60.0)) {
            gf_SendAttackWave(libCOMI_gf_LastCreatedCoopAttackForce(), lv_attackWaveSpawnLocation, lv_attackDestination, gv_attackWavePlayers);
        }
        else {
            gf_DropAttack(libCOMI_gf_LastCreatedCoopAttackForce(), lv_attackWaveSpawnLocation);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWave05_Init () {
    gt_AttackWave05 = TriggerCreate("gt_AttackWave05_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave 06
//--------------------------------------------------------------------------------------------------
bool gt_AttackWave06_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceAmount;
    int lv_techLevel;
    point lv_attackWaveSpawnLocation;
    point lv_attackDestination;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_resourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
    lv_techLevel = libCOMI_ge_CoopAITechLevelBuckets__1Early;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_resourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__5Large;
    lv_techLevel = libCOMI_ge_CoopAITechLevelBuckets__5Late;
    lv_attackWaveSpawnLocation = gf_GetAttackWaveSpawn();
    lv_attackDestination = libNtve_gf_RandomPointBetweenPoints(PointFromId(12), PointFromId(13));
    TriggerExecute(gt_EnemyAttackingQ, true, false);
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(PlayerGroupPlayer(gv_attackWavePlayers, 1), PlayerGroupPlayer(gv_attackWavePlayers, 2), lv_resourceAmount, lv_techLevel, lv_attackWaveSpawnLocation, true);
    gf_SendAttackWave(libCOMI_gf_LastCreatedCoopAttackForce(), lv_attackWaveSpawnLocation, lv_attackDestination, gv_attackWavePlayers);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWave06_Init () {
    gt_AttackWave06 = TriggerCreate("gt_AttackWave06_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave 07
//--------------------------------------------------------------------------------------------------
bool gt_AttackWave07_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceAmount;
    int lv_techLevel;
    point lv_attackWaveSpawnLocation;
    point lv_attackDestination;
    unitgroup lv_attackWave;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_resourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
    lv_techLevel = libCOMI_ge_CoopAITechLevelBuckets__1Early;
    lv_attackWave = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_resourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__5Large;
    lv_techLevel = libCOMI_ge_CoopAITechLevelBuckets__5Late;
    lv_attackWaveSpawnLocation = gf_GetAttackWaveSpawn();
    lv_attackDestination = AIGetBestTarget(gv_pLAYER_03_Player01_Bullies, libCOMI_gf_HumanPlayers(), lv_attackWaveSpawnLocation, 49);
    TriggerExecute(gt_EnemyAttackingQ, true, false);
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(PlayerGroupPlayer(gv_attackWavePlayers, 1), PlayerGroupPlayer(gv_attackWavePlayers, 2), lv_resourceAmount, lv_techLevel, lv_attackWaveSpawnLocation, true);
    gf_SendAttackWave(libCOMI_gf_LastCreatedCoopAttackForce(), lv_attackWaveSpawnLocation, lv_attackDestination, gv_attackWavePlayers);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWave07_Init () {
    gt_AttackWave07 = TriggerCreate("gt_AttackWave07_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave 08
//--------------------------------------------------------------------------------------------------
bool gt_AttackWave08_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceAmount;
    int lv_techLevel;
    point lv_attackWaveSpawnLocation;
    point lv_attackDestination;
    unitgroup lv_attackWave;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_resourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
    lv_techLevel = libCOMI_ge_CoopAITechLevelBuckets__1Early;
    lv_attackWave = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_resourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__6Larger;
    lv_techLevel = libCOMI_ge_CoopAITechLevelBuckets_TechLevel06;
    lv_attackWaveSpawnLocation = gf_GetAttackWaveSpawn();
    lv_attackDestination = AIGetBestTarget(gv_pLAYER_03_Player01_Bullies, libCOMI_gf_HumanPlayers(), lv_attackWaveSpawnLocation, 49);
    TriggerExecute(gt_EnemyAttackingQ, true, false);
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(PlayerGroupPlayer(gv_attackWavePlayers, 1), PlayerGroupPlayer(gv_attackWavePlayers, 2), lv_resourceAmount, lv_techLevel, lv_attackWaveSpawnLocation, true);
    gf_SendAttackWave(libCOMI_gf_LastCreatedCoopAttackForce(), lv_attackWaveSpawnLocation, lv_attackDestination, gv_attackWavePlayers);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWave08_Init () {
    gt_AttackWave08 = TriggerCreate("gt_AttackWave08_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Enemy Attacking Q
//--------------------------------------------------------------------------------------------------
bool gt_EnemyAttackingQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_missionTimeCurrent;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    lv_missionTimeCurrent = GameGetMissionTime();
    TriggerQueueEnter();
    if (((GameGetMissionTime() - lv_missionTimeCurrent) > 10.0)) {
        return true;
    }

    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("AttackWave", true, RandomInt(gv_pLAYER_01_USER, gv_pLAYER_02_USER));
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    Wait(20.0, c_timeAI);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EnemyAttackingQ_Init () {
    gt_EnemyAttackingQ = TriggerCreate("gt_EnemyAttackingQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Primary Objective Failed
//--------------------------------------------------------------------------------------------------
bool gt_DefeatPrimaryObjectiveFailed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_ObjectiveCollectSolariteFailed, true, false);
    TriggerExecute(gt_ObjectiveDontLetThePlanetExpodeFailed, true, false);
    libCOMI_gf_BeforeFanfare(c_gameOverDefeat);
    libCOMI_gf_SendMissionTransmission("DefeatRC", false, -1);
    libCOMI_gf_DisplayCampaignMessage(libCOMI_gf_HumanPlayers(), libCOMI_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/B79297B5"), libCOMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
    libCOMI_gf_MoveCameraForAllPlayers(PointFromId(103), 1.5);
    SoundPlayForPlayer(SoundLink("AC_SeismicSurge_2D_Defeat_Event", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    gf_ChangeLava("Redstone|Alternate Setting 3", 4.0);
    ;
    libCOMI_gf_AfterFanfare(c_gameOverDefeat);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatPrimaryObjectiveFailed_Init () {
    gt_DefeatPrimaryObjectiveFailed = TriggerCreate("gt_DefeatPrimaryObjectiveFailed_Func");
    TriggerAddEventChatMessage(gt_DefeatPrimaryObjectiveFailed, c_playerAny, "-defeat", true);
    TriggerAddEventTimer(gt_DefeatPrimaryObjectiveFailed, gv_failure_Timer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Stabilizer Refueled Completed
//--------------------------------------------------------------------------------------------------
bool gt_VictoryStabilizerRefueledCompleted_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveCollectSolariteComplete, true, false);
    TimerPause(gv_failure_Timer, true);
    gf_ChangeLava("Redstone|[Default]", 10.0);
    GameSetLighting("TTosh01Normal", 10.0);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionEntireMap(), "CharAshWeather", c_animNameDefault, "Death", c_animFlagPlayForever, c_animTimeDefault);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionEntireMap(), "AlarmLight", c_animNameDefault, "Stand Unpowered", c_animFlagPlayForever, c_animTimeDefault);
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/EBF58330"), StringExternal("Param/Value/9DB03A31"));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/EC8EBF61"), StringExternal("Param/Value/84FD4B44"));
    libCOMI_gf_BeforeFanfare(c_gameOverVictory);
    libCOMI_gf_ApplyCameraForAllPlayers(CameraInfoFromId(1403), 2.0);
    libNtve_gf_PauseUnit(gv_victoryUnit, false);
    libCOMI_gf_SendVictoryTransmission("VictoryRC");
    UnitBehaviorRemove(gv_victoryUnit, "FuelCellPickupUnit", 1);
    UnitCreateEffectUnit(gv_victoryUnit, "FuelCellTurninLM", UnitFromId(890));
    TriggerExecute(gt_VictoryEnvironmentalPlatformAnim, true, false);
    libCOMI_gf_DisplayCampaignMessage(libCOMI_gf_HumanPlayers(), libCOMI_ge_CampaignMessageType_MissionVictory, StringExternal("Param/Value/C636F550"), libCOMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
    ;
    libCOMI_gf_AfterFanfare(c_gameOverVictory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryStabilizerRefueledCompleted_Init () {
    gt_VictoryStabilizerRefueledCompleted = TriggerCreate("gt_VictoryStabilizerRefueledCompleted_Func");
    TriggerAddEventChatMessage(gt_VictoryStabilizerRefueledCompleted, c_playerAny, "-victory", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Environmental Platform Anim
//--------------------------------------------------------------------------------------------------
bool gt_VictoryEnvironmentalPlatformAnim_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_PauseUnit(UnitFromId(890), true);
    Wait(2.0, c_timeGame);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitFromId(890)), "VictoryAnim", "Stand Work Start", 0, c_animTimeDefault);
    AnimWait(libNtve_gf_MainActorofUnit(UnitFromId(890)), "VictoryAnim", 0.0, c_animationOffsetEnd);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitFromId(890)), c_animNameDefault, "Stand Work", c_animFlagPlayForever, c_animTimeDefault);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryEnvironmentalPlatformAnim_Init () {
    gt_VictoryEnvironmentalPlatformAnim = TriggerCreate("gt_VictoryEnvironmentalPlatformAnim_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Collect Solarite Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveCollectSolariteCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_CreateObjectiveCampaign("AC_VeridiaCourier_Primary01");
    gv_objectiveCollectSolarite = ObjectiveLastCreated();
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveCollectSolariteCreate_Init () {
    gt_ObjectiveCollectSolariteCreate = TriggerCreate("gt_ObjectiveCollectSolariteCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Collect Solarite Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveCollectSolariteComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveCollectSolariteCreate, true, false);
    libCOMI_gf_ZS_SetMissionObjectiveState("AC_VeridiaCourier_Primary01", libCOMI_ge_MissionObjectiveState_Completed);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveCollectSolariteComplete_Init () {
    gt_ObjectiveCollectSolariteComplete = TriggerCreate("gt_ObjectiveCollectSolariteComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Collect Solarite Update
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveCollectSolariteUpdate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_ObjectiveCollectSolariteCreate, true, false);
    libCOMI_gf_SetMissionObjectiveProgress("AC_VeridiaCourier_Primary01", gv_objectsMoved);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveCollectSolariteUpdate_Init () {
    gt_ObjectiveCollectSolariteUpdate = TriggerCreate("gt_ObjectiveCollectSolariteUpdate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Collect Solarite Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveCollectSolariteFailed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveCollectSolariteCreate, true, false);
    libCOMI_gf_ZS_SetMissionObjectiveState("AC_VeridiaCourier_Primary01", libCOMI_ge_MissionObjectiveState_Failed);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveCollectSolariteFailed_Init () {
    gt_ObjectiveCollectSolariteFailed = TriggerCreate("gt_ObjectiveCollectSolariteFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective DontLetThePlanetExpode Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDontLetThePlanetExpodeCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_SetMissionObjectiveCustomText("AC_VeridiaCourier_Primary02", FormatDuration(FixedToInt(gv_initialTimer)));
    libCOMI_gf_CreateObjectiveCampaign("AC_VeridiaCourier_Primary02");
    gv_objectiveDestroyZergBase = ObjectiveLastCreated();
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDontLetThePlanetExpodeCreate_Init () {
    gt_ObjectiveDontLetThePlanetExpodeCreate = TriggerCreate("gt_ObjectiveDontLetThePlanetExpodeCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective DontLetThePlanetExpode Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDontLetThePlanetExpodeComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveDontLetThePlanetExpodeCreate, true, false);
    libCOMI_gf_ZS_SetMissionObjectiveState("AC_VeridiaCourier_Primary02", libCOMI_ge_MissionObjectiveState_Completed);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDontLetThePlanetExpodeComplete_Init () {
    gt_ObjectiveDontLetThePlanetExpodeComplete = TriggerCreate("gt_ObjectiveDontLetThePlanetExpodeComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective DontLetThePlanetExpode Update
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDontLetThePlanetExpodeUpdate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_ObjectiveDontLetThePlanetExpodeCreate, true, false);
    libCOMI_gf_SetMissionObjectiveCustomText("AC_VeridiaCourier_Primary02", FormatDuration(FixedToInt(TimerGetRemaining(gv_failure_Timer))));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDontLetThePlanetExpodeUpdate_Init () {
    gt_ObjectiveDontLetThePlanetExpodeUpdate = TriggerCreate("gt_ObjectiveDontLetThePlanetExpodeUpdate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective DontLetThePlanetExpode Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDontLetThePlanetExpodeFailed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveDontLetThePlanetExpodeCreate, true, false);
    libCOMI_gf_ZS_SetMissionObjectiveState("AC_VeridiaCourier_Primary02", libCOMI_ge_MissionObjectiveState_Failed);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDontLetThePlanetExpodeFailed_Init () {
    gt_ObjectiveDontLetThePlanetExpodeFailed = TriggerCreate("gt_ObjectiveDontLetThePlanetExpodeFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Kill Salamander Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveKillSalamanderCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_CreateObjectiveCampaign("AC_VeridiaCourier_Bonus01");
    gv_objectiveKillSalamander = ObjectiveLastCreated();
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveKillSalamanderCreate_Init () {
    gt_ObjectiveKillSalamanderCreate = TriggerCreate("gt_ObjectiveKillSalamanderCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Kill Salamander Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveKillSalamanderComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveKillSalamanderCreate, true, false);
    libCOMI_gf_SetMissionObjectiveProgress("AC_VeridiaCourier_Bonus01", 1);
    libCOMI_gf_ZS_SetMissionObjectiveState("AC_VeridiaCourier_Bonus01", libCOMI_ge_MissionObjectiveState_Completed);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveKillSalamanderComplete_Init () {
    gt_ObjectiveKillSalamanderComplete = TriggerCreate("gt_ObjectiveKillSalamanderComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Kill Salamander Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveKillSalamanderFailed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveKillSalamanderCreate, true, false);
    libCOMI_gf_ZS_SetMissionObjectiveState("AC_VeridiaCourier_Bonus01", libCOMI_ge_MissionObjectiveState_Failed);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveKillSalamanderFailed_Init () {
    gt_ObjectiveKillSalamanderFailed = TriggerCreate("gt_ObjectiveKillSalamanderFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 03 Loading Complete
//--------------------------------------------------------------------------------------------------
bool gt_Init03LoadingComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_Init02Players, true, false);
    TriggerExecute(gt_Init05Units, true, false);
    TriggerExecute(gt_Init07Environment, true, false);
    TriggerExecute(gt_Init08Difficulties, true, false);
    TriggerExecute(gt_StartAI, true, false);
    TriggerExecute(gt_StartGameQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init03LoadingComplete_Init () {
    gt_Init03LoadingComplete = TriggerCreate("gt_Init03LoadingComplete_Func");
    TriggerAddEventGeneric(gt_Init03LoadingComplete, libCOMI_gv_COOP_MISSION_STARTED_EVENT);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 02 Players
//--------------------------------------------------------------------------------------------------
bool gt_Init02Players_Func (bool testConds, bool runActions) {
    // Variable Declarations
    playergroup lv_humanPlayersAndAllies;
    playergroup lv_enemyPlayers;
    int lv_humanIter;
    int lv_enemyIter;
    int lv_enemyIterSharePower;

    // Automatic Variable Declarations
    unitgroup auto313A9087_g;
    int auto313A9087_u;
    unit auto313A9087_var;

    // Variable Initialization
    lv_humanPlayersAndAllies = PlayerGroupEmpty();
    lv_enemyPlayers = PlayerGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    gv_pLAYER_01_USER = libCOMI_gf_GetRolePlayer(1);
    gv_pLAYER_02_USER = libCOMI_gf_GetRolePlayer(2);
    PlayerGroupAdd(lv_enemyPlayers, gv_pLAYER_03_Player01_Bullies);
    PlayerGroupAdd(lv_enemyPlayers, gv_pLAYER_04_Player02_Bullies);
    PlayerGroupAdd(lv_enemyPlayers, gv_pLAYER_05_Player01_AttackWaves);
    PlayerGroupAdd(lv_enemyPlayers, gv_pLAYER_06_Player02_AttackWaves);
    libNtve_gf_SetAlliance(gv_pLAYER_09_BonusObjective, gv_pLAYER_10_Civilians, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_AddPlayerGroupToPlayerGroup(lv_enemyPlayers, gv_enemyPlayerGroup);
    auto313A9087_g = UnitGroup(null, gv_pLAYER_10_Civilians, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto313A9087_u = UnitGroupCount(auto313A9087_g, c_unitCountAll);
    for (;; auto313A9087_u -= 1) {
        auto313A9087_var = UnitGroupUnitFromEnd(auto313A9087_g, auto313A9087_u);
        if (auto313A9087_var == null) { break; }
        UnitBehaviorAdd(auto313A9087_var, "Benign", auto313A9087_var, 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init02Players_Init () {
    gt_Init02Players = TriggerCreate("gt_Init02Players_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 05 Units
//--------------------------------------------------------------------------------------------------
bool gt_Init05Units_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_nonInteractive;
    unit lv_lavaDamageIter;

    // Automatic Variable Declarations
    unitgroup auto7791890A_g;
    int auto7791890A_u;
    unit auto7791890A_var;
    unitgroup auto446F8F44_g;
    int auto446F8F44_u;
    unit auto446F8F44_var;

    // Variable Initialization
    lv_nonInteractive = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_MakeUnitInvulnerable(UnitFromId(890), true);
    UnitSetState(UnitFromId(890), c_unitStateTargetable, false);
    UnitSetState(UnitFromId(890), c_unitStateStatusBar, false);
    auto7791890A_g = UnitGroupFromId(3);
    auto7791890A_u = UnitGroupCount(auto7791890A_g, c_unitCountAll);
    for (;; auto7791890A_u -= 1) {
        auto7791890A_var = UnitGroupUnitFromEnd(auto7791890A_g, auto7791890A_u);
        if (auto7791890A_var == null) { break; }
        UnitSetPropertyFixed(auto7791890A_var, c_unitPropLifeMax, 2000.0);
        UnitSetPropertyFixed(auto7791890A_var, c_unitPropLifePercent, 100.0);
    }
    UnitGroupAddUnitGroup(lv_nonInteractive, UnitGroupFromId(3));
    UnitGroupAddUnitGroup(lv_nonInteractive, UnitGroupFromId(5));
    UnitGroupAddUnitGroup(lv_nonInteractive, UnitGroupFromId(4));
    auto446F8F44_g = lv_nonInteractive;
    auto446F8F44_u = UnitGroupCount(auto446F8F44_g, c_unitCountAll);
    for (;; auto446F8F44_u -= 1) {
        auto446F8F44_var = UnitGroupUnitFromEnd(auto446F8F44_g, auto446F8F44_u);
        if (auto446F8F44_var == null) { break; }
        UnitSetState(auto446F8F44_var, c_unitStateSelectable, false);
        UnitSetState(auto446F8F44_var, c_unitStateHighlightable, false);
        UnitSetState(auto446F8F44_var, c_unitStateTargetable, false);
    }
    UnitCargoCreate(UnitFromId(145), "Marine", 4);
    UnitCargoCreate(UnitFromId(146), "Marine", 4);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init05Units_Init () {
    gt_Init05Units = TriggerCreate("gt_Init05Units_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 07 Environment
//--------------------------------------------------------------------------------------------------
bool gt_Init07Environment_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_hybridFogLocation_X;
    int lv_hybridFogLocation_Y;
    string lv_weatherActor;
    point lv_lavaBurstLocation;

    // Automatic Variable Declarations
    int auto3616B027_ae;
    const int auto3616B027_ai = 18;
    int autoD3BBD844_ae;
    const int autoD3BBD844_ai = 18;
    const int autoFE1E3E28_ae = 15;
    int autoFE1E3E28_var;
    const int auto1FD4278A_n = 10;
    int auto1FD4278A_i;

    // Variable Initialization
    lv_weatherActor = "CharAshWeather";

    // Actions
    if (!runActions) {
        return true;
    }

    auto3616B027_ae = FixedToInt(libNtve_gf_WidthOfRegion(RegionPlayableMap()));
    lv_hybridFogLocation_X = 0;
    for ( ; ( (auto3616B027_ai >= 0 && lv_hybridFogLocation_X <= auto3616B027_ae) || (auto3616B027_ai < 0 && lv_hybridFogLocation_X >= auto3616B027_ae) ) ; lv_hybridFogLocation_X += auto3616B027_ai ) {
        autoD3BBD844_ae = FixedToInt(libNtve_gf_HeightOfRegion(RegionPlayableMap()));
        lv_hybridFogLocation_Y = 0;
        for ( ; ( (autoD3BBD844_ai >= 0 && lv_hybridFogLocation_Y <= autoD3BBD844_ae) || (autoD3BBD844_ai < 0 && lv_hybridFogLocation_Y >= autoD3BBD844_ae) ) ; lv_hybridFogLocation_Y += autoD3BBD844_ai ) {
            libNtve_gf_CreateActorAtPoint(lv_weatherActor, Point(lv_hybridFogLocation_X, lv_hybridFogLocation_Y));
            libNtve_gf_MakeModelFaceAngle(libNtve_gf_ActorLastCreated(), 315.0);
        }
    }
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionEntireMap(), lv_weatherActor, c_animNameDefault, "Death", c_animFlagPlayForever, c_animTimeDefault);
    GameSetLighting("TTosh01Normal", 0.0);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionEntireMap(), "AlarmLight", c_animNameDefault, "Stand Unpowered", c_animFlagPlayForever, c_animTimeDefault);
    autoFE1E3E28_var = 6;
    for ( ; autoFE1E3E28_var <= autoFE1E3E28_ae; autoFE1E3E28_var += 1 ) {
        for (auto1FD4278A_i = 1; auto1FD4278A_i <= auto1FD4278A_n; auto1FD4278A_i += 1) {
            lv_lavaBurstLocation = RegionRandomPoint(RegionPlayableMap());
            if ((gf_LocationisSafefromLava(lv_lavaBurstLocation, ge_LavaHeightType_AbsoluteHeight) == false)) {
                PointSet(gf_GetPointName("Lava Burst ", autoFE1E3E28_var, c_playerAny), lv_lavaBurstLocation);
                break;
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init07Environment_Init () {
    gt_Init07Environment = TriggerCreate("gt_Init07Environment_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 08 Difficulties
//--------------------------------------------------------------------------------------------------
bool gt_Init08Difficulties_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_soloriteCocoonLife;
    playergroup lv_resourceCheatGroup;
    int lv_resourcePlayer;
    int lv_resourceArrayIter;
    int[6] lv_startingResources;
    unitgroup lv_rocksBig;
    unitgroup lv_rocksSmall;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_resourceCheatGroup = PlayerGroupEmpty();
    lv_rocksBig = UnitGroupEmpty();
    lv_rocksSmall = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    gv_abilCD_Min_Tunnel = libCOMI_gf_DifficultyValueFixed2(libCOMI_gf_GetMissionDifficulty(), 30.0, 30.0, 30.0, 30.0, 0.0, 0.0);
    gv_abilCD_Min_SpitFire = libCOMI_gf_DifficultyValueFixed2(libCOMI_gf_GetMissionDifficulty(), 5.0, 5.0, 5.0, 5.0, 0.0, 0.0);
    gv_abilCD_Min_FireLine = libCOMI_gf_DifficultyValueFixed2(libCOMI_gf_GetMissionDifficulty(), 10.0, 10.0, 10.0, 10.0, 0.0, 0.0);
    gv_bonusObjectiveLife = libCOMI_gf_DifficultyValueFixed2(libCOMI_gf_GetMissionDifficulty(), 3000.0, 3000.0, 5000.0, 6000.0, 0.0, 0.0);
    gv_initialTimer = (libCOMI_gf_MinimumDifficultyValueCoopReal(7.0, 7.0, 5.0, 4.0, 0.0, 0.0) * 60.0);
    gv_dropOffTimerIncrease = libCOMI_gf_MinimumDifficultyValueCoopReal(120.0, 120.0, 90.0, 90.0, 0.0, 0.0);
    gv_fuelCell_Surge04 = RandomInt(0, 2);
    gv_fuelCell_Surge05 = RandomInt(0, 1);
    gv_fuelCell_Surge06 = RandomInt(0, 2);
    gv_fuelCell_Surge08 = RandomInt(0, 2);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init08Difficulties_Init () {
    gt_Init08Difficulties = TriggerCreate("gt_Init08Difficulties_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start AI
//--------------------------------------------------------------------------------------------------
bool gt_StartAI_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_randomRace;
    int lv_attackWavesIter;
    int lv_resourceSizeIter;

    // Automatic Variable Declarations
    playergroup auto24D96740_g;
    int auto24D96740_var;
    playergroup auto9BC1B208_g;
    int auto9BC1B208_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerGroupAdd(gv_defendingPlayers, gv_pLAYER_03_Player01_Bullies);
    PlayerGroupAdd(gv_defendingPlayers, gv_pLAYER_04_Player02_Bullies);
    PlayerGroupAdd(gv_attackWavePlayers, gv_pLAYER_05_Player01_AttackWaves);
    PlayerGroupAdd(gv_attackWavePlayers, gv_pLAYER_06_Player02_AttackWaves);
    PlayerGroupAdd(gv_huntingPlayers, gv_pLAYER_05_Player01_AttackWaves);
    PlayerGroupAdd(gv_huntingPlayers, gv_pLAYER_06_Player02_AttackWaves);
    auto24D96740_g = gv_enemyPlayerGroup;
    auto24D96740_var = -1;
    while (true) {
        auto24D96740_var = PlayerGroupNextPlayer(auto24D96740_g, auto24D96740_var);
        if (auto24D96740_var < 0) { break; }
        AIAttackWaveSetTargetPoint(auto24D96740_var, PointFromId(103));
        libCOMI_gf_SetCoopAIGatherPoint(auto24D96740_var, PlayerStartLocation(auto24D96740_var));
        AISetDifficulty(auto24D96740_var, c_diffNormalVision, false);
    }
    auto9BC1B208_g = gv_huntingPlayers;
    auto9BC1B208_var = -1;
    while (true) {
        auto9BC1B208_var = PlayerGroupNextPlayer(auto9BC1B208_g, auto9BC1B208_var);
        if (auto9BC1B208_var < 0) { break; }
        AISetDifficulty(auto9BC1B208_var, c_diffWaveLeashing, true);
        AITransportSetReturn(auto9BC1B208_var, PlayerStartLocation(auto9BC1B208_var));
    }
    TriggerEnable(libCOMI_gt_CM_CoopAI_AttackWavePingManager, true);
    TriggerExecute(gt_RunAttackWaves, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartAI_Init () {
    gt_StartAI = TriggerCreate("gt_StartAI_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Game Q
//--------------------------------------------------------------------------------------------------
bool gt_StartGameQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int autoD4F6591E_val;

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_CritterInit, true, false);
    TriggerExecute(gt_LavaInitialization, true, false);
    TriggerExecute(gt_DropOffCell, true, false);
    TriggerExecute(gt_BonusObjectiveCivilians, true, false);
    TriggerExecute(gt_CiviliansFlee, true, false);
    SoundPlayAtPointForPlayer(SoundLink("AC_Crowd_PanicRun_3D_P1_Event", -1), c_maxPlayers, PlayerGroupAll(), PointFromId(12), 0.0, 100.0, 0.0);
    SoundPlayAtPointForPlayer(SoundLink("AC_Crowd_PanicRun_3D_P2_Event", -1), c_maxPlayers, PlayerGroupAll(), PointFromId(13), 0.0, 100.0, 0.0);
    TriggerExecute(gt_CiviliansGatherManager, true, false);
    TriggerExecute(gt_EnironmentalStabilizerAnimationController, true, false);
    libCOMI_gf_RunTriggeratMissionTime((11.0 * 60.0), gt_StartBonusObjective);
    TimerStart(gv_failure_Timer, gv_initialTimer, false, c_timeAI);
    TriggerExecute(gt_TimerReminderTransmissionsUpdate, true, false);
    Wait(7.0, c_timeReal);
    TriggerQueueEnter();
    TriggerExecute(gt_ObjectiveCollectSolariteCreate, true, true);
    VisRevealArea(gv_pLAYER_01_USER, RegionFromId(1), 0.0, false);
    VisRevealArea(gv_pLAYER_02_USER, RegionFromId(1), 0.0, false);
    libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_Primary, RegionGetCenter(RegionFromId(61)), StringExternal("Param/Value/7903C898"));
    PingSetScale(PingLastCreated(), 0.75);
    Wait(2.0, c_timeReal);
    TriggerExecute(gt_ObjectiveDontLetThePlanetExpodeCreate, true, true);
    TriggerExecute(gt_PlanetExplodesBar, true, false);
    Wait(2.0, c_timeReal);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    autoD4F6591E_val = RandomInt(0, 2);
    if (autoD4F6591E_val == 0) {
        libCOMI_gf_SendMissionTransmission("Intro1RC", true, -1);
    }
    else if (autoD4F6591E_val == 1) {
        libCOMI_gf_SendMissionTransmission("Intro2RC", true, -1);
    }
    else {
        libCOMI_gf_SendMissionTransmission("Intro3RC", true, -1);
    }
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartGameQ_Init () {
    gt_StartGameQ = TriggerCreate("gt_StartGameQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger Initialization
//--------------------------------------------------------------------------------------------------
void InitTriggers () {
    gt_PlanetExplodesBar_Init();
    gt_CreateFuelCellEvents_Init();
    gt_DropOffCell_Init();
    gt_TransmissionFuelCelldiestoLavaQ_Init();
    gt_TransmissionEnemyAttacktowardsWorkersQ_Init();
    gt_EnironmentalStabilizerAnimationController_Init();
    gt_FuelCellPickedUp_Init();
    gt_FuelCellDropped_Init();
    gt_WorkerMarkCrystalforCollection_Init();
    gt_TimerReminderTransmissionsUpdate_Init();
    gt_TimerReminderTransmissionsRun_Init();
    gt_TransmissionTimerReminder4MinAlertQ_Init();
    gt_TransmissionTimerReminder3MinAlertQ_Init();
    gt_TransmissionTimerReminder2MinAlertQ_Init();
    gt_TransmissionTimerReminder1MinAlertQ_Init();
    gt_ObjectiveReminder_Init();
    gt_TransmissionObjectiveReminderQ_Init();
    gt_StartBonusObjective_Init();
    gt_BonusObjectiveCivilians_Init();
    gt_BonusObjectiveSurface_Init();
    gt_BonusObjectiveBurrow_Init();
    gt_BonusObjectiveSetupTransmissionQ_Init();
    gt_BonusObjectiveResurfaceTransmissionQ_Init();
    gt_BonusObjectiveCompleteTransmissionQ_Init();
    gt_LavaInitialization_Init();
    gt_LavaSurgeMusic_Init();
    gt_LavaTurnsON_Init();
    gt_LavaTurnsOFF_Init();
    gt_LavaDamageAir_Init();
    gt_LavaDamageGround_Init();
    gt_LavaDanger_Init();
    gt_LavaSoonLavaTransition_Init();
    gt_LavaNow_Init();
    gt_TransmissionLavaSoonWarningQ_Init();
    gt_TransmissionLavaNowWarningQ_Init();
    gt_TransmissionItsSafeQ_Init();
    gt_TransmissionLavaBurstWarningQ_Init();
    gt_TransmissionLavaBurstDamageQ_Init();
    gt_TransmissionFuelCellCarrierDiesQ_Init();
    gt_CritterInit_Init();
    gt_MakeCrittersFlee_Init();
    gt_MakeCrittersReturn_Init();
    gt_CiviliansFlee_Init();
    gt_CiviliansGatherManager_Init();
    gt_TransmissionStabilizerStablized25Q_Init();
    gt_TransmissionStabilizerStablized50Q_Init();
    gt_TransmissionStabilizerStablized75Q_Init();
    gt_TransmissionFirstTurnInQ_Init();
    gt_RunAttackWaves_Init();
    gt_InitializeAttackWaveSpawnFallBack_Init();
    gt_AttackWave01_Init();
    gt_AttackWave02_Init();
    gt_AttackWave03_Init();
    gt_AttackWave04_Init();
    gt_AttackWave05_Init();
    gt_AttackWave06_Init();
    gt_AttackWave07_Init();
    gt_AttackWave08_Init();
    gt_EnemyAttackingQ_Init();
    gt_DefeatPrimaryObjectiveFailed_Init();
    gt_VictoryStabilizerRefueledCompleted_Init();
    gt_VictoryEnvironmentalPlatformAnim_Init();
    gt_ObjectiveCollectSolariteCreate_Init();
    gt_ObjectiveCollectSolariteComplete_Init();
    gt_ObjectiveCollectSolariteUpdate_Init();
    gt_ObjectiveCollectSolariteFailed_Init();
    gt_ObjectiveDontLetThePlanetExpodeCreate_Init();
    gt_ObjectiveDontLetThePlanetExpodeComplete_Init();
    gt_ObjectiveDontLetThePlanetExpodeUpdate_Init();
    gt_ObjectiveDontLetThePlanetExpodeFailed_Init();
    gt_ObjectiveKillSalamanderCreate_Init();
    gt_ObjectiveKillSalamanderComplete_Init();
    gt_ObjectiveKillSalamanderFailed_Init();
    gt_Init03LoadingComplete_Init();
    gt_Init02Players_Init();
    gt_Init05Units_Init();
    gt_Init07Environment_Init();
    gt_Init08Difficulties_Init();
    gt_StartAI_Init();
    gt_StartGameQ_Init();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void InitMap () {
    InitLibs();
    InitGlobals();
    InitTriggers();
}
