//==================================================================================================
// 
// Generated Map Script
// 
// Name:   ALL RACES COOP
// 
//==================================================================================================
include "TriggerLibs/NativeLib"
include "LibCOMI"

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void InitLibs () {
    libNtve_InitLib();
    libCOMI_InitLib();
}

//--------------------------------------------------------------------------------------------------
// Global Variables
//--------------------------------------------------------------------------------------------------
int gv_pLAYER_DEFENDERS;
int gv_pLAYER_ATTACKERS;
int gv_controlDialog;
int gv_controlDialogButton;
string gv_aiPersonality;
string gv_aiFaction;

void InitGlobals () {
    gv_pLAYER_DEFENDERS = 7;
    gv_pLAYER_ATTACKERS = 6;
    gv_controlDialog = c_invalidDialogId;
    gv_controlDialogButton = c_invalidDialogControlId;
}

//--------------------------------------------------------------------------------------------------
// Global Function Declarations
//--------------------------------------------------------------------------------------------------
void gf_RaceSwap (int lp_player, string lp_faction);

//--------------------------------------------------------------------------------------------------
// Trigger Variables
//--------------------------------------------------------------------------------------------------
trigger gt_Init;
trigger gt_FactionButtonClicked;
trigger gt_SpawnZerg;
trigger gt_Waves;
trigger gt_Fighters;
trigger gt_Control;
trigger gt_ControlButtonClicked;
trigger gt_Leaving;

//--------------------------------------------------------------------------------------------------
// Global Functions
//--------------------------------------------------------------------------------------------------
void gf_RaceSwap (int lp_player, string lp_faction) {
    // Variable Declarations
    int lv_totalUpgrades;
    int lv_upgradeIter;
    int lv_skinIter;
    string lv_aiUpgrade;
    string lv_aiUpgradeFaction;
    string lv_skin;

    // Automatic Variable Declarations
    int auto41F8E18F_ae;
    const int auto41F8E18F_ai = 1;
    unitgroup auto69812C90_g;
    int auto69812C90_u;
    unit auto69812C90_var;

    // Variable Initialization
    lv_totalUpgrades = UserDataInstanceCount("CoopAIUpgrade");

    // Implementation
    auto41F8E18F_ae = lv_totalUpgrades;
    lv_upgradeIter = 1;
    for ( ; ( (auto41F8E18F_ai >= 0 && lv_upgradeIter <= auto41F8E18F_ae) || (auto41F8E18F_ai < 0 && lv_upgradeIter >= auto41F8E18F_ae) ) ; lv_upgradeIter += auto41F8E18F_ai ) {
        lv_aiUpgrade = UserDataInstance("CoopAIUpgrade", lv_upgradeIter);
        lv_aiUpgradeFaction = UserDataGetUserInstance("CoopAIUpgrade", lv_aiUpgrade, "Faction", 1);
        if ((lv_aiUpgradeFaction != lp_faction)) {
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, UserDataGetUpgrade("CoopAIUpgrade", lv_aiUpgrade, "Upgrade", 1), 0);
        }
        else {
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, UserDataGetUpgrade("CoopAIUpgrade", lv_aiUpgrade, "Upgrade", 1), 1);
        }
    }
    auto69812C90_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto69812C90_u = UnitGroupCount(auto69812C90_g, c_unitCountAll);
    for (;; auto69812C90_u -= 1) {
        auto69812C90_var = UnitGroupUnitFromEnd(auto69812C90_g, auto69812C90_u);
        if (auto69812C90_var == null) { break; }
        UnitRemove(auto69812C90_var);
    }
    AIClearAllBullies(gv_pLAYER_DEFENDERS);
    CreepModify(RegionGetCenter(RegionEntireMap()), 500.0, false, false);
    gv_aiFaction = lp_faction;
    gv_aiPersonality = libCOMI_gf_RandomCoopAIPersonality(gv_aiFaction);
    libCOMI_gf_SetCAIPersonality(gv_aiPersonality);
    libCOMI_gf_RestorePreplacedUnits(gv_aiFaction);
    libCOMI_gf_ApplyCAIPersonality(lp_player);
    TriggerExecute(libCOMI_gt_ReplaceDoodads, true, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init
//--------------------------------------------------------------------------------------------------
bool gt_Init_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(libCOMI_gt_CreateMissionsDialog, true, false);
    libCOMI_gf_CreateFactionsDialog();
    TriggerExecute(gt_Fighters, true, false);
    TriggerExecute(gt_Control, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init_Init () {
    gt_Init = TriggerCreate("gt_Init_Func");
    TriggerAddEventMapInit(gt_Init);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Faction Button Clicked
//--------------------------------------------------------------------------------------------------
bool gt_FactionButtonClicked_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_new;
    string lv_old;
    int lv_i;

    // Automatic Variable Declarations
    int auto816A4600_ae;
    const int auto816A4600_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto816A4600_ae = UserDataInstanceCount("Factions");
    lv_i = 1;
    for ( ; ( (auto816A4600_ai >= 0 && lv_i <= auto816A4600_ae) || (auto816A4600_ai < 0 && lv_i >= auto816A4600_ae) ) ; lv_i += auto816A4600_ai ) {
        if ((EventDialogControl() == libCOMI_gv_raceButton[lv_i])) {
            lv_new = libCOMI_gv_raceFaction[lv_i];
            if ((lv_new == "Random")) {
                do {
                    lv_new = libCOMI_gf_RandomCoopAIFaction();
                }while ((lv_new == lv_old));
            }

            if ((lv_new == lv_old)) {
                return true;
            }

            gf_RaceSwap(5, lv_new);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FactionButtonClicked_Init () {
    gt_FactionButtonClicked = TriggerCreate("gt_FactionButtonClicked_Func");
    TriggerAddEventDialogControl(gt_FactionButtonClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spawn Zerg
//--------------------------------------------------------------------------------------------------
bool gt_SpawnZerg_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_point;
    point lv_spawn;

    // Automatic Variable Declarations
    int auto19D54806_val;

    // Variable Initialization
    lv_player = 4;
    lv_point = RandomInt(1, 7);
    lv_spawn = PointFromName(("Zerg " + IntToString(lv_point)));

    // Actions
    if (!runActions) {
        return true;
    }

    auto19D54806_val = RandomInt(1, 9);
    if (auto19D54806_val == 1) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Hydralisk", 0, lv_player, lv_spawn);
    }
    else if (auto19D54806_val == 2) {
        libNtve_gf_CreateUnitsWithDefaultFacing(2, "Zergling", 0, lv_player, lv_spawn);
    }
    else if (auto19D54806_val == 3) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Roach", 0, lv_player, lv_spawn);
    }
    else if (auto19D54806_val == 4) {
        libNtve_gf_CreateUnitsWithDefaultFacing(4, "Zergling", 0, lv_player, lv_spawn);
    }
    else if (auto19D54806_val == 5) {
        libNtve_gf_CreateUnitsWithDefaultFacing(2, "Roach", 0, lv_player, lv_spawn);
    }
    else if (auto19D54806_val == 6) {
        libNtve_gf_CreateUnitsWithDefaultFacing(2, "Mutalisk", 0, lv_player, lv_spawn);
    }
    else if (auto19D54806_val == 7) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Ravager", 0, lv_player, lv_spawn);
    }
    else if (auto19D54806_val == 8) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Ultralisk", 0, lv_player, lv_spawn);
    }
    else if (auto19D54806_val == 9) {
        libNtve_gf_CreateUnitsWithDefaultFacing(2, "Baneling", 0, lv_player, lv_spawn);
    }
    else {
    }
    UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(323118538)), c_orderQueueReplace);
    Wait(RandomFixed(1.0, 2.0), c_timeGame);
    TriggerExecute(gt_SpawnZerg, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpawnZerg_Init () {
    gt_SpawnZerg = TriggerCreate("gt_SpawnZerg_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Waves
//--------------------------------------------------------------------------------------------------
bool gt_Waves_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_SetCoopAIAttackGroupSpawnPoint(5, PointFromId(1287381901));
    AIAttackWaveSetTargetPoint(5, PointFromId(766771355));
    libCOMI_gf_AddCommanderUnitstoAttackWavePresetBucketTechLevel(5, true, libCOMI_gf_IntegerAsResourceBucket(0), libCOMI_gf_IntegerAsTechBucket(0));
    AIAttackWaveSend(5, 10, false);
    Wait(RandomFixed(30.0, 45.0), c_timeGame);
    TriggerExecute(gt_Waves, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Waves_Init () {
    gt_Waves = TriggerCreate("gt_Waves_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Fighters
//--------------------------------------------------------------------------------------------------
bool gt_Fighters_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_p;
    int lv_totalUpgrades;
    int lv_upgradeIter;
    string lv_aiUpgrade;
    string lv_aiUpgradeFaction;

    // Automatic Variable Declarations
    playergroup autoD1FAEF0E_g;

    // Variable Initialization
    lv_totalUpgrades = UserDataInstanceCount("CoopAIUpgrade");

    // Actions
    if (!runActions) {
        return true;
    }

    autoD1FAEF0E_g = PlayerGroupAll();
    lv_p = -1;
    while (true) {
        lv_p = PlayerGroupNextPlayer(autoD1FAEF0E_g, lv_p);
        if (lv_p < 0) { break; }
        if ((PlayerType(lv_p) == c_playerTypeUser)) {
            VisRevealerCreate(lv_p, RegionEntireMap());
            CameraApplyInfo(lv_p, CameraInfoFromId(77362821), 0.0, -1, 10.0, true);
        }

    }
    PlayerSetColorIndex(gv_pLAYER_DEFENDERS, 3, true);
    PlayerSetColorIndex(gv_pLAYER_ATTACKERS, 1, true);
    PlayerSetDifficulty(gv_pLAYER_DEFENDERS, 4);
    libNtve_gf_SetAlliance(gv_pLAYER_DEFENDERS, gv_pLAYER_ATTACKERS, libNtve_ge_AllianceSetting_Enemy);
    PlayerGroupAdd(libCOMI_gv_vU_EnemyAI, gv_pLAYER_DEFENDERS);
    PlayerGroupAdd(libCOMI_gv_vU_Enemies, gv_pLAYER_DEFENDERS);
    libCOMI_gf_RegisterAvailableFactions();
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryCombat, 25.0, 99999.0);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDeath, 25.0, 524287.0);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryBuild, 25.0, 0.0);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryFlames, 25.0, 0.0);
    UISetCursorVisible(PlayerGroupAll(), true);
    libNtve_gf_HideGameUI(false, PlayerGroupAll());
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "Music_Takeover_Karax", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    libCOMI_gf_StorePreplacedUnits();
    gf_RaceSwap(gv_pLAYER_DEFENDERS, libCOMI_gf_RandomCoopAIFaction());
    PlayerSetState(gv_pLAYER_DEFENDERS, c_playerStateFoodIgnored, true);
    PlayerSetState(gv_pLAYER_DEFENDERS, c_playerStateMineralCostIgnored, true);
    PlayerSetState(gv_pLAYER_DEFENDERS, c_playerStateVespeneCostIgnored, true);
    libCOMI_gv_gameHasBegun = true;
    libCOMI_gf_StartCoopAI(gv_pLAYER_DEFENDERS, gv_pLAYER_ATTACKERS);
    PlayerSetState(gv_pLAYER_DEFENDERS, c_playerStateFoodIgnored, true);
    PlayerSetState(gv_pLAYER_DEFENDERS, c_playerStateMineralCostIgnored, true);
    PlayerSetState(gv_pLAYER_DEFENDERS, c_playerStateVespeneCostIgnored, true);
    PlayerSetState(gv_pLAYER_DEFENDERS, c_playerStateCustomCostIgnored, true);
    PlayerSetState(gv_pLAYER_DEFENDERS, c_playerStateTerrazineCostIgnored, true);
    AISetDefenseRadii(gv_pLAYER_DEFENDERS, 30.0, 25.0, 20.0);
    libCOMI_gf_StartCoopAI(gv_pLAYER_DEFENDERS, gv_pLAYER_ATTACKERS);
    libCOMI_gf_StartCoopAI(gv_pLAYER_ATTACKERS, gv_pLAYER_DEFENDERS);
    TriggerExecute(gt_SpawnZerg, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Fighters_Init () {
    gt_Fighters = TriggerCreate("gt_Fighters_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Control
//--------------------------------------------------------------------------------------------------
bool gt_Control_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_offsetX;
    int lv_offsetY;
    int lv_x;
    string lv_map;
    int lv_y;
    int lv_image;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_offsetX = 10;
    lv_offsetY = -60;
    lv_image = c_invalidDialogControlId;

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(2.0, c_timeGame);
    DialogCreate(1000, 1000, c_anchorTopLeft, 20, 20, true);
    DialogSetImageVisible(DialogLastCreated(), false);
    gv_controlDialog = DialogLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_controlDialog, 20, 20, c_anchorTopLeft, 0, 0, StringToText(""), StringExternal("Param/Value/FEEC9577"), "");
    gv_controlDialogButton = DialogControlLastCreated();
    DialogSetVisible(gv_controlDialog, libCOMI_gv_all, true);
    DialogControlSetVisible(gv_controlDialogButton, libCOMI_gv_all, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Control_Init () {
    gt_Control = TriggerCreate("gt_Control_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Control Button Clicked
//--------------------------------------------------------------------------------------------------
bool gt_ControlButtonClicked_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_new;
    string lv_old;
    int lv_i;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_old = gv_aiFaction;

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_controlDialogButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGetAlliance(gv_pLAYER_DEFENDERS, c_allianceIdControl, EventPlayer()) == true)) {
        PlayerSetAlliance(gv_pLAYER_DEFENDERS, c_allianceIdControl, EventPlayer(), false);
        PlayerSetAlliance(gv_pLAYER_DEFENDERS, c_allianceIdVision, EventPlayer(), false);
        libNtve_gf_HideGameUI(false, PlayerGroupSingle(EventPlayer()));
        DialogSetVisible(libCOMI_gv_amonFactionsDialog, PlayerGroupSingle(EventPlayer()), true);
        DialogSetVisible(libCOMI_gv_dialog, PlayerGroupSingle(EventPlayer()), true);
        DialogSetVisible(libCOMI_gv_selectMissionDialog, PlayerGroupSingle(EventPlayer()), true);
    }
    else {
        PlayerSetAlliance(gv_pLAYER_DEFENDERS, c_allianceIdControl, EventPlayer(), true);
        PlayerSetAlliance(gv_pLAYER_DEFENDERS, c_allianceIdVision, EventPlayer(), true);
        libNtve_gf_HideGameUI(true, PlayerGroupSingle(EventPlayer()));
        DialogSetVisible(libCOMI_gv_amonFactionsDialog, PlayerGroupSingle(EventPlayer()), false);
        DialogSetVisible(libCOMI_gv_dialog, PlayerGroupSingle(EventPlayer()), false);
        DialogSetVisible(libCOMI_gv_selectMissionDialog, PlayerGroupSingle(EventPlayer()), false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ControlButtonClicked_Init () {
    gt_ControlButtonClicked = TriggerCreate("gt_ControlButtonClicked_Func");
    TriggerAddEventDialogControl(gt_ControlButtonClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Leaving
//--------------------------------------------------------------------------------------------------
bool gt_Leaving_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoBC295F9C_g;
    int autoBC295F9C_u;
    unit autoBC295F9C_var;

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == 4))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoBC295F9C_g = UnitGroup(null, 4, RegionFromId(2), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoBC295F9C_u = UnitGroupCount(autoBC295F9C_g, c_unitCountAll);
    for (;; autoBC295F9C_u -= 1) {
        autoBC295F9C_var = UnitGroupUnitFromEnd(autoBC295F9C_g, autoBC295F9C_u);
        if (autoBC295F9C_var == null) { break; }
        UnitRemove(autoBC295F9C_var);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Leaving_Init () {
    gt_Leaving = TriggerCreate("gt_Leaving_Func");
    TriggerAddEventUnitRegion(gt_Leaving, null, RegionFromId(2), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger Initialization
//--------------------------------------------------------------------------------------------------
void InitTriggers () {
    gt_Init_Init();
    gt_FactionButtonClicked_Init();
    gt_SpawnZerg_Init();
    gt_Waves_Init();
    gt_Fighters_Init();
    gt_Control_Init();
    gt_ControlButtonClicked_Init();
    gt_Leaving_Init();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void InitMap () {
    InitLibs();
    InitGlobals();
    InitTriggers();
}
