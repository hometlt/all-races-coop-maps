//==================================================================================================
// 
// Generated Map Script
// 
// Name:   [ARC] Salvation's Precipice
// 
//==================================================================================================
include "TriggerLibs/natives"

//--------------------------------------------------------------------------------------------------
// Custom Script: Triggers
//--------------------------------------------------------------------------------------------------
//==================================================================================================
// 
// Generated AI Script
// 
// AI Name: Hybrid Wave AI
// 
//==================================================================================================
include "TriggerLibs/natives"
include "TriggerLibs/AI"
include "TriggerLibs/Computer"
//--------------------------------------------------------------------------------------------------
// Globals
//--------------------------------------------------------------------------------------------------
point[17] aiF917F4D7_defGather;
string[17] aiF917F4D7_customData;
wave[17] aiF917F4D7_lastWave;
//--------------------------------------------------------------------------------------------------
// Attack Wave: 
//--------------------------------------------------------------------------------------------------
bool[17] aiF917F4D7_wave1_enabled;
wave[17] aiF917F4D7_wave1_lastWave;
trigger aiF917F4D7_wave1_trigger = null;
int aiF917F4D7_wave1_runPlayer;
playergroup aiF917F4D7_wave1_runTarget;
//--------------------------------------------------------------------------------------------------
void aiF917F4D7_wave1_init () {
    int init_i;
    for (init_i = 0; init_i <= 16; init_i += 1) {
        aiF917F4D7_wave1_enabled[init_i] = true;
        aiF917F4D7_wave1_lastWave[init_i] = null;
    }
    aiF917F4D7_wave1_trigger = TriggerCreate("aiF917F4D7_wave1_runFunc");
}
//--------------------------------------------------------------------------------------------------
void aiF917F4D7_wave1_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    aiF917F4D7_wave1_enabled[p] = val;
}
//--------------------------------------------------------------------------------------------------
bool aiF917F4D7_wave1_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return aiF917F4D7_wave1_enabled[p];
}
//--------------------------------------------------------------------------------------------------
wave aiF917F4D7_wave1_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiF917F4D7_wave1_lastWave[p];
}
//--------------------------------------------------------------------------------------------------
bool aiF917F4D7_wave1_runFunc (bool c, bool a) {
    int p = aiF917F4D7_wave1_runPlayer;
    playergroup target = aiF917F4D7_wave1_runTarget;
    int d;
    point gatherPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;
    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!aiF917F4D7_wave1_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }
    aiF917F4D7_customData[p] = "";
    ta = 0;
    tg = 0;
    ts = ta;
    TriggerExecute(TriggerFind("gt_AttackWave01_Func"), true, false);
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);
    gatherPoint = aiF917F4D7_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);
    AIAttackWaveClearWaypoints(p);
    Wait(ts, c_timeAI);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void aiF917F4D7_wave1_run (int p, playergroup target, bool wait) {
    aiF917F4D7_wave1_runPlayer = p;
    aiF917F4D7_wave1_runTarget = PlayerGroupCopy(target);
    TriggerExecute(aiF917F4D7_wave1_trigger, false, wait);
}
//--------------------------------------------------------------------------------------------------
// Attack Wave: 
//--------------------------------------------------------------------------------------------------
bool[17] aiF917F4D7_wave2_enabled;
wave[17] aiF917F4D7_wave2_lastWave;
trigger aiF917F4D7_wave2_trigger = null;
int aiF917F4D7_wave2_runPlayer;
playergroup aiF917F4D7_wave2_runTarget;
//--------------------------------------------------------------------------------------------------
void aiF917F4D7_wave2_init () {
    int init_i;
    for (init_i = 0; init_i <= 16; init_i += 1) {
        aiF917F4D7_wave2_enabled[init_i] = true;
        aiF917F4D7_wave2_lastWave[init_i] = null;
    }
    aiF917F4D7_wave2_trigger = TriggerCreate("aiF917F4D7_wave2_runFunc");
}
//--------------------------------------------------------------------------------------------------
void aiF917F4D7_wave2_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    aiF917F4D7_wave2_enabled[p] = val;
}
//--------------------------------------------------------------------------------------------------
bool aiF917F4D7_wave2_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return aiF917F4D7_wave2_enabled[p];
}
//--------------------------------------------------------------------------------------------------
wave aiF917F4D7_wave2_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiF917F4D7_wave2_lastWave[p];
}
//--------------------------------------------------------------------------------------------------
bool aiF917F4D7_wave2_runFunc (bool c, bool a) {
    int p = aiF917F4D7_wave2_runPlayer;
    playergroup target = aiF917F4D7_wave2_runTarget;
    int d;
    point gatherPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;
    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!aiF917F4D7_wave2_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }
    aiF917F4D7_customData[p] = "";
    ta = 0;
    if (d == 1) { ta = 180; }
    if (d == 2) { ta = 180; }
    if (d == 3) { ta = 180; }
    if (d == 4) { ta = 180; }
    if (d == 5) { ta = 180; }
    if (d == 6) { ta = 180; }
    tg = 0;
    ts = ta;
    TriggerExecute(TriggerFind("gt_AttackWave02_Func"), true, false);
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);
    gatherPoint = aiF917F4D7_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);
    AIAttackWaveClearWaypoints(p);
    Wait(ts, c_timeAI);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void aiF917F4D7_wave2_run (int p, playergroup target, bool wait) {
    aiF917F4D7_wave2_runPlayer = p;
    aiF917F4D7_wave2_runTarget = PlayerGroupCopy(target);
    TriggerExecute(aiF917F4D7_wave2_trigger, false, wait);
}
//--------------------------------------------------------------------------------------------------
// Attack Wave: 
//--------------------------------------------------------------------------------------------------
bool[17] aiF917F4D7_wave3_enabled;
wave[17] aiF917F4D7_wave3_lastWave;
trigger aiF917F4D7_wave3_trigger = null;
int aiF917F4D7_wave3_runPlayer;
playergroup aiF917F4D7_wave3_runTarget;
//--------------------------------------------------------------------------------------------------
void aiF917F4D7_wave3_init () {
    int init_i;
    for (init_i = 0; init_i <= 16; init_i += 1) {
        aiF917F4D7_wave3_enabled[init_i] = true;
        aiF917F4D7_wave3_lastWave[init_i] = null;
    }
    aiF917F4D7_wave3_trigger = TriggerCreate("aiF917F4D7_wave3_runFunc");
}
//--------------------------------------------------------------------------------------------------
void aiF917F4D7_wave3_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    aiF917F4D7_wave3_enabled[p] = val;
}
//--------------------------------------------------------------------------------------------------
bool aiF917F4D7_wave3_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return aiF917F4D7_wave3_enabled[p];
}
//--------------------------------------------------------------------------------------------------
wave aiF917F4D7_wave3_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiF917F4D7_wave3_lastWave[p];
}
//--------------------------------------------------------------------------------------------------
bool aiF917F4D7_wave3_runFunc (bool c, bool a) {
    int p = aiF917F4D7_wave3_runPlayer;
    playergroup target = aiF917F4D7_wave3_runTarget;
    int d;
    point gatherPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;
    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!aiF917F4D7_wave3_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }
    aiF917F4D7_customData[p] = "";
    ta = 0;
    if (d == 1) { ta = 180; }
    if (d == 2) { ta = 180; }
    if (d == 3) { ta = 180; }
    if (d == 4) { ta = 180; }
    if (d == 5) { ta = 180; }
    if (d == 6) { ta = 180; }
    tg = 0;
    ts = ta;
    TriggerExecute(TriggerFind("gt_AttackWave03_Func"), true, false);
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);
    gatherPoint = aiF917F4D7_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);
    AIAttackWaveClearWaypoints(p);
    Wait(ts, c_timeAI);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void aiF917F4D7_wave3_run (int p, playergroup target, bool wait) {
    aiF917F4D7_wave3_runPlayer = p;
    aiF917F4D7_wave3_runTarget = PlayerGroupCopy(target);
    TriggerExecute(aiF917F4D7_wave3_trigger, false, wait);
}
//--------------------------------------------------------------------------------------------------
// Attack Wave: 
//--------------------------------------------------------------------------------------------------
bool[17] aiF917F4D7_wave4_enabled;
wave[17] aiF917F4D7_wave4_lastWave;
trigger aiF917F4D7_wave4_trigger = null;
int aiF917F4D7_wave4_runPlayer;
playergroup aiF917F4D7_wave4_runTarget;
//--------------------------------------------------------------------------------------------------
void aiF917F4D7_wave4_init () {
    int init_i;
    for (init_i = 0; init_i <= 16; init_i += 1) {
        aiF917F4D7_wave4_enabled[init_i] = true;
        aiF917F4D7_wave4_lastWave[init_i] = null;
    }
    aiF917F4D7_wave4_trigger = TriggerCreate("aiF917F4D7_wave4_runFunc");
}
//--------------------------------------------------------------------------------------------------
void aiF917F4D7_wave4_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    aiF917F4D7_wave4_enabled[p] = val;
}
//--------------------------------------------------------------------------------------------------
bool aiF917F4D7_wave4_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return aiF917F4D7_wave4_enabled[p];
}
//--------------------------------------------------------------------------------------------------
wave aiF917F4D7_wave4_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiF917F4D7_wave4_lastWave[p];
}
//--------------------------------------------------------------------------------------------------
bool aiF917F4D7_wave4_runFunc (bool c, bool a) {
    int p = aiF917F4D7_wave4_runPlayer;
    playergroup target = aiF917F4D7_wave4_runTarget;
    int d;
    point gatherPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;
    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!aiF917F4D7_wave4_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }
    aiF917F4D7_customData[p] = "";
    ta = 0;
    if (d == 1) { ta = 180; }
    if (d == 2) { ta = 180; }
    if (d == 3) { ta = 180; }
    if (d == 4) { ta = 180; }
    if (d == 5) { ta = 180; }
    if (d == 6) { ta = 180; }
    tg = 0;
    ts = ta;
    TriggerExecute(TriggerFind("gt_AttackWave04_Func"), true, false);
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);
    gatherPoint = aiF917F4D7_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);
    AIAttackWaveClearWaypoints(p);
    Wait(ts, c_timeAI);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void aiF917F4D7_wave4_run (int p, playergroup target, bool wait) {
    aiF917F4D7_wave4_runPlayer = p;
    aiF917F4D7_wave4_runTarget = PlayerGroupCopy(target);
    TriggerExecute(aiF917F4D7_wave4_trigger, false, wait);
}
//--------------------------------------------------------------------------------------------------
// Attack Wave: 
//--------------------------------------------------------------------------------------------------
bool[17] aiF917F4D7_wave5_enabled;
wave[17] aiF917F4D7_wave5_lastWave;
trigger aiF917F4D7_wave5_trigger = null;
int aiF917F4D7_wave5_runPlayer;
playergroup aiF917F4D7_wave5_runTarget;
//--------------------------------------------------------------------------------------------------
void aiF917F4D7_wave5_init () {
    int init_i;
    for (init_i = 0; init_i <= 16; init_i += 1) {
        aiF917F4D7_wave5_enabled[init_i] = true;
        aiF917F4D7_wave5_lastWave[init_i] = null;
    }
    aiF917F4D7_wave5_trigger = TriggerCreate("aiF917F4D7_wave5_runFunc");
}
//--------------------------------------------------------------------------------------------------
void aiF917F4D7_wave5_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    aiF917F4D7_wave5_enabled[p] = val;
}
//--------------------------------------------------------------------------------------------------
bool aiF917F4D7_wave5_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return aiF917F4D7_wave5_enabled[p];
}
//--------------------------------------------------------------------------------------------------
wave aiF917F4D7_wave5_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiF917F4D7_wave5_lastWave[p];
}
//--------------------------------------------------------------------------------------------------
bool aiF917F4D7_wave5_runFunc (bool c, bool a) {
    int p = aiF917F4D7_wave5_runPlayer;
    playergroup target = aiF917F4D7_wave5_runTarget;
    int d;
    point gatherPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;
    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!aiF917F4D7_wave5_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }
    aiF917F4D7_customData[p] = "";
    ta = 0;
    if (d == 1) { ta = 180; }
    if (d == 2) { ta = 180; }
    if (d == 3) { ta = 180; }
    if (d == 4) { ta = 180; }
    if (d == 5) { ta = 180; }
    if (d == 6) { ta = 180; }
    tg = 0;
    ts = ta;
    TriggerExecute(TriggerFind("gt_AttackWave05_Func"), true, false);
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);
    gatherPoint = aiF917F4D7_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);
    AIAttackWaveClearWaypoints(p);
    Wait(ts, c_timeAI);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void aiF917F4D7_wave5_run (int p, playergroup target, bool wait) {
    aiF917F4D7_wave5_runPlayer = p;
    aiF917F4D7_wave5_runTarget = PlayerGroupCopy(target);
    TriggerExecute(aiF917F4D7_wave5_trigger, false, wait);
}
//--------------------------------------------------------------------------------------------------
// Attack Wave: 
//--------------------------------------------------------------------------------------------------
bool[17] aiF917F4D7_wave6_enabled;
wave[17] aiF917F4D7_wave6_lastWave;
trigger aiF917F4D7_wave6_trigger = null;
int aiF917F4D7_wave6_runPlayer;
playergroup aiF917F4D7_wave6_runTarget;
//--------------------------------------------------------------------------------------------------
void aiF917F4D7_wave6_init () {
    int init_i;
    for (init_i = 0; init_i <= 16; init_i += 1) {
        aiF917F4D7_wave6_enabled[init_i] = true;
        aiF917F4D7_wave6_lastWave[init_i] = null;
    }
    aiF917F4D7_wave6_trigger = TriggerCreate("aiF917F4D7_wave6_runFunc");
}
//--------------------------------------------------------------------------------------------------
void aiF917F4D7_wave6_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    aiF917F4D7_wave6_enabled[p] = val;
}
//--------------------------------------------------------------------------------------------------
bool aiF917F4D7_wave6_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return aiF917F4D7_wave6_enabled[p];
}
//--------------------------------------------------------------------------------------------------
wave aiF917F4D7_wave6_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiF917F4D7_wave6_lastWave[p];
}
//--------------------------------------------------------------------------------------------------
bool aiF917F4D7_wave6_runFunc (bool c, bool a) {
    int p = aiF917F4D7_wave6_runPlayer;
    playergroup target = aiF917F4D7_wave6_runTarget;
    int d;
    point gatherPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;
    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!aiF917F4D7_wave6_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }
    aiF917F4D7_customData[p] = "";
    ta = 0;
    if (d == 1) { ta = 180; }
    if (d == 2) { ta = 180; }
    if (d == 3) { ta = 180; }
    if (d == 4) { ta = 180; }
    if (d == 5) { ta = 180; }
    if (d == 6) { ta = 180; }
    tg = 0;
    ts = ta;
    TriggerExecute(TriggerFind("gt_AttackWave06_Func"), true, false);
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);
    gatherPoint = aiF917F4D7_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);
    AIAttackWaveClearWaypoints(p);
    Wait(ts, c_timeAI);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void aiF917F4D7_wave6_run (int p, playergroup target, bool wait) {
    aiF917F4D7_wave6_runPlayer = p;
    aiF917F4D7_wave6_runTarget = PlayerGroupCopy(target);
    TriggerExecute(aiF917F4D7_wave6_trigger, false, wait);
}
//--------------------------------------------------------------------------------------------------
// Attack Wave: 
//--------------------------------------------------------------------------------------------------
bool[17] aiF917F4D7_wave7_enabled;
wave[17] aiF917F4D7_wave7_lastWave;
trigger aiF917F4D7_wave7_trigger = null;
int aiF917F4D7_wave7_runPlayer;
playergroup aiF917F4D7_wave7_runTarget;
//--------------------------------------------------------------------------------------------------
void aiF917F4D7_wave7_init () {
    int init_i;
    for (init_i = 0; init_i <= 16; init_i += 1) {
        aiF917F4D7_wave7_enabled[init_i] = true;
        aiF917F4D7_wave7_lastWave[init_i] = null;
    }
    aiF917F4D7_wave7_trigger = TriggerCreate("aiF917F4D7_wave7_runFunc");
}
//--------------------------------------------------------------------------------------------------
void aiF917F4D7_wave7_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    aiF917F4D7_wave7_enabled[p] = val;
}
//--------------------------------------------------------------------------------------------------
bool aiF917F4D7_wave7_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return aiF917F4D7_wave7_enabled[p];
}
//--------------------------------------------------------------------------------------------------
wave aiF917F4D7_wave7_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiF917F4D7_wave7_lastWave[p];
}
//--------------------------------------------------------------------------------------------------
bool aiF917F4D7_wave7_runFunc (bool c, bool a) {
    int p = aiF917F4D7_wave7_runPlayer;
    playergroup target = aiF917F4D7_wave7_runTarget;
    int d;
    point gatherPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;
    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!aiF917F4D7_wave7_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }
    aiF917F4D7_customData[p] = "";
    ta = 0;
    if (d == 1) { ta = 180; }
    if (d == 2) { ta = 180; }
    if (d == 3) { ta = 180; }
    if (d == 4) { ta = 180; }
    if (d == 5) { ta = 180; }
    if (d == 6) { ta = 180; }
    tg = 0;
    ts = ta;
    TriggerExecute(TriggerFind("gt_AttackWave07_Func"), true, false);
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);
    gatherPoint = aiF917F4D7_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);
    AIAttackWaveClearWaypoints(p);
    Wait(ts, c_timeAI);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void aiF917F4D7_wave7_run (int p, playergroup target, bool wait) {
    aiF917F4D7_wave7_runPlayer = p;
    aiF917F4D7_wave7_runTarget = PlayerGroupCopy(target);
    TriggerExecute(aiF917F4D7_wave7_trigger, false, wait);
}
//--------------------------------------------------------------------------------------------------
// Attack Wave Wrappers
//--------------------------------------------------------------------------------------------------
void aiF917F4D7_wave_enable (int w, int p, bool val) {
    if (w == 1) { aiF917F4D7_wave1_enable(p, val); }
    if (w == 2) { aiF917F4D7_wave2_enable(p, val); }
    if (w == 3) { aiF917F4D7_wave3_enable(p, val); }
    if (w == 4) { aiF917F4D7_wave4_enable(p, val); }
    if (w == 5) { aiF917F4D7_wave5_enable(p, val); }
    if (w == 6) { aiF917F4D7_wave6_enable(p, val); }
    if (w == 7) { aiF917F4D7_wave7_enable(p, val); }
}
//--------------------------------------------------------------------------------------------------
bool aiF917F4D7_wave_isEnabled (int w, int p) {
    if (w == 1) { return aiF917F4D7_wave1_isEnabled(p); }
    if (w == 2) { return aiF917F4D7_wave2_isEnabled(p); }
    if (w == 3) { return aiF917F4D7_wave3_isEnabled(p); }
    if (w == 4) { return aiF917F4D7_wave4_isEnabled(p); }
    if (w == 5) { return aiF917F4D7_wave5_isEnabled(p); }
    if (w == 6) { return aiF917F4D7_wave6_isEnabled(p); }
    if (w == 7) { return aiF917F4D7_wave7_isEnabled(p); }
    return false;
}
//--------------------------------------------------------------------------------------------------
unitgroup aiF917F4D7_wave_createdUnits (int w, int p) {
    return null;
}
//--------------------------------------------------------------------------------------------------
wave aiF917F4D7_wave_createdWave (int w, int p) {
    if (w == 1) { return aiF917F4D7_wave1_createdWave(p); }
    if (w == 2) { return aiF917F4D7_wave2_createdWave(p); }
    if (w == 3) { return aiF917F4D7_wave3_createdWave(p); }
    if (w == 4) { return aiF917F4D7_wave4_createdWave(p); }
    if (w == 5) { return aiF917F4D7_wave5_createdWave(p); }
    if (w == 6) { return aiF917F4D7_wave6_createdWave(p); }
    if (w == 7) { return aiF917F4D7_wave7_createdWave(p); }
    return null;
}
//--------------------------------------------------------------------------------------------------
void aiF917F4D7_wave_run (int w, int p, playergroup target, bool wait) {
    if (w == 1) { aiF917F4D7_wave1_run(p, target, wait); }
    if (w == 2) { aiF917F4D7_wave2_run(p, target, wait); }
    if (w == 3) { aiF917F4D7_wave3_run(p, target, wait); }
    if (w == 4) { aiF917F4D7_wave4_run(p, target, wait); }
    if (w == 5) { aiF917F4D7_wave5_run(p, target, wait); }
    if (w == 6) { aiF917F4D7_wave6_run(p, target, wait); }
    if (w == 7) { aiF917F4D7_wave7_run(p, target, wait); }
}
//--------------------------------------------------------------------------------------------------
// Attack Wave Sequence
//--------------------------------------------------------------------------------------------------
trigger aiF917F4D7_waves_trigger = null;
int aiF917F4D7_waves_runPlayer;
playergroup aiF917F4D7_waves_runTarget;
//--------------------------------------------------------------------------------------------------
void aiF917F4D7_waves_init () {
    aiF917F4D7_waves_trigger = TriggerCreate("aiF917F4D7_waves_runFunc");
}
//--------------------------------------------------------------------------------------------------
bool aiF917F4D7_waves_runFunc (bool c, bool a) {
    int p = aiF917F4D7_waves_runPlayer;
    playergroup target = aiF917F4D7_waves_runTarget;
    if (p < 0 || p >= 16) {
        return false;
    }
    aiF917F4D7_wave1_run(p, target, true);
    aiF917F4D7_wave2_run(p, target, true);
    aiF917F4D7_wave3_run(p, target, true);
    aiF917F4D7_wave4_run(p, target, true);
    aiF917F4D7_wave5_run(p, target, true);
    aiF917F4D7_wave6_run(p, target, true);
    aiF917F4D7_wave7_run(p, target, true);
    while (true) {
        aiF917F4D7_wave7_run(p, target, true);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void aiF917F4D7_waves_run (int p, playergroup target) {
    aiF917F4D7_waves_runPlayer = p;
    aiF917F4D7_waves_runTarget = PlayerGroupCopy(target);
    TriggerExecute(aiF917F4D7_waves_trigger, false, false);
}
//--------------------------------------------------------------------------------------------------
void aiF917F4D7_waves_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    aiF917F4D7_wave1_enable(p, val);
    aiF917F4D7_wave2_enable(p, val);
    aiF917F4D7_wave3_enable(p, val);
    aiF917F4D7_wave4_enable(p, val);
    aiF917F4D7_wave5_enable(p, val);
    aiF917F4D7_wave6_enable(p, val);
    aiF917F4D7_wave7_enable(p, val);
}
//--------------------------------------------------------------------------------------------------
void aiF917F4D7_waves_stop () {
    TriggerStop(aiF917F4D7_waves_trigger);
    TriggerStop(aiF917F4D7_wave1_trigger);
    TriggerStop(aiF917F4D7_wave2_trigger);
    TriggerStop(aiF917F4D7_wave3_trigger);
    TriggerStop(aiF917F4D7_wave4_trigger);
    TriggerStop(aiF917F4D7_wave5_trigger);
    TriggerStop(aiF917F4D7_wave6_trigger);
    TriggerStop(aiF917F4D7_wave7_trigger);
}
//--------------------------------------------------------------------------------------------------
// Configuration
//--------------------------------------------------------------------------------------------------
void aiF917F4D7_setDefGather (int p, point val) {
    if (p < 0 || p >= 16) {
        return;
    }
    aiF917F4D7_defGather[p] = val;
}
//--------------------------------------------------------------------------------------------------
string aiF917F4D7_getCustomData (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiF917F4D7_customData[p];
}
//--------------------------------------------------------------------------------------------------
wave aiF917F4D7_getLastWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiF917F4D7_lastWave[p];
}
//--------------------------------------------------------------------------------------------------
// Start
//--------------------------------------------------------------------------------------------------
bool aiF917F4D7_initialized = false;
//--------------------------------------------------------------------------------------------------
void aiF917F4D7_start (int p) {
    int init_i;
    if (p < 0 || p >= 16) {
        return;
    }
    if (!aiF917F4D7_initialized) {
        aiF917F4D7_wave1_init();
        aiF917F4D7_wave2_init();
        aiF917F4D7_wave3_init();
        aiF917F4D7_wave4_init();
        aiF917F4D7_wave5_init();
        aiF917F4D7_wave6_init();
        aiF917F4D7_wave7_init();
        aiF917F4D7_waves_init();
        for (init_i = 0; init_i <= 16; init_i += 1) {
            aiF917F4D7_defGather[init_i] = PointFromId(0);
        }
        aiF917F4D7_initialized = true;
    }
    AICampaignStart(p);
}
//==================================================================================================
// 
// Generated Map Script
// 
// Name:   Salvation's Precipice
// 
//==================================================================================================
include "TriggerLibs/NativeLib"
include "LibCOMI"
//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void InitLibs () {
    libNtve_InitLib();
    libCOMI_InitLib();
}
//--------------------------------------------------------------------------------------------------
// Constants
//--------------------------------------------------------------------------------------------------
int gv_pLAYER_01_USER = 1;
int gv_pLAYER_02_USER = 2;
const int gv_pLAYER_03_ENEMY = 8;
const int gv_pLAYER_04_ENEMY = 9;
const int gv_pLAYER_05_ALLY = 10;
const int gv_pLAYER_06_HYBRID = 6;
const int gv_pLAYER_07_HYBRID_SUPPORT = 7;
const int gv_aMONWARPOUTWEST = 0;
const int gv_aMONWARPOUTEAST = 1;
const int gv_aMONWARPOUTCENTER = 2;
const int gv_aMONWARPOUTSOUTH = 3;
const int gv_pROTOSSWARPOUTWEST = 4;
const int gv_pROTOSSWARPOUTEAST = 5;
const int gv_aMONWORLDWARPIN = 0;
const int gv_pROTOSSWORLDWARPINWEST = 1;
const int gv_pROTOSSWORLDWARPINEAST = 2;
const int gv_pATHINGSIZE = 1000;
const int gv_tOTAL_MARKERS = 5;
const fixed gv_interTransmissionDelayTime = 15.0;
const int gv_mAX_HYBRIDS = 10;
//--------------------------------------------------------------------------------------------------
// Global Variables
//--------------------------------------------------------------------------------------------------
int[4] gv_player_Difficulty_Modifier;
playergroup gv_enemyGroup;
region gv_amonWarpOutSOUTHRegion;
region gv_amonWarpOutCENTERRegion;
region gv_protossWarpOutWESTRegion;
region gv_protossWarpOutEASTRegion;
bool[7] gv_warpZonesActive;
actor[7] gv_warpZone;
actorscope[7] gv_warpZoneScope;
point[4][10] gv_warpInPoints;
fixed gv_westWarpZoneActivationCompletion;
fixed gv_eastWarpZoneActivationCompletion;
fixed gv_southWarpZoneActivationCompletion;
fixed gv_centerWarpZoneActivationCompletion;
unitgroup[5] gv_enemyBaseUnitGroups;
unitgroup[5][4] gv_enemyBaseFriendlyGroups;
bool gv_phaseSmithWarpedIn;
bool gv_phaseSmithReparing;
int gv_phaseSmithZone;
unit gv_phaseSmith;
point[3][gv_pATHINGSIZE + 1] gv_pathingQueuePoint;
unit[3][gv_pATHINGSIZE + 1] gv_pathingUnit;
abilcmd[3][gv_pATHINGSIZE + 1] gv_pathingUnitOrder;
unitfilter gv_vICTORY_REQUIREMENT;
int[gv_tOTAL_MARKERS + 1] gv_objectiveMarkers;
int[gv_tOTAL_MARKERS + 1] gv_secondaryObjectiveMarkers;
int gv_remainingPortalCount;
int gv_remainingProtossStructureCount;
int gv_totalProtossStructures;
bool[5] gv_protossStructureCountWarningPlayed;
bool gv_transmissionPlaying;
fixed gv_lastTransmissionTime;
bool[10] gv_enemyBaseDestroyed;
bool gv_firstBaseDestroyed;
bool gv_firstHybridSpawned;
point gv_victoryCompletePan;
point gv_attackWaveA_Wave05Path;
region[3][11] gv_attackSpawn;
unitgroup gv_defenseSquad;
unitgroup gv_offenseWaves;
point[gv_mAX_HYBRIDS + 1] gv_hybridLastPosition;
timer gv_hybridSpawnTimer;
int gv_hybridSpawnTimerWindow;
fixed gv_hybridSpawnTime;
point gv_hybridAttackerSpawnPoint;
actor gv_hybridWarpInDoodad;
int[gv_mAX_HYBRIDS + 1] gv_hybridMarkers;
unit[gv_mAX_HYBRIDS + 1] gv_hybridUnits;
region[gv_mAX_HYBRIDS + 1] gv_hybridRegions;
revealer[4][gv_mAX_HYBRIDS + 1] gv_hybridRevealers;
unit gv_shadowCloud;
unit[8] gv_staticShadows;
int gv_staticShadowIterator;
int gv_objectiveDestroyTheHybridWarpGates;
int gv_objectiveDefendProtossAlly;
int gv_secondaryObjectiveCaptureWestWarpZone;
int gv_secondaryObjectiveCaptureWestWarpZoneMarker;
int gv_secondaryObjectiveCaptureEastWarpZone;
int gv_secondaryObjectiveCaptureEastWarpZoneMarker;
int gv_secondaryObjectiveCaptureSouthWarpZone;
int gv_secondaryObjectiveCaptureSouthWarpZoneMarker;
int gv_secondaryObjectiveCaptureCenterWarpZone;
int gv_secondaryObjectiveCaptureCenterWarpZoneMarker;
int gv_secondaryObjectiveDestroyHybridNorthLab;
int gv_secondaryObjectiveDestroyHybridNorthLabMarker;
int gv_secondaryObjectiveDestroyHybridSouthLab;
int gv_secondaryObjectiveDestroyHybridSouthLabMarker;
void InitGlobals () {
    int init_i;
    int init_j;
    gv_enemyGroup = PlayerGroupEmpty();
    gv_amonWarpOutSOUTHRegion = RegionCircle(UnitGetPosition(UnitFromId(391449148)), 4.0);
    gv_amonWarpOutCENTERRegion = RegionCircle(UnitGetPosition(UnitFromId(545534090)), 4.0);
    gv_protossWarpOutWESTRegion = RegionCircle(PointFromId(1694124573), 4.0);
    gv_protossWarpOutEASTRegion = RegionCircle(PointFromId(1043159015), 4.0);
    for (init_i = 0; init_i <= 4; init_i += 1) {
        gv_enemyBaseUnitGroups[init_i] = UnitGroupEmpty();
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        for (init_j = 0; init_j <= 3; init_j += 1) {
            gv_enemyBaseFriendlyGroups[init_i][init_j] = UnitGroupEmpty();
        }
    }
    gv_vICTORY_REQUIREMENT = UnitFilter((1 << c_targetFilterStructure) | (1 << c_targetFilterPreventDefeat), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)));
    for (init_i = 0; init_i <= gv_tOTAL_MARKERS; init_i += 1) {
        gv_objectiveMarkers[init_i] = c_invalidPingId;
    }
    for (init_i = 0; init_i <= gv_tOTAL_MARKERS; init_i += 1) {
        gv_secondaryObjectiveMarkers[init_i] = c_invalidPingId;
    }
    gv_remainingPortalCount = 4;
    gv_remainingProtossStructureCount = 4;
    gv_defenseSquad = UnitGroupEmpty();
    gv_offenseWaves = UnitGroupEmpty();
    gv_hybridSpawnTimerWindow = c_timerWindowNone;
    gv_hybridSpawnTime = 420.0;
    for (init_i = 0; init_i <= gv_mAX_HYBRIDS; init_i += 1) {
        gv_hybridMarkers[init_i] = c_invalidPingId;
    }
    gv_objectiveDestroyTheHybridWarpGates = c_invalidObjectiveId;
    gv_objectiveDefendProtossAlly = c_invalidObjectiveId;
    gv_secondaryObjectiveCaptureWestWarpZone = c_invalidObjectiveId;
    gv_secondaryObjectiveCaptureWestWarpZoneMarker = c_invalidPingId;
    gv_secondaryObjectiveCaptureEastWarpZone = c_invalidObjectiveId;
    gv_secondaryObjectiveCaptureEastWarpZoneMarker = c_invalidPingId;
    gv_secondaryObjectiveCaptureSouthWarpZone = c_invalidObjectiveId;
    gv_secondaryObjectiveCaptureSouthWarpZoneMarker = c_invalidPingId;
    gv_secondaryObjectiveCaptureCenterWarpZone = c_invalidObjectiveId;
    gv_secondaryObjectiveCaptureCenterWarpZoneMarker = c_invalidPingId;
    gv_secondaryObjectiveDestroyHybridNorthLab = c_invalidObjectiveId;
    gv_secondaryObjectiveDestroyHybridNorthLabMarker = c_invalidPingId;
    gv_secondaryObjectiveDestroyHybridSouthLab = c_invalidObjectiveId;
    gv_secondaryObjectiveDestroyHybridSouthLabMarker = c_invalidPingId;
}
//--------------------------------------------------------------------------------------------------
// Global Function Declarations
//--------------------------------------------------------------------------------------------------
void gf_RunMissionEvent (trigger lp_missionEventTrigger, fixed lp_missionEventTime);
void gf_ScaleBulliestoDifficulty ();
void gf_ScaleVoidRiftstoDifficulty ();
void gf_ResetEnemyBaseGroups (int lp_warpZone, region lp_enemyBase);
void gf_RemovefromEnemyBaseFriendlyGroups (unit lp_unit, int lp_warpZone);
bool gf_CheckifPlayersareinRegion (int lp_warpZone);
void gf_WarpUnit (int lp_player, region lp_region, unit lp_unit);
void gf_ActivateWarpZone (int lp_portal);
void gf_DeactivateWarpZone (int lp_warpZone);
point gf_PositionofWarpZone (int lp_warpZone);
void gf_CreateWarpInPad (int lp_warpInPoint);
void gf_CreateWarpOutPad (int lp_warpZonePoint, bool lp_active);
void gf_RunWarpInAnimationonUnit (unit lp_unit);
void gf_RunWarpOutAnimationonUnit (unit lp_unit);
void gf_RunWarpInAnimationatPosition (point lp_position);
void gf_PhaseSmithWarpIn (int lp_warpInZone);
void gf_PhaseSmithWarpOut (int lp_warpInZone);
void gf_PhaseSmithRepair (int lp_warpInZone);
void gf_PhaseSmithMove (int lp_warpInZone);
void gf_IssueWarpedUnitQueuedOrder (int lp_unitPathingIndex, int lp_player, unit lp_unit);
int gf_FindUnitPathingIndex (int lp_player, int lp_pathingQueueSize, unit lp_unit);
int gf_FindFirstEmptyUnitPathingElement (int lp_player, int lp_pathingQueueSize);
void gf_QueueUnitPathing (int lp_player, unit lp_unit, int lp_unitPathingIndex, abilcmd lp_command, point lp_orderTargetPoint);
void gf_DeletePathingUnit (int lp_player, int lp_unitIndex);
point gf_FindClosestPortalPoint (unit lp_unit);
void gf_StopFollowingUnits (unit lp_warpedUnit);
void gf_ClearObjectiveMarkers (bool lp_primary);
void gf_ApplyDifficultyBufftoUnits (unitgroup lp_unitGroup);
void gf_QueueTransmission (soundlink lp_transmissionSound, transmissionsource lp_portraitModel);
void gf_QueueMissionTransmission (string lp_transmissionSound);
void gf_QueueSound (soundlink lp_transmissionSound);
bool gf_BaseContainsLastVoidRift (unit lp_deadUnit);
void gf_TransmissionEnemyBaseDestroyed (region lp_baseRegion);
void gf_ApplyBaseDestroyedDebuff ();
point gf_AttackWaveSpawn ();
void gf_SpawnDefenseSquad (region lp_spawnRegion, region lp_protossBase);
void gf_OrderDefenseSquad (unitgroup lp_defenseSquad, point lp_gatherPoint);
void gf_SpawnOffenseSquad (region lp_spawnRegion);
void gf_OrderOffenseSquad (unitgroup lp_attackSquad, point lp_gatherPoint);
int gf_FindAvailableHybridIndex ();
int gf_FindIndexofHybrid (unit lp_hybridUnit);
void gf_GenerateVoidFog ();
unit gf_FindNearestStructure ();
void gf_InitiateHybridAssault (unit lp_hybridUnit);
void gf_HybridAnnihilatorAbilities (unit lp_hybridUnit);
void gf_HybridAnnihilatorPsionicShadowBlast (unit lp_hybrid);
void gf_SetHybridDifficulty (unit lp_hybrid);
void gf_RunAttackWaveatMissionTime (trigger lp_attackWave, fixed lp_time);
//--------------------------------------------------------------------------------------------------
// Trigger Variables
//--------------------------------------------------------------------------------------------------
trigger gt_Init01LoadData;
trigger gt_Init02Players;
trigger gt_Init03LoadingComplete;
trigger gt_Init04Technology;
trigger gt_Init05Units;
trigger gt_Init06MusicSound;
trigger gt_Init07Environment;
trigger gt_Init08Difficulties;
trigger gt_Init09Tips;
trigger gt_StartGameQ;
trigger gt_HelpTipDestroyBasetoCapWZ;
trigger gt_HelpTipPathableAfterWZCaptured;
trigger gt_EnemyBaseMonitor;
trigger gt_MonitorWestWarpZoneBase;
trigger gt_MonitorEastWarpZoneBase;
trigger gt_MonitorSouthWarpZoneBase;
trigger gt_MonitorCenterWarpZoneBase;
trigger gt_UnitEntersWarpZone;
trigger gt_UnitCreatedInWarpZone;
trigger gt_PhaseSmithAction;
trigger gt_PhaseSmithAttacked;
trigger gt_UnitLeavesWarpZoneBaseWEST;
trigger gt_UnitLeavesWarpZoneBaseEAST;
trigger gt_UnitLeavesWarpZoneBaseSOUTH;
trigger gt_UnitLeavesWarpZoneBaseCENTER;
trigger gt_MultiWorldPathing;
trigger gt_ClearUnitPathing;
trigger gt_ShowandUpdatePrimaryObjectiveMarkers;
trigger gt_ShowandUpdateSecondaryObjectiveMarkers;
trigger gt_UpdatePortalCount;
trigger gt_UpdateProtossStructureCount;
trigger gt_HybridLabDies;
trigger gt_EnemyAttackingQ;
trigger gt_TransmissionAnotherWarpZoneDiscovered;
trigger gt_TransmissionBothCommandersRequiredtoCapWZ;
trigger gt_TransmissionVoidRiftWarpZoneDiscovered;
trigger gt_TransmissionFinalEnemyBaseStarted;
trigger gt_TransmissionFinalVoidRiftOnline;
trigger gt_TransmissionFirstHybridLabOnline;
trigger gt_TransmissionFirstVoidRiftDetected;
trigger gt_TransmissionFirstWarpZoneDiscovered;
trigger gt_TransmissionHybridProgress;
trigger gt_TransmissionHybridProgressFinal;
trigger gt_TransmissionHybridSpawned;
trigger gt_TransmissionMoreVoidRiftsOnline;
trigger gt_TransmissionPrimaryObjectiveCreated;
trigger gt_TransmissionProtossWarpZoneDisabled;
trigger gt_TransmissionSecondHybridLabOnline;
trigger gt_TransmissionShadowCloudDamage;
trigger gt_TransmissionShadowCloudProgress;
trigger gt_TransmissionWarpZoneCaptured;
trigger gt_TransmissionWarpZoneSupportRequired;
trigger gt_SoundsHybridProgression;
trigger gt_DefeatPrimaryObjectiveFailed;
trigger gt_VictoryPrimaryObjectiveComplete;
trigger gt_VictorySequence;
trigger gt_VictoryFanfareQ;
trigger gt_Victory;
trigger gt_Defeat;
trigger gt_StartAI;
trigger gt_AIBaseDestroyed;
trigger gt_SetupAttackWaveSpawn;
trigger gt_AIAttackWaves;
trigger gt_AttackWave01;
trigger gt_AttackWave02;
trigger gt_AttackWave03;
trigger gt_AttackWave04;
trigger gt_AttackWave05;
trigger gt_AttackWave06;
trigger gt_AttackWave07;
trigger gt_SpawnDefenseWave_Periodic;
trigger gt_TriggerFirstWave;
trigger gt_SpawnOffenseWave_Periodic;
trigger gt_MonitorHybridPosition;
trigger gt_StartHybridSpawnTimer;
trigger gt_GenerateVoidFog_LeftRegion;
trigger gt_OrderShadowUnit_Periodic;
trigger gt_SpawnHybrid;
trigger gt_HybridDies;
trigger gt_HybridShadowBlastExpires;
trigger gt_HybridShadowBlastPeriodicBehavior;
trigger gt_ObjectiveDestroyTheHybridWarpGatesCreate;
trigger gt_ObjectiveDestroyTheHybridWarpGatesComplete;
trigger gt_ObjectiveDestroyTheHybridWarpGatesUpdate;
trigger gt_ObjectiveDestroyTheHybridWarpGatesFailed;
trigger gt_ObjectiveDefendProtossAllyCreate;
trigger gt_ObjectiveDefendProtossAllyComplete;
trigger gt_ObjectiveDefendProtossAllyUpdate;
trigger gt_ObjectiveDefendProtossAllyFailed;
trigger gt_SecondaryObjectiveCaptureWestWarpZoneCreate;
trigger gt_SecondaryObjectiveCaptureWestWarpZoneComplete;
trigger gt_SecondaryObjectiveCaptureWestWarpZoneUpdate;
trigger gt_SecondaryObjectiveCaptureWestWarpZoneFailed;
trigger gt_SecondaryObjectiveCaptureEastWarpZoneCreate;
trigger gt_SecondaryObjectiveCaptureEastWarpZoneComplete;
trigger gt_SecondaryObjectiveCaptureEastWarpZoneUpdate;
trigger gt_SecondaryObjectiveCaptureEastWarpZoneFailed;
trigger gt_SecondaryObjectiveCaptureSouthWarpZoneCreate;
trigger gt_SecondaryObjectiveCaptureSouthWarpZoneComplete;
trigger gt_SecondaryObjectiveCaptureSouthWarpZoneUpdate;
trigger gt_SecondaryObjectiveCaptureSouthWarpZoneFailed;
trigger gt_SecondaryObjectiveCaptureCenterWarpZoneCreate;
trigger gt_SecondaryObjectiveCaptureCenterWarpZoneComplete;
trigger gt_SecondaryObjectiveCaptureCenterWarpZoneUpdate;
trigger gt_SecondaryObjectiveCaptureCenterWarpZoneFailed;
trigger gt_SecondaryObjectiveDestroyHybridNorthLabCreate;
trigger gt_SecondaryObjectiveDestroyHybridNorthLabComplete;
trigger gt_SecondaryObjectiveDestroyHybridNorthLabUpdate;
trigger gt_SecondaryObjectiveDestroyHybridNorthLabFailed;
trigger gt_SecondaryObjectiveDestroyHybridSouthLabCreate;
trigger gt_SecondaryObjectiveDestroyHybridSouthLabComplete;
trigger gt_SecondaryObjectiveDestroyHybridSouthLabUpdate;
trigger gt_SecondaryObjectiveDestroyHybridSouthLabFailed;
//--------------------------------------------------------------------------------------------------
// Custom AI Functions
//--------------------------------------------------------------------------------------------------
string[17] cai_playerAI;
//--------------------------------------------------------------------------------------------------
void InitCustomAI () {
    int init_i;
    for (init_i = 0; init_i <= 16; init_i += 1) {
        cai_playerAI[init_i] = null;
    }
}
//--------------------------------------------------------------------------------------------------
void cai_start (string ai, int p) {
    if (p < 0 || p >= 16) {
        return;
    }
    cai_playerAI[p] = ai;
    if (cai_playerAI[p] == "aiF917F4D7") { aiF917F4D7_start(p); }
}
//--------------------------------------------------------------------------------------------------
void cai_setDefGather (int p, point val) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "aiF917F4D7") { aiF917F4D7_setDefGather(p, val); }
}
//--------------------------------------------------------------------------------------------------
string cai_getCustomData (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "aiF917F4D7") { return aiF917F4D7_getCustomData(p); }
    return null;
}
//--------------------------------------------------------------------------------------------------
wave cai_getLastWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "aiF917F4D7") { return aiF917F4D7_getLastWave(p); }
    return null;
}
//--------------------------------------------------------------------------------------------------
void cai_waves_run (int p, playergroup target) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "aiF917F4D7") { aiF917F4D7_waves_run(p, target); }
}
//--------------------------------------------------------------------------------------------------
void cai_waves_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "aiF917F4D7") { aiF917F4D7_waves_enable(p, val); }
}
//--------------------------------------------------------------------------------------------------
void cai_waves_stop (string ai) {
    if (ai == "aiF917F4D7") { aiF917F4D7_waves_stop(); }
}
//--------------------------------------------------------------------------------------------------
void cai_wave_run (int w, int p, playergroup target, bool wait) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "aiF917F4D7") { aiF917F4D7_wave_run(w, p, target, wait); }
}
//--------------------------------------------------------------------------------------------------
void cai_wave_enable (int w, int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "aiF917F4D7") { aiF917F4D7_wave_enable(w, p, val); }
}
//--------------------------------------------------------------------------------------------------
bool cai_wave_isEnabled (int w, int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    if (cai_playerAI[p] == "aiF917F4D7") { return aiF917F4D7_wave_isEnabled(w, p); }
    return false;
}
//--------------------------------------------------------------------------------------------------
unitgroup cai_wave_createdUnits (int w, int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "aiF917F4D7") { return aiF917F4D7_wave_createdUnits(w, p); }
    return null;
}
//--------------------------------------------------------------------------------------------------
wave cai_wave_createdWave (int w, int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "aiF917F4D7") { return aiF917F4D7_wave_createdWave(w, p); }
    return null;
}
//--------------------------------------------------------------------------------------------------
void cai_startall () {
    AICampaignStart(3);
    AICampaignStart(4);
    AICampaignStart(5);
    AICampaignStart(6);
    AICampaignStart(7);
}
//--------------------------------------------------------------------------------------------------
void cai_runall () {
    playergroup target = PlayerGroupEmpty();
}
//--------------------------------------------------------------------------------------------------
// Global Functions
//--------------------------------------------------------------------------------------------------
trigger auto_gf_RunMissionEvent_Trigger = null;
trigger auto_gf_RunMissionEvent_lp_missionEventTrigger;
fixed auto_gf_RunMissionEvent_lp_missionEventTime;
void gf_RunMissionEvent (trigger lp_missionEventTrigger, fixed lp_missionEventTime) {
    auto_gf_RunMissionEvent_lp_missionEventTrigger = lp_missionEventTrigger;
    auto_gf_RunMissionEvent_lp_missionEventTime = lp_missionEventTime;
    if (auto_gf_RunMissionEvent_Trigger == null) {
        auto_gf_RunMissionEvent_Trigger = TriggerCreate("auto_gf_RunMissionEvent_TriggerFunc");
    }
    TriggerExecute(auto_gf_RunMissionEvent_Trigger, false, false);
}
bool auto_gf_RunMissionEvent_TriggerFunc (bool testConds, bool runActions) {
    trigger lp_missionEventTrigger = auto_gf_RunMissionEvent_lp_missionEventTrigger;
    fixed lp_missionEventTime = auto_gf_RunMissionEvent_lp_missionEventTime;
    // Implementation
    while (!((GameGetMissionTime() >= lp_missionEventTime))) {
        Wait(0.5, c_timeAI);
    }
    if ((libCOMI_gf_GameIsOver() == false)) {
        TriggerExecute(lp_missionEventTrigger, true, false);
    }
    return true;
}
void gf_ScaleBulliestoDifficulty () {
    int autoCB35B889_val;
    int autoBDBC6444_ae;
    int autoBDBC6444_ai;
    int autoDDF82281_ae;
    int autoDDF82281_ai;
    // Variable Declarations
    unitgroup lv_deleteGroup;
    fixed lv_unitsToDeleteMultiple;
    int lv_unitsToDelete;
    int lv_baseIterator;
    int lv_groupIterator;
    // Variable Initialization
    lv_deleteGroup = UnitGroupEmpty();
    // Implementation
    autoCB35B889_val = gv_player_Difficulty_Modifier[gv_pLAYER_01_USER];
    if (autoCB35B889_val == 0) {
        lv_unitsToDeleteMultiple = 0.35;
    }
    else if (autoCB35B889_val == 1) {
        lv_unitsToDeleteMultiple = 0.25;
    }
    else if (autoCB35B889_val == 2) {
        lv_unitsToDeleteMultiple = 0.15;
    }
    else if (autoCB35B889_val == 3) {
        lv_unitsToDeleteMultiple = 0.05;
    }
    else {
    }
    autoBDBC6444_ae = 8;
    autoBDBC6444_ai = 1;
    lv_baseIterator = 1;
    for ( ; ( (autoBDBC6444_ai >= 0 && lv_baseIterator <= autoBDBC6444_ae) || (autoBDBC6444_ai <= 0 && lv_baseIterator >= autoBDBC6444_ae) ) ; lv_baseIterator += autoBDBC6444_ai ) {
        UnitGroupClear(lv_deleteGroup);
        UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionFromName(("EnemyBase " + IntToString(lv_baseIterator))), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterHeroic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if ((UnitGetType(UnitGroupLoopCurrent()) != "ShadowCloud") && ((UnitGetOwner(UnitGroupLoopCurrent()) == gv_pLAYER_03_ENEMY) || (UnitGetOwner(UnitGroupLoopCurrent()) == gv_pLAYER_04_ENEMY))) {
                UnitGroupAdd(lv_deleteGroup, UnitGroupLoopCurrent());
            }
        }
        UnitGroupLoopEnd();
        lv_unitsToDelete = FixedToInt((UnitGroupCount(lv_deleteGroup, c_unitCountAlive) * lv_unitsToDeleteMultiple));
        autoDDF82281_ae = lv_unitsToDelete;
        autoDDF82281_ai = 1;
        lv_groupIterator = 1;
        for ( ; ( (autoDDF82281_ai >= 0 && lv_groupIterator <= autoDDF82281_ae) || (autoDDF82281_ai <= 0 && lv_groupIterator >= autoDDF82281_ae) ) ; lv_groupIterator += autoDDF82281_ai ) {
            UnitRemove(UnitGroupRandomUnit(lv_deleteGroup, c_unitCountAlive));
        }
    }
}
void gf_ScaleVoidRiftstoDifficulty () {
    int auto97BC6F80_val;
    // Variable Declarations
    unitgroup lv_voidRifts;
    fixed lv_lifeScaleMultiple;
    // Variable Initialization
    lv_voidRifts = UnitGroupEmpty();
    // Implementation
    auto97BC6F80_val = gv_player_Difficulty_Modifier[gv_pLAYER_01_USER];
    if (auto97BC6F80_val == 0) {
        lv_lifeScaleMultiple = 0.6;
    }
    else if (auto97BC6F80_val == 1) {
        lv_lifeScaleMultiple = 0.7;
    }
    else if (auto97BC6F80_val == 2) {
        lv_lifeScaleMultiple = 0.85;
    }
    else if (auto97BC6F80_val == 3) {
        lv_lifeScaleMultiple = 1.0;
    }
    else {
    }
    UnitGroupClear(lv_voidRifts);
    UnitGroupAdd(lv_voidRifts, UnitFromId(735209505));
    UnitGroupAdd(lv_voidRifts, UnitFromId(391449148));
    UnitGroupAdd(lv_voidRifts, UnitFromId(545534090));
    UnitGroupAdd(lv_voidRifts, UnitFromId(913511382));
    UnitGroupLoopBegin(lv_voidRifts);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropLifeMax, (4700.0 * lv_lifeScaleMultiple));
        UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropLifePercent, 100.0);
    }
    UnitGroupLoopEnd();
}
trigger auto_gf_ResetEnemyBaseGroups_Trigger = null;
int auto_gf_ResetEnemyBaseGroups_lp_warpZone;
region auto_gf_ResetEnemyBaseGroups_lp_enemyBase;
void gf_ResetEnemyBaseGroups (int lp_warpZone, region lp_enemyBase) {
    auto_gf_ResetEnemyBaseGroups_lp_warpZone = lp_warpZone;
    auto_gf_ResetEnemyBaseGroups_lp_enemyBase = lp_enemyBase;
    if (auto_gf_ResetEnemyBaseGroups_Trigger == null) {
        auto_gf_ResetEnemyBaseGroups_Trigger = TriggerCreate("auto_gf_ResetEnemyBaseGroups_TriggerFunc");
    }
    TriggerExecute(auto_gf_ResetEnemyBaseGroups_Trigger, false, false);
}
bool auto_gf_ResetEnemyBaseGroups_TriggerFunc (bool testConds, bool runActions) {
    int lp_warpZone = auto_gf_ResetEnemyBaseGroups_lp_warpZone;
    region lp_enemyBase = auto_gf_ResetEnemyBaseGroups_lp_enemyBase;
    // Implementation
    UnitGroupClear(gv_enemyBaseUnitGroups[lp_warpZone]);
    UnitGroupClear(gv_enemyBaseFriendlyGroups[lp_warpZone][gv_pLAYER_01_USER]);
    UnitGroupClear(gv_enemyBaseFriendlyGroups[lp_warpZone][gv_pLAYER_02_USER]);
    UnitGroupLoopBegin(UnitGroupAlliance(gv_pLAYER_01_USER, c_unitAllianceAny, lp_enemyBase, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if (((UnitGetOwner(UnitGroupLoopCurrent()) == gv_pLAYER_03_ENEMY) || (UnitGetOwner(UnitGroupLoopCurrent()) == gv_pLAYER_04_ENEMY)) && (UnitGetType(UnitGroupLoopCurrent()) != "Observer") && (UnitGetType(UnitGroupLoopCurrent()) != "CreepTumor") && (UnitGetType(UnitGroupLoopCurrent()) != "CreepTumorBurrowed") && (UnitGetType(UnitGroupLoopCurrent()) != "CreepTumorQueen") && (UnitGetType(UnitGroupLoopCurrent()) != "SOAPylonPowerUnit") && (UnitGetType(UnitGroupLoopCurrent()) != "SOAPylonPowerAllyUnit")) {
            UnitGroupAdd(gv_enemyBaseUnitGroups[lp_warpZone], UnitGroupLoopCurrent());
        }
        if ((UnitGetOwner(UnitGroupLoopCurrent()) == gv_pLAYER_01_USER) && (UnitGetType(UnitGroupLoopCurrent()) != "Observer") && (UnitGetType(UnitGroupLoopCurrent()) != "CreepTumor") && (UnitGetType(UnitGroupLoopCurrent()) != "CreepTumorBurrowed") && (UnitGetType(UnitGroupLoopCurrent()) != "CreepTumorQueen") && (UnitGetType(UnitGroupLoopCurrent()) != "SOAPylonPowerUnit") && (UnitGetType(UnitGroupLoopCurrent()) != "SOAPylonPowerAllyUnit")) {
            UnitGroupAdd(gv_enemyBaseFriendlyGroups[lp_warpZone][gv_pLAYER_01_USER], UnitGroupLoopCurrent());
        }
        if ((UnitGetOwner(UnitGroupLoopCurrent()) == gv_pLAYER_02_USER) && (UnitGetType(UnitGroupLoopCurrent()) != "Observer") && (UnitGetType(UnitGroupLoopCurrent()) != "CreepTumor") && (UnitGetType(UnitGroupLoopCurrent()) != "CreepTumorBurrowed") && (UnitGetType(UnitGroupLoopCurrent()) != "CreepTumorQueen") && (UnitGetType(UnitGroupLoopCurrent()) != "SOAPylonPowerUnit") && (UnitGetType(UnitGroupLoopCurrent()) != "SOAPylonPowerAllyUnit")) {
            UnitGroupAdd(gv_enemyBaseFriendlyGroups[lp_warpZone][gv_pLAYER_02_USER], UnitGroupLoopCurrent());
        }
    }
    UnitGroupLoopEnd();
    return true;
}
void gf_RemovefromEnemyBaseFriendlyGroups (unit lp_unit, int lp_warpZone) {
    // Implementation
    if (((UnitGetOwner(lp_unit) == gv_pLAYER_01_USER) || (UnitGetOwner(lp_unit) == gv_pLAYER_02_USER))) {
        UnitGroupRemove(gv_enemyBaseFriendlyGroups[lp_warpZone][UnitGetOwner(lp_unit)], lp_unit);
    }
}
bool gf_CheckifPlayersareinRegion (int lp_warpZone) {
    // Implementation
    if ((UnitGroupCount(gv_enemyBaseFriendlyGroups[lp_warpZone][gv_pLAYER_01_USER], c_unitCountAlive) >= 1) && (UnitGroupCount(gv_enemyBaseFriendlyGroups[lp_warpZone][gv_pLAYER_02_USER], c_unitCountAlive) >= 1)) {
        return true;
    }
    else {
        if (((UnitGroupCount(gv_enemyBaseFriendlyGroups[lp_warpZone][gv_pLAYER_01_USER], c_unitCountAlive) >= 1) || (UnitGroupCount(gv_enemyBaseFriendlyGroups[lp_warpZone][gv_pLAYER_02_USER], c_unitCountAlive) >= 1)) && (((PlayerType(gv_pLAYER_01_USER) != c_playerTypeUser) && (PlayerType(gv_pLAYER_02_USER) == c_playerTypeUser) && (PlayerStatus(gv_pLAYER_02_USER) == c_playerStatusActive)) || ((PlayerType(gv_pLAYER_01_USER) == c_playerTypeUser) && (PlayerStatus(gv_pLAYER_01_USER) == c_playerStatusActive) && (PlayerType(gv_pLAYER_02_USER) != c_playerTypeUser)))) {
            return true;
        }
        else {
            return false;
        }
    }
}
trigger auto_gf_WarpUnit_Trigger = null;
int auto_gf_WarpUnit_lp_player;
region auto_gf_WarpUnit_lp_region;
unit auto_gf_WarpUnit_lp_unit;
void gf_WarpUnit (int lp_player, region lp_region, unit lp_unit) {
    auto_gf_WarpUnit_lp_player = lp_player;
    auto_gf_WarpUnit_lp_region = lp_region;
    auto_gf_WarpUnit_lp_unit = lp_unit;
    if (auto_gf_WarpUnit_Trigger == null) {
        auto_gf_WarpUnit_Trigger = TriggerCreate("auto_gf_WarpUnit_TriggerFunc");
    }
    TriggerExecute(auto_gf_WarpUnit_Trigger, false, false);
}
bool auto_gf_WarpUnit_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_gf_WarpUnit_lp_player;
    region lp_region = auto_gf_WarpUnit_lp_region;
    unit lp_unit = auto_gf_WarpUnit_lp_unit;
    // Implementation
    if ((((lp_region == RegionFromId(15)) && (gv_warpZonesActive[gv_aMONWARPOUTWEST] == true)) || ((lp_region == RegionFromId(16)) && (gv_warpZonesActive[gv_aMONWARPOUTEAST] == true)) || ((lp_region == gv_amonWarpOutCENTERRegion) && (gv_warpZonesActive[gv_aMONWARPOUTCENTER] == true)) || ((lp_region == gv_amonWarpOutSOUTHRegion) && (gv_warpZonesActive[gv_aMONWARPOUTSOUTH] == true)))) {
        gf_RunWarpOutAnimationonUnit(lp_unit);
        if ((gv_warpZonesActive[gv_pROTOSSWARPOUTEAST] == true)) {
            UnitSetPosition(lp_unit, gv_warpInPoints[gv_pROTOSSWORLDWARPINEAST][RandomInt(0, 8)], false);
        }
        else {
            UnitSetPosition(lp_unit, gv_warpInPoints[gv_pROTOSSWORLDWARPINWEST][RandomInt(0, 8)], false);
        }
        gf_RunWarpInAnimationonUnit(lp_unit);
        gf_IssueWarpedUnitQueuedOrder(gf_FindUnitPathingIndex(lp_player, gv_pATHINGSIZE, lp_unit), lp_player, lp_unit);
        gf_StopFollowingUnits(lp_unit);
    }
    else {
        if ((gv_warpZonesActive[gv_aMONWARPOUTWEST] == true) && (((lp_region == gv_protossWarpOutEASTRegion) && (gv_warpZonesActive[gv_pROTOSSWARPOUTEAST] == true)) || ((lp_region == gv_protossWarpOutWESTRegion) && (gv_warpZonesActive[gv_pROTOSSWARPOUTWEST] == true)))) {
            gf_RunWarpOutAnimationonUnit(lp_unit);
            UnitSetPosition(lp_unit, gv_warpInPoints[gv_aMONWORLDWARPIN][RandomInt(0, 8)], false);
            gf_RunWarpInAnimationonUnit(lp_unit);
            gf_IssueWarpedUnitQueuedOrder(gf_FindUnitPathingIndex(lp_player, gv_pATHINGSIZE, lp_unit), lp_player, lp_unit);
            gf_StopFollowingUnits(lp_unit);
        }
        else {
            if ((gv_warpZonesActive[gv_aMONWARPOUTWEST] == true)) {
                TriggerExecute(gt_SecondaryObjectiveCaptureWestWarpZoneCreate, true, false);
            }
            else if ((gv_warpZonesActive[gv_aMONWARPOUTEAST] == true)) {
                TriggerExecute(gt_SecondaryObjectiveCaptureEastWarpZoneCreate, true, false);
            }
        }
    }
    return true;
}
trigger auto_gf_ActivateWarpZone_Trigger = null;
int auto_gf_ActivateWarpZone_lp_portal;
void gf_ActivateWarpZone (int lp_portal) {
    auto_gf_ActivateWarpZone_lp_portal = lp_portal;
    if (auto_gf_ActivateWarpZone_Trigger == null) {
        auto_gf_ActivateWarpZone_Trigger = TriggerCreate("auto_gf_ActivateWarpZone_TriggerFunc");
    }
    TriggerExecute(auto_gf_ActivateWarpZone_Trigger, false, false);
}
bool auto_gf_ActivateWarpZone_TriggerFunc (bool testConds, bool runActions) {
    int lp_portal = auto_gf_ActivateWarpZone_lp_portal;
    int auto2DACAB00_val;
    // Variable Declarations
    region lv_portalRegion;
    // Variable Initialization
    // Implementation
    if ((gv_warpZonesActive[lp_portal] == false)) {
        gv_warpZonesActive[lp_portal] = true;
        ActorScopeKill(gv_warpZoneScope[lp_portal]);
        libNtve_gf_CreateActorAtPoint("WarpOutPadActive", gf_PositionofWarpZone(lp_portal));
        gv_warpZone[lp_portal] = libNtve_gf_ActorLastCreated();
        gv_warpZoneScope[lp_portal] = ActorScopeFromActor(libNtve_gf_ActorLastCreated());
        if ((lp_portal == gv_aMONWARPOUTWEST)) {
            gf_CreateWarpInPad(gv_aMONWORLDWARPIN);
            lv_portalRegion = RegionFromId(15);
            PlayerGroupLoopBegin(libCOMI_gf_HumanPlayers());
            for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                UnitGroupLoopBegin(UnitGroup(null, PlayerGroupLoopCurrent(), gv_protossWarpOutWESTRegion, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    if (((UnitGetType(UnitGroupLoopCurrent()) != "SOAPylonPowerUnit") && (UnitGetType(UnitGroupLoopCurrent()) != "SOAPylonPowerAllyUnit"))) {
                        gf_WarpUnit((PlayerGroupLoopCurrent() - 1), gv_protossWarpOutWESTRegion, UnitGroupLoopCurrent());
                    }
                }
                UnitGroupLoopEnd();
            }
            PlayerGroupLoopEnd();
            PlayerGroupLoopBegin(libCOMI_gf_HumanPlayers());
            for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                UnitGroupLoopBegin(UnitGroup(null, PlayerGroupLoopCurrent(), gv_protossWarpOutEASTRegion, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    if (((UnitGetType(UnitGroupLoopCurrent()) != "SOAPylonPowerUnit") && (UnitGetType(UnitGroupLoopCurrent()) != "SOAPylonPowerAllyUnit"))) {
                        gf_WarpUnit((PlayerGroupLoopCurrent() - 1), gv_protossWarpOutEASTRegion, UnitGroupLoopCurrent());
                    }
                }
                UnitGroupLoopEnd();
            }
            PlayerGroupLoopEnd();
        }
        else {
            auto2DACAB00_val = lp_portal;
            if (auto2DACAB00_val == gv_aMONWARPOUTEAST) {
                lv_portalRegion = RegionFromId(16);
            }
            else if (auto2DACAB00_val == gv_aMONWARPOUTSOUTH) {
                lv_portalRegion = gv_amonWarpOutSOUTHRegion;
            }
            else if (auto2DACAB00_val == gv_aMONWARPOUTCENTER) {
                lv_portalRegion = gv_amonWarpOutCENTERRegion;
            }
            else if (auto2DACAB00_val == gv_pROTOSSWARPOUTWEST) {
                lv_portalRegion = gv_protossWarpOutWESTRegion;
            }
            else if (auto2DACAB00_val == gv_pROTOSSWARPOUTEAST) {
                lv_portalRegion = gv_protossWarpOutEASTRegion;
            }
            else {
            }
        }
        VisRevealArea(gv_pLAYER_01_USER, RegionCircle(gf_PositionofWarpZone(lp_portal), 6.0), 0.0, false);
        VisRevealArea(gv_pLAYER_02_USER, RegionCircle(gf_PositionofWarpZone(lp_portal), 6.0), 0.0, false);
        PlayerGroupLoopBegin(libCOMI_gf_HumanPlayers());
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            UnitGroupLoopBegin(UnitGroup(null, PlayerGroupLoopCurrent(), lv_portalRegion, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                if (((UnitGetType(UnitGroupLoopCurrent()) != "SOAPylonPowerUnit") && (UnitGetType(UnitGroupLoopCurrent()) != "SOAPylonPowerAllyUnit"))) {
                    gf_WarpUnit((PlayerGroupLoopCurrent() - 1), lv_portalRegion, UnitGroupLoopCurrent());
                }
            }
            UnitGroupLoopEnd();
        }
        PlayerGroupLoopEnd();
    }
    return true;
}
void gf_DeactivateWarpZone (int lp_warpZone) {
    int auto27FAA2B3_val;
    // Implementation
    gv_warpZonesActive[lp_warpZone] = false;
    ActorScopeKill(gv_warpZoneScope[lp_warpZone]);
    auto27FAA2B3_val = lp_warpZone;
    if (auto27FAA2B3_val == gv_aMONWARPOUTWEST) {
        libNtve_gf_CreateActorAtPoint("WarpOutPadInactive", RegionGetCenter(RegionFromId(15)));
    }
    else if (auto27FAA2B3_val == gv_aMONWARPOUTEAST) {
        libNtve_gf_CreateActorAtPoint("WarpOutPadInactive", RegionGetCenter(RegionFromId(16)));
    }
    else if (auto27FAA2B3_val == gv_aMONWARPOUTSOUTH) {
        libNtve_gf_CreateActorAtPoint("WarpOutPadInactive", RegionGetCenter(gv_amonWarpOutSOUTHRegion));
    }
    else if (auto27FAA2B3_val == gv_aMONWARPOUTCENTER) {
        libNtve_gf_CreateActorAtPoint("WarpOutPadInactive", RegionGetCenter(gv_amonWarpOutCENTERRegion));
    }
    else if (auto27FAA2B3_val == gv_pROTOSSWARPOUTEAST) {
        libNtve_gf_CreateActorAtPoint("WarpOutPadInactive", PointFromId(1043159015));
    }
    else if (auto27FAA2B3_val == gv_pROTOSSWARPOUTWEST) {
        libNtve_gf_CreateActorAtPoint("WarpOutPadInactive", PointFromId(1694124573));
    }
    else {
    }
    gv_warpZone[lp_warpZone] = libNtve_gf_ActorLastCreated();
    gv_warpZoneScope[lp_warpZone] = ActorScopeFromActor(libNtve_gf_ActorLastCreated());
}
point gf_PositionofWarpZone (int lp_warpZone) {
    int autoB846F1ED_val;
    // Implementation
    autoB846F1ED_val = lp_warpZone;
    if (autoB846F1ED_val == gv_aMONWARPOUTWEST) {
        return RegionGetCenter(RegionFromId(15));
    }
    else if (autoB846F1ED_val == gv_aMONWARPOUTEAST) {
        return RegionGetCenter(RegionFromId(16));
    }
    else if (autoB846F1ED_val == gv_aMONWARPOUTCENTER) {
        return RegionGetCenter(gv_amonWarpOutCENTERRegion);
    }
    else if (autoB846F1ED_val == gv_aMONWARPOUTSOUTH) {
        return RegionGetCenter(gv_amonWarpOutSOUTHRegion);
    }
    else if (autoB846F1ED_val == gv_pROTOSSWARPOUTWEST) {
        return RegionGetCenter(gv_protossWarpOutWESTRegion);
    }
    else if (autoB846F1ED_val == gv_pROTOSSWARPOUTEAST) {
        return RegionGetCenter(gv_protossWarpOutEASTRegion);
    }
    else {
        return RegionGetCenter(gv_protossWarpOutEASTRegion);
    }
}
void gf_CreateWarpInPad (int lp_warpInPoint) {
    int auto97757023_val;
    // Variable Declarations
    point lv_centerWarpInPoint;
    int lv_pointIterator;
    int lv_warpInPoints_WorldRef;
    point lv_currentPoint;
    // Variable Initialization
    // Implementation
    auto97757023_val = lp_warpInPoint;
    if (auto97757023_val == gv_aMONWORLDWARPIN) {
        lv_centerWarpInPoint = PointFromId(879699638);
        lv_warpInPoints_WorldRef = gv_aMONWORLDWARPIN;
    }
    else if (auto97757023_val == gv_pROTOSSWORLDWARPINWEST) {
        lv_centerWarpInPoint = PointFromId(1380120736);
        lv_warpInPoints_WorldRef = gv_pROTOSSWORLDWARPINWEST;
    }
    else if (auto97757023_val == gv_pROTOSSWORLDWARPINEAST) {
        lv_centerWarpInPoint = PointFromId(1790099199);
        lv_warpInPoints_WorldRef = gv_pROTOSSWORLDWARPINEAST;
    }
    else {
    }
    lv_currentPoint = lv_centerWarpInPoint;
    libNtve_gf_CreateActorAtPoint("WarpInPadLarge", lv_currentPoint);
    gf_RunWarpInAnimationatPosition(lv_currentPoint);
    gv_warpInPoints[lv_warpInPoints_WorldRef][lv_pointIterator] = lv_currentPoint;
    lv_pointIterator += 1;
    lv_currentPoint = PointWithOffset(lv_centerWarpInPoint, -1.6, 1.6);
    libNtve_gf_CreateActorAtPoint("WarpInPadMedium", lv_currentPoint);
    gf_RunWarpInAnimationatPosition(lv_currentPoint);
    gv_warpInPoints[lv_warpInPoints_WorldRef][lv_pointIterator] = lv_currentPoint;
    lv_pointIterator += 1;
    lv_currentPoint = PointWithOffset(lv_centerWarpInPoint, 1.6, 1.6);
    libNtve_gf_CreateActorAtPoint("WarpInPadMedium", lv_currentPoint);
    gf_RunWarpInAnimationatPosition(lv_currentPoint);
    gv_warpInPoints[lv_warpInPoints_WorldRef][lv_pointIterator] = lv_currentPoint;
    lv_pointIterator += 1;
    lv_currentPoint = PointWithOffset(lv_centerWarpInPoint, -1.6, -1.6);
    libNtve_gf_CreateActorAtPoint("WarpInPadMedium", lv_currentPoint);
    gf_RunWarpInAnimationatPosition(lv_currentPoint);
    gv_warpInPoints[lv_warpInPoints_WorldRef][lv_pointIterator] = lv_currentPoint;
    lv_pointIterator += 1;
    lv_currentPoint = PointWithOffset(lv_centerWarpInPoint, 1.6, -1.6);
    libNtve_gf_CreateActorAtPoint("WarpInPadMedium", lv_currentPoint);
    gf_RunWarpInAnimationatPosition(lv_currentPoint);
    gv_warpInPoints[lv_warpInPoints_WorldRef][lv_pointIterator] = lv_currentPoint;
    lv_pointIterator += 1;
    lv_currentPoint = PointWithOffset(lv_centerWarpInPoint, -2.2, 0.0);
    libNtve_gf_CreateActorAtPoint("WarpInPadSmall", lv_currentPoint);
    gf_RunWarpInAnimationatPosition(lv_currentPoint);
    gv_warpInPoints[lv_warpInPoints_WorldRef][lv_pointIterator] = lv_currentPoint;
    lv_pointIterator += 1;
    lv_currentPoint = PointWithOffset(lv_centerWarpInPoint, 2.2, 0.0);
    libNtve_gf_CreateActorAtPoint("WarpInPadSmall", lv_currentPoint);
    gf_RunWarpInAnimationatPosition(lv_currentPoint);
    gv_warpInPoints[lv_warpInPoints_WorldRef][lv_pointIterator] = lv_currentPoint;
    lv_pointIterator += 1;
    lv_currentPoint = PointWithOffset(lv_centerWarpInPoint, 0.0, -2.2);
    libNtve_gf_CreateActorAtPoint("WarpInPadSmall", lv_currentPoint);
    gf_RunWarpInAnimationatPosition(lv_currentPoint);
    gv_warpInPoints[lv_warpInPoints_WorldRef][lv_pointIterator] = lv_currentPoint;
    lv_pointIterator += 1;
    lv_currentPoint = PointWithOffset(lv_centerWarpInPoint, 0.0, 2.2);
    libNtve_gf_CreateActorAtPoint("WarpInPadSmall", lv_currentPoint);
    gf_RunWarpInAnimationatPosition(lv_currentPoint);
    gv_warpInPoints[lv_warpInPoints_WorldRef][lv_pointIterator] = lv_currentPoint;
}
void gf_CreateWarpOutPad (int lp_warpZonePoint, bool lp_active) {
    int auto81CEE401_val;
    // Variable Declarations
    point lv_warpZonePoint;
    int lv_warpInPoints_WorldRef;
    string lv_warpZoneType;
    // Variable Initialization
    // Implementation
    auto81CEE401_val = lp_warpZonePoint;
    if (auto81CEE401_val == gv_aMONWARPOUTWEST) {
        lv_warpZonePoint = RegionGetCenter(RegionFromId(15));
        lv_warpInPoints_WorldRef = gv_aMONWARPOUTWEST;
    }
    else if (auto81CEE401_val == gv_aMONWARPOUTEAST) {
        lv_warpZonePoint = RegionGetCenter(RegionFromId(16));
        lv_warpInPoints_WorldRef = gv_aMONWARPOUTEAST;
    }
    else if (auto81CEE401_val == gv_aMONWARPOUTSOUTH) {
        lv_warpZonePoint = RegionGetCenter(gv_amonWarpOutSOUTHRegion);
        lv_warpInPoints_WorldRef = gv_aMONWARPOUTSOUTH;
    }
    else if (auto81CEE401_val == gv_aMONWARPOUTCENTER) {
        lv_warpZonePoint = RegionGetCenter(gv_amonWarpOutCENTERRegion);
        lv_warpInPoints_WorldRef = gv_aMONWARPOUTCENTER;
    }
    else if (auto81CEE401_val == gv_pROTOSSWARPOUTWEST) {
        lv_warpZonePoint = PointFromId(1694124573);
        lv_warpInPoints_WorldRef = gv_pROTOSSWARPOUTWEST;
    }
    else if (auto81CEE401_val == gv_pROTOSSWARPOUTEAST) {
        lv_warpZonePoint = PointFromId(1043159015);
        lv_warpInPoints_WorldRef = gv_pROTOSSWARPOUTEAST;
    }
    else {
    }
    if ((lp_active == false)) {
        lv_warpZoneType = "WarpOutPadInactive";
    }
    else {
        lv_warpZoneType = "WarpOutPadActive";
    }
    libNtve_gf_CreateActorAtPoint(lv_warpZoneType, lv_warpZonePoint);
    gv_warpZone[lv_warpInPoints_WorldRef] = libNtve_gf_ActorLastCreated();
    gv_warpZoneScope[lv_warpInPoints_WorldRef] = ActorScopeFromActor(libNtve_gf_ActorLastCreated());
    gf_RunWarpInAnimationatPosition(lv_warpZonePoint);
}
trigger auto_gf_RunWarpInAnimationonUnit_Trigger = null;
unit auto_gf_RunWarpInAnimationonUnit_lp_unit;
void gf_RunWarpInAnimationonUnit (unit lp_unit) {
    auto_gf_RunWarpInAnimationonUnit_lp_unit = lp_unit;
    if (auto_gf_RunWarpInAnimationonUnit_Trigger == null) {
        auto_gf_RunWarpInAnimationonUnit_Trigger = TriggerCreate("auto_gf_RunWarpInAnimationonUnit_TriggerFunc");
    }
    TriggerExecute(auto_gf_RunWarpInAnimationonUnit_Trigger, false, false);
}
bool auto_gf_RunWarpInAnimationonUnit_TriggerFunc (bool testConds, bool runActions) {
    unit lp_unit = auto_gf_RunWarpInAnimationonUnit_lp_unit;
    // Variable Declarations
    actor lv_warpInModel;
    // Variable Initialization
    // Implementation
    libNtve_gf_CreateModelAtPoint("ZealotAiurWarpIn2", UnitGetPosition(lp_unit));
    lv_warpInModel = libNtve_gf_ActorLastCreated();
    Wait(1.0, c_timeGame);
    libNtve_gf_KillModel(lv_warpInModel);
    return true;
}
trigger auto_gf_RunWarpOutAnimationonUnit_Trigger = null;
unit auto_gf_RunWarpOutAnimationonUnit_lp_unit;
void gf_RunWarpOutAnimationonUnit (unit lp_unit) {
    auto_gf_RunWarpOutAnimationonUnit_lp_unit = lp_unit;
    if (auto_gf_RunWarpOutAnimationonUnit_Trigger == null) {
        auto_gf_RunWarpOutAnimationonUnit_Trigger = TriggerCreate("auto_gf_RunWarpOutAnimationonUnit_TriggerFunc");
    }
    TriggerExecute(auto_gf_RunWarpOutAnimationonUnit_Trigger, false, false);
}
bool auto_gf_RunWarpOutAnimationonUnit_TriggerFunc (bool testConds, bool runActions) {
    unit lp_unit = auto_gf_RunWarpOutAnimationonUnit_lp_unit;
    // Variable Declarations
    actor lv_warpInModel;
    // Variable Initialization
    // Implementation
    libNtve_gf_CreateModelAtPoint("ToshTeleportOutModel", UnitGetPosition(lp_unit));
    lv_warpInModel = libNtve_gf_ActorLastCreated();
    Wait(1.0, c_timeGame);
    libNtve_gf_KillModel(lv_warpInModel);
    return true;
}
trigger auto_gf_RunWarpInAnimationatPosition_Trigger = null;
point auto_gf_RunWarpInAnimationatPosition_lp_position;
void gf_RunWarpInAnimationatPosition (point lp_position) {
    auto_gf_RunWarpInAnimationatPosition_lp_position = lp_position;
    if (auto_gf_RunWarpInAnimationatPosition_Trigger == null) {
        auto_gf_RunWarpInAnimationatPosition_Trigger = TriggerCreate("auto_gf_RunWarpInAnimationatPosition_TriggerFunc");
    }
    TriggerExecute(auto_gf_RunWarpInAnimationatPosition_Trigger, false, false);
}
bool auto_gf_RunWarpInAnimationatPosition_TriggerFunc (bool testConds, bool runActions) {
    point lp_position = auto_gf_RunWarpInAnimationatPosition_lp_position;
    // Variable Declarations
    actor lv_warpInModel;
    // Variable Initialization
    // Implementation
    libNtve_gf_CreateModelAtPoint("ZealotAiurWarpIn2", lp_position);
    lv_warpInModel = libNtve_gf_ActorLastCreated();
    Wait(1.5, c_timeGame);
    libNtve_gf_KillModel(lv_warpInModel);
    return true;
}
void gf_PhaseSmithWarpIn (int lp_warpInZone) {
    int auto2FBB1010_val;
    // Variable Declarations
    region lv_warpInRegion;
    // Variable Initialization
    // Implementation
    if ((gv_phaseSmithWarpedIn == false)) {
        auto2FBB1010_val = lp_warpInZone;
        if (auto2FBB1010_val == gv_aMONWARPOUTWEST) {
            lv_warpInRegion = RegionFromId(15);
        }
        else if (auto2FBB1010_val == gv_aMONWARPOUTEAST) {
            lv_warpInRegion = RegionFromId(16);
        }
        else if (auto2FBB1010_val == gv_aMONWARPOUTCENTER) {
            lv_warpInRegion = gv_amonWarpOutCENTERRegion;
        }
        else if (auto2FBB1010_val == gv_aMONWARPOUTSOUTH) {
            lv_warpInRegion = gv_amonWarpOutSOUTHRegion;
        }
        else {
        }
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhaseSmith", 0, 0, RegionRandomPoint(lv_warpInRegion));
        gv_phaseSmith = UnitLastCreated();
        gf_RunWarpInAnimationonUnit(gv_phaseSmith);
        gv_phaseSmithWarpedIn = true;
        gv_phaseSmithZone = lp_warpInZone;
        gv_phaseSmithReparing = false;
        Wait(1.0, c_timeGame);
    }
}
void gf_PhaseSmithWarpOut (int lp_warpInZone) {
    // Variable Declarations
    region lv_warpInRegion;
    // Variable Initialization
    // Implementation
    if ((gv_phaseSmithWarpedIn == true) && (gv_phaseSmithZone == lp_warpInZone)) {
        gv_phaseSmithWarpedIn = false;
        gf_RunWarpOutAnimationonUnit(gv_phaseSmith);
        UnitRemove(gv_phaseSmith);
        gv_phaseSmithReparing = false;
    }
}
void gf_PhaseSmithRepair (int lp_warpInZone) {
    int autoE3977818_val;
    fixed auto359F449B_at;
    // Variable Declarations
    region lv_warpInRegion;
    point lv_randomPoint;
    unit lv_dummyUnit;
    // Variable Initialization
    // Implementation
    if ((gv_phaseSmithReparing == false) && (gv_phaseSmithWarpedIn == true)) {
        autoE3977818_val = lp_warpInZone;
        if (autoE3977818_val == gv_aMONWARPOUTWEST) {
            lv_warpInRegion = RegionFromId(15);
        }
        else if (autoE3977818_val == gv_aMONWARPOUTEAST) {
            lv_warpInRegion = RegionFromId(16);
        }
        else if (autoE3977818_val == gv_aMONWARPOUTCENTER) {
            lv_warpInRegion = gv_amonWarpOutCENTERRegion;
        }
        else if (autoE3977818_val == gv_aMONWARPOUTSOUTH) {
            lv_warpInRegion = gv_amonWarpOutSOUTHRegion;
        }
        else {
        }
        lv_randomPoint = RegionRandomPoint(lv_warpInRegion);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "InvisibleRepairDummy", 0, 0, lv_randomPoint);
        lv_dummyUnit = UnitLastCreated();
        UnitSetPropertyFixed(lv_dummyUnit, c_unitPropLifePercent, 1.0);
        UnitIssueOrder(gv_phaseSmith, OrderTargetingUnit(AbilityCommand("MedivacHeal2", 0), lv_dummyUnit), c_orderQueueReplace);
        gv_phaseSmithReparing = true;
        auto359F449B_at = 0;
        while (!((((lp_warpInZone == gv_aMONWARPOUTWEST) && (gv_westWarpZoneActivationCompletion >= 100.0)) || ((lp_warpInZone == gv_aMONWARPOUTEAST) && (gv_eastWarpZoneActivationCompletion >= 100.0)) || ((lp_warpInZone == gv_aMONWARPOUTCENTER) && (gv_centerWarpZoneActivationCompletion >= 100.0)) || ((lp_warpInZone == gv_aMONWARPOUTSOUTH) && (gv_southWarpZoneActivationCompletion >= 100.0)))) && auto359F449B_at <= 8.0) {
            Wait(0.5, c_timeGame);
            auto359F449B_at = auto359F449B_at + 0.5;
        }
        UnitRemove(lv_dummyUnit);
    }
}
void gf_PhaseSmithMove (int lp_warpInZone) {
    int auto3457CBFF_val;
    // Variable Declarations
    region lv_warpInRegion;
    point lv_randomPoint;
    // Variable Initialization
    // Implementation
    if ((gv_phaseSmithWarpedIn == true)) {
        auto3457CBFF_val = lp_warpInZone;
        if (auto3457CBFF_val == gv_aMONWARPOUTWEST) {
            lv_warpInRegion = RegionFromId(15);
        }
        else if (auto3457CBFF_val == gv_aMONWARPOUTEAST) {
            lv_warpInRegion = RegionFromId(16);
        }
        else if (auto3457CBFF_val == gv_aMONWARPOUTCENTER) {
            lv_warpInRegion = gv_amonWarpOutCENTERRegion;
        }
        else if (auto3457CBFF_val == gv_aMONWARPOUTSOUTH) {
            lv_warpInRegion = gv_amonWarpOutSOUTHRegion;
        }
        else {
        }
        lv_randomPoint = RegionRandomPoint(lv_warpInRegion);
        UnitIssueOrder(gv_phaseSmith, OrderTargetingPoint(AbilityCommand("move", 0), lv_randomPoint), c_orderQueueReplace);
        gv_phaseSmithReparing = false;
        Wait(RandomFixed(1.5, 2.5), c_timeGame);
    }
}
trigger auto_gf_IssueWarpedUnitQueuedOrder_Trigger = null;
int auto_gf_IssueWarpedUnitQueuedOrder_lp_unitPathingIndex;
int auto_gf_IssueWarpedUnitQueuedOrder_lp_player;
unit auto_gf_IssueWarpedUnitQueuedOrder_lp_unit;
void gf_IssueWarpedUnitQueuedOrder (int lp_unitPathingIndex, int lp_player, unit lp_unit) {
    auto_gf_IssueWarpedUnitQueuedOrder_lp_unitPathingIndex = lp_unitPathingIndex;
    auto_gf_IssueWarpedUnitQueuedOrder_lp_player = lp_player;
    auto_gf_IssueWarpedUnitQueuedOrder_lp_unit = lp_unit;
    if (auto_gf_IssueWarpedUnitQueuedOrder_Trigger == null) {
        auto_gf_IssueWarpedUnitQueuedOrder_Trigger = TriggerCreate("auto_gf_IssueWarpedUnitQueuedOrder_TriggerFunc");
    }
    TriggerExecute(auto_gf_IssueWarpedUnitQueuedOrder_Trigger, false, false);
}
bool auto_gf_IssueWarpedUnitQueuedOrder_TriggerFunc (bool testConds, bool runActions) {
    int lp_unitPathingIndex = auto_gf_IssueWarpedUnitQueuedOrder_lp_unitPathingIndex;
    int lp_player = auto_gf_IssueWarpedUnitQueuedOrder_lp_player;
    unit lp_unit = auto_gf_IssueWarpedUnitQueuedOrder_lp_unit;
    // Implementation
    if ((lp_unitPathingIndex >= 0)) {
        UnitIssueOrder(lp_unit, OrderTargetingPoint(gv_pathingUnitOrder[lp_player][lp_unitPathingIndex], gv_pathingQueuePoint[lp_player][lp_unitPathingIndex]), c_orderQueueReplace);
        gf_DeletePathingUnit(lp_player, lp_unitPathingIndex);
    }
    else {
        UnitIssueOrder(lp_unit, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    }
    return true;
}
int gf_FindUnitPathingIndex (int lp_player, int lp_pathingQueueSize, unit lp_unit) {
    int autoE5F376FE_ae;
    int autoE5F376FE_ai;
    // Variable Declarations
    int lv_loopCount;
    // Variable Initialization
    // Implementation
    autoE5F376FE_ae = (lp_pathingQueueSize - 1);
    autoE5F376FE_ai = 1;
    lv_loopCount = 0;
    for ( ; ( (autoE5F376FE_ai >= 0 && lv_loopCount <= autoE5F376FE_ae) || (autoE5F376FE_ai <= 0 && lv_loopCount >= autoE5F376FE_ae) ) ; lv_loopCount += autoE5F376FE_ai ) {
        if ((gv_pathingUnit[lp_player][lv_loopCount] == lp_unit)) {
            return lv_loopCount;
        }
    }
    return -1;
}
int gf_FindFirstEmptyUnitPathingElement (int lp_player, int lp_pathingQueueSize) {
    int autoE7AACF44_ae;
    int autoE7AACF44_ai;
    // Variable Declarations
    int lv_loopCount;
    // Variable Initialization
    // Implementation
    autoE7AACF44_ae = (lp_pathingQueueSize - 1);
    autoE7AACF44_ai = 1;
    lv_loopCount = 0;
    for ( ; ( (autoE7AACF44_ai >= 0 && lv_loopCount <= autoE7AACF44_ae) || (autoE7AACF44_ai <= 0 && lv_loopCount >= autoE7AACF44_ae) ) ; lv_loopCount += autoE7AACF44_ai ) {
        if ((gv_pathingUnit[lp_player][lv_loopCount] == null)) {
            return lv_loopCount;
        }
    }
    return -1;
}
trigger auto_gf_QueueUnitPathing_Trigger = null;
int auto_gf_QueueUnitPathing_lp_player;
unit auto_gf_QueueUnitPathing_lp_unit;
int auto_gf_QueueUnitPathing_lp_unitPathingIndex;
abilcmd auto_gf_QueueUnitPathing_lp_command;
point auto_gf_QueueUnitPathing_lp_orderTargetPoint;
void gf_QueueUnitPathing (int lp_player, unit lp_unit, int lp_unitPathingIndex, abilcmd lp_command, point lp_orderTargetPoint) {
    auto_gf_QueueUnitPathing_lp_player = lp_player;
    auto_gf_QueueUnitPathing_lp_unit = lp_unit;
    auto_gf_QueueUnitPathing_lp_unitPathingIndex = lp_unitPathingIndex;
    auto_gf_QueueUnitPathing_lp_command = lp_command;
    auto_gf_QueueUnitPathing_lp_orderTargetPoint = lp_orderTargetPoint;
    if (auto_gf_QueueUnitPathing_Trigger == null) {
        auto_gf_QueueUnitPathing_Trigger = TriggerCreate("auto_gf_QueueUnitPathing_TriggerFunc");
    }
    TriggerExecute(auto_gf_QueueUnitPathing_Trigger, false, false);
}
bool auto_gf_QueueUnitPathing_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_gf_QueueUnitPathing_lp_player;
    unit lp_unit = auto_gf_QueueUnitPathing_lp_unit;
    int lp_unitPathingIndex = auto_gf_QueueUnitPathing_lp_unitPathingIndex;
    abilcmd lp_command = auto_gf_QueueUnitPathing_lp_command;
    point lp_orderTargetPoint = auto_gf_QueueUnitPathing_lp_orderTargetPoint;
    abilcmd auto2BB2AEBD_val;
    // Variable Declarations
    point lv_portalPoint;
    // Variable Initialization
    // Implementation
    lv_portalPoint = gf_FindClosestPortalPoint(lp_unit);
    if ((PointGetX(lv_portalPoint) >= 0.0)) {
        gv_pathingQueuePoint[lp_player][lp_unitPathingIndex] = lp_orderTargetPoint;
        gv_pathingUnitOrder[lp_player][lp_unitPathingIndex] = lp_command;
        gv_pathingUnit[lp_player][lp_unitPathingIndex] = lp_unit;
        UnitBehaviorAdd(EventUnit(), "SOAInspiration22", EventUnit(), 1);
        auto2BB2AEBD_val = lp_command;
        if (auto2BB2AEBD_val == AbilityCommand("attack", 0)) {
            UnitIssueOrder(lp_unit, OrderTargetingPoint(AbilityCommand("attack", 0), lv_portalPoint), c_orderQueueReplace);
        }
        else if (auto2BB2AEBD_val == AbilityCommand("attack", 2)) {
            UnitIssueOrder(lp_unit, OrderTargetingPoint(AbilityCommand("attack", 2), lv_portalPoint), c_orderQueueReplace);
        }
        else if (auto2BB2AEBD_val == AbilityCommand("move", 0)) {
            UnitIssueOrder(lp_unit, OrderTargetingPoint(AbilityCommand("move", 0), lv_portalPoint), c_orderQueueReplace);
        }
        else if (auto2BB2AEBD_val == AbilityCommand("move", 1)) {
            UnitIssueOrder(lp_unit, OrderTargetingPoint(AbilityCommand("move", 0), lv_portalPoint), c_orderQueueReplace);
        }
        else if (auto2BB2AEBD_val == AbilityCommand("ProbeHarvest", 0)) {
            UnitIssueOrder(lp_unit, OrderTargetingUnit(AbilityCommand("ProbeHarvest", 0), EventUnit()), c_orderQueueReplace);
        }
        else if (auto2BB2AEBD_val == AbilityCommand("SCVHarvest", 0)) {
            UnitIssueOrder(lp_unit, OrderTargetingUnit(AbilityCommand("SCVHarvest", 0), EventUnit()), c_orderQueueReplace);
        }
        else if (auto2BB2AEBD_val == AbilityCommand("DroneHarvest", 0)) {
            UnitIssueOrder(lp_unit, OrderTargetingUnit(AbilityCommand("DroneHarvest", 0), EventUnit()), c_orderQueueReplace);
        }
        else {
            UnitIssueOrder(lp_unit, OrderTargetingPoint(AbilityCommand("attack", 0), lv_portalPoint), c_orderQueueReplace);
        }
    }
    else {
        UnitIssueOrder(lp_unit, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    }
    return true;
}
trigger auto_gf_DeletePathingUnit_Trigger = null;
int auto_gf_DeletePathingUnit_lp_player;
int auto_gf_DeletePathingUnit_lp_unitIndex;
void gf_DeletePathingUnit (int lp_player, int lp_unitIndex) {
    auto_gf_DeletePathingUnit_lp_player = lp_player;
    auto_gf_DeletePathingUnit_lp_unitIndex = lp_unitIndex;
    if (auto_gf_DeletePathingUnit_Trigger == null) {
        auto_gf_DeletePathingUnit_Trigger = TriggerCreate("auto_gf_DeletePathingUnit_TriggerFunc");
    }
    TriggerExecute(auto_gf_DeletePathingUnit_Trigger, false, false);
}
bool auto_gf_DeletePathingUnit_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_gf_DeletePathingUnit_lp_player;
    int lp_unitIndex = auto_gf_DeletePathingUnit_lp_unitIndex;
    // Implementation
    gv_pathingUnit[lp_player][lp_unitIndex] = null;
    gv_pathingUnitOrder[lp_player][lp_unitIndex] = null;
    gv_pathingQueuePoint[lp_player][lp_unitIndex] = null;
    return true;
}
point gf_FindClosestPortalPoint (unit lp_unit) {
    // Variable Declarations
    fixed lv_distanceToWestPortal;
    fixed lv_distanceToEastPortal;
    fixed lv_distanceToCenterPortal;
    fixed lv_distanceToSouthPortal;
    // Variable Initialization
    // Implementation
    if ((RegionContainsPoint(RegionFromId(10), UnitGetPosition(lp_unit)) == true) && ((gv_warpZonesActive[gv_aMONWARPOUTWEST] == true) || (gv_warpZonesActive[gv_aMONWARPOUTEAST] == true) || (gv_warpZonesActive[gv_aMONWARPOUTCENTER] == true) || (gv_warpZonesActive[gv_aMONWARPOUTSOUTH] == true))) {
        if ((gv_warpZonesActive[gv_aMONWARPOUTWEST] == true)) {
            if ((UnitTestPlane(lp_unit, c_planeAir) == false)) {
                lv_distanceToWestPortal = AIPathingCostMap(UnitGetPosition(lp_unit), RegionGetCenter(RegionFromId(15)));
            }
            else {
                lv_distanceToWestPortal = DistanceBetweenPoints(UnitGetPosition(lp_unit), RegionGetCenter(RegionFromId(15)));
            }
        }
        else {
            lv_distanceToWestPortal = 524287.0;
        }
        if ((gv_warpZonesActive[gv_aMONWARPOUTEAST] == true)) {
            if ((UnitTestPlane(lp_unit, c_planeAir) == false)) {
                lv_distanceToEastPortal = AIPathingCostMap(UnitGetPosition(lp_unit), RegionGetCenter(RegionFromId(16)));
            }
            else {
                lv_distanceToEastPortal = DistanceBetweenPoints(UnitGetPosition(lp_unit), RegionGetCenter(RegionFromId(16)));
            }
        }
        else {
            lv_distanceToEastPortal = 524287.0;
        }
        if ((gv_warpZonesActive[gv_aMONWARPOUTCENTER] == true)) {
            if ((UnitTestPlane(lp_unit, c_planeAir) == false)) {
                lv_distanceToCenterPortal = AIPathingCostMap(UnitGetPosition(lp_unit), RegionGetCenter(gv_amonWarpOutCENTERRegion));
            }
            else {
                lv_distanceToCenterPortal = DistanceBetweenPoints(UnitGetPosition(lp_unit), RegionGetCenter(gv_amonWarpOutCENTERRegion));
            }
        }
        else {
            lv_distanceToCenterPortal = 524287.0;
        }
        if ((gv_warpZonesActive[gv_aMONWARPOUTSOUTH] == true)) {
            if ((UnitTestPlane(lp_unit, c_planeAir) == false)) {
                lv_distanceToSouthPortal = AIPathingCostMap(UnitGetPosition(lp_unit), RegionGetCenter(gv_amonWarpOutSOUTHRegion));
            }
            else {
                lv_distanceToSouthPortal = DistanceBetweenPoints(UnitGetPosition(lp_unit), RegionGetCenter(gv_amonWarpOutSOUTHRegion));
            }
        }
        else {
            lv_distanceToSouthPortal = 524287.0;
        }
        if ((lv_distanceToWestPortal <= lv_distanceToEastPortal) && (lv_distanceToWestPortal <= lv_distanceToCenterPortal) && (lv_distanceToWestPortal <= lv_distanceToSouthPortal)) {
            return RegionGetCenter(RegionFromId(15));
        }
        else {
            if ((lv_distanceToCenterPortal <= lv_distanceToEastPortal) && (lv_distanceToCenterPortal <= lv_distanceToWestPortal) && (lv_distanceToCenterPortal <= lv_distanceToSouthPortal)) {
                return RegionGetCenter(gv_amonWarpOutCENTERRegion);
            }
            else {
                if ((lv_distanceToEastPortal <= lv_distanceToCenterPortal) && (lv_distanceToEastPortal <= lv_distanceToWestPortal) && (lv_distanceToEastPortal <= lv_distanceToSouthPortal)) {
                    return RegionGetCenter(RegionFromId(16));
                }
                else {
                    return RegionGetCenter(gv_amonWarpOutSOUTHRegion);
                }
            }
        }
    }
    else {
        if ((RegionContainsPoint(RegionFromId(11), UnitGetPosition(lp_unit)) == true) && (gv_warpZonesActive[gv_aMONWARPOUTWEST] == true)) {
            if ((gv_warpZonesActive[gv_pROTOSSWARPOUTWEST] == true)) {
                if ((UnitTestPlane(lp_unit, c_planeAir) == false)) {
                    lv_distanceToWestPortal = AIPathingCostMap(UnitGetPosition(lp_unit), RegionGetCenter(gv_protossWarpOutWESTRegion));
                }
                else {
                    lv_distanceToWestPortal = DistanceBetweenPoints(UnitGetPosition(lp_unit), RegionGetCenter(gv_protossWarpOutWESTRegion));
                }
            }
            else {
                lv_distanceToWestPortal = 524287.0;
            }
            if ((gv_warpZonesActive[gv_pROTOSSWARPOUTEAST] == true)) {
                if ((UnitTestPlane(lp_unit, c_planeAir) == false)) {
                    lv_distanceToEastPortal = AIPathingCostMap(UnitGetPosition(lp_unit), RegionGetCenter(gv_protossWarpOutEASTRegion));
                }
                else {
                    lv_distanceToEastPortal = DistanceBetweenPoints(UnitGetPosition(lp_unit), RegionGetCenter(gv_protossWarpOutEASTRegion));
                }
            }
            else {
                lv_distanceToEastPortal = 524287.0;
            }
            if ((lv_distanceToWestPortal <= lv_distanceToEastPortal)) {
                return RegionGetCenter(gv_protossWarpOutWESTRegion);
            }
            else {
                return RegionGetCenter(gv_protossWarpOutEASTRegion);
            }
        }
        else {
            return Point(-1.0, -1.0);
        }
    }
}
trigger auto_gf_StopFollowingUnits_Trigger = null;
unit auto_gf_StopFollowingUnits_lp_warpedUnit;
void gf_StopFollowingUnits (unit lp_warpedUnit) {
    auto_gf_StopFollowingUnits_lp_warpedUnit = lp_warpedUnit;
    if (auto_gf_StopFollowingUnits_Trigger == null) {
        auto_gf_StopFollowingUnits_Trigger = TriggerCreate("auto_gf_StopFollowingUnits_TriggerFunc");
    }
    TriggerExecute(auto_gf_StopFollowingUnits_Trigger, false, false);
}
bool auto_gf_StopFollowingUnits_TriggerFunc (bool testConds, bool runActions) {
    unit lp_warpedUnit = auto_gf_StopFollowingUnits_lp_warpedUnit;
    // Variable Declarations
    region lv_unitGroupRegion;
    // Variable Initialization
    // Implementation
    if ((libNtve_gf_UnitInRegion(lp_warpedUnit, RegionFromId(10)) == false)) {
        lv_unitGroupRegion = RegionFromId(10);
    }
    else {
        lv_unitGroupRegion = RegionFromId(11);
    }
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_01_USER, lv_unitGroupRegion, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((OrderGetTargetUnit(UnitOrder(UnitGroupLoopCurrent(), 0)) == lp_warpedUnit)) {
            UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
        }
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_02_USER, lv_unitGroupRegion, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((OrderGetTargetUnit(UnitOrder(UnitGroupLoopCurrent(), 0)) == lp_warpedUnit)) {
            UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
        }
    }
    UnitGroupLoopEnd();
    return true;
}
void gf_ClearObjectiveMarkers (bool lp_primary) {
    int autoCBB5DD4C_ae;
    int autoCBB5DD4C_ai;
    // Variable Declarations
    int lv_pingIterator;
    // Variable Initialization
    // Implementation
    autoCBB5DD4C_ae = (gv_tOTAL_MARKERS - 1);
    autoCBB5DD4C_ai = 1;
    lv_pingIterator = 0;
    for ( ; ( (autoCBB5DD4C_ai >= 0 && lv_pingIterator <= autoCBB5DD4C_ae) || (autoCBB5DD4C_ai <= 0 && lv_pingIterator >= autoCBB5DD4C_ae) ) ; lv_pingIterator += autoCBB5DD4C_ai ) {
        if ((lp_primary == true)) {
            libCOMI_gf_DestroyPingCoop(gv_objectiveMarkers[lv_pingIterator]);
        }
        else {
            libCOMI_gf_DestroyPingCoop(gv_secondaryObjectiveMarkers[lv_pingIterator]);
        }
    }
}
void gf_ApplyDifficultyBufftoUnits (unitgroup lp_unitGroup) {
    int auto3A434ADE_val;
    // Implementation
    UnitGroupLoopBegin(lp_unitGroup);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        auto3A434ADE_val = gv_player_Difficulty_Modifier[gv_pLAYER_01_USER];
        if (auto3A434ADE_val == 1) {
            UnitBehaviorAdd(UnitGroupLoopCurrent(), "HybridDifficultyBuffNormal", UnitGroupLoopCurrent(), 1);
        }
        else if (auto3A434ADE_val == 2) {
            UnitBehaviorAdd(UnitGroupLoopCurrent(), "HybridDifficultyBuffHard", UnitGroupLoopCurrent(), 1);
        }
        else if (auto3A434ADE_val == 3) {
            UnitBehaviorAdd(UnitGroupLoopCurrent(), "HybridDifficultyBuffBrutal", UnitGroupLoopCurrent(), 1);
        }
        else {
        }
    }
    UnitGroupLoopEnd();
}
trigger auto_gf_QueueTransmission_Trigger = null;
soundlink auto_gf_QueueTransmission_lp_transmissionSound;
transmissionsource auto_gf_QueueTransmission_lp_portraitModel;
void gf_QueueTransmission (soundlink lp_transmissionSound, transmissionsource lp_portraitModel) {
    auto_gf_QueueTransmission_lp_transmissionSound = lp_transmissionSound;
    auto_gf_QueueTransmission_lp_portraitModel = lp_portraitModel;
    if (auto_gf_QueueTransmission_Trigger == null) {
        auto_gf_QueueTransmission_Trigger = TriggerCreate("auto_gf_QueueTransmission_TriggerFunc");
    }
    TriggerExecute(auto_gf_QueueTransmission_Trigger, false, false);
}
bool auto_gf_QueueTransmission_TriggerFunc (bool testConds, bool runActions) {
    soundlink lp_transmissionSound = auto_gf_QueueTransmission_lp_transmissionSound;
    transmissionsource lp_portraitModel = auto_gf_QueueTransmission_lp_portraitModel;
    // Implementation
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libNtve_gf_SendTransmissionSimple(lp_portraitModel, libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), lp_transmissionSound, 0.0, c_transmissionDurationAdd, true);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    Wait(2.0, c_timeGame);
    TriggerQueueExit();
    return true;
}
trigger auto_gf_QueueMissionTransmission_Trigger = null;
string auto_gf_QueueMissionTransmission_lp_transmissionSound;
void gf_QueueMissionTransmission (string lp_transmissionSound) {
    auto_gf_QueueMissionTransmission_lp_transmissionSound = lp_transmissionSound;
    if (auto_gf_QueueMissionTransmission_Trigger == null) {
        auto_gf_QueueMissionTransmission_Trigger = TriggerCreate("auto_gf_QueueMissionTransmission_TriggerFunc");
    }
    TriggerExecute(auto_gf_QueueMissionTransmission_Trigger, false, false);
}
bool auto_gf_QueueMissionTransmission_TriggerFunc (bool testConds, bool runActions) {
    string lp_transmissionSound = auto_gf_QueueMissionTransmission_lp_transmissionSound;
    // Implementation
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission(lp_transmissionSound, true, RandomInt(gv_pLAYER_01_USER, gv_pLAYER_02_USER));
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    Wait(2.0, c_timeGame);
    TriggerQueueExit();
    return true;
}
trigger auto_gf_QueueSound_Trigger = null;
soundlink auto_gf_QueueSound_lp_transmissionSound;
void gf_QueueSound (soundlink lp_transmissionSound) {
    auto_gf_QueueSound_lp_transmissionSound = lp_transmissionSound;
    if (auto_gf_QueueSound_Trigger == null) {
        auto_gf_QueueSound_Trigger = TriggerCreate("auto_gf_QueueSound_TriggerFunc");
    }
    TriggerExecute(auto_gf_QueueSound_Trigger, false, false);
}
bool auto_gf_QueueSound_TriggerFunc (bool testConds, bool runActions) {
    soundlink lp_transmissionSound = auto_gf_QueueSound_lp_transmissionSound;
    // Implementation
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    SoundPlayForPlayer(lp_transmissionSound, c_maxPlayers, PlayerGroupAll(), 150.0, 0.0);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    Wait(4.0, c_timeGame);
    TriggerQueueExit();
    return true;
}
bool gf_BaseContainsLastVoidRift (unit lp_deadUnit) {
    int auto927F2F7B_ae;
    int auto927F2F7B_ai;
    // Variable Declarations
    region[5] lv_riftRegions;
    unit[5] lv_rifts;
    int lv_iterator;
    region lv_finalRegion;
    // Variable Initialization
    // Implementation
    if ((gv_remainingPortalCount == 1) && (UnitTypeTestAttribute(UnitGetType(lp_deadUnit), c_unitAttributeStructure) == true)) {
        if (((UnitGetOwner(lp_deadUnit) == gv_pLAYER_03_ENEMY) || (UnitGetOwner(lp_deadUnit) == gv_pLAYER_04_ENEMY))) {
            RegionAddRegion(lv_finalRegion, RegionFromId(13));
            RegionAddRegion(lv_finalRegion, RegionFromId(2));
            lv_riftRegions[0] = RegionFromId(5);
            lv_riftRegions[1] = RegionFromId(7);
            lv_riftRegions[2] = RegionFromId(1);
            lv_riftRegions[3] = lv_finalRegion;
            lv_rifts[0] = UnitFromId(913511382);
            lv_rifts[1] = UnitFromId(545534090);
            lv_rifts[2] = UnitFromId(391449148);
            lv_rifts[3] = UnitFromId(735209505);
            auto927F2F7B_ae = 3;
            auto927F2F7B_ai = 1;
            lv_iterator = 0;
            for ( ; ( (auto927F2F7B_ai >= 0 && lv_iterator <= auto927F2F7B_ae) || (auto927F2F7B_ai <= 0 && lv_iterator >= auto927F2F7B_ae) ) ; lv_iterator += auto927F2F7B_ai ) {
                if ((libNtve_gf_UnitInRegion(lp_deadUnit, lv_riftRegions[lv_iterator]) == true) && (UnitIsAlive(lv_rifts[lv_iterator]) == true)) {
                    return true;
                }
            }
        }
        return false;
    }
    else {
        return false;
    }
}
void gf_TransmissionEnemyBaseDestroyed (region lp_baseRegion) {
    // Implementation
    if ((gv_firstBaseDestroyed == false)) {
        gf_QueueTransmission(SoundLink("sp_FirstBaseDestroyed", -1), TransmissionSourceFromUnitType("HighTemplar", false));
        gv_firstBaseDestroyed = true;
    }
    else {
        if (((lp_baseRegion == RegionFromId(7)) || (lp_baseRegion == RegionFromId(1)))) {
        }
        else {
            gf_QueueTransmission(SoundLink("sp_EnemyBaseDestroyed", -1), TransmissionSourceFromUnitType("HighTemplar", false));
        }
    }
}
trigger auto_gf_ApplyBaseDestroyedDebuff_Trigger = null;
void gf_ApplyBaseDestroyedDebuff () {
    if (auto_gf_ApplyBaseDestroyedDebuff_Trigger == null) {
        auto_gf_ApplyBaseDestroyedDebuff_Trigger = TriggerCreate("auto_gf_ApplyBaseDestroyedDebuff_TriggerFunc");
    }
    TriggerExecute(auto_gf_ApplyBaseDestroyedDebuff_Trigger, false, false);
}
bool auto_gf_ApplyBaseDestroyedDebuff_TriggerFunc (bool testConds, bool runActions) {
    int autoB3189BBE_ae;
    int autoB3189BBE_ai;
    // Variable Declarations
    int lv_iterator;
    // Variable Initialization
    // Implementation
    autoB3189BBE_ae = (gv_mAX_HYBRIDS - 1);
    autoB3189BBE_ai = 1;
    lv_iterator = 0;
    for ( ; ( (autoB3189BBE_ai >= 0 && lv_iterator <= autoB3189BBE_ae) || (autoB3189BBE_ai <= 0 && lv_iterator >= autoB3189BBE_ae) ) ; lv_iterator += autoB3189BBE_ai ) {
        if ((UnitIsAlive(gv_hybridUnits[lv_iterator]) == true)) {
            UnitBehaviorAdd(gv_hybridUnits[lv_iterator], "BaseDestroyedHybridDebuff", gv_hybridUnits[lv_iterator], 1);
        }
    }
    return true;
}
point gf_AttackWaveSpawn () {
    int auto9A2E02E3_ae;
    int auto9A2E02E3_ai;
    // Variable Declarations
    int lv_mapSide;
    int lv_spawnLocationIter;
    // Variable Initialization
    // Implementation
    lv_mapSide = RandomInt(gv_pLAYER_01_USER, gv_pLAYER_02_USER);
    auto9A2E02E3_ae = 5;
    auto9A2E02E3_ai = 1;
    lv_spawnLocationIter = 1;
    for ( ; ( (auto9A2E02E3_ai >= 0 && lv_spawnLocationIter <= auto9A2E02E3_ae) || (auto9A2E02E3_ai <= 0 && lv_spawnLocationIter >= auto9A2E02E3_ae) ) ; lv_spawnLocationIter += auto9A2E02E3_ai ) {
        if ((UnitGroupCount(UnitGroupAlliance(gv_pLAYER_01_USER, c_unitAllianceEnemy, gv_attackSpawn[lv_mapSide][lv_spawnLocationIter], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > RandomInt(2, 5))) {
            return RegionGetCenter(gv_attackSpawn[lv_mapSide][lv_spawnLocationIter]);
        }
    }
    return RegionGetCenter(gv_attackSpawn[lv_mapSide][lv_spawnLocationIter]);
}
trigger auto_gf_SpawnDefenseSquad_Trigger = null;
region auto_gf_SpawnDefenseSquad_lp_spawnRegion;
region auto_gf_SpawnDefenseSquad_lp_protossBase;
void gf_SpawnDefenseSquad (region lp_spawnRegion, region lp_protossBase) {
    auto_gf_SpawnDefenseSquad_lp_spawnRegion = lp_spawnRegion;
    auto_gf_SpawnDefenseSquad_lp_protossBase = lp_protossBase;
    if (auto_gf_SpawnDefenseSquad_Trigger == null) {
        auto_gf_SpawnDefenseSquad_Trigger = TriggerCreate("auto_gf_SpawnDefenseSquad_TriggerFunc");
    }
    TriggerExecute(auto_gf_SpawnDefenseSquad_Trigger, false, false);
}
bool auto_gf_SpawnDefenseSquad_TriggerFunc (bool testConds, bool runActions) {
    region lp_spawnRegion = auto_gf_SpawnDefenseSquad_lp_spawnRegion;
    region lp_protossBase = auto_gf_SpawnDefenseSquad_lp_protossBase;
    region autoEEEA2EF1_val;
    int auto1E387A86_ae;
    int auto1E387A86_ai;
    int autoEFB5FF0D_ae;
    int autoEFB5FF0D_ai;
    int auto5150F02B_ae;
    int auto5150F02B_ai;
    int auto18F84A7F_ae;
    int auto18F84A7F_ai;
    int auto8BD56320_ae;
    int auto8BD56320_ai;
    int auto151438BB_ae;
    int auto151438BB_ai;
    int autoA8F127F1_ae;
    int autoA8F127F1_ai;
    int auto9F324B2E_ae;
    int auto9F324B2E_ai;
    int autoAD6CC263_ae;
    int autoAD6CC263_ai;
    int auto1267D72A_ae;
    int auto1267D72A_ai;
    int auto0F55AB2B_ae;
    int auto0F55AB2B_ai;
    int autoD4D72736_ae;
    int autoD4D72736_ai;
    // Variable Declarations
    int lv_loopIter;
    // Variable Initialization
    // Implementation
    autoEEEA2EF1_val = lp_protossBase;
    if (autoEEEA2EF1_val == RegionFromId(22)) {
        auto1E387A86_ae = 1;
        auto1E387A86_ai = 1;
        lv_loopIter = 0;
        for ( ; ( (auto1E387A86_ai >= 0 && lv_loopIter <= auto1E387A86_ae) || (auto1E387A86_ai <= 0 && lv_loopIter >= auto1E387A86_ae) ) ; lv_loopIter += auto1E387A86_ai ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Archon", 0, gv_pLAYER_05_ALLY, RegionRandomPoint(lp_spawnRegion));
            UnitGroupAdd(gv_defenseSquad, UnitLastCreated());
            gf_RunWarpInAnimationonUnit(UnitLastCreated());
            Wait(0.3, c_timeGame);
        }
        autoEFB5FF0D_ae = 1;
        autoEFB5FF0D_ai = 1;
        lv_loopIter = 0;
        for ( ; ( (autoEFB5FF0D_ai >= 0 && lv_loopIter <= autoEFB5FF0D_ae) || (autoEFB5FF0D_ai <= 0 && lv_loopIter >= autoEFB5FF0D_ae) ) ; lv_loopIter += autoEFB5FF0D_ai ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "CarrierAiur", 0, gv_pLAYER_05_ALLY, RegionRandomPoint(lp_spawnRegion));
            UnitGroupAdd(gv_defenseSquad, UnitLastCreated());
            gf_RunWarpInAnimationonUnit(UnitLastCreated());
            Wait(0.3, c_timeGame);
        }
    }
    else if (autoEEEA2EF1_val == RegionFromId(23)) {
        auto5150F02B_ae = 4;
        auto5150F02B_ai = 1;
        lv_loopIter = 0;
        for ( ; ( (auto5150F02B_ai >= 0 && lv_loopIter <= auto5150F02B_ae) || (auto5150F02B_ai <= 0 && lv_loopIter >= auto5150F02B_ae) ) ; lv_loopIter += auto5150F02B_ai ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Scout", 0, gv_pLAYER_05_ALLY, RegionRandomPoint(RegionFromId(22)));
            UnitGroupAdd(gv_defenseSquad, UnitLastCreated());
            gf_RunWarpInAnimationonUnit(UnitLastCreated());
            Wait(0.3, c_timeGame);
        }
        auto18F84A7F_ae = 1;
        auto18F84A7F_ai = 1;
        lv_loopIter = 0;
        for ( ; ( (auto18F84A7F_ai >= 0 && lv_loopIter <= auto18F84A7F_ae) || (auto18F84A7F_ai <= 0 && lv_loopIter >= auto18F84A7F_ae) ) ; lv_loopIter += auto18F84A7F_ai ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Tempest", 0, gv_pLAYER_05_ALLY, RegionRandomPoint(RegionFromId(22)));
            UnitGroupAdd(gv_defenseSquad, UnitLastCreated());
            gf_RunWarpInAnimationonUnit(UnitLastCreated());
            Wait(0.3, c_timeGame);
        }
    }
    else if (autoEEEA2EF1_val == RegionFromId(24)) {
        auto8BD56320_ae = 7;
        auto8BD56320_ai = 1;
        lv_loopIter = 0;
        for ( ; ( (auto8BD56320_ai >= 0 && lv_loopIter <= auto8BD56320_ae) || (auto8BD56320_ai <= 0 && lv_loopIter >= auto8BD56320_ae) ) ; lv_loopIter += auto8BD56320_ai ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "ZealotAiur", 0, gv_pLAYER_05_ALLY, RegionRandomPoint(lp_spawnRegion));
            UnitGroupAdd(gv_defenseSquad, UnitLastCreated());
            gf_RunWarpInAnimationonUnit(UnitLastCreated());
            Wait(0.3, c_timeGame);
        }
        auto151438BB_ae = 4;
        auto151438BB_ai = 1;
        lv_loopIter = 0;
        for ( ; ( (auto151438BB_ai >= 0 && lv_loopIter <= auto151438BB_ae) || (auto151438BB_ai <= 0 && lv_loopIter >= auto151438BB_ae) ) ; lv_loopIter += auto151438BB_ai ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Stalker", 0, gv_pLAYER_05_ALLY, RegionRandomPoint(lp_spawnRegion));
            UnitGroupAdd(gv_defenseSquad, UnitLastCreated());
            gf_RunWarpInAnimationonUnit(UnitLastCreated());
            Wait(0.3, c_timeGame);
        }
    }
    else if (autoEEEA2EF1_val == RegionFromId(25)) {
        autoA8F127F1_ae = 1;
        autoA8F127F1_ai = 1;
        lv_loopIter = 0;
        for ( ; ( (autoA8F127F1_ai >= 0 && lv_loopIter <= autoA8F127F1_ae) || (autoA8F127F1_ai <= 0 && lv_loopIter >= autoA8F127F1_ae) ) ; lv_loopIter += autoA8F127F1_ai ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "ImmortalShakuras", 0, gv_pLAYER_05_ALLY, RegionRandomPoint(lp_spawnRegion));
            UnitGroupAdd(gv_defenseSquad, UnitLastCreated());
            gf_RunWarpInAnimationonUnit(UnitLastCreated());
            Wait(0.3, c_timeGame);
        }
        auto9F324B2E_ae = 1;
        auto9F324B2E_ai = 1;
        lv_loopIter = 0;
        for ( ; ( (auto9F324B2E_ai >= 0 && lv_loopIter <= auto9F324B2E_ae) || (auto9F324B2E_ai <= 0 && lv_loopIter >= auto9F324B2E_ae) ) ; lv_loopIter += auto9F324B2E_ai ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Colossus", 0, gv_pLAYER_05_ALLY, RegionRandomPoint(lp_spawnRegion));
            UnitGroupAdd(gv_defenseSquad, UnitLastCreated());
            gf_RunWarpInAnimationonUnit(UnitLastCreated());
            Wait(0.3, c_timeGame);
        }
    }
    else if (autoEEEA2EF1_val == RegionFromId(26)) {
        autoAD6CC263_ae = 3;
        autoAD6CC263_ai = 1;
        lv_loopIter = 0;
        for ( ; ( (autoAD6CC263_ai >= 0 && lv_loopIter <= autoAD6CC263_ae) || (autoAD6CC263_ai <= 0 && lv_loopIter >= autoAD6CC263_ae) ) ; lv_loopIter += autoAD6CC263_ai ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "DarkTemplarShakuras", 0, gv_pLAYER_05_ALLY, RegionRandomPoint(lp_spawnRegion));
            UnitGroupAdd(gv_defenseSquad, UnitLastCreated());
            gf_RunWarpInAnimationonUnit(UnitLastCreated());
            Wait(0.3, c_timeGame);
        }
        auto1267D72A_ae = 1;
        auto1267D72A_ai = 1;
        lv_loopIter = 0;
        for ( ; ( (auto1267D72A_ai >= 0 && lv_loopIter <= auto1267D72A_ae) || (auto1267D72A_ai <= 0 && lv_loopIter >= auto1267D72A_ae) ) ; lv_loopIter += auto1267D72A_ai ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "VoidRayShakuras", 0, gv_pLAYER_05_ALLY, RegionRandomPoint(lp_spawnRegion));
            UnitGroupAdd(gv_defenseSquad, UnitLastCreated());
            gf_RunWarpInAnimationonUnit(UnitLastCreated());
            Wait(0.3, c_timeGame);
        }
    }
    else if (autoEEEA2EF1_val == RegionFromId(27)) {
        auto0F55AB2B_ae = 4;
        auto0F55AB2B_ai = 1;
        lv_loopIter = 0;
        for ( ; ( (auto0F55AB2B_ai >= 0 && lv_loopIter <= auto0F55AB2B_ae) || (auto0F55AB2B_ai <= 0 && lv_loopIter >= auto0F55AB2B_ae) ) ; lv_loopIter += auto0F55AB2B_ai ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Dragoon", 0, gv_pLAYER_05_ALLY, RegionRandomPoint(lp_spawnRegion));
            UnitGroupAdd(gv_defenseSquad, UnitLastCreated());
            gf_RunWarpInAnimationonUnit(UnitLastCreated());
            Wait(0.3, c_timeGame);
        }
        autoD4D72736_ae = 1;
        autoD4D72736_ai = 1;
        lv_loopIter = 0;
        for ( ; ( (autoD4D72736_ai >= 0 && lv_loopIter <= autoD4D72736_ae) || (autoD4D72736_ai <= 0 && lv_loopIter >= autoD4D72736_ae) ) ; lv_loopIter += autoD4D72736_ai ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Reaver", 0, gv_pLAYER_05_ALLY, RegionRandomPoint(lp_spawnRegion));
            UnitGroupAdd(gv_defenseSquad, UnitLastCreated());
            gf_RunWarpInAnimationonUnit(UnitLastCreated());
            Wait(0.3, c_timeGame);
        }
    }
    else {
    }
    gf_OrderDefenseSquad(gv_defenseSquad, RegionGetCenter(lp_spawnRegion));
    return true;
}
trigger auto_gf_OrderDefenseSquad_Trigger = null;
unitgroup auto_gf_OrderDefenseSquad_lp_defenseSquad;
point auto_gf_OrderDefenseSquad_lp_gatherPoint;
void gf_OrderDefenseSquad (unitgroup lp_defenseSquad, point lp_gatherPoint) {
    auto_gf_OrderDefenseSquad_lp_defenseSquad = lp_defenseSquad;
    auto_gf_OrderDefenseSquad_lp_gatherPoint = lp_gatherPoint;
    if (auto_gf_OrderDefenseSquad_Trigger == null) {
        auto_gf_OrderDefenseSquad_Trigger = TriggerCreate("auto_gf_OrderDefenseSquad_TriggerFunc");
    }
    TriggerExecute(auto_gf_OrderDefenseSquad_Trigger, false, false);
}
bool auto_gf_OrderDefenseSquad_TriggerFunc (bool testConds, bool runActions) {
    unitgroup lp_defenseSquad = auto_gf_OrderDefenseSquad_lp_defenseSquad;
    point lp_gatherPoint = auto_gf_OrderDefenseSquad_lp_gatherPoint;
    // Implementation
    AIAttackWaveSetGatherPoint(gv_pLAYER_05_ALLY, lp_gatherPoint);
    AIAttackWaveUseGroup(gv_pLAYER_05_ALLY, lp_defenseSquad);
    AIAttackWaveSend(gv_pLAYER_05_ALLY, 1, false);
    return true;
}
trigger auto_gf_SpawnOffenseSquad_Trigger = null;
region auto_gf_SpawnOffenseSquad_lp_spawnRegion;
void gf_SpawnOffenseSquad (region lp_spawnRegion) {
    auto_gf_SpawnOffenseSquad_lp_spawnRegion = lp_spawnRegion;
    if (auto_gf_SpawnOffenseSquad_Trigger == null) {
        auto_gf_SpawnOffenseSquad_Trigger = TriggerCreate("auto_gf_SpawnOffenseSquad_TriggerFunc");
    }
    TriggerExecute(auto_gf_SpawnOffenseSquad_Trigger, false, false);
}
bool auto_gf_SpawnOffenseSquad_TriggerFunc (bool testConds, bool runActions) {
    region lp_spawnRegion = auto_gf_SpawnOffenseSquad_lp_spawnRegion;
    int auto6810A283_ae;
    int auto6810A283_ai;
    int auto7ECAB362_ae;
    int auto7ECAB362_ai;
    int auto543B50FF_ae;
    int auto543B50FF_ai;
    int autoAF3731CF_ae;
    int autoAF3731CF_ai;
    int auto63287C80_ae;
    int auto63287C80_ai;
    int autoB5BDEA8A_ae;
    int autoB5BDEA8A_ai;
    int autoC6641D0A_ae;
    int autoC6641D0A_ai;
    int autoE0408A36_ae;
    int autoE0408A36_ai;
    int auto7CC4B238_ae;
    int auto7CC4B238_ai;
    int auto6C17544E_ae;
    int auto6C17544E_ai;
    int autoB1D0CD6C_ae;
    int autoB1D0CD6C_ai;
    int autoDE2C793C_ae;
    int autoDE2C793C_ai;
    // Variable Declarations
    int lv_loopIter;
    int lv_modifier;
    // Variable Initialization
    // Implementation
    lv_modifier = FixedToInt(((gv_player_Difficulty_Modifier[gv_pLAYER_01_USER] + gv_player_Difficulty_Modifier[gv_pLAYER_02_USER]) / 2.0));
    if ((GameGetMissionTime() >= 1500.0)) {
        auto6810A283_ae = (0 + lv_modifier);
        auto6810A283_ai = 1;
        lv_loopIter = 0;
        for ( ; ( (auto6810A283_ai >= 0 && lv_loopIter <= auto6810A283_ae) || (auto6810A283_ai <= 0 && lv_loopIter >= auto6810A283_ae) ) ; lv_loopIter += auto6810A283_ai ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "DarkArchon", 0, gv_pLAYER_07_HYBRID_SUPPORT, RegionRandomPoint(lp_spawnRegion));
            UnitGroupAdd(gv_offenseWaves, UnitLastCreated());
        }
        auto7ECAB362_ae = (0 + AbsI((lv_modifier - 1)));
        auto7ECAB362_ai = 1;
        lv_loopIter = 0;
        for ( ; ( (auto7ECAB362_ai >= 0 && lv_loopIter <= auto7ECAB362_ae) || (auto7ECAB362_ai <= 0 && lv_loopIter >= auto7ECAB362_ae) ) ; lv_loopIter += auto7ECAB362_ai ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "CarrierTaldarim", 0, gv_pLAYER_07_HYBRID_SUPPORT, RegionRandomPoint(lp_spawnRegion));
            UnitGroupAdd(gv_offenseWaves, UnitLastCreated());
        }
    }
    else if ((GameGetMissionTime() >= 1200.0)) {
        auto543B50FF_ae = (0 + lv_modifier);
        auto543B50FF_ai = 1;
        lv_loopIter = 0;
        for ( ; ( (auto543B50FF_ai >= 0 && lv_loopIter <= auto543B50FF_ae) || (auto543B50FF_ai <= 0 && lv_loopIter >= auto543B50FF_ae) ) ; lv_loopIter += auto543B50FF_ai ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "VoidRayTaldarim", 0, gv_pLAYER_07_HYBRID_SUPPORT, RegionRandomPoint(lp_spawnRegion));
            UnitGroupAdd(gv_offenseWaves, UnitLastCreated());
        }
        autoAF3731CF_ae = (0 + AbsI((lv_modifier - 1)));
        autoAF3731CF_ai = 1;
        lv_loopIter = 0;
        for ( ; ( (autoAF3731CF_ai >= 0 && lv_loopIter <= autoAF3731CF_ae) || (autoAF3731CF_ai <= 0 && lv_loopIter >= autoAF3731CF_ae) ) ; lv_loopIter += autoAF3731CF_ai ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "ColossusTaldarim", 0, gv_pLAYER_07_HYBRID_SUPPORT, RegionRandomPoint(lp_spawnRegion));
            UnitGroupAdd(gv_offenseWaves, UnitLastCreated());
        }
    }
    else if ((GameGetMissionTime() >= 900.0)) {
        auto63287C80_ae = (0 + lv_modifier);
        auto63287C80_ai = 1;
        lv_loopIter = 0;
        for ( ; ( (auto63287C80_ai >= 0 && lv_loopIter <= auto63287C80_ae) || (auto63287C80_ai <= 0 && lv_loopIter >= auto63287C80_ae) ) ; lv_loopIter += auto63287C80_ai ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "ImmortalTaldarim", 0, gv_pLAYER_07_HYBRID_SUPPORT, RegionRandomPoint(lp_spawnRegion));
            UnitGroupAdd(gv_offenseWaves, UnitLastCreated());
        }
        autoB5BDEA8A_ae = (0 + AbsI((lv_modifier - 1)));
        autoB5BDEA8A_ai = 1;
        lv_loopIter = 0;
        for ( ; ( (autoB5BDEA8A_ai >= 0 && lv_loopIter <= autoB5BDEA8A_ae) || (autoB5BDEA8A_ai <= 0 && lv_loopIter >= autoB5BDEA8A_ae) ) ; lv_loopIter += autoB5BDEA8A_ai ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Reaver", 0, gv_pLAYER_07_HYBRID_SUPPORT, RegionRandomPoint(lp_spawnRegion));
            UnitGroupAdd(gv_offenseWaves, UnitLastCreated());
        }
    }
    else if ((GameGetMissionTime() >= 600.0)) {
        autoC6641D0A_ae = (1 + lv_modifier);
        autoC6641D0A_ai = 1;
        lv_loopIter = 0;
        for ( ; ( (autoC6641D0A_ai >= 0 && lv_loopIter <= autoC6641D0A_ae) || (autoC6641D0A_ai <= 0 && lv_loopIter >= autoC6641D0A_ae) ) ; lv_loopIter += autoC6641D0A_ai ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zealot", 0, gv_pLAYER_07_HYBRID_SUPPORT, RegionRandomPoint(lp_spawnRegion));
            UnitGroupAdd(gv_offenseWaves, UnitLastCreated());
        }
        autoE0408A36_ae = (0 + lv_modifier);
        autoE0408A36_ai = 1;
        lv_loopIter = 0;
        for ( ; ( (autoE0408A36_ai >= 0 && lv_loopIter <= autoE0408A36_ae) || (autoE0408A36_ai <= 0 && lv_loopIter >= autoE0408A36_ae) ) ; lv_loopIter += autoE0408A36_ai ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Adept", 0, gv_pLAYER_07_HYBRID_SUPPORT, RegionRandomPoint(lp_spawnRegion));
            UnitGroupAdd(gv_offenseWaves, UnitLastCreated());
        }
        auto7CC4B238_ae = (0 + lv_modifier);
        auto7CC4B238_ai = 1;
        lv_loopIter = 0;
        for ( ; ( (auto7CC4B238_ai >= 0 && lv_loopIter <= auto7CC4B238_ae) || (auto7CC4B238_ai <= 0 && lv_loopIter >= auto7CC4B238_ae) ) ; lv_loopIter += auto7CC4B238_ai ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Monitor", 0, gv_pLAYER_07_HYBRID_SUPPORT, RegionRandomPoint(lp_spawnRegion));
            UnitGroupAdd(gv_offenseWaves, UnitLastCreated());
        }
        auto6C17544E_ae = AbsI((lv_modifier - 1));
        auto6C17544E_ai = 1;
        lv_loopIter = 0;
        for ( ; ( (auto6C17544E_ai >= 0 && lv_loopIter <= auto6C17544E_ae) || (auto6C17544E_ai <= 0 && lv_loopIter >= auto6C17544E_ae) ) ; lv_loopIter += auto6C17544E_ai ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Immortal", 0, gv_pLAYER_07_HYBRID_SUPPORT, RegionRandomPoint(lp_spawnRegion));
            UnitGroupAdd(gv_offenseWaves, UnitLastCreated());
        }
    }
    else if ((GameGetMissionTime() >= 0.0)) {
        autoB1D0CD6C_ae = (3 + lv_modifier);
        autoB1D0CD6C_ai = 1;
        lv_loopIter = 0;
        for ( ; ( (autoB1D0CD6C_ai >= 0 && lv_loopIter <= autoB1D0CD6C_ae) || (autoB1D0CD6C_ai <= 0 && lv_loopIter >= autoB1D0CD6C_ae) ) ; lv_loopIter += autoB1D0CD6C_ai ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zealot", 0, gv_pLAYER_07_HYBRID_SUPPORT, RegionRandomPoint(lp_spawnRegion));
            UnitGroupAdd(gv_offenseWaves, UnitLastCreated());
        }
        autoDE2C793C_ae = (2 + lv_modifier);
        autoDE2C793C_ai = 1;
        lv_loopIter = 0;
        for ( ; ( (autoDE2C793C_ai >= 0 && lv_loopIter <= autoDE2C793C_ae) || (autoDE2C793C_ai <= 0 && lv_loopIter >= autoDE2C793C_ae) ) ; lv_loopIter += autoDE2C793C_ai ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Stalker", 0, gv_pLAYER_07_HYBRID_SUPPORT, RegionRandomPoint(lp_spawnRegion));
            UnitGroupAdd(gv_offenseWaves, UnitLastCreated());
        }
    }
    gf_OrderOffenseSquad(gv_offenseWaves, RegionGetCenter(lp_spawnRegion));
    return true;
}
trigger auto_gf_OrderOffenseSquad_Trigger = null;
unitgroup auto_gf_OrderOffenseSquad_lp_attackSquad;
point auto_gf_OrderOffenseSquad_lp_gatherPoint;
void gf_OrderOffenseSquad (unitgroup lp_attackSquad, point lp_gatherPoint) {
    auto_gf_OrderOffenseSquad_lp_attackSquad = lp_attackSquad;
    auto_gf_OrderOffenseSquad_lp_gatherPoint = lp_gatherPoint;
    if (auto_gf_OrderOffenseSquad_Trigger == null) {
        auto_gf_OrderOffenseSquad_Trigger = TriggerCreate("auto_gf_OrderOffenseSquad_TriggerFunc");
    }
    TriggerExecute(auto_gf_OrderOffenseSquad_Trigger, false, false);
}
bool auto_gf_OrderOffenseSquad_TriggerFunc (bool testConds, bool runActions) {
    unitgroup lp_attackSquad = auto_gf_OrderOffenseSquad_lp_attackSquad;
    point lp_gatherPoint = auto_gf_OrderOffenseSquad_lp_gatherPoint;
    // Implementation
    AIAttackWaveSetGatherPoint(gv_pLAYER_07_HYBRID_SUPPORT, lp_gatherPoint);
    AIAttackWaveUseGroup(gv_pLAYER_07_HYBRID_SUPPORT, lp_attackSquad);
    AIAttackWaveSend(gv_pLAYER_07_HYBRID_SUPPORT, 1, false);
    return true;
}
int gf_FindAvailableHybridIndex () {
    int autoA72A1EC0_ae;
    int autoA72A1EC0_ai;
    // Variable Declarations
    int lv_intIterator;
    int lv_freeIndex;
    // Variable Initialization
    // Implementation
    autoA72A1EC0_ae = (gv_mAX_HYBRIDS - 1);
    autoA72A1EC0_ai = 1;
    lv_intIterator = 0;
    for ( ; ( (autoA72A1EC0_ai >= 0 && lv_intIterator <= autoA72A1EC0_ae) || (autoA72A1EC0_ai <= 0 && lv_intIterator >= autoA72A1EC0_ae) ) ; lv_intIterator += autoA72A1EC0_ai ) {
        if (((gv_hybridUnits[lv_intIterator] == null) || (UnitIsAlive(gv_hybridUnits[lv_intIterator]) == false))) {
            lv_freeIndex = lv_intIterator;
            break;
        }
    }
    return lv_freeIndex;
}
int gf_FindIndexofHybrid (unit lp_hybridUnit) {
    int autoA4FB823E_ae;
    int autoA4FB823E_ai;
    // Variable Declarations
    int lv_intIterator;
    int lv_index;
    // Variable Initialization
    // Implementation
    autoA4FB823E_ae = (gv_mAX_HYBRIDS - 1);
    autoA4FB823E_ai = 1;
    lv_intIterator = 0;
    for ( ; ( (autoA4FB823E_ai >= 0 && lv_intIterator <= autoA4FB823E_ae) || (autoA4FB823E_ai <= 0 && lv_intIterator >= autoA4FB823E_ae) ) ; lv_intIterator += autoA4FB823E_ai ) {
        if ((lp_hybridUnit == gv_hybridUnits[lv_intIterator])) {
            lv_index = lv_intIterator;
            break;
        }
    }
    return lv_index;
}
trigger auto_gf_GenerateVoidFog_Trigger = null;
void gf_GenerateVoidFog () {
    if (auto_gf_GenerateVoidFog_Trigger == null) {
        auto_gf_GenerateVoidFog_Trigger = TriggerCreate("auto_gf_GenerateVoidFog_TriggerFunc");
    }
    TriggerExecute(auto_gf_GenerateVoidFog_Trigger, false, false);
}
bool auto_gf_GenerateVoidFog_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_positionOfShadowUnit;
    // Variable Initialization
    // Implementation
    if ((gv_shadowCloud == null)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "ShadowCloud", 0, 0, RegionGetCenter(RegionFromId(9)));
        gv_shadowCloud = UnitLastCreated();
    }
    lv_positionOfShadowUnit = UnitGetPosition(gv_shadowCloud);
    RegionAddCircle(RegionFromId(9), true, lv_positionOfShadowUnit, 20.0);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "ShadowCloud", 0, 0, lv_positionOfShadowUnit);
    gv_staticShadows[gv_staticShadowIterator] = UnitLastCreated();
    if ((PointGetX(UnitGetPosition(gv_staticShadows[gv_staticShadowIterator])) <= PointGetX(PointFromId(1043159015))) && (gv_warpZonesActive[gv_pROTOSSWARPOUTEAST] == true)) {
        gf_DeactivateWarpZone(gv_pROTOSSWARPOUTEAST);
        TriggerExecute(gt_TransmissionProtossWarpZoneDisabled, true, false);
    }
    if ((gv_staticShadowIterator == 6)) {
        gv_staticShadowIterator = 0;
    }
    else {
        gv_staticShadowIterator += 1;
    }
    UnitRemove(gv_staticShadows[gv_staticShadowIterator]);
    return true;
}
unit gf_FindNearestStructure () {
    // Variable Declarations
    fixed lv_pickedUnitPathing;
    fixed lv_nearestUnitPathing;
    unit lv_nearestUnit;
    bool lv_firstRun;
    // Variable Initialization
    lv_firstRun = true;
    // Implementation
    lv_firstRun = true;
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_05_ALLY, RegionFromId(11), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((lv_firstRun == true)) {
            lv_firstRun = false;
            lv_nearestUnitPathing = DistanceBetweenPoints(UnitGetPosition(gv_shadowCloud), UnitGetPosition(UnitGroupLoopCurrent()));
            lv_nearestUnit = UnitGroupLoopCurrent();
        }
        else {
            lv_pickedUnitPathing = DistanceBetweenPoints(UnitGetPosition(gv_shadowCloud), UnitGetPosition(UnitGroupLoopCurrent()));
            if ((lv_pickedUnitPathing < lv_nearestUnitPathing)) {
                lv_nearestUnitPathing = lv_pickedUnitPathing;
                lv_nearestUnit = UnitGroupLoopCurrent();
            }
        }
    }
    UnitGroupLoopEnd();
    return lv_nearestUnit;
}
void gf_InitiateHybridAssault (unit lp_hybridUnit) {
    // Implementation
    AIAttackWaveSetTargetPlayer(gv_pLAYER_06_HYBRID, PlayerGroupSingle(gv_pLAYER_05_ALLY));
    AIAttackWaveUseUnit(gv_pLAYER_06_HYBRID, lp_hybridUnit);
    AIAttackWaveSend(gv_pLAYER_06_HYBRID, 1, false);
    if ((UnitGetType(lp_hybridUnit) == "HybridAnnihilator")) {
        gf_HybridAnnihilatorAbilities(lp_hybridUnit);
    }
}
trigger auto_gf_HybridAnnihilatorAbilities_Trigger = null;
unit auto_gf_HybridAnnihilatorAbilities_lp_hybridUnit;
void gf_HybridAnnihilatorAbilities (unit lp_hybridUnit) {
    auto_gf_HybridAnnihilatorAbilities_lp_hybridUnit = lp_hybridUnit;
    if (auto_gf_HybridAnnihilatorAbilities_Trigger == null) {
        auto_gf_HybridAnnihilatorAbilities_Trigger = TriggerCreate("auto_gf_HybridAnnihilatorAbilities_TriggerFunc");
    }
    TriggerExecute(auto_gf_HybridAnnihilatorAbilities_Trigger, false, false);
}
bool auto_gf_HybridAnnihilatorAbilities_TriggerFunc (bool testConds, bool runActions) {
    unit lp_hybridUnit = auto_gf_HybridAnnihilatorAbilities_lp_hybridUnit;
    fixed autoB026C69D_at;
    // Variable Declarations
    int lv_count;
    // Variable Initialization
    // Implementation
    while ((UnitIsAlive(lp_hybridUnit) == true)) {
        autoB026C69D_at = 0;
        while (!((UnitIsAlive(lp_hybridUnit) == false)) && autoB026C69D_at <= 25.0) {
            Wait(1.0, c_timeGame);
            autoB026C69D_at = autoB026C69D_at + 1.0;
        }
        if ((UnitIsAlive(lp_hybridUnit) == true)) {
            if ((lv_count >= 2)) {
                libNtve_gf_AICast(lp_hybridUnit, Order(AbilityCommand("AnnihilatorPurificationNova", 0)));
                lv_count = 0;
            }
            else {
                gf_HybridAnnihilatorPsionicShadowBlast(lp_hybridUnit);
                lv_count += 1;
            }
        }
    }
    return true;
}
trigger auto_gf_HybridAnnihilatorPsionicShadowBlast_Trigger = null;
unit auto_gf_HybridAnnihilatorPsionicShadowBlast_lp_hybrid;
void gf_HybridAnnihilatorPsionicShadowBlast (unit lp_hybrid) {
    auto_gf_HybridAnnihilatorPsionicShadowBlast_lp_hybrid = lp_hybrid;
    if (auto_gf_HybridAnnihilatorPsionicShadowBlast_Trigger == null) {
        auto_gf_HybridAnnihilatorPsionicShadowBlast_Trigger = TriggerCreate("auto_gf_HybridAnnihilatorPsionicShadowBlast_TriggerFunc");
    }
    TriggerExecute(auto_gf_HybridAnnihilatorPsionicShadowBlast_Trigger, false, false);
}
bool auto_gf_HybridAnnihilatorPsionicShadowBlast_TriggerFunc (bool testConds, bool runActions) {
    unit lp_hybrid = auto_gf_HybridAnnihilatorPsionicShadowBlast_lp_hybrid;
    // Variable Declarations
    unitgroup lv_possibleVictims;
    // Variable Initialization
    lv_possibleVictims = UnitGroupEmpty();
    // Implementation
    UnitGroupLoopBegin(UnitGroupAlliance(gv_pLAYER_06_HYBRID, c_unitAllianceEnemy, RegionCircle(PointWithOffset(UnitGetPosition(lp_hybrid), 0.0, 0.0), 9.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((libNtve_gf_UnitIsVisibleToPlayer(UnitGroupLoopCurrent(), gv_pLAYER_06_HYBRID) == true)) {
            UnitGroupAdd(lv_possibleVictims, UnitGroupLoopCurrent());
        }
    }
    UnitGroupLoopEnd();
    libNtve_gf_AICast(lp_hybrid, OrderTargetingPoint(AbilityCommand("PsionicShadowBlast", 0), UnitGetPosition(UnitGroupRandomUnit(lv_possibleVictims, c_unitCountAlive))));
    return true;
}
void gf_SetHybridDifficulty (unit lp_hybrid) {
    // Variable Declarations
    fixed lv_difficultyModifier;
    // Variable Initialization
    // Implementation
    lv_difficultyModifier = ((gv_player_Difficulty_Modifier[gv_pLAYER_01_USER] + gv_player_Difficulty_Modifier[gv_pLAYER_02_USER]) / 2.0);
    UnitSetPropertyFixed(lp_hybrid, c_unitPropLifeMax, (1500.0 + (150.0 * lv_difficultyModifier)));
    UnitSetPropertyFixed(lp_hybrid, c_unitPropLifePercent, 100.0);
    UnitSetPropertyFixed(lp_hybrid, c_unitPropShieldsMax, (3000.0 + (250.0 * lv_difficultyModifier)));
    UnitSetPropertyFixed(lp_hybrid, c_unitPropShieldsPercent, 100.0);
    UnitSetPropertyFixed(lp_hybrid, c_unitPropShieldsRegen, (20.0 + (5.0 * lv_difficultyModifier)));
    gf_ApplyDifficultyBufftoUnits(libNtve_gf_ConvertUnitToUnitGroup(lp_hybrid));
}
trigger auto_gf_RunAttackWaveatMissionTime_Trigger = null;
trigger auto_gf_RunAttackWaveatMissionTime_lp_attackWave;
fixed auto_gf_RunAttackWaveatMissionTime_lp_time;
void gf_RunAttackWaveatMissionTime (trigger lp_attackWave, fixed lp_time) {
    auto_gf_RunAttackWaveatMissionTime_lp_attackWave = lp_attackWave;
    auto_gf_RunAttackWaveatMissionTime_lp_time = lp_time;
    if (auto_gf_RunAttackWaveatMissionTime_Trigger == null) {
        auto_gf_RunAttackWaveatMissionTime_Trigger = TriggerCreate("auto_gf_RunAttackWaveatMissionTime_TriggerFunc");
    }
    TriggerExecute(auto_gf_RunAttackWaveatMissionTime_Trigger, false, false);
}
bool auto_gf_RunAttackWaveatMissionTime_TriggerFunc (bool testConds, bool runActions) {
    trigger lp_attackWave = auto_gf_RunAttackWaveatMissionTime_lp_attackWave;
    fixed lp_time = auto_gf_RunAttackWaveatMissionTime_lp_time;
    // Implementation
    while (!((lp_time <= GameGetMissionTime()))) {
        Wait(0.3, c_timeAI);
    }
    if ((libCOMI_gf_GameIsOver() == false)) {
        TriggerExecute(lp_attackWave, true, false);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
// Trigger: Init 01 Load Data
//--------------------------------------------------------------------------------------------------
bool gt_Init01LoadData_Func (bool testConds, bool runActions) {
    libCOMI_gf_LoadCoopMission("COOP_Placeholder", gt_Init03LoadingComplete);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_Init01LoadData_Init () {
    gt_Init01LoadData = TriggerCreate("gt_Init01LoadData_Func");
    TriggerAddEventMapInit(gt_Init01LoadData);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Init 02 Players
//--------------------------------------------------------------------------------------------------
bool gt_Init02Players_Func (bool testConds, bool runActions) {
    playergroup autoE0EF2853_g;
    int autoE0EF2853_p;
    playergroup autoB969537F_g;
    int autoB969537F_p;
    // Variable Declarations
    int lv_playerIterEnemy;
    int lv_playerIterAlly;
    playergroup lv_amonSupportGroup;
    // Variable Initialization
    lv_amonSupportGroup = PlayerGroupEmpty();


    gv_pLAYER_01_USER = libCOMI_gf_GetRolePlayer(1);
    gv_pLAYER_02_USER = libCOMI_gf_GetRolePlayer(2);



    PlayerGroupAdd(gv_enemyGroup, gv_pLAYER_03_ENEMY);
    PlayerGroupAdd(gv_enemyGroup, gv_pLAYER_04_ENEMY);
    AISetDefenseRadii(gv_pLAYER_03_ENEMY, 15.0, 15.0, 15.0);
    AISetDefenseRadii(gv_pLAYER_04_ENEMY, 15.0, 15.0, 15.0);
    AISetDefenseRadii(gv_pLAYER_05_ALLY, 15.0, 15.0, 15.0);
    AICampaignStart(gv_pLAYER_05_ALLY);
    AICampaignStart(gv_pLAYER_06_HYBRID);
    AICampaignStart(gv_pLAYER_07_HYBRID_SUPPORT);
    PlayerGroupAdd(lv_amonSupportGroup, gv_pLAYER_06_HYBRID);
    PlayerGroupAdd(lv_amonSupportGroup, gv_pLAYER_07_HYBRID_SUPPORT);
    AIAttackWaveSetTargetPlayer(gv_pLAYER_05_ALLY, lv_amonSupportGroup);
    AIAttackWaveSetTargetPlayer(gv_pLAYER_06_HYBRID, PlayerGroupSingle(gv_pLAYER_05_ALLY));
    AIAttackWaveSetTargetPlayer(gv_pLAYER_07_HYBRID_SUPPORT, PlayerGroupSingle(gv_pLAYER_05_ALLY));
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_Init02Players_Init () {
    gt_Init02Players = TriggerCreate("gt_Init02Players_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Init 03 Loading Complete
//--------------------------------------------------------------------------------------------------
bool gt_Init03LoadingComplete_Func (bool testConds, bool runActions) {
    TriggerExecute(gt_Init02Players, true, false);
    TriggerExecute(gt_Init04Technology, true, false);
    TriggerExecute(gt_Init05Units, true, false);
    TriggerExecute(gt_Init06MusicSound, true, false);
    TriggerExecute(gt_Init07Environment, true, false);
    TriggerExecute(gt_Init08Difficulties, true, false);
    TriggerExecute(gt_Init09Tips, true, false);
    TriggerExecute(gt_StartAI, true, false);
    TriggerExecute(gt_StartGameQ, true, false);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_Init03LoadingComplete_Init () {
    gt_Init03LoadingComplete = TriggerCreate("gt_Init03LoadingComplete_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Init 04 Technology
//--------------------------------------------------------------------------------------------------
bool gt_Init04Technology_Func (bool testConds, bool runActions) {
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_Init04Technology_Init () {
    gt_Init04Technology = TriggerCreate("gt_Init04Technology_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Init 05 Units
//--------------------------------------------------------------------------------------------------
bool gt_Init05Units_Func (bool testConds, bool runActions) {
    gv_remainingProtossStructureCount = UnitCount(null, gv_pLAYER_05_ALLY, RegionFromId(11), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    gv_totalProtossStructures = UnitCount(null, gv_pLAYER_05_ALLY, RegionFromId(11), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    UnitStatusBarOverride(UnitFromId(727888777), c_unitStatusGroupAll);
    UnitStatusBarOverride(UnitFromId(1253775535), c_unitStatusGroupAll);
    libNtve_gf_MakeUnitInvulnerable(UnitFromId(727888777), true);
    libNtve_gf_MakeUnitInvulnerable(UnitFromId(1253775535), true);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_Init05Units_Init () {
    gt_Init05Units = TriggerCreate("gt_Init05Units_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Init 06 Music/Sound
//--------------------------------------------------------------------------------------------------
bool gt_Init06MusicSound_Func (bool testConds, bool runActions) {
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_Init06MusicSound_Init () {
    gt_Init06MusicSound = TriggerCreate("gt_Init06MusicSound_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Init 07 Environment
//--------------------------------------------------------------------------------------------------
bool gt_Init07Environment_Func (bool testConds, bool runActions) {
    GameTimeOfDaySet("08:00:00");
    PlayerGroupLoopBegin(libCOMI_gf_HumanPlayers());
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        VisExploreArea(PlayerGroupLoopCurrent(), RegionFromId(49), true, false);
        VisExploreArea(PlayerGroupLoopCurrent(), RegionFromId(22), true, false);
        VisExploreArea(PlayerGroupLoopCurrent(), RegionFromId(23), true, false);
        VisExploreArea(PlayerGroupLoopCurrent(), RegionFromId(24), true, false);
        VisExploreArea(PlayerGroupLoopCurrent(), RegionFromId(25), true, false);
        VisExploreArea(PlayerGroupLoopCurrent(), RegionFromId(26), true, false);
        VisExploreArea(PlayerGroupLoopCurrent(), RegionFromId(27), true, false);
    }
    PlayerGroupLoopEnd();
    gv_warpZonesActive[gv_pROTOSSWARPOUTWEST] = true;
    gv_warpZonesActive[gv_pROTOSSWARPOUTEAST] = true;
    gf_CreateWarpInPad(gv_pROTOSSWORLDWARPINWEST);
    gf_CreateWarpInPad(gv_pROTOSSWORLDWARPINEAST);
    libNtve_gf_CreateActorAtPoint("WarpOutPadInactive", RegionGetCenter(RegionFromId(15)));
    gv_warpZone[gv_aMONWARPOUTWEST] = libNtve_gf_ActorLastCreated();
    gv_warpZoneScope[gv_aMONWARPOUTWEST] = ActorScopeFromActor(libNtve_gf_ActorLastCreated());
    libNtve_gf_CreateActorAtPoint("WarpOutPadInactive", RegionGetCenter(RegionFromId(16)));
    gv_warpZone[gv_aMONWARPOUTEAST] = libNtve_gf_ActorLastCreated();
    gv_warpZoneScope[gv_aMONWARPOUTEAST] = ActorScopeFromActor(libNtve_gf_ActorLastCreated());
    libNtve_gf_CreateActorAtPoint("WarpOutPadActive", PointFromId(1694124573));
    gv_warpZone[gv_pROTOSSWARPOUTWEST] = libNtve_gf_ActorLastCreated();
    gv_warpZoneScope[gv_pROTOSSWARPOUTWEST] = ActorScopeFromActor(libNtve_gf_ActorLastCreated());
    libNtve_gf_CreateActorAtPoint("WarpOutPadActive", PointFromId(1043159015));
    gv_warpZone[gv_pROTOSSWARPOUTEAST] = libNtve_gf_ActorLastCreated();
    gv_warpZoneScope[gv_pROTOSSWARPOUTEAST] = ActorScopeFromActor(libNtve_gf_ActorLastCreated());
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_Init07Environment_Init () {
    gt_Init07Environment = TriggerCreate("gt_Init07Environment_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Init 08 Difficulties
//--------------------------------------------------------------------------------------------------
bool gt_Init08Difficulties_Func (bool testConds, bool runActions) {
    string auto51A11F02_val;
    // Variable Declarations
    unitgroup lv_voidRiftsGroup;
    // Variable Initialization
    lv_voidRiftsGroup = UnitGroupEmpty();
    PlayerGroupLoopBegin(libCOMI_gf_HumanPlayers());
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
      //  auto51A11F02_val = GameAttributePlayerValue("[bnet:Liberty (Mod)/0.0/999,file:Mods/Liberty.SC2Mod]3004", PlayerGroupLoopCurrent());
      //  if (auto51A11F02_val == "VyEy") {
       //     gv_player_Difficulty_Modifier[PlayerGroupLoopCurrent()] = 0;
      //  }
      //  else if (auto51A11F02_val == "Easy") {
      //      gv_player_Difficulty_Modifier[PlayerGroupLoopCurrent()] = 1;
      //  }
      //  else if (auto51A11F02_val == "Medi") {
      //      gv_player_Difficulty_Modifier[PlayerGroupLoopCurrent()] = 2;
      //  }
      //  else if (auto51A11F02_val == "MdHd") {
      //      gv_player_Difficulty_Modifier[PlayerGroupLoopCurrent()] = 3;
      //  }
        //else if (auto51A11F02_val == "Hard") {
         //   gv_player_Difficulty_Modifier[PlayerGroupLoopCurrent()] = 4;
       // }
       // else if (auto51A11F02_val == "HdVH") {
        //    gv_player_Difficulty_Modifier[PlayerGroupLoopCurrent()] = 5;
       // 
        //todo
        gv_player_Difficulty_Modifier[PlayerGroupLoopCurrent()] = 4;
    }
    PlayerGroupLoopEnd();
   
    UnitGroupAdd(lv_voidRiftsGroup, UnitFromId(735209505));
    UnitGroupAdd(lv_voidRiftsGroup, UnitFromId(391449148));
    UnitGroupAdd(lv_voidRiftsGroup, UnitFromId(545534090));
    UnitGroupAdd(lv_voidRiftsGroup, UnitFromId(913511382));
    gf_ApplyDifficultyBufftoUnits(lv_voidRiftsGroup);
    gv_hybridSpawnTime = (500.0 - (gv_player_Difficulty_Modifier[gv_pLAYER_01_USER] * 40.0));
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_Init08Difficulties_Init () {
    gt_Init08Difficulties = TriggerCreate("gt_Init08Difficulties_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Init 09 Tips
//--------------------------------------------------------------------------------------------------
bool gt_Init09Tips_Func (bool testConds, bool runActions) {
    HelpPanelAddTip(PlayerGroupAll(), libNtve_gf_FormatTipTitle(StringExternal("Param/Value/45BEE599"), libNtve_ge_TipType_NormalTip), StringExternal("Param/Value/C1EB9773"), StringToText(""), "Assets\\Textures\\btn-unit-xelnaga-destroyer.dds");
    HelpPanelAddTip(PlayerGroupAll(), libNtve_gf_FormatTipTitle(StringExternal("Param/Value/1D9CB7E6"), libNtve_ge_TipType_NormalTip), StringExternal("Param/Value/DCC22357"), StringToText(""), "Assets\\Textures\\btn-upgrade-vorazun-shadowstun.dds");
    HelpPanelAddTip(PlayerGroupAll(), libNtve_gf_FormatTipTitle(StringExternal("Param/Value/0C3822AC"), libNtve_ge_TipType_NormalTip), StringExternal("Param/Value/C4023E00"), StringToText(""), "Assets\\Textures\\tip_WarpZone.dds");
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_Init09Tips_Init () {
    gt_Init09Tips = TriggerCreate("gt_Init09Tips_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Start Game Q
//--------------------------------------------------------------------------------------------------
bool gt_StartGameQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    region lv_enemyBase;
    gf_ScaleBulliestoDifficulty();
    gf_ScaleVoidRiftstoDifficulty();
    Wait(7.0, c_timeReal);
    //if ((PlayerType(gv_pLAYER_01_USER) == c_playerTypeUser) && (PlayerStatus(gv_pLAYER_01_USER) == c_playerStatusActive) && (PlayerType(gv_pLAYER_02_USER) == c_playerTypeUser) && (PlayerStatus(gv_pLAYER_02_USER) == c_playerStatusActive)) {
    //}
    //else {
    //    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/51064338"));
    //}
    TriggerExecute(gt_TransmissionPrimaryObjectiveCreated, true, false);
    Wait(8.0, c_timeGame);
    TriggerExecute(gt_ObjectiveDestroyTheHybridWarpGatesCreate, true, true);
    TriggerExecute(gt_ShowandUpdatePrimaryObjectiveMarkers, true, false);
    Wait(10.0, c_timeGame);
    TriggerExecute(gt_ObjectiveDefendProtossAllyCreate, true, true);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("PrimaryObjectiveDefendReady", true, -1);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_StartGameQ_Init () {
    gt_StartGameQ = TriggerCreate("gt_StartGameQ_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Help Tip - Destroy Base to Cap WZ
//--------------------------------------------------------------------------------------------------
bool gt_HelpTipDestroyBasetoCapWZ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_HelpTipDestroyBasetoCapWZ_Init () {
    gt_HelpTipDestroyBasetoCapWZ = TriggerCreate("gt_HelpTipDestroyBasetoCapWZ_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Help Tip - Pathable After WZ Captured
//--------------------------------------------------------------------------------------------------
bool gt_HelpTipPathableAfterWZCaptured_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_HelpTipPathableAfterWZCaptured_Init () {
    gt_HelpTipPathableAfterWZCaptured = TriggerCreate("gt_HelpTipPathableAfterWZCaptured_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Enemy Base Monitor
//--------------------------------------------------------------------------------------------------
bool gt_EnemyBaseMonitor_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if ((gv_centerWarpZoneActivationCompletion < 100.0)) {
        gf_ResetEnemyBaseGroups(gv_aMONWARPOUTCENTER, RegionFromId(12));
    }
    if ((gv_eastWarpZoneActivationCompletion < 100.0)) {
        gf_ResetEnemyBaseGroups(gv_aMONWARPOUTEAST, RegionFromId(57));
    }
    if ((gv_southWarpZoneActivationCompletion < 100.0)) {
        gf_ResetEnemyBaseGroups(gv_aMONWARPOUTSOUTH, RegionFromId(1));
    }
    if ((gv_westWarpZoneActivationCompletion < 100.0)) {
        gf_ResetEnemyBaseGroups(gv_aMONWARPOUTWEST, RegionFromId(8));
    }
    if ((gv_westWarpZoneActivationCompletion >= 100.0) && (gv_southWarpZoneActivationCompletion >= 100.0) && (gv_eastWarpZoneActivationCompletion >= 100.0) && (gv_centerWarpZoneActivationCompletion >= 100.0)) {
        TriggerEnable(TriggerGetCurrent(), false);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_EnemyBaseMonitor_Init () {
    gt_EnemyBaseMonitor = TriggerCreate("gt_EnemyBaseMonitor_Func");
    TriggerAddEventTimePeriodic(gt_EnemyBaseMonitor, 3.0, c_timeGame);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Monitor West Warp Zone Base
//--------------------------------------------------------------------------------------------------
bool gt_MonitorWestWarpZoneBase_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_playersinRegion;
    // Variable Initialization
    // Actions
    if (!runActions) {
        return true;
    }
    lv_playersinRegion = gf_CheckifPlayersareinRegion(gv_aMONWARPOUTWEST);
    if ((UnitGroupCount(gv_enemyBaseUnitGroups[gv_aMONWARPOUTWEST], c_unitCountAlive) >= 1)) {
        gf_PhaseSmithWarpOut(gv_aMONWARPOUTWEST);
        if ((lv_playersinRegion == true)) {
            TriggerExecute(gt_HelpTipDestroyBasetoCapWZ, true, false);
        }
    }
    else {
        if ((lv_playersinRegion == true)) {
            if ((gv_phaseSmithWarpedIn == true) && (gv_phaseSmithReparing == true) && (gv_phaseSmithZone == gv_aMONWARPOUTWEST)) {
                gv_westWarpZoneActivationCompletion += 3.0;
                if ((gv_westWarpZoneActivationCompletion >= 100.0)) {
                    gv_westWarpZoneActivationCompletion = 100.0;
                    gf_ActivateWarpZone(gv_aMONWARPOUTWEST);
                    TriggerExecute(gt_SecondaryObjectiveCaptureWestWarpZoneComplete, true, false);
                    TriggerEnable(TriggerGetCurrent(), false);
                }
                TriggerExecute(gt_SecondaryObjectiveCaptureWestWarpZoneUpdate, true, false);
            }
            else if ((gv_phaseSmithWarpedIn == false)) {
                gf_PhaseSmithWarpIn(gv_aMONWARPOUTWEST);
            }
            else if ((gv_phaseSmithWarpedIn == true) && (gv_phaseSmithZone != gv_aMONWARPOUTWEST)) {
            }
            else if ((gv_phaseSmithWarpedIn == true) && (gv_phaseSmithReparing == false)) {
                TriggerExecute(gt_PhaseSmithAction, true, false);
            }
        }
        else {
            if (((UnitGroupCount(gv_enemyBaseFriendlyGroups[gv_aMONWARPOUTWEST][gv_pLAYER_01_USER], c_unitCountAlive) >= 1) || (UnitGroupCount(gv_enemyBaseFriendlyGroups[gv_aMONWARPOUTWEST][gv_pLAYER_02_USER], c_unitCountAlive) >= 1))) {
                TriggerExecute(gt_TransmissionBothCommandersRequiredtoCapWZ, true, false);
            }
        }
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_MonitorWestWarpZoneBase_Init () {
    gt_MonitorWestWarpZoneBase = TriggerCreate("gt_MonitorWestWarpZoneBase_Func");
    TriggerEnable(gt_MonitorWestWarpZoneBase, false);
    TriggerAddEventTimePeriodic(gt_MonitorWestWarpZoneBase, 1.0, c_timeGame);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Monitor East Warp Zone Base
//--------------------------------------------------------------------------------------------------
bool gt_MonitorEastWarpZoneBase_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_playersinRegion;
    // Variable Initialization
    // Actions
    if (!runActions) {
        return true;
    }
    lv_playersinRegion = gf_CheckifPlayersareinRegion(gv_aMONWARPOUTEAST);
    if ((UnitGroupCount(gv_enemyBaseUnitGroups[gv_aMONWARPOUTEAST], c_unitCountAlive) >= 1)) {
        gf_PhaseSmithWarpOut(gv_aMONWARPOUTEAST);
        if ((lv_playersinRegion == true)) {
            TriggerExecute(gt_HelpTipDestroyBasetoCapWZ, true, false);
        }
    }
    else {
        if ((lv_playersinRegion == true)) {
            if ((gv_phaseSmithWarpedIn == true) && (gv_phaseSmithReparing == true) && (gv_phaseSmithZone == gv_aMONWARPOUTEAST)) {
                gv_eastWarpZoneActivationCompletion += 4.0;
                if ((gv_eastWarpZoneActivationCompletion >= 100.0)) {
                    gv_eastWarpZoneActivationCompletion = 100.0;
                    gf_ActivateWarpZone(gv_aMONWARPOUTEAST);
                    TriggerExecute(gt_SecondaryObjectiveCaptureEastWarpZoneComplete, true, false);
                    TriggerEnable(TriggerGetCurrent(), false);
                }
                TriggerExecute(gt_SecondaryObjectiveCaptureEastWarpZoneUpdate, true, false);
            }
            else if ((gv_phaseSmithWarpedIn == false)) {
                gf_PhaseSmithWarpIn(gv_aMONWARPOUTEAST);
            }
            else if ((gv_phaseSmithWarpedIn == true) && (gv_phaseSmithZone != gv_aMONWARPOUTEAST)) {
            }
            else if ((gv_phaseSmithWarpedIn == true) && (gv_phaseSmithReparing == false)) {
                TriggerExecute(gt_PhaseSmithAction, true, false);
            }
        }
        else {
            if (((UnitGroupCount(gv_enemyBaseFriendlyGroups[gv_aMONWARPOUTEAST][gv_pLAYER_01_USER], c_unitCountAlive) >= 1) || (UnitGroupCount(gv_enemyBaseFriendlyGroups[gv_aMONWARPOUTEAST][gv_pLAYER_02_USER], c_unitCountAlive) >= 1))) {
                TriggerExecute(gt_TransmissionBothCommandersRequiredtoCapWZ, true, false);
            }
        }
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_MonitorEastWarpZoneBase_Init () {
    gt_MonitorEastWarpZoneBase = TriggerCreate("gt_MonitorEastWarpZoneBase_Func");
    TriggerEnable(gt_MonitorEastWarpZoneBase, false);
    TriggerAddEventTimePeriodic(gt_MonitorEastWarpZoneBase, 1.0, c_timeGame);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Monitor South Warp Zone Base
//--------------------------------------------------------------------------------------------------
bool gt_MonitorSouthWarpZoneBase_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_playersinRegion;
    // Variable Initialization
    // Actions
    if (!runActions) {
        return true;
    }
    lv_playersinRegion = gf_CheckifPlayersareinRegion(gv_aMONWARPOUTSOUTH);
    if ((UnitGroupCount(gv_enemyBaseUnitGroups[gv_aMONWARPOUTSOUTH], c_unitCountAlive) >= 1)) {
        gf_PhaseSmithWarpOut(gv_aMONWARPOUTSOUTH);
        if ((lv_playersinRegion == true)) {
            TriggerExecute(gt_HelpTipDestroyBasetoCapWZ, true, false);
        }
    }
    else {
        if ((lv_playersinRegion == true)) {
            if ((gv_phaseSmithWarpedIn == true) && (gv_phaseSmithReparing == true) && (gv_phaseSmithZone == gv_aMONWARPOUTSOUTH)) {
                gv_southWarpZoneActivationCompletion += 3.5;
                if ((gv_southWarpZoneActivationCompletion >= 100.0)) {
                    gv_southWarpZoneActivationCompletion = 100.0;
                    gf_ActivateWarpZone(gv_aMONWARPOUTSOUTH);
                    TriggerExecute(gt_SecondaryObjectiveCaptureSouthWarpZoneComplete, true, false);
                    TriggerEnable(TriggerGetCurrent(), false);
                }
                TriggerExecute(gt_SecondaryObjectiveCaptureSouthWarpZoneUpdate, true, false);
            }
            else if ((gv_phaseSmithWarpedIn == false)) {
                gf_PhaseSmithWarpIn(gv_aMONWARPOUTSOUTH);
            }
            else if ((gv_phaseSmithWarpedIn == true) && (gv_phaseSmithZone != gv_aMONWARPOUTSOUTH)) {
            }
            else if ((gv_phaseSmithWarpedIn == true) && (gv_phaseSmithReparing == false)) {
                TriggerExecute(gt_PhaseSmithAction, true, false);
            }
        }
        else {
            if (((UnitGroupCount(gv_enemyBaseFriendlyGroups[gv_aMONWARPOUTSOUTH][gv_pLAYER_01_USER], c_unitCountAlive) >= 1) || (UnitGroupCount(gv_enemyBaseFriendlyGroups[gv_aMONWARPOUTSOUTH][gv_pLAYER_02_USER], c_unitCountAlive) >= 1))) {
                TriggerExecute(gt_TransmissionBothCommandersRequiredtoCapWZ, true, false);
            }
        }
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_MonitorSouthWarpZoneBase_Init () {
    gt_MonitorSouthWarpZoneBase = TriggerCreate("gt_MonitorSouthWarpZoneBase_Func");
    TriggerEnable(gt_MonitorSouthWarpZoneBase, false);
    TriggerAddEventTimePeriodic(gt_MonitorSouthWarpZoneBase, 1.0, c_timeGame);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Monitor Center Warp Zone Base
//--------------------------------------------------------------------------------------------------
bool gt_MonitorCenterWarpZoneBase_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_playersinRegion;
    // Variable Initialization
    // Actions
    if (!runActions) {
        return true;
    }
    lv_playersinRegion = gf_CheckifPlayersareinRegion(gv_aMONWARPOUTCENTER);
    if ((UnitGroupCount(gv_enemyBaseUnitGroups[gv_aMONWARPOUTCENTER], c_unitCountAlive) >= 1)) {
        gf_PhaseSmithWarpOut(gv_aMONWARPOUTCENTER);
        if ((lv_playersinRegion == true)) {
            TriggerExecute(gt_HelpTipDestroyBasetoCapWZ, true, false);
        }
    }
    else {
        if ((lv_playersinRegion == true)) {
            if ((gv_phaseSmithWarpedIn == true) && (gv_phaseSmithReparing == true) && (gv_phaseSmithZone == gv_aMONWARPOUTCENTER)) {
                gv_centerWarpZoneActivationCompletion += 3.5;
                if ((gv_centerWarpZoneActivationCompletion >= 100.0)) {
                    gv_centerWarpZoneActivationCompletion = 100.0;
                    gf_ActivateWarpZone(gv_aMONWARPOUTCENTER);
                    TriggerExecute(gt_SecondaryObjectiveCaptureCenterWarpZoneComplete, true, false);
                    TriggerEnable(TriggerGetCurrent(), false);
                }
                TriggerExecute(gt_SecondaryObjectiveCaptureCenterWarpZoneUpdate, true, false);
            }
            else if ((gv_phaseSmithWarpedIn == false)) {
                gf_PhaseSmithWarpIn(gv_aMONWARPOUTCENTER);
            }
            else if ((gv_phaseSmithWarpedIn == true) && (gv_phaseSmithZone != gv_aMONWARPOUTCENTER)) {
            }
            else if ((gv_phaseSmithWarpedIn == true) && (gv_phaseSmithReparing == false)) {
                TriggerExecute(gt_PhaseSmithAction, true, false);
            }
        }
        else {
            if (((UnitGroupCount(gv_enemyBaseFriendlyGroups[gv_aMONWARPOUTCENTER][gv_pLAYER_01_USER], c_unitCountAlive) >= 1) || (UnitGroupCount(gv_enemyBaseFriendlyGroups[gv_aMONWARPOUTCENTER][gv_pLAYER_02_USER], c_unitCountAlive) >= 1))) {
                TriggerExecute(gt_TransmissionBothCommandersRequiredtoCapWZ, true, false);
            }
        }
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_MonitorCenterWarpZoneBase_Init () {
    gt_MonitorCenterWarpZoneBase = TriggerCreate("gt_MonitorCenterWarpZoneBase_Func");
    TriggerEnable(gt_MonitorCenterWarpZoneBase, false);
    TriggerAddEventTimePeriodic(gt_MonitorCenterWarpZoneBase, 1.0, c_timeGame);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Unit Enters Warp Zone
//--------------------------------------------------------------------------------------------------
bool gt_UnitEntersWarpZone_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    // Variable Initialization
    // Conditions
    if (testConds) {
        if (!((libNtve_gf_UnitIsUnderConstruction(EventUnit()) == false))) {
            return false;
        }
        if (!((UnitGetType(EventUnit()) != "Interceptor"))) {
            return false;
        }
        if (!(((UnitGetOwner(EventUnit()) == 1) || (UnitGetOwner(EventUnit()) == 2)))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    lv_player = (UnitGetOwner(EventUnit()) - 1);
    gf_WarpUnit(lv_player, EventUnitRegion(), EventUnit());
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_UnitEntersWarpZone_Init () {
    gt_UnitEntersWarpZone = TriggerCreate("gt_UnitEntersWarpZone_Func");
    TriggerAddEventUnitRegion(gt_UnitEntersWarpZone, null, gv_protossWarpOutEASTRegion, true);
    TriggerAddEventUnitRegion(gt_UnitEntersWarpZone, null, gv_protossWarpOutWESTRegion, true);
    TriggerAddEventUnitRegion(gt_UnitEntersWarpZone, null, gv_amonWarpOutCENTERRegion, true);
    TriggerAddEventUnitRegion(gt_UnitEntersWarpZone, null, gv_amonWarpOutSOUTHRegion, true);
    TriggerAddEventUnitRegion(gt_UnitEntersWarpZone, null, RegionFromId(15), true);
    TriggerAddEventUnitRegion(gt_UnitEntersWarpZone, null, RegionFromId(16), true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Unit Created In Warp Zone
//--------------------------------------------------------------------------------------------------
bool gt_UnitCreatedInWarpZone_Func (bool testConds, bool runActions) {
    // Variable Declarations
    region lv_triggeringRegion;
    int lv_player;
    // Variable Initialization
    // Conditions
    if (testConds) {
        if (!(((RegionContainsPoint(RegionFromId(16), UnitGetPosition(EventUnitCreatedUnit())) == true) || (RegionContainsPoint(RegionFromId(15), UnitGetPosition(EventUnitCreatedUnit())) == true) || (RegionContainsPoint(gv_amonWarpOutCENTERRegion, UnitGetPosition(EventUnitCreatedUnit())) == true) || (RegionContainsPoint(gv_amonWarpOutSOUTHRegion, UnitGetPosition(EventUnitCreatedUnit())) == true) || (RegionContainsPoint(gv_protossWarpOutWESTRegion, UnitGetPosition(EventUnitCreatedUnit())) == true) || (RegionContainsPoint(gv_protossWarpOutEASTRegion, UnitGetPosition(EventUnitCreatedUnit())) == true)))) {
            return false;
        }
        if (!(((UnitGetOwner(EventUnitCreatedUnit()) == 1) || (UnitGetOwner(EventUnitCreatedUnit()) == 2)))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if ((UnitTypeTestAttribute(UnitGetType(EventUnitCreatedUnit()), c_unitAttributeStructure) == false)) {
        while (!((libNtve_gf_UnitIsUnderConstruction(EventUnitCreatedUnit()) == false))) {
            Wait(0.5, c_timeGame);
        }
        lv_player = (UnitGetOwner(EventUnitCreatedUnit()) - 1);
        if ((RegionContainsPoint(RegionFromId(16), UnitGetPosition(EventUnitCreatedUnit())) == true)) {
            lv_triggeringRegion = RegionFromId(16);
        }
        else if ((RegionContainsPoint(RegionFromId(15), UnitGetPosition(EventUnitCreatedUnit())) == true)) {
            lv_triggeringRegion = RegionFromId(15);
        }
        else if ((RegionContainsPoint(gv_amonWarpOutCENTERRegion, UnitGetPosition(EventUnitCreatedUnit())) == true)) {
            lv_triggeringRegion = gv_amonWarpOutCENTERRegion;
        }
        else if ((RegionContainsPoint(gv_amonWarpOutSOUTHRegion, UnitGetPosition(EventUnitCreatedUnit())) == true)) {
            lv_triggeringRegion = gv_amonWarpOutSOUTHRegion;
        }
        else if ((RegionContainsPoint(gv_protossWarpOutWESTRegion, UnitGetPosition(EventUnitCreatedUnit())) == true)) {
            lv_triggeringRegion = gv_protossWarpOutWESTRegion;
        }
        else if ((RegionContainsPoint(gv_protossWarpOutEASTRegion, UnitGetPosition(EventUnitCreatedUnit())) == true)) {
            lv_triggeringRegion = gv_protossWarpOutEASTRegion;
        }
        gf_WarpUnit(lv_player, lv_triggeringRegion, EventUnitCreatedUnit());
    }
    else {
        UnitKill(EventUnitCreatedUnit());
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_UnitCreatedInWarpZone_Init () {
    gt_UnitCreatedInWarpZone = TriggerCreate("gt_UnitCreatedInWarpZone_Func");
    TriggerAddEventUnitCreated(gt_UnitCreatedInWarpZone, null, null, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Phase Smith Action
//--------------------------------------------------------------------------------------------------
bool gt_PhaseSmithAction_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    gf_PhaseSmithRepair(gv_phaseSmithZone);
    gf_PhaseSmithMove(gv_phaseSmithZone);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_PhaseSmithAction_Init () {
    gt_PhaseSmithAction = TriggerCreate("gt_PhaseSmithAction_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Phase Smith Attacked
//--------------------------------------------------------------------------------------------------
bool gt_PhaseSmithAttacked_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    gf_PhaseSmithWarpOut(gv_phaseSmithZone);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_PhaseSmithAttacked_Init () {
    gt_PhaseSmithAttacked = TriggerCreate("gt_PhaseSmithAttacked_Func");
    TriggerAddEventUnitAttacked2(gt_PhaseSmithAttacked, UnitRefFromVariable("gv_phaseSmith"), null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Unit Leaves Warp Zone Base WEST
//--------------------------------------------------------------------------------------------------
bool gt_UnitLeavesWarpZoneBaseWEST_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
        if (!((gv_phaseSmithWarpedIn == true))) {
            return false;
        }
        if (!((gv_phaseSmithZone == gv_aMONWARPOUTWEST))) {
            return false;
        }
        if (!(((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER) || (UnitGetOwner(EventUnit()) == gv_pLAYER_02_USER)))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    gf_ResetEnemyBaseGroups(gv_aMONWARPOUTWEST, RegionFromId(8));
    if ((gf_CheckifPlayersareinRegion(gv_aMONWARPOUTWEST) == false)) {
        gf_PhaseSmithWarpOut(gv_aMONWARPOUTWEST);
        TriggerExecute(gt_TransmissionWarpZoneSupportRequired, true, false);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_UnitLeavesWarpZoneBaseWEST_Init () {
    gt_UnitLeavesWarpZoneBaseWEST = TriggerCreate("gt_UnitLeavesWarpZoneBaseWEST_Func");
    TriggerAddEventUnitRegion(gt_UnitLeavesWarpZoneBaseWEST, null, RegionFromId(8), false);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Unit Leaves Warp Zone Base EAST
//--------------------------------------------------------------------------------------------------
bool gt_UnitLeavesWarpZoneBaseEAST_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
        if (!((gv_phaseSmithWarpedIn == true))) {
            return false;
        }
        if (!((gv_phaseSmithZone == gv_aMONWARPOUTEAST))) {
            return false;
        }
        if (!(((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER) || (UnitGetOwner(EventUnit()) == gv_pLAYER_02_USER)))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    gf_ResetEnemyBaseGroups(gv_aMONWARPOUTEAST, RegionFromId(57));
    if ((gf_CheckifPlayersareinRegion(gv_aMONWARPOUTEAST) == false)) {
        gf_PhaseSmithWarpOut(gv_aMONWARPOUTEAST);
        TriggerExecute(gt_TransmissionWarpZoneSupportRequired, true, false);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_UnitLeavesWarpZoneBaseEAST_Init () {
    gt_UnitLeavesWarpZoneBaseEAST = TriggerCreate("gt_UnitLeavesWarpZoneBaseEAST_Func");
    TriggerAddEventUnitRegion(gt_UnitLeavesWarpZoneBaseEAST, null, RegionFromId(57), false);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Unit Leaves Warp Zone Base SOUTH
//--------------------------------------------------------------------------------------------------
bool gt_UnitLeavesWarpZoneBaseSOUTH_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
        if (!((gv_phaseSmithWarpedIn == true))) {
            return false;
        }
        if (!((gv_phaseSmithZone == gv_aMONWARPOUTSOUTH))) {
            return false;
        }
        if (!(((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER) || (UnitGetOwner(EventUnit()) == gv_pLAYER_02_USER)))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    gf_ResetEnemyBaseGroups(gv_aMONWARPOUTSOUTH, RegionFromId(1));
    if ((gf_CheckifPlayersareinRegion(gv_aMONWARPOUTSOUTH) == false)) {
        gf_PhaseSmithWarpOut(gv_aMONWARPOUTSOUTH);
        TriggerExecute(gt_TransmissionWarpZoneSupportRequired, true, false);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_UnitLeavesWarpZoneBaseSOUTH_Init () {
    gt_UnitLeavesWarpZoneBaseSOUTH = TriggerCreate("gt_UnitLeavesWarpZoneBaseSOUTH_Func");
    TriggerAddEventUnitRegion(gt_UnitLeavesWarpZoneBaseSOUTH, null, RegionFromId(1), false);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Unit Leaves Warp Zone Base CENTER
//--------------------------------------------------------------------------------------------------
bool gt_UnitLeavesWarpZoneBaseCENTER_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
        if (!((gv_phaseSmithWarpedIn == true))) {
            return false;
        }
        if (!((gv_phaseSmithZone == gv_aMONWARPOUTCENTER))) {
            return false;
        }
        if (!(((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER) || (UnitGetOwner(EventUnit()) == gv_pLAYER_02_USER)))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    gf_ResetEnemyBaseGroups(gv_aMONWARPOUTCENTER, RegionFromId(7));
    if ((gf_CheckifPlayersareinRegion(gv_aMONWARPOUTCENTER) == false)) {
        gf_PhaseSmithWarpOut(gv_aMONWARPOUTCENTER);
        TriggerExecute(gt_TransmissionWarpZoneSupportRequired, true, false);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_UnitLeavesWarpZoneBaseCENTER_Init () {
    gt_UnitLeavesWarpZoneBaseCENTER = TriggerCreate("gt_UnitLeavesWarpZoneBaseCENTER_Func");
    TriggerAddEventUnitRegion(gt_UnitLeavesWarpZoneBaseCENTER, null, RegionFromId(7), false);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Multi-World Pathing
//--------------------------------------------------------------------------------------------------
bool gt_MultiWorldPathing_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_unitPathingIndex;
    // Variable Initialization
    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior2(EventUnit(), "SOAInspiration22") == false))) {
            return false;
        }
        if (!(((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER) || (UnitGetOwner(EventUnit()) == gv_pLAYER_02_USER)))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    lv_player = (UnitGetOwner(EventUnit()) - 1);
    lv_unitPathingIndex = gf_FindUnitPathingIndex(lv_player, gv_pATHINGSIZE, EventUnit());
    if ((AbilityCommandGetAction(OrderGetAbilityCommand(EventUnitOrder())) == c_cmdActionTarget) && (((RegionContainsPoint(RegionFromId(10), UnitGetPosition(EventUnit())) == true) && (RegionContainsPoint(RegionFromId(10), OrderGetTargetPosition(EventUnitOrder())) == false)) || ((RegionContainsPoint(RegionFromId(10), UnitGetPosition(EventUnit())) == false) && (RegionContainsPoint(RegionFromId(10), OrderGetTargetPosition(EventUnitOrder())) == true)))) {
        if ((lv_unitPathingIndex >= 0)) {
            gf_QueueUnitPathing(lv_player, EventUnit(), lv_unitPathingIndex, OrderGetAbilityCommand(EventUnitOrder()), OrderGetTargetPosition(EventUnitOrder()));
        }
        else {
            lv_unitPathingIndex = gf_FindFirstEmptyUnitPathingElement(lv_player, gv_pATHINGSIZE);
            if ((lv_unitPathingIndex >= 0)) {
                gf_QueueUnitPathing(lv_player, EventUnit(), lv_unitPathingIndex, OrderGetAbilityCommand(EventUnitOrder()), OrderGetTargetPosition(EventUnitOrder()));
            }
        }
    }
    else {
        if ((lv_unitPathingIndex >= 0)) {
            gf_DeletePathingUnit(lv_player, lv_unitPathingIndex);
        }
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_MultiWorldPathing_Init () {
    gt_MultiWorldPathing = TriggerCreate("gt_MultiWorldPathing_Func");
    TriggerAddEventUnitOrder(gt_MultiWorldPathing, null, AbilityCommand("move", 0));
    TriggerAddEventUnitOrder(gt_MultiWorldPathing, null, AbilityCommand("move", 3));
    TriggerAddEventUnitOrder(gt_MultiWorldPathing, null, AbilityCommand("move", 1));
    TriggerAddEventUnitOrder(gt_MultiWorldPathing, null, AbilityCommand("attack", 0));
    TriggerAddEventUnitOrder(gt_MultiWorldPathing, null, AbilityCommand("attack", 2));
    TriggerAddEventUnitOrder(gt_MultiWorldPathing, null, AbilityCommand("DroneHarvest", 0));
    TriggerAddEventUnitOrder(gt_MultiWorldPathing, null, AbilityCommand("ProbeHarvest", 0));
    TriggerAddEventUnitOrder(gt_MultiWorldPathing, null, AbilityCommand("SCVHarvest", 0));
    TriggerAddEventUnitOrder(gt_MultiWorldPathing, null, AbilityCommand("MULEGather", 0));
}
//--------------------------------------------------------------------------------------------------
// Trigger: Clear Unit Pathing
//--------------------------------------------------------------------------------------------------
bool gt_ClearUnitPathing_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    // Variable Initialization
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }
        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_02_USER))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    lv_player = (UnitGetOwner(EventUnit()) - 1);
    gf_DeletePathingUnit(lv_player, gf_FindUnitPathingIndex(lv_player, gv_pATHINGSIZE, EventUnit()));
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ClearUnitPathing_Init () {
    gt_ClearUnitPathing = TriggerCreate("gt_ClearUnitPathing_Func");
    TriggerAddEventUnitDied(gt_ClearUnitPathing, null);
    TriggerAddEventUnitRemoved(gt_ClearUnitPathing, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Show and Update Primary Objective Markers
//--------------------------------------------------------------------------------------------------
bool gt_ShowandUpdatePrimaryObjectiveMarkers_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_currentObjectiveUnit;
    int lv_markerCount;
    // Variable Initialization
    // Actions
    if (!runActions) {
        return true;
    }
    gf_ClearObjectiveMarkers(true);
    if ((UnitIsAlive(UnitFromId(913511382)) == true)) {
        lv_currentObjectiveUnit = UnitFromId(913511382);
        libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_Primary, UnitGetPosition(lv_currentObjectiveUnit), null);
        PingSetUnit(PingLastCreated(), lv_currentObjectiveUnit);
        gv_objectiveMarkers[lv_markerCount] = PingLastCreated();
        VisRevealArea(gv_pLAYER_01_USER, RegionFromId(17), 0.1, false);
        VisRevealArea(gv_pLAYER_02_USER, RegionFromId(17), 0.1, false);
        lv_markerCount += 1;
        TriggerExecute(gt_TransmissionFirstVoidRiftDetected, true, false);
    }
    else if (((UnitIsAlive(UnitFromId(545534090)) == true) || (UnitIsAlive(UnitFromId(391449148)) == true))) {
        if ((UnitIsAlive(UnitFromId(545534090)) == true)) {
            lv_currentObjectiveUnit = UnitFromId(545534090);
            libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_Primary, UnitGetPosition(lv_currentObjectiveUnit), null);
            PingSetUnit(PingLastCreated(), lv_currentObjectiveUnit);
            gv_objectiveMarkers[lv_markerCount] = PingLastCreated();
            VisRevealArea(gv_pLAYER_01_USER, RegionFromId(18), 0.1, false);
            VisRevealArea(gv_pLAYER_02_USER, RegionFromId(18), 0.1, false);
            lv_markerCount += 1;
            TriggerExecute(gt_TransmissionMoreVoidRiftsOnline, true, false);
        }
        if ((UnitIsAlive(UnitFromId(391449148)) == true)) {
            lv_currentObjectiveUnit = UnitFromId(391449148);
            libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_Primary, UnitGetPosition(lv_currentObjectiveUnit), null);
            PingSetUnit(PingLastCreated(), lv_currentObjectiveUnit);
            gv_objectiveMarkers[lv_markerCount] = PingLastCreated();
            VisRevealArea(gv_pLAYER_01_USER, RegionFromId(19), 0.1, false);
            VisRevealArea(gv_pLAYER_02_USER, RegionFromId(19), 0.1, false);
            lv_markerCount += 1;
            TriggerExecute(gt_TransmissionMoreVoidRiftsOnline, true, false);
        }
    }
    else if ((UnitIsAlive(UnitFromId(735209505)) == true)) {
        Wait(30.0, c_timeGame);
        lv_currentObjectiveUnit = UnitFromId(735209505);
        libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_Primary, UnitGetPosition(lv_currentObjectiveUnit), null);
        PingSetUnit(PingLastCreated(), lv_currentObjectiveUnit);
        gv_objectiveMarkers[lv_markerCount] = PingLastCreated();
        VisRevealArea(gv_pLAYER_01_USER, RegionFromId(20), 0.1, false);
        VisRevealArea(gv_pLAYER_02_USER, RegionFromId(20), 0.1, false);
        lv_markerCount += 1;
        gf_QueueMissionTransmission("PrimaryObjectiveRevealed");
        TriggerExecute(gt_TransmissionFinalVoidRiftOnline, true, false);
    }
    else if (true) {
        TriggerStop(TriggerGetCurrent());
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ShowandUpdatePrimaryObjectiveMarkers_Init () {
    gt_ShowandUpdatePrimaryObjectiveMarkers = TriggerCreate("gt_ShowandUpdatePrimaryObjectiveMarkers_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Show and Update Secondary Objective Markers
//--------------------------------------------------------------------------------------------------
bool gt_ShowandUpdateSecondaryObjectiveMarkers_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_currentObjectiveUnit;
    // Variable Initialization
    // Actions
    if (!runActions) {
        return true;
    }
    if ((gv_remainingPortalCount <= 3) && (GameGetMissionTime() >= (900.0 - (gv_player_Difficulty_Modifier[gv_pLAYER_01_USER] * 50.0) - (gv_pLAYER_02_USER * 50.0)))) {
        if ((UnitIsAlive(UnitFromId(727888777)) == true)) {
            TriggerExecute(gt_SecondaryObjectiveDestroyHybridSouthLabCreate, true, false);
        }
        if ((((GameGetMissionTime() >= (1400.0 - (gv_player_Difficulty_Modifier[gv_pLAYER_01_USER] * 50.0) - (gv_pLAYER_02_USER * 50.0))) && (gv_remainingPortalCount <= 1)) || ((GameGetMissionTime() >= (1700.0 - (gv_player_Difficulty_Modifier[gv_pLAYER_01_USER] * 50.0) - (gv_pLAYER_02_USER * 50.0))) && (gv_remainingPortalCount <= 2)))) {
            TriggerExecute(gt_SecondaryObjectiveDestroyHybridNorthLabCreate, true, false);
        }
    }
    if ((gv_eastWarpZoneActivationCompletion < 100.0) && ((GameGetMissionTime() >= 1800.0) || ((gv_remainingPortalCount <= 2) && (GameGetMissionTime() >= 1500.0)) || ((gv_remainingPortalCount <= 1) && (GameGetMissionTime() >= 1300.0)))) {
        TriggerExecute(gt_SecondaryObjectiveCaptureEastWarpZoneCreate, true, false);
    }
    if ((gv_westWarpZoneActivationCompletion < 100.0) && (GameGetMissionTime() >= 70.0)) {
        TriggerExecute(gt_SecondaryObjectiveCaptureWestWarpZoneCreate, true, false);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ShowandUpdateSecondaryObjectiveMarkers_Init () {
    gt_ShowandUpdateSecondaryObjectiveMarkers = TriggerCreate("gt_ShowandUpdateSecondaryObjectiveMarkers_Func");
    TriggerAddEventTimePeriodic(gt_ShowandUpdateSecondaryObjectiveMarkers, 5.0, c_timeGame);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Update Portal Count
//--------------------------------------------------------------------------------------------------
bool gt_UpdatePortalCount_Func (bool testConds, bool runActions) {
    unit auto32AFA4B3_val;
    // Actions
    if (!runActions) {
        return true;
    }
    gv_remainingPortalCount -= 1;
    TriggerExecute(gt_ObjectiveDestroyTheHybridWarpGatesUpdate, true, false);
    TriggerExecute(gt_ShowandUpdatePrimaryObjectiveMarkers, true, false);
    if ((gv_remainingPortalCount <= 0)) {
        TriggerExecute(gt_VictoryPrimaryObjectiveComplete, true, false);
    }
    auto32AFA4B3_val = EventUnit();
    if (auto32AFA4B3_val == UnitFromId(913511382)) {
        UnitRemove(UnitFromId(1247941671));
    }
    else if (auto32AFA4B3_val == UnitFromId(545534090)) {
        UnitRemove(UnitFromId(867685197));
        TriggerExecute(gt_SecondaryObjectiveCaptureCenterWarpZoneCreate, true, false);
    }
    else if (auto32AFA4B3_val == UnitFromId(391449148)) {
        UnitRemove(UnitFromId(1583399070));
        TriggerExecute(gt_SecondaryObjectiveCaptureSouthWarpZoneCreate, true, false);
    }
    else if (auto32AFA4B3_val == UnitFromId(735209505)) {
        UnitRemove(UnitFromId(2007402));
    }
    else {
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_UpdatePortalCount_Init () {
    gt_UpdatePortalCount = TriggerCreate("gt_UpdatePortalCount_Func");
    TriggerAddEventUnitDied(gt_UpdatePortalCount, UnitRefFromUnit(UnitFromId(913511382)));
    TriggerAddEventUnitDied(gt_UpdatePortalCount, UnitRefFromUnit(UnitFromId(545534090)));
    TriggerAddEventUnitDied(gt_UpdatePortalCount, UnitRefFromUnit(UnitFromId(391449148)));
    TriggerAddEventUnitDied(gt_UpdatePortalCount, UnitRefFromUnit(UnitFromId(735209505)));
}
//--------------------------------------------------------------------------------------------------
// Trigger: Update Protoss Structure Count
//--------------------------------------------------------------------------------------------------
bool gt_UpdateProtossStructureCount_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_totalStructures;
    fixed lv_remainingStructures;
    // Variable Initialization
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_05_ALLY))) {
            return false;
        }
        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeStructure) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    gv_remainingProtossStructureCount = UnitCount(null, gv_pLAYER_05_ALLY, RegionFromId(11), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    lv_remainingStructures = gv_remainingProtossStructureCount;
    lv_totalStructures = gv_totalProtossStructures;
    TriggerExecute(gt_ObjectiveDefendProtossAllyUpdate, true, false);
    if ((gv_remainingProtossStructureCount <= 0)) {
        TriggerExecute(gt_DefeatPrimaryObjectiveFailed, true, false);
    }
    else {
        if (((lv_remainingStructures / lv_totalStructures) <= 0.8) && (gv_protossStructureCountWarningPlayed[0] == false) && (TechTreeUnitCount(gv_pLAYER_06_HYBRID, "HybridAnnihilator", c_techCountQueuedOrBetter) > 0)) {
            gv_protossStructureCountWarningPlayed[0] = true;
            TriggerExecute(gt_SoundsHybridProgression, true, true);
            TriggerExecute(gt_TransmissionHybridProgress, true, false);
        }
        else if (((lv_remainingStructures / lv_totalStructures) <= 0.6) && (gv_protossStructureCountWarningPlayed[1] == false) && (TechTreeUnitCount(gv_pLAYER_06_HYBRID, "HybridAnnihilator", c_techCountQueuedOrBetter) > 0)) {
            gv_protossStructureCountWarningPlayed[1] = true;
            TriggerExecute(gt_SoundsHybridProgression, true, true);
            TriggerExecute(gt_TransmissionHybridProgress, true, false);
        }
        else if (((lv_remainingStructures / lv_totalStructures) <= 0.4) && (gv_protossStructureCountWarningPlayed[2] == false) && (TechTreeUnitCount(gv_pLAYER_06_HYBRID, "HybridAnnihilator", c_techCountQueuedOrBetter) > 0)) {
            gv_protossStructureCountWarningPlayed[2] = true;
            TriggerExecute(gt_SoundsHybridProgression, true, true);
            TriggerExecute(gt_TransmissionHybridProgress, true, false);
        }
        else if (((lv_remainingStructures / lv_totalStructures) <= 0.25) && (gv_protossStructureCountWarningPlayed[3] == false)) {
            gv_protossStructureCountWarningPlayed[3] = true;
            TriggerExecute(gt_SoundsHybridProgression, true, true);
            TriggerExecute(gt_TransmissionHybridProgressFinal, true, false);
        }
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_UpdateProtossStructureCount_Init () {
    gt_UpdateProtossStructureCount = TriggerCreate("gt_UpdateProtossStructureCount_Func");
    TriggerAddEventUnitDied(gt_UpdateProtossStructureCount, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Hybrid Lab Dies
//--------------------------------------------------------------------------------------------------
bool gt_HybridLabDies_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((EventUnit() == UnitFromId(727888777)) || (EventUnit() == UnitFromId(1253775535))))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if ((EventUnit() == UnitFromId(727888777))) {
        TriggerExecute(gt_SecondaryObjectiveDestroyHybridSouthLabComplete, true, false);
    }
    else {
        TriggerExecute(gt_SecondaryObjectiveDestroyHybridNorthLabComplete, true, false);
    }
    if ((UnitIsAlive(UnitFromId(727888777)) == false) && (UnitIsAlive(UnitFromId(1253775535)) == false)) {
        TriggerEnable(TriggerGetCurrent(), false);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_HybridLabDies_Init () {
    gt_HybridLabDies = TriggerCreate("gt_HybridLabDies_Func");
    TriggerAddEventUnitDied(gt_HybridLabDies, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Enemy Attacking Q
//--------------------------------------------------------------------------------------------------
bool gt_EnemyAttackingQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    gf_QueueMissionTransmission("AttackWave");
    Wait(20.0, c_timeAI);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_EnemyAttackingQ_Init () {
    gt_EnemyAttackingQ = TriggerCreate("gt_EnemyAttackingQ_Func");
    TriggerAddEventPlayerAIWave(gt_EnemyAttackingQ, gv_pLAYER_03_ENEMY);
    TriggerAddEventPlayerAIWave(gt_EnemyAttackingQ, gv_pLAYER_04_ENEMY);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Another Warp Zone Discovered
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionAnotherWarpZoneDiscovered_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    gf_QueueTransmission(SoundLink("sp_AnotherWarpZoneDiscovered", -1), TransmissionSourceFromUnitType("HighTemplar", false));
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_TransmissionAnotherWarpZoneDiscovered_Init () {
    gt_TransmissionAnotherWarpZoneDiscovered = TriggerCreate("gt_TransmissionAnotherWarpZoneDiscovered_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Both Commanders Required to Cap WZ
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionBothCommandersRequiredtoCapWZ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    gf_QueueTransmission(SoundLink("sp_BothPlayersReqToCapWZ", -1), TransmissionSourceFromUnitType("HighTemplar", false));
    Wait(180.0, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_TransmissionBothCommandersRequiredtoCapWZ_Init () {
    gt_TransmissionBothCommandersRequiredtoCapWZ = TriggerCreate("gt_TransmissionBothCommandersRequiredtoCapWZ_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Void Rift Warp Zone Discovered
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionVoidRiftWarpZoneDiscovered_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    gf_QueueTransmission(SoundLink("sp_CenterWarpZoneDiscovered", -1), TransmissionSourceFromUnitType("HighTemplar", false));
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_TransmissionVoidRiftWarpZoneDiscovered_Init () {
    gt_TransmissionVoidRiftWarpZoneDiscovered = TriggerCreate("gt_TransmissionVoidRiftWarpZoneDiscovered_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Final Enemy Base Started
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionFinalEnemyBaseStarted_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeStructure) == true))) {
            return false;
        }
        if (!(((UnitGetOwner(EventUnit()) == gv_pLAYER_03_ENEMY) || (UnitGetOwner(EventUnit()) == gv_pLAYER_04_ENEMY)))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if ((gf_BaseContainsLastVoidRift(EventUnit()) == true)) {
        TriggerEnable(TriggerGetCurrent(), false);
        gf_QueueTransmission(SoundLink("sp_FinalEnemyBaseStarted", -1), TransmissionSourceFromUnitType("HighTemplar", false));
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_TransmissionFinalEnemyBaseStarted_Init () {
    gt_TransmissionFinalEnemyBaseStarted = TriggerCreate("gt_TransmissionFinalEnemyBaseStarted_Func");
    TriggerAddEventUnitDied(gt_TransmissionFinalEnemyBaseStarted, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Final Void Rift Online
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionFinalVoidRiftOnline_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    gf_QueueTransmission(SoundLink("sp_FinalVoidRiftOnline", -1), TransmissionSourceFromUnitType("HighTemplar", false));
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_TransmissionFinalVoidRiftOnline_Init () {
    gt_TransmissionFinalVoidRiftOnline = TriggerCreate("gt_TransmissionFinalVoidRiftOnline_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - First Hybrid Lab Online
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionFirstHybridLabOnline_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    gf_QueueTransmission(SoundLink("sp_FirstHybridLabOnline", -1), TransmissionSourceFromUnitType("HighTemplar", false));
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_TransmissionFirstHybridLabOnline_Init () {
    gt_TransmissionFirstHybridLabOnline = TriggerCreate("gt_TransmissionFirstHybridLabOnline_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - First Void Rift Detected
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionFirstVoidRiftDetected_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    gf_QueueMissionTransmission("PrimaryObjectiveRevealed");
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_TransmissionFirstVoidRiftDetected_Init () {
    gt_TransmissionFirstVoidRiftDetected = TriggerCreate("gt_TransmissionFirstVoidRiftDetected_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - First Warp Zone Discovered
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionFirstWarpZoneDiscovered_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    gf_QueueTransmission(SoundLink("sp_FirstWarpZoneDiscovered", -1), TransmissionSourceFromUnitType("HighTemplar", false));
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_TransmissionFirstWarpZoneDiscovered_Init () {
    gt_TransmissionFirstWarpZoneDiscovered = TriggerCreate("gt_TransmissionFirstWarpZoneDiscovered_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Hybrid Progress
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionHybridProgress_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    gf_QueueTransmission(SoundLink("sp_HybridProgress", -1), TransmissionSourceFromUnitType("HighTemplar", false));
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_TransmissionHybridProgress_Init () {
    gt_TransmissionHybridProgress = TriggerCreate("gt_TransmissionHybridProgress_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Hybrid Progress Final
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionHybridProgressFinal_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    gf_QueueTransmission(SoundLink("sp_HybridProgressFinal", -1), TransmissionSourceFromUnitType("HighTemplar", false));
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_TransmissionHybridProgressFinal_Init () {
    gt_TransmissionHybridProgressFinal = TriggerCreate("gt_TransmissionHybridProgressFinal_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Hybrid Spawned
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionHybridSpawned_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    if ((gv_firstHybridSpawned == false)) {
        gf_QueueTransmission(SoundLink("sp_FirstHybridSpawned", -1), TransmissionSourceFromUnitType("HighTemplar", false));
        gv_firstHybridSpawned = true;
    }
    else {
        if ((gv_warpZonesActive[gv_aMONWARPOUTWEST] == false) && (gv_warpZonesActive[gv_aMONWARPOUTEAST] == false) && (gv_warpZonesActive[gv_aMONWARPOUTCENTER] == false) && (gv_warpZonesActive[gv_aMONWARPOUTSOUTH] == false)) {
            gf_QueueTransmission(SoundLink("sp_HybridSpawnedButNoWarpZone", -1), TransmissionSourceFromUnitType("HighTemplar", false));
        }
        else {
            gf_QueueTransmission(SoundLink("sp_HybridSpawned", -1), TransmissionSourceFromUnitType("HighTemplar", false));
        }
    }
    Wait(60.0, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_TransmissionHybridSpawned_Init () {
    gt_TransmissionHybridSpawned = TriggerCreate("gt_TransmissionHybridSpawned_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - More Void Rifts Online
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionMoreVoidRiftsOnline_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    gf_QueueMissionTransmission("PrimaryObjectiveRevealed");
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_TransmissionMoreVoidRiftsOnline_Init () {
    gt_TransmissionMoreVoidRiftsOnline = TriggerCreate("gt_TransmissionMoreVoidRiftsOnline_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Primary Objective Created
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionPrimaryObjectiveCreated_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    gf_QueueTransmission(SoundLink("sp_PrimaryObjectiveCreated", -1), TransmissionSourceFromUnitType("HighTemplar", false));
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_TransmissionPrimaryObjectiveCreated_Init () {
    gt_TransmissionPrimaryObjectiveCreated = TriggerCreate("gt_TransmissionPrimaryObjectiveCreated_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Protoss Warp Zone Disabled
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionProtossWarpZoneDisabled_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    gf_QueueTransmission(SoundLink("sp_ProtossWarpZoneDisabled", -1), TransmissionSourceFromUnitType("HighTemplar", false));
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_TransmissionProtossWarpZoneDisabled_Init () {
    gt_TransmissionProtossWarpZoneDisabled = TriggerCreate("gt_TransmissionProtossWarpZoneDisabled_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Second Hybrid Lab Online
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionSecondHybridLabOnline_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    gf_QueueTransmission(SoundLink("sp_SecondHybridLabOnline", -1), TransmissionSourceFromUnitType("HighTemplar", false));
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_TransmissionSecondHybridLabOnline_Init () {
    gt_TransmissionSecondHybridLabOnline = TriggerCreate("gt_TransmissionSecondHybridLabOnline_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Shadow Cloud Damage
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionShadowCloudDamage_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
        if (!((UnitGetType(EventUnitDamageSourceUnit()) == "ShadowCloud"))) {
            return false;
        }
        if (!(((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER) || (UnitGetOwner(EventUnit()) == gv_pLAYER_02_USER)))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    gf_QueueTransmission(SoundLink("sp_ShadowCloudDamage", -1), TransmissionSourceFromUnitType("HighTemplar", false));
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_TransmissionShadowCloudDamage_Init () {
    gt_TransmissionShadowCloudDamage = TriggerCreate("gt_TransmissionShadowCloudDamage_Func");
    TriggerAddEventUnitDamaged(gt_TransmissionShadowCloudDamage, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Shadow Cloud Progress
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionShadowCloudProgress_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    gf_QueueTransmission(SoundLink("sp_ShadowCloudProgress", -1), TransmissionSourceFromUnitType("HighTemplar", false));
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_TransmissionShadowCloudProgress_Init () {
    gt_TransmissionShadowCloudProgress = TriggerCreate("gt_TransmissionShadowCloudProgress_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Warp Zone Captured
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionWarpZoneCaptured_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    gf_QueueTransmission(SoundLink("sp_WarpZoneCaptured", -1), TransmissionSourceFromUnitType("HighTemplar", false));
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_TransmissionWarpZoneCaptured_Init () {
    gt_TransmissionWarpZoneCaptured = TriggerCreate("gt_TransmissionWarpZoneCaptured_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Warp Zone Support Required
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionWarpZoneSupportRequired_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    if ((PlayerType(gv_pLAYER_01_USER) == c_playerTypeUser) && (PlayerStatus(gv_pLAYER_01_USER) == c_playerStatusActive) && (PlayerType(gv_pLAYER_02_USER) == c_playerTypeUser) && (PlayerStatus(gv_pLAYER_02_USER) == c_playerStatusActive)) {
        TriggerExecute(gt_TransmissionBothCommandersRequiredtoCapWZ, true, false);
    }
    else {
        gf_QueueTransmission(SoundLink("sp_WarpZoneSupportRequired", -1), TransmissionSourceFromUnitType("HighTemplar", false));
    }
    Wait(180.0, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_TransmissionWarpZoneSupportRequired_Init () {
    gt_TransmissionWarpZoneSupportRequired = TriggerCreate("gt_TransmissionWarpZoneSupportRequired_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Sounds - Hybrid Progression
//--------------------------------------------------------------------------------------------------
bool gt_SoundsHybridProgression_Func (bool testConds, bool runActions) {
    int init_i;
    // Variable Declarations
    soundlink[6] lv_step1Sounds;
    // Variable Initialization
    for (init_i = 0; init_i <= 5; init_i += 1) {
        lv_step1Sounds[init_i] = SoundLink("EditorDefaultSound", -1);
    }
    // Actions
    if (!runActions) {
        return true;
    }
    lv_step1Sounds[0] = SoundLink("Hybrid_Ready", -1);
    lv_step1Sounds[1] = SoundLink("Hybrid_What", -1);
    lv_step1Sounds[2] = SoundLink("Hybrid_Yes", -1);
    lv_step1Sounds[3] = SoundLink("HybridF_Roar", -1);
    gf_QueueSound(lv_step1Sounds[RandomInt(0, 3)]);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SoundsHybridProgression_Init () {
    gt_SoundsHybridProgression = TriggerCreate("gt_SoundsHybridProgression_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Primary Objective Failed
//--------------------------------------------------------------------------------------------------
bool gt_DefeatPrimaryObjectiveFailed_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_GameOver(libCOMI_ge_CampaignMissionGameResultType_Defeat);
    TransmissionClearAll();
    TriggerQueuePause(true);
    TriggerQueueClear(c_triggerQueueRemove);
    libCOMI_gf_SendMissionTransmission("DestroyedReminder", false, -1);
    libCOMI_gf_CinematicModeCampaign(true, 1.5, true);
    libCOMI_gf_DisplayCampaignMessage(libCOMI_gf_HumanPlayers(), libCOMI_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/79462FB3"), libCOMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
    CameraLockInput(gv_pLAYER_01_USER, true);
    CameraLockInput(gv_pLAYER_02_USER, true);
    UnitClearSelection(gv_pLAYER_01_USER);
    UnitClearSelection(gv_pLAYER_02_USER);
    UISetSelectionTypeEnabled(PlayerGroupAll(), c_localSelectionTypeUnknown, false);
    CameraPan(gv_pLAYER_01_USER, RegionGetCenter(RegionEntireMap()), 1.5, -1, 10.0, false);
    CameraPan(gv_pLAYER_02_USER, RegionGetCenter(RegionEntireMap()), 1.5, -1, 10.0, false);
    libCOMI_gf_WaitForMissionTransmission();
    UISetCursorVisible(PlayerGroupAll(), true);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_DefeatPrimaryObjectiveFailed_Init () {
    gt_DefeatPrimaryObjectiveFailed = TriggerCreate("gt_DefeatPrimaryObjectiveFailed_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Victory Primary Objective Complete
//--------------------------------------------------------------------------------------------------
bool gt_VictoryPrimaryObjectiveComplete_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_VictorySequence, true, false);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_VictoryPrimaryObjectiveComplete_Init () {
    gt_VictoryPrimaryObjectiveComplete = TriggerCreate("gt_VictoryPrimaryObjectiveComplete_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Victory Sequence
//--------------------------------------------------------------------------------------------------
bool gt_VictorySequence_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_GameOver(libCOMI_ge_CampaignMissionGameResultType_Victory);
    Wait(2.0, c_timeReal);
    TriggerExecute(gt_ObjectiveDestroyTheHybridWarpGatesComplete, true, false);
    libCOMI_gf_RunMissionVictorySequence(gt_VictoryFanfareQ);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_VictorySequence_Init () {
    gt_VictorySequence = TriggerCreate("gt_VictorySequence_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Victory Fanfare Q
//--------------------------------------------------------------------------------------------------
bool gt_VictoryFanfareQ_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    TransmissionClearAll();
    TriggerQueueEnter();
    libCOMI_gf_CinematicModeCampaign(true, c_transitionDurationDefault, true);
    libCOMI_gf_SendMissionTransmission("PrimaryObjectiveVictory", false, -1);
    UnitPauseAll(true);
    CameraLockInput(gv_pLAYER_01_USER, true);
    CameraLockInput(gv_pLAYER_02_USER, true);
    UnitClearSelection(gv_pLAYER_01_USER);
    UnitClearSelection(gv_pLAYER_02_USER);
    UISetSelectionTypeEnabled(PlayerGroupAll(), c_localSelectionTypeUnknown, false);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoDefault(), 2.0, -1, 10.0, false);
    CameraPan(gv_pLAYER_01_USER, gv_victoryCompletePan, 2.0, -1, 10.0, false);
    CameraApplyInfo(gv_pLAYER_02_USER, CameraInfoDefault(), 2.0, -1, 10.0, false);
    CameraPan(gv_pLAYER_02_USER, gv_victoryCompletePan, 2.0, -1, 10.0, false);
    libCOMI_gf_DisplayCampaignMessage(PlayerGroupSingle(gv_pLAYER_01_USER), libCOMI_ge_CampaignMessageType_MissionVictory, StringExternal("Param/Value/684A78B4"), libCOMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
    libCOMI_gf_DisplayCampaignMessage(PlayerGroupSingle(gv_pLAYER_02_USER), libCOMI_ge_CampaignMessageType_MissionVictory, StringExternal("Param/Value/E5C8709E"), libCOMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
    libCOMI_gf_WaitForMissionTransmission();
    Wait(libCOMI_gv_campaignVictoryDelay, c_timeGame);
    UISetCursorVisible(PlayerGroupAll(), true);
    TriggerExecute(gt_Victory, true, false);
    TriggerQueueExit();
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_VictoryFanfareQ_Init () {
    gt_VictoryFanfareQ = TriggerCreate("gt_VictoryFanfareQ_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Victory
//--------------------------------------------------------------------------------------------------
bool gt_Victory_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_EndCampaignMission(c_gameOverVictory);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_Victory_Init () {
    gt_Victory = TriggerCreate("gt_Victory_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Defeat
//--------------------------------------------------------------------------------------------------
bool gt_Defeat_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_EndCampaignMission(c_gameOverDefeat);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_Defeat_Init () {
    gt_Defeat = TriggerCreate("gt_Defeat_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Start AI
//--------------------------------------------------------------------------------------------------
bool gt_StartAI_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    libCOMI_gf_StartCoopAI(gv_pLAYER_03_ENEMY, gv_pLAYER_01_USER);
    libCOMI_gf_StartCoopAI(gv_pLAYER_04_ENEMY, gv_pLAYER_02_USER);
    TriggerExecute(gt_SetupAttackWaveSpawn, true, false);
    TriggerExecute(gt_AIAttackWaves, true, false);
 //   PlayerGroupLoopBegin(gv_enemyGroup);
    //for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
   //     AIToggleBulliesInRegion(PlayerGroupLoopCurrent(), RegionFromId(21), false);
   //     AIToggleBulliesInRegion(PlayerGroupLoopCurrent(), RegionFromId(8), false);
  //      AIToggleBulliesInRegion(PlayerGroupLoopCurrent(), RegionFromId(5), false);
  //      AIToggleBulliesInRegion(PlayerGroupLoopCurrent(), RegionFromId(1), false);
 //       AIToggleBulliesInRegion(PlayerGroupLoopCurrent(), RegionFromId(6), false);
 //       AIToggleBulliesInRegion(PlayerGroupLoopCurrent(), RegionFromId(57), false);
//}
    PlayerGroupLoopEnd();
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_StartAI_Init () {
    gt_StartAI = TriggerCreate("gt_StartAI_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: AI Base Destroyed
//--------------------------------------------------------------------------------------------------
bool gt_AIBaseDestroyed_Func (bool testConds, bool runActions) {
    int autoA44BFEAF_ae;
    int autoA44BFEAF_ai;
    // Variable Declarations
    region lv_bullyRegion;
    region lv_loopRegion;
    int lv_loopIterator;
    int lv_structuresRemaining;
    fixed lv_timeRemaining;
    // Variable Initialization
    // Conditions
    if (testConds) {
        if (!(((UnitGetOwner(EventUnit()) == gv_pLAYER_03_ENEMY) || (UnitGetOwner(EventUnit()) == gv_pLAYER_04_ENEMY)))) {
            return false;
        }
        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeStructure) == true))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    autoA44BFEAF_ae = 8;
    autoA44BFEAF_ai = 1;
    lv_loopIterator = 1;
    for ( ; ( (autoA44BFEAF_ai >= 0 && lv_loopIterator <= autoA44BFEAF_ae) || (autoA44BFEAF_ai <= 0 && lv_loopIterator >= autoA44BFEAF_ae) ) ; lv_loopIterator += autoA44BFEAF_ai ) {
        lv_loopRegion = RegionFromName(("EnemyBase " + IntToString(lv_loopIterator)));
        if ((libNtve_gf_UnitInRegion(EventUnit(), lv_loopRegion) == true)) {
            lv_bullyRegion = lv_loopRegion;
            break;
        }
    }
    lv_structuresRemaining = UnitCount(null, gv_pLAYER_03_ENEMY, lv_bullyRegion, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    lv_structuresRemaining += UnitCount(null, gv_pLAYER_04_ENEMY, lv_bullyRegion, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    if ((lv_structuresRemaining <= 5)) {
        AIToggleBulliesInRegion(gv_pLAYER_03_ENEMY, lv_bullyRegion, false);
        AIToggleBulliesInRegion(gv_pLAYER_04_ENEMY, lv_bullyRegion, false);
        if ((lv_structuresRemaining == 0) && (gv_enemyBaseDestroyed[lv_loopIterator] == false)) {
            gv_enemyBaseDestroyed[lv_loopIterator] = true;
            lv_timeRemaining = TimerGetRemaining(gv_hybridSpawnTimer);
            TimerStart(gv_hybridSpawnTimer, (lv_timeRemaining + 30.0), false, c_timeGame);
            gf_ApplyBaseDestroyedDebuff();
            gf_TransmissionEnemyBaseDestroyed(lv_bullyRegion);
        }
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_AIBaseDestroyed_Init () {
    gt_AIBaseDestroyed = TriggerCreate("gt_AIBaseDestroyed_Func");
    TriggerAddEventUnitDied(gt_AIBaseDestroyed, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Setup Attack Wave Spawn
//--------------------------------------------------------------------------------------------------
bool gt_SetupAttackWaveSpawn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_spawnLocationIter;
    // Variable Initialization
    // Actions
    if (!runActions) {
        return true;
    }
    lv_spawnLocationIter += 1;
    gv_attackSpawn[gv_pLAYER_01_USER][lv_spawnLocationIter] = RegionFromId(5);
    lv_spawnLocationIter += 1;
    gv_attackSpawn[gv_pLAYER_01_USER][lv_spawnLocationIter] = RegionFromId(7);
    lv_spawnLocationIter += 1;
    gv_attackSpawn[gv_pLAYER_01_USER][lv_spawnLocationIter] = RegionFromId(1);
    lv_spawnLocationIter += 1;
    gv_attackSpawn[gv_pLAYER_01_USER][lv_spawnLocationIter] = RegionFromId(13);
    lv_spawnLocationIter += 1;
    gv_attackSpawn[gv_pLAYER_01_USER][lv_spawnLocationIter] = RegionFromId(2);
    lv_spawnLocationIter = 1;
    gv_attackSpawn[gv_pLAYER_02_USER][lv_spawnLocationIter] = RegionFromId(7);
    lv_spawnLocationIter += 1;
    gv_attackSpawn[gv_pLAYER_02_USER][lv_spawnLocationIter] = RegionFromId(1);
    lv_spawnLocationIter += 1;
    gv_attackSpawn[gv_pLAYER_02_USER][lv_spawnLocationIter] = RegionFromId(5);
    lv_spawnLocationIter += 1;
    gv_attackSpawn[gv_pLAYER_02_USER][lv_spawnLocationIter] = RegionFromId(13);
    lv_spawnLocationIter += 1;
    gv_attackSpawn[gv_pLAYER_02_USER][lv_spawnLocationIter] = RegionFromId(2);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SetupAttackWaveSpawn_Init () {
    gt_SetupAttackWaveSpawn = TriggerCreate("gt_SetupAttackWaveSpawn_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: AI Attack Waves
//--------------------------------------------------------------------------------------------------
bool gt_AIAttackWaves_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    gf_RunAttackWaveatMissionTime(gt_AttackWave01, (2.0 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_AttackWave02, (5.0 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_AttackWave03, (8.0 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_AttackWave04, (11.0 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_AttackWave05, (14.0 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_AttackWave06, (17.0 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_AttackWave07, (20.0 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_AttackWave07, (22.0 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_AttackWave07, (24.5 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_AttackWave07, (27.0 * 60.0));
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_AIAttackWaves_Init () {
    gt_AIAttackWaves = TriggerCreate("gt_AIAttackWaves_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave 01
//--------------------------------------------------------------------------------------------------
bool gt_AttackWave01_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceBucket;
    int lv_techBucket;
    // Variable Initialization
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__1Early;
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_03_ENEMY) != 1))) {
            return false;
        }
        if (!((libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_03_ENEMY) != 2))) {
            return false;
        }
        if (!((libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_03_ENEMY) != 3))) {
            return false;
        }
        if (!((libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_04_ENEMY) != 1))) {
            return false;
        }
        if (!((libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_04_ENEMY) != 2))) {
            return false;
        }
        if (!((libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_04_ENEMY) != 3))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__1Early;
    AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, PointFromId(249));
    AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, PointFromId(249));
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, lv_resourceBucket, lv_techBucket, gf_AttackWaveSpawn(), true);
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_AttackWave01_Init () {
    gt_AttackWave01 = TriggerCreate("gt_AttackWave01_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave 02
//--------------------------------------------------------------------------------------------------
bool gt_AttackWave02_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceBucket;
    int lv_techBucket;
    // Variable Initialization
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__2Smaller;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__2EarlyMid;
    // Actions
    if (!runActions) {
        return true;
    }
    if ((libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_03_ENEMY) == 3) && (libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_04_ENEMY) == 3)) {
        Wait(10.0, c_timeGame);
    }
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__2Smaller;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__2EarlyMid;
    AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, PointFromId(249));
    AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, PointFromId(249));
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, lv_resourceBucket, lv_techBucket, gf_AttackWaveSpawn(), true);
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_AttackWave02_Init () {
    gt_AttackWave02 = TriggerCreate("gt_AttackWave02_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave 03
//--------------------------------------------------------------------------------------------------
bool gt_AttackWave03_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceBucket;
    int lv_techBucket;
    int lv_numberOfStructures_ExpLeft;
    int lv_numberOfStructures_ExpRight;
    point lv_attackPathWaypoint;
    // Variable Initialization
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__3Small;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__3Mid;
    // Actions
    if (!runActions) {
        return true;
    }
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__3Small;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__3Mid;
    PlayerGroupLoopBegin(libCOMI_gf_HumanPlayers());
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        lv_numberOfStructures_ExpLeft += UnitGroupCount(UnitGroup(null, PlayerGroupLoopCurrent(), RegionFromId(3), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
        lv_numberOfStructures_ExpRight += UnitGroupCount(UnitGroup(null, PlayerGroupLoopCurrent(), RegionFromId(4), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
    }
    PlayerGroupLoopEnd();
    if ((((lv_numberOfStructures_ExpLeft == 0) && (lv_numberOfStructures_ExpRight == 0)) || ((lv_numberOfStructures_ExpLeft > 0) && (lv_numberOfStructures_ExpRight > 0)))) {
        if ((RandomInt(0, 100) < 50)) {
            lv_attackPathWaypoint = PointFromId(367);
        }
        else {
            lv_attackPathWaypoint = PointFromId(358);
        }
    }
    else {
        if ((lv_numberOfStructures_ExpLeft > lv_numberOfStructures_ExpRight)) {
            lv_attackPathWaypoint = PointFromId(367);
        }
        else {
            lv_attackPathWaypoint = PointFromId(358);
        }
    }
    if ((lv_attackPathWaypoint == PointFromId(367))) {
        gv_attackWaveA_Wave05Path = PointFromId(358);
    }
    else {
        gv_attackWaveA_Wave05Path = PointFromId(367);
    }
    AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, PointFromId(249));
    AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, PointFromId(249));
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, lv_resourceBucket, lv_techBucket, gf_AttackWaveSpawn(), true);
    libCOMI_gf_AddAttackForceWaypoint(lv_attackPathWaypoint, false);
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_AttackWave03_Init () {
    gt_AttackWave03 = TriggerCreate("gt_AttackWave03_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave 04
//--------------------------------------------------------------------------------------------------
bool gt_AttackWave04_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceBucket;
    int lv_techBucket;
    int lv_attackingAI;
    int lv_defendingPlayer;
    // Variable Initialization
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__4Medium;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__4LateMid;
    // Actions
    if (!runActions) {
        return true;
    }
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__4Medium;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__4LateMid;
    AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, PointFromId(249));
    AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, PointFromId(249));
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, lv_resourceBucket, lv_techBucket, gf_AttackWaveSpawn(), true);
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_AttackWave04_Init () {
    gt_AttackWave04 = TriggerCreate("gt_AttackWave04_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave 05
//--------------------------------------------------------------------------------------------------
bool gt_AttackWave05_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceBucket;
    int lv_techBucket;
    int lv_numberOfStructures_ExpLeft;
    int lv_numberOfStructures_ExpRight;
    point lv_attackPathWaypoint;
    // Variable Initialization
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__1Early;
    // Actions
    if (!runActions) {
        return true;
    }
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__5Large;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__5Late;
    lv_attackPathWaypoint = gv_attackWaveA_Wave05Path;
    AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, PointFromId(249));
    AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, PointFromId(249));
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, lv_resourceBucket, lv_techBucket, gf_AttackWaveSpawn(), true);
    libCOMI_gf_AddAttackForceWaypoint(lv_attackPathWaypoint, false);
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_AttackWave05_Init () {
    gt_AttackWave05 = TriggerCreate("gt_AttackWave05_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave 06
//--------------------------------------------------------------------------------------------------
bool gt_AttackWave06_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceBucket;
    int lv_techBucket;
    // Variable Initialization
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__6Larger;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets_TechLevel06;
    // Actions
    if (!runActions) {
        return true;
    }
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__6Larger;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets_TechLevel06;
    AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, PointFromId(249));
    AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, PointFromId(249));
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, lv_resourceBucket, lv_techBucket, gf_AttackWaveSpawn(), true);
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_AttackWave06_Init () {
    gt_AttackWave06 = TriggerCreate("gt_AttackWave06_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave 07
//--------------------------------------------------------------------------------------------------
bool gt_AttackWave07_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceBucket;
    int lv_techBucket;
    // Variable Initialization
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__7Largest;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets_TechLevel07;
    // Actions
    if (!runActions) {
        return true;
    }
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__7Largest;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets_TechLevel07;
    AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, PointFromId(249));
    AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, PointFromId(249));
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, lv_resourceBucket, lv_techBucket, gf_AttackWaveSpawn(), true);
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_AttackWave07_Init () {
    gt_AttackWave07 = TriggerCreate("gt_AttackWave07_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Spawn Defense Wave_Periodic
//--------------------------------------------------------------------------------------------------
bool gt_SpawnDefenseWave_Periodic_Func (bool testConds, bool runActions) {
    int autoF803A267_ae;
    int autoF803A267_ai;
    // Variable Declarations
    region lv_protossBase;
    region lv_spawnRegion;
    unitgroup lv_pylonGroup;
    int lv_loopIterator;
    // Variable Initialization
    lv_pylonGroup = UnitGroupEmpty();
    // Actions
    if (!runActions) {
        return true;
    }
    autoF803A267_ae = 1;
    autoF803A267_ai = -1;
    lv_loopIterator = 6;
    for ( ; ( (autoF803A267_ai >= 0 && lv_loopIterator <= autoF803A267_ae) || (autoF803A267_ai <= 0 && lv_loopIterator >= autoF803A267_ae) ) ; lv_loopIterator += autoF803A267_ai ) {
        lv_protossBase = RegionFromName(("ProtossBase " + IntToString(lv_loopIterator)));
        UnitGroupAddUnitGroup(lv_pylonGroup, UnitGroup("Pylon", gv_pLAYER_05_ALLY, lv_protossBase, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        UnitGroupAddUnitGroup(lv_pylonGroup, UnitGroup("DarkPylon", gv_pLAYER_05_ALLY, lv_protossBase, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        if ((UnitGroupCount(lv_pylonGroup, c_unitCountAlive) >= 1)) {
            lv_spawnRegion = RegionEmpty();
            UnitGroupLoopBegin(lv_pylonGroup);
            for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                RegionAddRegion(lv_spawnRegion, RegionCircle(UnitGetPosition(UnitGroupLoopCurrent()), 5.5));
            }
            UnitGroupLoopEnd();
            gf_SpawnDefenseSquad(lv_spawnRegion, lv_protossBase);
            break;
        }
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SpawnDefenseWave_Periodic_Init () {
    gt_SpawnDefenseWave_Periodic = TriggerCreate("gt_SpawnDefenseWave_Periodic_Func");
    TriggerEnable(gt_SpawnDefenseWave_Periodic, false);
    TriggerAddEventTimePeriodic(gt_SpawnDefenseWave_Periodic, (80.0 - (UnitCount("HybridAnnihilator", gv_pLAYER_06_HYBRID, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) * 15.0)), c_timeGame);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Trigger First Wave
//--------------------------------------------------------------------------------------------------
bool gt_TriggerFirstWave_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_06_HYBRID))) {
            return false;
        }
        if (!((UnitGetType(EventUnit()) == "HybridAnnihilator"))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(gt_SpawnOffenseWave_Periodic, true);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_TriggerFirstWave_Init () {
    gt_TriggerFirstWave = TriggerCreate("gt_TriggerFirstWave_Func");
    TriggerAddEventUnitDied(gt_TriggerFirstWave, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Spawn Offense Wave_Periodic
//--------------------------------------------------------------------------------------------------
bool gt_SpawnOffenseWave_Periodic_Func (bool testConds, bool runActions) {
    // Variable Declarations
    region lv_spawnRegion;
    // Variable Initialization
    // Actions
    if (!runActions) {
        return true;
    }
    if (((gv_staticShadowIterator - 3) >= 0)) {
        lv_spawnRegion = RegionCircle(UnitGetPosition(gv_staticShadows[(gv_staticShadowIterator - 3)]), 5.0);
    }
    else {
        if ((gv_staticShadows[(gv_staticShadowIterator + 4)] != null)) {
            lv_spawnRegion = RegionCircle(UnitGetPosition(gv_staticShadows[(gv_staticShadowIterator + 4)]), 5.0);
        }
        else {
            lv_spawnRegion = RegionCircle(UnitGetPosition(gv_staticShadows[0]), 5.0);
        }
    }
    gf_SpawnOffenseSquad(lv_spawnRegion);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SpawnOffenseWave_Periodic_Init () {
    gt_SpawnOffenseWave_Periodic = TriggerCreate("gt_SpawnOffenseWave_Periodic_Func");
    TriggerEnable(gt_SpawnOffenseWave_Periodic, false);
    TriggerAddEventTimePeriodic(gt_SpawnOffenseWave_Periodic, ((100.0 - (gv_player_Difficulty_Modifier[gv_pLAYER_01_USER] * 9)) - (UnitCount("HybridAnnihilator", gv_pLAYER_06_HYBRID, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) * 20.0)), c_timeGame);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Monitor Hybrid Position
//--------------------------------------------------------------------------------------------------
bool gt_MonitorHybridPosition_Func (bool testConds, bool runActions) {
    int auto8882F7C9_ae;
    int auto8882F7C9_ai;
    // Variable Declarations
    int lv_iterator;
    point lv_currentPosition;
    point lv_previousPosition;
    fixed lv_currentCost;
    fixed lv_previousCost;
    // Variable Initialization
    // Actions
    if (!runActions) {
        return true;
    }
    auto8882F7C9_ae = (gv_mAX_HYBRIDS - 1);
    auto8882F7C9_ai = 1;
    lv_iterator = 0;
    for ( ; ( (auto8882F7C9_ai >= 0 && lv_iterator <= auto8882F7C9_ae) || (auto8882F7C9_ai <= 0 && lv_iterator >= auto8882F7C9_ae) ) ; lv_iterator += auto8882F7C9_ai ) {
        lv_currentPosition = UnitGetPosition(gv_hybridUnits[lv_iterator]);
        lv_currentCost = PointPathingCost(lv_currentPosition, PointFromId(113245242));
        lv_previousPosition = gv_hybridLastPosition[lv_iterator];
        lv_previousCost = PointPathingCost(lv_previousPosition, PointFromId(113245242));
        if ((UnitIsAlive(gv_hybridUnits[lv_iterator]) == true) && (lv_currentCost > (lv_previousCost + 5.0))) {
            gv_hybridLastPosition[lv_iterator] = lv_currentPosition;
            AIAttackWaveUseUnit(gv_pLAYER_06_HYBRID, gv_hybridUnits[lv_iterator]);
            AIAttackWaveSend(gv_pLAYER_06_HYBRID, 1, false);
        }
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_MonitorHybridPosition_Init () {
    gt_MonitorHybridPosition = TriggerCreate("gt_MonitorHybridPosition_Func");
    TriggerAddEventTimePeriodic(gt_MonitorHybridPosition, 5.0, c_timeGame);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Start Hybrid Spawn Timer
//--------------------------------------------------------------------------------------------------
bool gt_StartHybridSpawnTimer_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_timeToSpawn;
    int lv_ofLabsActive;
    // Variable Initialization
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    lv_timeToSpawn = gv_hybridSpawnTime;
    gv_hybridSpawnTime -= 40.0;
    if ((gv_hybridSpawnTime < 90.0)) {
        gv_hybridSpawnTime = 90.0;
    }
    if ((gv_hybridSpawnTimer == null)) {
        TimerStart(TimerCreate(), lv_timeToSpawn, false, c_timeGame);
        gv_hybridSpawnTimer = TimerLastStarted();
        TimerWindowCreate(gv_hybridSpawnTimer, StringExternal("Param/Value/F4037F12"), true, false);
        gv_hybridSpawnTimerWindow = TimerWindowLastCreated();
        TimerWindowSetStyle(gv_hybridSpawnTimerWindow, c_timerWindowStyleVerticalTitleTime, false);
        TimerWindowShow(gv_hybridSpawnTimerWindow, PlayerGroupAll(), true);
    }
    else {
        TimerStart(gv_hybridSpawnTimer, lv_timeToSpawn, false, c_timeGame);
    }
    Wait(5.0, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_StartHybridSpawnTimer_Init () {
    gt_StartHybridSpawnTimer = TriggerCreate("gt_StartHybridSpawnTimer_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Generate Void Fog_LeftRegion
//--------------------------------------------------------------------------------------------------
bool gt_GenerateVoidFog_LeftRegion_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == 0))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    gf_GenerateVoidFog();
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_GenerateVoidFog_LeftRegion_Init () {
    gt_GenerateVoidFog_LeftRegion = TriggerCreate("gt_GenerateVoidFog_LeftRegion_Func");
    TriggerAddEventUnitRegion(gt_GenerateVoidFog_LeftRegion, UnitRefFromVariable("gv_shadowCloud"), RegionFromId(9), false);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Order Shadow Unit_Periodic
//--------------------------------------------------------------------------------------------------
bool gt_OrderShadowUnit_Periodic_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_shadowCloud != null))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    UnitIssueOrder(gv_shadowCloud, OrderTargetingPoint(AbilityCommand("move", 0), UnitGetPosition(gf_FindNearestStructure())), c_orderQueueReplace);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_OrderShadowUnit_Periodic_Init () {
    gt_OrderShadowUnit_Periodic = TriggerCreate("gt_OrderShadowUnit_Periodic_Func");
    TriggerAddEventTimePeriodic(gt_OrderShadowUnit_Periodic, 20.0, c_timeGame);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Spawn Hybrid
//--------------------------------------------------------------------------------------------------
bool gt_SpawnHybrid_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_lastCreatedHybrid;
    actor lv_spawningActor;
    int lv_hybridIndex;
    // Variable Initialization
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_StartHybridSpawnTimer, true, false);
    VisRevealArea(gv_pLAYER_01_USER, RegionCircle(gv_hybridAttackerSpawnPoint, 4.0), 3.0, false);
    VisRevealArea(gv_pLAYER_02_USER, RegionCircle(gv_hybridAttackerSpawnPoint, 4.0), 3.0, false);
    libNtve_gf_CreateModelAtPoint("AnnihilatorWarpInEffect", gv_hybridAttackerSpawnPoint);
    lv_spawningActor = libNtve_gf_ActorLastCreated();
    Wait(3.0, c_timeGame);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "HybridAnnihilator", 0, gv_pLAYER_06_HYBRID, gv_hybridAttackerSpawnPoint);
    lv_lastCreatedHybrid = UnitLastCreated();
    gf_SetHybridDifficulty(lv_lastCreatedHybrid);
    gf_InitiateHybridAssault(lv_lastCreatedHybrid);
    lv_hybridIndex = gf_FindAvailableHybridIndex();
    gv_hybridUnits[lv_hybridIndex] = lv_lastCreatedHybrid;
    gv_hybridRegions[lv_hybridIndex] = RegionCircle(UnitGetPosition(gv_hybridUnits[lv_hybridIndex]), 4.0);
    gv_hybridLastPosition[lv_hybridIndex] = UnitGetPosition(gv_hybridUnits[lv_hybridIndex]);
    RegionAttachToUnit(gv_hybridRegions[lv_hybridIndex], gv_hybridUnits[lv_hybridIndex], Point(0.0, 0.0));
    libCOMI_gf_CreateRevealerCoop(gv_pLAYER_01_USER, gv_hybridRegions[lv_hybridIndex]);
    gv_hybridRevealers[gv_pLAYER_01_USER][lv_hybridIndex] = VisRevealerLastCreated();
    libCOMI_gf_CreateRevealerCoop(gv_pLAYER_02_USER, gv_hybridRegions[lv_hybridIndex]);
    gv_hybridRevealers[gv_pLAYER_02_USER][lv_hybridIndex] = VisRevealerLastCreated();
    libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_Primary, UnitGetPosition(lv_lastCreatedHybrid), null);
    gv_hybridMarkers[lv_hybridIndex] = PingLastCreated();
    PingSetUnit(PingLastCreated(), lv_lastCreatedHybrid);
    if ((gv_hybridWarpInDoodad != null)) {
        libNtve_gf_KillModel(gv_hybridWarpInDoodad);
        gv_hybridWarpInDoodad = null;
    }
    if ((gv_shadowCloud == null)) {
        gf_GenerateVoidFog();
    }
    Wait(1.0, c_timeGame);
    libNtve_gf_KillModel(lv_spawningActor);
    TriggerExecute(gt_TransmissionHybridSpawned, true, false);
    Wait(20.0, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SpawnHybrid_Init () {
    gt_SpawnHybrid = TriggerCreate("gt_SpawnHybrid_Func");
    TriggerAddEventTimer(gt_SpawnHybrid, gv_hybridSpawnTimer);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Hybrid Dies
//--------------------------------------------------------------------------------------------------
bool gt_HybridDies_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_hybridIndex;
    // Variable Initialization
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_06_HYBRID))) {
            return false;
        }
        if (!((UnitGetType(EventUnit()) == "HybridAnnihilator"))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    lv_hybridIndex = gf_FindIndexofHybrid(EventUnit());
    gv_hybridUnits[lv_hybridIndex] = null;
    libCOMI_gf_DestroyRevealerCoop(gv_hybridRevealers[gv_pLAYER_01_USER][lv_hybridIndex]);
    libCOMI_gf_DestroyRevealerCoop(gv_hybridRevealers[gv_pLAYER_02_USER][lv_hybridIndex]);
    PingDestroy(gv_hybridMarkers[lv_hybridIndex]);
    gv_hybridAttackerSpawnPoint = UnitGetPosition(EventUnit());
    Wait(2.0, c_timeGame);
    libNtve_gf_CreateModelAtPoint("Aiur_City_HybridWarp", gv_hybridAttackerSpawnPoint);
    gv_hybridWarpInDoodad = libNtve_gf_ActorLastCreated();
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_HybridDies_Init () {
    gt_HybridDies = TriggerCreate("gt_HybridDies_Func");
    TriggerAddEventUnitDied(gt_HybridDies, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Hybrid Shadow Blast Expires
//--------------------------------------------------------------------------------------------------
bool gt_HybridShadowBlastExpires_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    libNtve_gf_CreateModelAtPoint("PsionicShadowImpact22", EventUnitTargetPoint());
    libNtve_gf_SetAnimationTime(libNtve_gf_ActorLastCreated(), c_animNameDefault, 0.9, false);
    Wait(2.0, c_timeGame);
    libNtve_gf_KillModel(libNtve_gf_ActorLastCreated());
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_HybridShadowBlastExpires_Init () {
    gt_HybridShadowBlastExpires = TriggerCreate("gt_HybridShadowBlastExpires_Func");
    TriggerAddEventUnitAbility(gt_HybridShadowBlastExpires, null, AbilityCommand("PsionicShadowBlast", 0), c_abilEffectStageFinish, false);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Hybrid Shadow Blast PeriodicBehavior
//--------------------------------------------------------------------------------------------------
bool gt_HybridShadowBlastPeriodicBehavior_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    libNtve_gf_AttachModelToUnit(EventUnit(), "PsionicShadowBlastImpactEffect", "Ref_Center");
    libNtve_gf_SetAnimationTime(libNtve_gf_ActorLastCreated(), c_animNameDefault, 2.0, false);
    Wait(1.0, c_timeGame);
    libNtve_gf_KillModel(libNtve_gf_ActorLastCreated());
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_HybridShadowBlastPeriodicBehavior_Init () {
    gt_HybridShadowBlastPeriodicBehavior = TriggerCreate("gt_HybridShadowBlastPeriodicBehavior_Func");
    TriggerAddEventUnitBehaviorChange(gt_HybridShadowBlastPeriodicBehavior, null, "PsionicShadowBlastDamage", c_unitBehaviorChangeCreate);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Objective - DestroyTheHybridWarpGates - Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyTheHybridWarpGatesCreate_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_CreateObjectiveCampaign("PlaceholderPrimary");
    libCOMI_gf_SetObjectiveRequiredCountCampaign("PlaceholderPrimary", gv_remainingPortalCount);
    gv_objectiveDestroyTheHybridWarpGates = ObjectiveLastCreated();
    ObjectiveSetPriority(ObjectiveLastCreated(), 10);
    TriggerExecute(gt_ObjectiveDestroyTheHybridWarpGatesUpdate, true, false);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyTheHybridWarpGatesCreate_Init () {
    gt_ObjectiveDestroyTheHybridWarpGatesCreate = TriggerCreate("gt_ObjectiveDestroyTheHybridWarpGatesCreate_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Objective - DestroyTheHybridWarpGates - Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyTheHybridWarpGatesComplete_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveDestroyTheHybridWarpGatesCreate, true, false);
    ObjectiveSetState(gv_objectiveDestroyTheHybridWarpGates, c_objectiveStateCompleted);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyTheHybridWarpGatesComplete_Init () {
    gt_ObjectiveDestroyTheHybridWarpGatesComplete = TriggerCreate("gt_ObjectiveDestroyTheHybridWarpGatesComplete_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Objective - DestroyTheHybridWarpGates - Update
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyTheHybridWarpGatesUpdate_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerExecute(gt_ObjectiveDestroyTheHybridWarpGatesCreate, true, false);
    libCOMI_gf_SetMissionObjectiveProgress("PlaceholderPrimary", gv_remainingPortalCount);
    TextExpressionSetToken("Param/Expression/981971CB", "StructureCount", IntToText(gv_remainingPortalCount));
    ObjectiveSetName(gv_objectiveDestroyTheHybridWarpGates, TextExpressionAssemble("Param/Expression/981971CB"));
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyTheHybridWarpGatesUpdate_Init () {
    gt_ObjectiveDestroyTheHybridWarpGatesUpdate = TriggerCreate("gt_ObjectiveDestroyTheHybridWarpGatesUpdate_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Objective - DestroyTheHybridWarpGates - Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyTheHybridWarpGatesFailed_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveDestroyTheHybridWarpGatesCreate, true, false);
    ObjectiveSetState(gv_objectiveDestroyTheHybridWarpGates, c_objectiveStateFailed);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyTheHybridWarpGatesFailed_Init () {
    gt_ObjectiveDestroyTheHybridWarpGatesFailed = TriggerCreate("gt_ObjectiveDestroyTheHybridWarpGatesFailed_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Defend Protoss Ally - Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDefendProtossAllyCreate_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_CreateObjectiveCampaign("PlaceholderPrimary");
    libCOMI_gf_SetObjectiveRequiredCountCampaign("PlaceholderPrimary", gv_remainingProtossStructureCount);
    gv_objectiveDefendProtossAlly = ObjectiveLastCreated();
    ObjectiveSetPriority(ObjectiveLastCreated(), 10);
    TriggerExecute(gt_ObjectiveDefendProtossAllyUpdate, true, false);
    gv_hybridAttackerSpawnPoint = RegionGetCenter(RegionFromId(9));
    libNtve_gf_CreateModelAtPoint("Aiur_City_HybridWarp", gv_hybridAttackerSpawnPoint);
    gv_hybridWarpInDoodad = libNtve_gf_ActorLastCreated();
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    TriggerExecute(gt_SpawnHybrid, true, false);
    TriggerEnable(gt_SpawnDefenseWave_Periodic, true);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDefendProtossAllyCreate_Init () {
    gt_ObjectiveDefendProtossAllyCreate = TriggerCreate("gt_ObjectiveDefendProtossAllyCreate_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Defend Protoss Ally - Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDefendProtossAllyComplete_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveDefendProtossAllyCreate, true, false);
    ObjectiveSetState(gv_objectiveDefendProtossAlly, c_objectiveStateCompleted);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDefendProtossAllyComplete_Init () {
    gt_ObjectiveDefendProtossAllyComplete = TriggerCreate("gt_ObjectiveDefendProtossAllyComplete_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Defend Protoss Ally - Update
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDefendProtossAllyUpdate_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerExecute(gt_ObjectiveDefendProtossAllyCreate, true, false);
    libCOMI_gf_SetMissionObjectiveProgress("PlaceholderPrimary", gv_remainingProtossStructureCount);
    TextExpressionSetToken("Param/Expression/9D1B84E4", "StructureCount", IntToText(gv_remainingProtossStructureCount));
    ObjectiveSetName(gv_objectiveDefendProtossAlly, TextExpressionAssemble("Param/Expression/9D1B84E4"));
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDefendProtossAllyUpdate_Init () {
    gt_ObjectiveDefendProtossAllyUpdate = TriggerCreate("gt_ObjectiveDefendProtossAllyUpdate_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Defend Protoss Ally - Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDefendProtossAllyFailed_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveDefendProtossAllyCreate, true, false);
    ObjectiveSetState(gv_objectiveDefendProtossAlly, c_objectiveStateFailed);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDefendProtossAllyFailed_Init () {
    gt_ObjectiveDefendProtossAllyFailed = TriggerCreate("gt_ObjectiveDefendProtossAllyFailed_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: SecondaryObjective - Capture West Warp Zone - Create
//--------------------------------------------------------------------------------------------------
bool gt_SecondaryObjectiveCaptureWestWarpZoneCreate_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_MonitorWestWarpZoneBase, true);
    libCOMI_gf_CreateObjectiveCampaign("PlaceholderSecondary");
    libCOMI_gf_SetObjectiveRequiredCountCampaign("PlaceholderSecondary", FixedToInt(gv_westWarpZoneActivationCompletion));
    gv_secondaryObjectiveCaptureWestWarpZone = ObjectiveLastCreated();
    ObjectiveSetPriority(ObjectiveLastCreated(), 10);
    TriggerExecute(gt_SecondaryObjectiveCaptureWestWarpZoneUpdate, true, false);
    gf_QueueMissionTransmission("BonusObjectiveCapture");
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_POI, RegionGetCenter(RegionFromId(15)), StringExternal("Param/Value/44B46D6F"));
    gv_secondaryObjectiveCaptureWestWarpZoneMarker = PingLastCreated();
    VisRevealArea(gv_pLAYER_01_USER, RegionFromId(15), 0.0, false);
    VisRevealArea(gv_pLAYER_02_USER, RegionFromId(15), 0.0, false);
    Wait(5.0, c_timeGame);
    TriggerExecute(gt_TransmissionFirstWarpZoneDiscovered, true, false);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SecondaryObjectiveCaptureWestWarpZoneCreate_Init () {
    gt_SecondaryObjectiveCaptureWestWarpZoneCreate = TriggerCreate("gt_SecondaryObjectiveCaptureWestWarpZoneCreate_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: SecondaryObjective - Capture West Warp Zone - Complete
//--------------------------------------------------------------------------------------------------
bool gt_SecondaryObjectiveCaptureWestWarpZoneComplete_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_UnitLeavesWarpZoneBaseWEST, false);
    TriggerExecute(gt_SecondaryObjectiveCaptureWestWarpZoneCreate, true, false);
    ObjectiveSetState(gv_secondaryObjectiveCaptureWestWarpZone, c_objectiveStateCompleted);
    PingDestroy(gv_secondaryObjectiveCaptureWestWarpZoneMarker);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    gf_PhaseSmithWarpOut(gv_aMONWARPOUTWEST);
    Wait(5.0, c_timeGame);
    ObjectiveShow(gv_secondaryObjectiveCaptureWestWarpZone, PlayerGroupAll(), false);
    TriggerExecute(gt_TransmissionWarpZoneCaptured, true, false);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SecondaryObjectiveCaptureWestWarpZoneComplete_Init () {
    gt_SecondaryObjectiveCaptureWestWarpZoneComplete = TriggerCreate("gt_SecondaryObjectiveCaptureWestWarpZoneComplete_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: SecondaryObjective - Capture West Warp Zone - Update
//--------------------------------------------------------------------------------------------------
bool gt_SecondaryObjectiveCaptureWestWarpZoneUpdate_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerExecute(gt_SecondaryObjectiveCaptureWestWarpZoneCreate, true, false);
    libCOMI_gf_SetMissionObjectiveProgress("PlaceholderSecondary", FixedToInt(gv_westWarpZoneActivationCompletion));
    TextExpressionSetToken("Param/Expression/051E6453", "StructureCount", FixedToText(gv_westWarpZoneActivationCompletion, 0));
    ObjectiveSetName(gv_secondaryObjectiveCaptureWestWarpZone, TextExpressionAssemble("Param/Expression/051E6453"));
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SecondaryObjectiveCaptureWestWarpZoneUpdate_Init () {
    gt_SecondaryObjectiveCaptureWestWarpZoneUpdate = TriggerCreate("gt_SecondaryObjectiveCaptureWestWarpZoneUpdate_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: SecondaryObjective - Capture West Warp Zone - Failed
//--------------------------------------------------------------------------------------------------
bool gt_SecondaryObjectiveCaptureWestWarpZoneFailed_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_UnitLeavesWarpZoneBaseWEST, false);
    TriggerExecute(gt_SecondaryObjectiveCaptureWestWarpZoneCreate, true, false);
    ObjectiveSetState(gv_secondaryObjectiveCaptureWestWarpZone, c_objectiveStateFailed);
    PingDestroy(gv_secondaryObjectiveCaptureWestWarpZoneMarker);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    ObjectiveShow(gv_secondaryObjectiveCaptureWestWarpZone, PlayerGroupAll(), false);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SecondaryObjectiveCaptureWestWarpZoneFailed_Init () {
    gt_SecondaryObjectiveCaptureWestWarpZoneFailed = TriggerCreate("gt_SecondaryObjectiveCaptureWestWarpZoneFailed_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: SecondaryObjective - Capture East Warp Zone - Create
//--------------------------------------------------------------------------------------------------
bool gt_SecondaryObjectiveCaptureEastWarpZoneCreate_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_MonitorEastWarpZoneBase, true);
    libCOMI_gf_CreateObjectiveCampaign("PlaceholderSecondary");
    libCOMI_gf_SetObjectiveRequiredCountCampaign("PlaceholderSecondary", FixedToInt(gv_eastWarpZoneActivationCompletion));
    gv_secondaryObjectiveCaptureEastWarpZone = ObjectiveLastCreated();
    ObjectiveSetPriority(ObjectiveLastCreated(), 7);
    TriggerExecute(gt_SecondaryObjectiveCaptureEastWarpZoneUpdate, true, false);
    gf_QueueMissionTransmission("BonusObjectiveCapture");
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_POI, RegionGetCenter(RegionFromId(16)), null);
    gv_secondaryObjectiveCaptureEastWarpZoneMarker = PingLastCreated();
    VisRevealArea(gv_pLAYER_01_USER, RegionFromId(16), 0.0, false);
    VisRevealArea(gv_pLAYER_02_USER, RegionFromId(16), 0.0, false);
    TriggerExecute(gt_TransmissionAnotherWarpZoneDiscovered, true, false);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SecondaryObjectiveCaptureEastWarpZoneCreate_Init () {
    gt_SecondaryObjectiveCaptureEastWarpZoneCreate = TriggerCreate("gt_SecondaryObjectiveCaptureEastWarpZoneCreate_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: SecondaryObjective - Capture East Warp Zone - Complete
//--------------------------------------------------------------------------------------------------
bool gt_SecondaryObjectiveCaptureEastWarpZoneComplete_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_UnitLeavesWarpZoneBaseEAST, false);
    TriggerExecute(gt_SecondaryObjectiveCaptureEastWarpZoneCreate, true, false);
    ObjectiveSetState(gv_secondaryObjectiveCaptureEastWarpZone, c_objectiveStateCompleted);
    PingDestroy(gv_secondaryObjectiveCaptureEastWarpZoneMarker);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    gf_PhaseSmithWarpOut(gv_aMONWARPOUTEAST);
    ObjectiveShow(gv_secondaryObjectiveCaptureEastWarpZone, PlayerGroupAll(), false);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SecondaryObjectiveCaptureEastWarpZoneComplete_Init () {
    gt_SecondaryObjectiveCaptureEastWarpZoneComplete = TriggerCreate("gt_SecondaryObjectiveCaptureEastWarpZoneComplete_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: SecondaryObjective - Capture East Warp Zone - Update
//--------------------------------------------------------------------------------------------------
bool gt_SecondaryObjectiveCaptureEastWarpZoneUpdate_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerExecute(gt_SecondaryObjectiveCaptureEastWarpZoneCreate, true, false);
    libCOMI_gf_SetMissionObjectiveProgress("PlaceholderSecondary", FixedToInt(gv_eastWarpZoneActivationCompletion));
    TextExpressionSetToken("Param/Expression/D42058B1", "StructureCount", FixedToText(gv_eastWarpZoneActivationCompletion, 0));
    ObjectiveSetName(gv_secondaryObjectiveCaptureEastWarpZone, TextExpressionAssemble("Param/Expression/D42058B1"));
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SecondaryObjectiveCaptureEastWarpZoneUpdate_Init () {
    gt_SecondaryObjectiveCaptureEastWarpZoneUpdate = TriggerCreate("gt_SecondaryObjectiveCaptureEastWarpZoneUpdate_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: SecondaryObjective - Capture East Warp Zone - Failed
//--------------------------------------------------------------------------------------------------
bool gt_SecondaryObjectiveCaptureEastWarpZoneFailed_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_UnitLeavesWarpZoneBaseEAST, false);
    TriggerExecute(gt_SecondaryObjectiveCaptureEastWarpZoneCreate, true, false);
    ObjectiveSetState(gv_secondaryObjectiveCaptureEastWarpZone, c_objectiveStateFailed);
    PingDestroy(gv_secondaryObjectiveCaptureEastWarpZoneMarker);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    ObjectiveShow(gv_secondaryObjectiveCaptureEastWarpZone, PlayerGroupAll(), false);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SecondaryObjectiveCaptureEastWarpZoneFailed_Init () {
    gt_SecondaryObjectiveCaptureEastWarpZoneFailed = TriggerCreate("gt_SecondaryObjectiveCaptureEastWarpZoneFailed_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: SecondaryObjective - Capture South Warp Zone - Create
//--------------------------------------------------------------------------------------------------
bool gt_SecondaryObjectiveCaptureSouthWarpZoneCreate_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_MonitorSouthWarpZoneBase, true);
    gf_CreateWarpOutPad(gv_aMONWARPOUTSOUTH, false);
    libCOMI_gf_CreateObjectiveCampaign("PlaceholderSecondary");
    libCOMI_gf_SetObjectiveRequiredCountCampaign("PlaceholderSecondary", FixedToInt(gv_southWarpZoneActivationCompletion));
    gv_secondaryObjectiveCaptureSouthWarpZone = ObjectiveLastCreated();
    ObjectiveSetPriority(ObjectiveLastCreated(), 7);
    TriggerExecute(gt_SecondaryObjectiveCaptureSouthWarpZoneUpdate, true, false);
    gf_QueueMissionTransmission("BonusObjectiveCapture");
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_POI, RegionGetCenter(gv_amonWarpOutSOUTHRegion), null);
    gv_secondaryObjectiveCaptureSouthWarpZoneMarker = PingLastCreated();
    VisRevealArea(gv_pLAYER_01_USER, gv_amonWarpOutSOUTHRegion, 0.0, false);
    VisRevealArea(gv_pLAYER_02_USER, gv_amonWarpOutSOUTHRegion, 0.0, false);
    TriggerExecute(gt_TransmissionVoidRiftWarpZoneDiscovered, true, false);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SecondaryObjectiveCaptureSouthWarpZoneCreate_Init () {
    gt_SecondaryObjectiveCaptureSouthWarpZoneCreate = TriggerCreate("gt_SecondaryObjectiveCaptureSouthWarpZoneCreate_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: SecondaryObjective - Capture South Warp Zone - Complete
//--------------------------------------------------------------------------------------------------
bool gt_SecondaryObjectiveCaptureSouthWarpZoneComplete_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_UnitLeavesWarpZoneBaseSOUTH, false);
    TriggerExecute(gt_SecondaryObjectiveCaptureSouthWarpZoneCreate, true, false);
    ObjectiveSetState(gv_secondaryObjectiveCaptureSouthWarpZone, c_objectiveStateCompleted);
    PingDestroy(gv_secondaryObjectiveCaptureSouthWarpZoneMarker);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    gf_PhaseSmithWarpOut(gv_aMONWARPOUTSOUTH);
    ObjectiveShow(gv_secondaryObjectiveCaptureSouthWarpZone, PlayerGroupAll(), false);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SecondaryObjectiveCaptureSouthWarpZoneComplete_Init () {
    gt_SecondaryObjectiveCaptureSouthWarpZoneComplete = TriggerCreate("gt_SecondaryObjectiveCaptureSouthWarpZoneComplete_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: SecondaryObjective - Capture South Warp Zone - Update
//--------------------------------------------------------------------------------------------------
bool gt_SecondaryObjectiveCaptureSouthWarpZoneUpdate_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerExecute(gt_SecondaryObjectiveCaptureSouthWarpZoneCreate, true, false);
    libCOMI_gf_SetMissionObjectiveProgress("PlaceholderSecondary", FixedToInt(gv_southWarpZoneActivationCompletion));
    TextExpressionSetToken("Param/Expression/8C8B918F", "StructureCount", FixedToText(gv_southWarpZoneActivationCompletion, 0));
    ObjectiveSetName(gv_secondaryObjectiveCaptureSouthWarpZone, TextExpressionAssemble("Param/Expression/8C8B918F"));
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SecondaryObjectiveCaptureSouthWarpZoneUpdate_Init () {
    gt_SecondaryObjectiveCaptureSouthWarpZoneUpdate = TriggerCreate("gt_SecondaryObjectiveCaptureSouthWarpZoneUpdate_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: SecondaryObjective - Capture South Warp Zone - Failed
//--------------------------------------------------------------------------------------------------
bool gt_SecondaryObjectiveCaptureSouthWarpZoneFailed_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_UnitLeavesWarpZoneBaseSOUTH, false);
    TriggerExecute(gt_SecondaryObjectiveCaptureSouthWarpZoneCreate, true, false);
    ObjectiveSetState(gv_secondaryObjectiveCaptureSouthWarpZone, c_objectiveStateFailed);
    PingDestroy(gv_secondaryObjectiveCaptureSouthWarpZoneMarker);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    ObjectiveShow(gv_secondaryObjectiveCaptureSouthWarpZone, PlayerGroupAll(), false);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SecondaryObjectiveCaptureSouthWarpZoneFailed_Init () {
    gt_SecondaryObjectiveCaptureSouthWarpZoneFailed = TriggerCreate("gt_SecondaryObjectiveCaptureSouthWarpZoneFailed_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: SecondaryObjective - Capture Center Warp Zone - Create
//--------------------------------------------------------------------------------------------------
bool gt_SecondaryObjectiveCaptureCenterWarpZoneCreate_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_MonitorCenterWarpZoneBase, true);
    gf_CreateWarpOutPad(gv_aMONWARPOUTCENTER, false);
    libCOMI_gf_CreateObjectiveCampaign("PlaceholderSecondary");
    libCOMI_gf_SetObjectiveRequiredCountCampaign("PlaceholderSecondary", FixedToInt(gv_centerWarpZoneActivationCompletion));
    gv_secondaryObjectiveCaptureCenterWarpZone = ObjectiveLastCreated();
    ObjectiveSetPriority(ObjectiveLastCreated(), 7);
    TriggerExecute(gt_SecondaryObjectiveCaptureCenterWarpZoneUpdate, true, false);
    gf_QueueMissionTransmission("BonusObjectiveCapture");
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_POI, RegionGetCenter(gv_amonWarpOutCENTERRegion), null);
    gv_secondaryObjectiveCaptureCenterWarpZoneMarker = PingLastCreated();
    VisRevealArea(gv_pLAYER_01_USER, gv_amonWarpOutCENTERRegion, 0.0, false);
    VisRevealArea(gv_pLAYER_02_USER, gv_amonWarpOutCENTERRegion, 0.0, false);
    TriggerExecute(gt_TransmissionVoidRiftWarpZoneDiscovered, true, false);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SecondaryObjectiveCaptureCenterWarpZoneCreate_Init () {
    gt_SecondaryObjectiveCaptureCenterWarpZoneCreate = TriggerCreate("gt_SecondaryObjectiveCaptureCenterWarpZoneCreate_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: SecondaryObjective - Capture Center Warp Zone - Complete
//--------------------------------------------------------------------------------------------------
bool gt_SecondaryObjectiveCaptureCenterWarpZoneComplete_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_UnitLeavesWarpZoneBaseCENTER, false);
    TriggerExecute(gt_SecondaryObjectiveCaptureCenterWarpZoneCreate, true, false);
    ObjectiveSetState(gv_secondaryObjectiveCaptureCenterWarpZone, c_objectiveStateCompleted);
    PingDestroy(gv_secondaryObjectiveCaptureCenterWarpZoneMarker);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    gf_PhaseSmithWarpOut(gv_aMONWARPOUTCENTER);
    ObjectiveShow(gv_secondaryObjectiveCaptureCenterWarpZone, PlayerGroupAll(), false);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SecondaryObjectiveCaptureCenterWarpZoneComplete_Init () {
    gt_SecondaryObjectiveCaptureCenterWarpZoneComplete = TriggerCreate("gt_SecondaryObjectiveCaptureCenterWarpZoneComplete_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: SecondaryObjective - Capture Center Warp Zone - Update
//--------------------------------------------------------------------------------------------------
bool gt_SecondaryObjectiveCaptureCenterWarpZoneUpdate_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerExecute(gt_SecondaryObjectiveCaptureCenterWarpZoneCreate, true, false);
    libCOMI_gf_SetMissionObjectiveProgress("PlaceholderSecondary", FixedToInt(gv_centerWarpZoneActivationCompletion));
    TextExpressionSetToken("Param/Expression/6B36C043", "StructureCount", FixedToText(gv_centerWarpZoneActivationCompletion, 0));
    ObjectiveSetName(gv_secondaryObjectiveCaptureCenterWarpZone, TextExpressionAssemble("Param/Expression/6B36C043"));
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SecondaryObjectiveCaptureCenterWarpZoneUpdate_Init () {
    gt_SecondaryObjectiveCaptureCenterWarpZoneUpdate = TriggerCreate("gt_SecondaryObjectiveCaptureCenterWarpZoneUpdate_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: SecondaryObjective - Capture Center Warp Zone - Failed
//--------------------------------------------------------------------------------------------------
bool gt_SecondaryObjectiveCaptureCenterWarpZoneFailed_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_UnitLeavesWarpZoneBaseCENTER, false);
    TriggerExecute(gt_SecondaryObjectiveCaptureCenterWarpZoneCreate, true, false);
    ObjectiveSetState(gv_secondaryObjectiveCaptureCenterWarpZone, c_objectiveStateFailed);
    PingDestroy(gv_secondaryObjectiveCaptureCenterWarpZoneMarker);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    ObjectiveShow(gv_secondaryObjectiveCaptureCenterWarpZone, PlayerGroupAll(), false);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SecondaryObjectiveCaptureCenterWarpZoneFailed_Init () {
    gt_SecondaryObjectiveCaptureCenterWarpZoneFailed = TriggerCreate("gt_SecondaryObjectiveCaptureCenterWarpZoneFailed_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: SecondaryObjective - Destroy Hybrid North Lab - Create
//--------------------------------------------------------------------------------------------------
bool gt_SecondaryObjectiveDestroyHybridNorthLabCreate_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_tempUnit;
    // Variable Initialization
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_MakeUnitInvulnerable(UnitFromId(1253775535), false);
    libCOMI_gf_CreateObjectiveCampaign("PlaceholderSecondary");
    gv_secondaryObjectiveDestroyHybridNorthLab = ObjectiveLastCreated();
    ObjectiveSetPriority(ObjectiveLastCreated(), 8);
    TriggerExecute(gt_SecondaryObjectiveDestroyHybridNorthLabUpdate, true, false);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("BonusObjectiveDestroy", true, -1);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    lv_tempUnit = UnitFromId(1253775535);
    libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_Secondary, UnitGetPosition(lv_tempUnit), null);
    PingSetUnit(PingLastCreated(), lv_tempUnit);
    gv_secondaryObjectiveDestroyHybridNorthLabMarker = PingLastCreated();
    VisRevealArea(gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(lv_tempUnit), 5.0), 0.1, false);
    VisRevealArea(gv_pLAYER_02_USER, RegionCircle(UnitGetPosition(lv_tempUnit), 5.0), 0.1, false);
    TriggerExecute(gt_TransmissionSecondHybridLabOnline, true, false);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SecondaryObjectiveDestroyHybridNorthLabCreate_Init () {
    gt_SecondaryObjectiveDestroyHybridNorthLabCreate = TriggerCreate("gt_SecondaryObjectiveDestroyHybridNorthLabCreate_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: SecondaryObjective - Destroy Hybrid North Lab - Complete
//--------------------------------------------------------------------------------------------------
bool gt_SecondaryObjectiveDestroyHybridNorthLabComplete_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_timeRemaining;
    // Variable Initialization
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_SecondaryObjectiveDestroyHybridNorthLabCreate, true, false);
    ObjectiveSetState(gv_secondaryObjectiveDestroyHybridNorthLab, c_objectiveStateCompleted);
    PingDestroy(gv_secondaryObjectiveDestroyHybridNorthLabMarker);
    gf_QueueMissionTransmission("BonusObjectiveSuccess");
    lv_timeRemaining = TimerGetRemaining(gv_hybridSpawnTimer);
    TimerStart(gv_hybridSpawnTimer, (lv_timeRemaining + 180.0), false, c_timeGame);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SecondaryObjectiveDestroyHybridNorthLabComplete_Init () {
    gt_SecondaryObjectiveDestroyHybridNorthLabComplete = TriggerCreate("gt_SecondaryObjectiveDestroyHybridNorthLabComplete_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: SecondaryObjective - Destroy Hybrid North Lab - Update
//--------------------------------------------------------------------------------------------------
bool gt_SecondaryObjectiveDestroyHybridNorthLabUpdate_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerExecute(gt_SecondaryObjectiveDestroyHybridNorthLabCreate, true, false);
    ObjectiveSetName(gv_secondaryObjectiveDestroyHybridNorthLab, TextExpressionAssemble("Param/Expression/2DF973E8"));
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SecondaryObjectiveDestroyHybridNorthLabUpdate_Init () {
    gt_SecondaryObjectiveDestroyHybridNorthLabUpdate = TriggerCreate("gt_SecondaryObjectiveDestroyHybridNorthLabUpdate_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: SecondaryObjective - Destroy Hybrid North Lab - Failed
//--------------------------------------------------------------------------------------------------
bool gt_SecondaryObjectiveDestroyHybridNorthLabFailed_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_SecondaryObjectiveDestroyHybridNorthLabCreate, true, false);
    ObjectiveSetState(gv_secondaryObjectiveDestroyHybridNorthLab, c_objectiveStateFailed);
    PingDestroy(gv_secondaryObjectiveDestroyHybridNorthLabMarker);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SecondaryObjectiveDestroyHybridNorthLabFailed_Init () {
    gt_SecondaryObjectiveDestroyHybridNorthLabFailed = TriggerCreate("gt_SecondaryObjectiveDestroyHybridNorthLabFailed_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: SecondaryObjective - Destroy Hybrid South Lab - Create
//--------------------------------------------------------------------------------------------------
bool gt_SecondaryObjectiveDestroyHybridSouthLabCreate_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_tempUnit;
    // Variable Initialization
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_MakeUnitInvulnerable(UnitFromId(727888777), false);
    libCOMI_gf_CreateObjectiveCampaign("PlaceholderSecondary");
    gv_secondaryObjectiveDestroyHybridSouthLab = ObjectiveLastCreated();
    ObjectiveSetPriority(ObjectiveLastCreated(), 9);
    TriggerExecute(gt_SecondaryObjectiveDestroyHybridSouthLabUpdate, true, false);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("BonusObjectiveDestroy", true, -1);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    lv_tempUnit = UnitFromId(727888777);
    libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_Secondary, UnitGetPosition(lv_tempUnit), null);
    PingSetUnit(PingLastCreated(), lv_tempUnit);
    gv_secondaryObjectiveDestroyHybridSouthLabMarker = PingLastCreated();
    VisRevealArea(gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(lv_tempUnit), 5.0), 0.1, false);
    VisRevealArea(gv_pLAYER_02_USER, RegionCircle(UnitGetPosition(lv_tempUnit), 5.0), 0.1, false);
    TriggerExecute(gt_TransmissionFirstHybridLabOnline, true, false);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SecondaryObjectiveDestroyHybridSouthLabCreate_Init () {
    gt_SecondaryObjectiveDestroyHybridSouthLabCreate = TriggerCreate("gt_SecondaryObjectiveDestroyHybridSouthLabCreate_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: SecondaryObjective - Destroy Hybrid South Lab - Complete
//--------------------------------------------------------------------------------------------------
bool gt_SecondaryObjectiveDestroyHybridSouthLabComplete_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_timeRemaining;
    // Variable Initialization
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_SecondaryObjectiveDestroyHybridSouthLabCreate, true, false);
    ObjectiveSetState(gv_secondaryObjectiveDestroyHybridSouthLab, c_objectiveStateCompleted);
    PingDestroy(gv_secondaryObjectiveDestroyHybridSouthLabMarker);
    gf_QueueMissionTransmission("BonusObjectiveSuccess");
    lv_timeRemaining = TimerGetRemaining(gv_hybridSpawnTimer);
    TimerStart(gv_hybridSpawnTimer, (lv_timeRemaining + 60.0), false, c_timeGame);
    gv_hybridSpawnTime += 60.0;
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SecondaryObjectiveDestroyHybridSouthLabComplete_Init () {
    gt_SecondaryObjectiveDestroyHybridSouthLabComplete = TriggerCreate("gt_SecondaryObjectiveDestroyHybridSouthLabComplete_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: SecondaryObjective - Destroy Hybrid South Lab - Update
//--------------------------------------------------------------------------------------------------
bool gt_SecondaryObjectiveDestroyHybridSouthLabUpdate_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerExecute(gt_SecondaryObjectiveDestroyHybridSouthLabCreate, true, false);
    ObjectiveSetName(gv_secondaryObjectiveDestroyHybridSouthLab, TextExpressionAssemble("Param/Expression/4D0000B4"));
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SecondaryObjectiveDestroyHybridSouthLabUpdate_Init () {
    gt_SecondaryObjectiveDestroyHybridSouthLabUpdate = TriggerCreate("gt_SecondaryObjectiveDestroyHybridSouthLabUpdate_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: SecondaryObjective - Destroy Hybrid South Lab - Failed
//--------------------------------------------------------------------------------------------------
bool gt_SecondaryObjectiveDestroyHybridSouthLabFailed_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_SecondaryObjectiveDestroyHybridSouthLabCreate, true, false);
    ObjectiveSetState(gv_secondaryObjectiveDestroyHybridSouthLab, c_objectiveStateFailed);
    PingDestroy(gv_secondaryObjectiveDestroyHybridSouthLabMarker);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SecondaryObjectiveDestroyHybridSouthLabFailed_Init () {
    gt_SecondaryObjectiveDestroyHybridSouthLabFailed = TriggerCreate("gt_SecondaryObjectiveDestroyHybridSouthLabFailed_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger Initialization
//--------------------------------------------------------------------------------------------------
void InitTriggers () {
    gt_Init01LoadData_Init();
    gt_Init02Players_Init();
    gt_Init03LoadingComplete_Init();
    gt_Init04Technology_Init();
    gt_Init05Units_Init();
    gt_Init06MusicSound_Init();
    gt_Init07Environment_Init();
    gt_Init08Difficulties_Init();
    gt_Init09Tips_Init();
    gt_StartGameQ_Init();
    gt_HelpTipDestroyBasetoCapWZ_Init();
    gt_HelpTipPathableAfterWZCaptured_Init();
    gt_EnemyBaseMonitor_Init();
    gt_MonitorWestWarpZoneBase_Init();
    gt_MonitorEastWarpZoneBase_Init();
    gt_MonitorSouthWarpZoneBase_Init();
    gt_MonitorCenterWarpZoneBase_Init();
    gt_UnitEntersWarpZone_Init();
    gt_UnitCreatedInWarpZone_Init();
    gt_PhaseSmithAction_Init();
    gt_PhaseSmithAttacked_Init();
    gt_UnitLeavesWarpZoneBaseWEST_Init();
    gt_UnitLeavesWarpZoneBaseEAST_Init();
    gt_UnitLeavesWarpZoneBaseSOUTH_Init();
    gt_UnitLeavesWarpZoneBaseCENTER_Init();
    gt_MultiWorldPathing_Init();
    gt_ClearUnitPathing_Init();
    gt_ShowandUpdatePrimaryObjectiveMarkers_Init();
    gt_ShowandUpdateSecondaryObjectiveMarkers_Init();
    gt_UpdatePortalCount_Init();
    gt_UpdateProtossStructureCount_Init();
    gt_HybridLabDies_Init();
    gt_EnemyAttackingQ_Init();
    gt_TransmissionAnotherWarpZoneDiscovered_Init();
    gt_TransmissionBothCommandersRequiredtoCapWZ_Init();
    gt_TransmissionVoidRiftWarpZoneDiscovered_Init();
    gt_TransmissionFinalEnemyBaseStarted_Init();
    gt_TransmissionFinalVoidRiftOnline_Init();
    gt_TransmissionFirstHybridLabOnline_Init();
    gt_TransmissionFirstVoidRiftDetected_Init();
    gt_TransmissionFirstWarpZoneDiscovered_Init();
    gt_TransmissionHybridProgress_Init();
    gt_TransmissionHybridProgressFinal_Init();
    gt_TransmissionHybridSpawned_Init();
    gt_TransmissionMoreVoidRiftsOnline_Init();
    gt_TransmissionPrimaryObjectiveCreated_Init();
    gt_TransmissionProtossWarpZoneDisabled_Init();
    gt_TransmissionSecondHybridLabOnline_Init();
    gt_TransmissionShadowCloudDamage_Init();
    gt_TransmissionShadowCloudProgress_Init();
    gt_TransmissionWarpZoneCaptured_Init();
    gt_TransmissionWarpZoneSupportRequired_Init();
    gt_SoundsHybridProgression_Init();
    gt_DefeatPrimaryObjectiveFailed_Init();
    gt_VictoryPrimaryObjectiveComplete_Init();
    gt_VictorySequence_Init();
    gt_VictoryFanfareQ_Init();
    gt_Victory_Init();
    gt_Defeat_Init();
    gt_StartAI_Init();
    gt_AIBaseDestroyed_Init();
    gt_SetupAttackWaveSpawn_Init();
    gt_AIAttackWaves_Init();
    gt_AttackWave01_Init();
    gt_AttackWave02_Init();
    gt_AttackWave03_Init();
    gt_AttackWave04_Init();
    gt_AttackWave05_Init();
    gt_AttackWave06_Init();
    gt_AttackWave07_Init();
    gt_SpawnDefenseWave_Periodic_Init();
    gt_TriggerFirstWave_Init();
    gt_SpawnOffenseWave_Periodic_Init();
    gt_MonitorHybridPosition_Init();
    gt_StartHybridSpawnTimer_Init();
    gt_GenerateVoidFog_LeftRegion_Init();
    gt_OrderShadowUnit_Periodic_Init();
    gt_SpawnHybrid_Init();
    gt_HybridDies_Init();
    gt_HybridShadowBlastExpires_Init();
    gt_HybridShadowBlastPeriodicBehavior_Init();
    gt_ObjectiveDestroyTheHybridWarpGatesCreate_Init();
    gt_ObjectiveDestroyTheHybridWarpGatesComplete_Init();
    gt_ObjectiveDestroyTheHybridWarpGatesUpdate_Init();
    gt_ObjectiveDestroyTheHybridWarpGatesFailed_Init();
    gt_ObjectiveDefendProtossAllyCreate_Init();
    gt_ObjectiveDefendProtossAllyComplete_Init();
    gt_ObjectiveDefendProtossAllyUpdate_Init();
    gt_ObjectiveDefendProtossAllyFailed_Init();
    gt_SecondaryObjectiveCaptureWestWarpZoneCreate_Init();
    gt_SecondaryObjectiveCaptureWestWarpZoneComplete_Init();
    gt_SecondaryObjectiveCaptureWestWarpZoneUpdate_Init();
    gt_SecondaryObjectiveCaptureWestWarpZoneFailed_Init();
    gt_SecondaryObjectiveCaptureEastWarpZoneCreate_Init();
    gt_SecondaryObjectiveCaptureEastWarpZoneComplete_Init();
    gt_SecondaryObjectiveCaptureEastWarpZoneUpdate_Init();
    gt_SecondaryObjectiveCaptureEastWarpZoneFailed_Init();
    gt_SecondaryObjectiveCaptureSouthWarpZoneCreate_Init();
    gt_SecondaryObjectiveCaptureSouthWarpZoneComplete_Init();
    gt_SecondaryObjectiveCaptureSouthWarpZoneUpdate_Init();
    gt_SecondaryObjectiveCaptureSouthWarpZoneFailed_Init();
    gt_SecondaryObjectiveCaptureCenterWarpZoneCreate_Init();
    gt_SecondaryObjectiveCaptureCenterWarpZoneComplete_Init();
    gt_SecondaryObjectiveCaptureCenterWarpZoneUpdate_Init();
    gt_SecondaryObjectiveCaptureCenterWarpZoneFailed_Init();
    gt_SecondaryObjectiveDestroyHybridNorthLabCreate_Init();
    gt_SecondaryObjectiveDestroyHybridNorthLabComplete_Init();
    gt_SecondaryObjectiveDestroyHybridNorthLabUpdate_Init();
    gt_SecondaryObjectiveDestroyHybridNorthLabFailed_Init();
    gt_SecondaryObjectiveDestroyHybridSouthLabCreate_Init();
    gt_SecondaryObjectiveDestroyHybridSouthLabComplete_Init();
    gt_SecondaryObjectiveDestroyHybridSouthLabUpdate_Init();
    gt_SecondaryObjectiveDestroyHybridSouthLabFailed_Init();
}
//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void run () {
    InitLibs();
    InitGlobals();
    InitCustomAI();
    InitTriggers();
}

//--------------------------------------------------------------------------------------------------
// Custom Script Initialization
//--------------------------------------------------------------------------------------------------
void InitCustomScript () {
    run();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void InitMap () {
    InitCustomScript();
}
