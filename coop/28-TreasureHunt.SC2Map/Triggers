<?xml version="1.0" encoding="utf-8"?>
<TriggerData>
    <Root>
        <Item Type="CustomScript" Id="E684C94A"/>
    </Root>
    <Element Type="CustomScript" Id="E684C94A">
        <ScriptCode>
            //==================================================================================================
            // 
            // Generated Map Script
            // 
            // Name:   Treasure Hunt
            // 
            //==================================================================================================
            include &quot;libARRA&quot;
            include &quot;LibCOMI&quot;
            //--------------------------------------------------------------------------------------------------
            // Library Initialization
            //--------------------------------------------------------------------------------------------------
            void InitLibs () {
                libNtve_InitLib();
                libARRA_InitLib();
                libCOMI_InitLib();
            }
            //--------------------------------------------------------------------------------------------------
            // Constants
            //--------------------------------------------------------------------------------------------------
            int gv_pLAYER_01_USER = 1;
            int gv_pLAYER_02_USER = 2;
            const int gv_pLAYER_03_Player01Enemy = 6;
            const int gv_pLAYER_04_Player02Enemy = 7;
            const int gv_pLAYER_05_Player03Hybrids = 8;
            const int gv_pLAYER_10_Crystal = 10;
            const int gv_pLAYER_11_Transport = 11;
            const int gv_objectiveEscortCrystalsGoal = 7;
            const int gv_objectiveDontLoseCrystalsGoal = 2;
            const int gv_objectiveCrystalsBeforeStormGoal = 3;
            //--------------------------------------------------------------------------------------------------
            // Global Preset Declarations
            //--------------------------------------------------------------------------------------------------
            const int ge_DoubleVariant_A = 0;
            const int ge_DoubleVariant_B = 1;
            const int ge_DoubleVariant_C = 2;
            const int ge_DoubleVariant_D = 3;
            const int ge_TransmissionType_TH1CRYSTALISREADY = 0;
            const int ge_TransmissionType_TH2TRANSPORTSTARTED = 1;
            const int ge_TransmissionType_TH3TRANSPORTCOMPLETE = 2;
            const int ge_TransmissionType_TH4HYBRIDISCOMINGFORCRYSTAL = 3;
            const int ge_TransmissionType_TH5CRYSTALISATTACKED = 4;
            const int ge_TransmissionType_TH6HYBRIDKILLED = 5;
            const int ge_TransmissionType_TH7CRYSTALDESTROYED = 6;
            const int ge_TransmissionType_TH8TRANSPORTISATTACKED = 7;
            const int ge_TransmissionType_TH9TRANSPORTDESTROYED = 8;
            string ge_TransmissionType_Ident (int lp_val);
            //--------------------------------------------------------------------------------------------------
            // Global Variables
            //--------------------------------------------------------------------------------------------------
            string gv_mapMusicTrack;
            timer gv_debuggametimer;
            int gv_gameStage;
            bool[6][6] gv_crystalAvailable;
            bool[6][6] gv_crystalAvoidIfPossible;
            point[6][6] gv_crystalSpawnPoint;
            point[6][6] gv_crystalHybridSpawnPoint;
            region[6][6] gv_crystalRegion;
            int[6][6] gv_crystalDeliverySiteID;
            point[6][6] gv_crystalTransportSpawnPoint;
            point[6][6] gv_crystalTransportPath1;
            point[6][6] gv_crystalTransportPath2;
            point[6][6] gv_crystalTransportPath3;
            bool[6][6] gv_crystalHybridsSpawned;
            point[6] gv_deliveryPoint;
            region[6] gv_deliveryPointRegion;
            int[6] gv_spawnedCrystalsPerLvl;
            int[6] gv_spawnedCrystalsPerDP;
            int[8] gv_spawnedCrystalsAttempt;
            int[6] gv_maxCrystalsPerLvl;
            int[6] gv_noCrystalsPerLvl;
            int[7] gv_lvlPerGroup;
            bool gv_secondaryPicked;
            int[3] gv_activeCrystalLevel;
            region[3] gv_activeCrystalRegion;
            bool[3] gv_activeCrystalIsInGame;
            bool[3] gv_activeCrystalIsTransported;
            int[3] gv_activeCrystalID;
            int[3] gv_activeDeliveryID;
            unit[3] gv_activeCrystalUnit;
            actor[3] gv_activeCrystalReticle;
            unit[3] gv_activeTransportUnit;
            int[3] gv_activeTransportPing;
            int[3] gv_activeDeliveryPing;
            actor[3] gv_activeDeliveryFailReticle;
            int[3] gv_activeDeliveryFailTextTag;
            int[3] gv_activePathDisplay;
            unitgroup[3] gv_activeCrystalHybridForce;
            int[3] gv_activeCrystalHybridForcePing;
            int[3] gv_activeCrystalHybridForceTargetLevel;
            int[3] gv_activeCrystalHybridForceTargetCystalID;
            int gv_crystal54variant;
            timer gv_stormCountdownTimer;
            timer gv_stormCountdownTimer95;
            timer gv_stormCountdownTimer45;
            timer gv_stormCountdownTimer10;
            bool gv_stormCountdownWaiting;
            timer gv_stormCountdownWaitingTimer;
            unit[7] gv_stormUnit;
            point[4][7] gv_stormUnitSpwLoc;
            point[4][7] gv_stormUnitTarget0;
            point[4][7] gv_stormUnitTarget;
            int[7] gv_stormPing;
            int gv_stormUnitsCount;
            int gv_pickedStromGroup;
            region gv_shieldRegion;
            bool[6] gv_deliveryPointDestroyed;
            actor gv_stormCenterEffect;
            timer gv_secondStormCountdownTimer;
            int gv_secondStormCountdownTimerWindow;
            actor[19] gv_lBeffect;
            timer gv_bonusKillHybridsTimer;
            int gv_bonusKillHybridsPing;
            unitgroup gv_bonusKillHybridsUnitGroup;
            unit gv_bonusKillHybridsPCUnit;
            unit gv_bonusKillHybridsHMUnit;
            int[3] gv_doublePickedVariant;
            int[3][3] gv_doublePickedLvl;
            int[3][3] gv_doublePickedCrystalID;
            point[3] gv_doubleTransitionPath;
            bool gv_doubleActive;
            int gv_doubleActiveGroup;
            bool gv_doubleBothCrystalsAreInside;
            int[10] gv_transmissionSpoken;
            bool[10][10] gv_transmissionLinespoken;
            int[10] gv_transmissionLinelastspoken;
            point gv_lastCriticalEventPosition;
            string gv_hybridMajor;
            string gv_hybridMinor;
            int[9] gv_hybridDelayPerGroup;
            string gv_transportType;
            point[6] gv_deliverySiteDefaultEnemySpwPoint;
            int[8] gv_bucketPerGroup;
            int[8] gv_techLvlPerGroup;
            int[4] gv_baseWaveVariant;
            int gv_defenseWaveIndex;
            int gv_objectiveDestroyZergBase;
            int gv_objectiveEscortCrystalsEscorted;
            int gv_objectiveDestroyZergBase2;
            int gv_objectiveDontLoseCrystalsLost;
            int gv_objectiveRescueStalkers;
            bool gv_objectiveCrystalsBeforeStormCompletedsoon;
            int gv_objectiveRescueStalkers2;
            void InitGlobals () {
                int init_i;
                int init_j;
                gv_debuggametimer = TimerCreate();
                for (init_i = 0; init_i &lt;= 5; init_i += 1) {
                    for (init_j = 0; init_j &lt;= 5; init_j += 1) {
                        gv_crystalAvailable[init_i][init_j] = true;
                    }
                }
                for (init_i = 0; init_i &lt;= 2; init_i += 1) {
                    gv_activeCrystalID[init_i] = 1;
                }
                for (init_i = 0; init_i &lt;= 2; init_i += 1) {
                    gv_activeDeliveryID[init_i] = 1;
                }
                for (init_i = 0; init_i &lt;= 2; init_i += 1) {
                    gv_activeTransportPing[init_i] = c_invalidPingId;
                }
                for (init_i = 0; init_i &lt;= 2; init_i += 1) {
                    gv_activeDeliveryPing[init_i] = c_invalidPingId;
                }
                for (init_i = 0; init_i &lt;= 2; init_i += 1) {
                    gv_activeDeliveryFailTextTag[init_i] = c_textTagNone;
                }
                for (init_i = 0; init_i &lt;= 2; init_i += 1) {
                    gv_activeCrystalHybridForce[init_i] = UnitGroupEmpty();
                }
                for (init_i = 0; init_i &lt;= 2; init_i += 1) {
                    gv_activeCrystalHybridForcePing[init_i] = c_invalidPingId;
                }
                gv_stormCountdownTimer = TimerCreate();
                gv_stormCountdownTimer95 = TimerCreate();
                gv_stormCountdownTimer45 = TimerCreate();
                gv_stormCountdownTimer10 = TimerCreate();
                gv_stormCountdownWaitingTimer = TimerCreate();
                for (init_i = 0; init_i &lt;= 6; init_i += 1) {
                    gv_stormPing[init_i] = c_invalidPingId;
                }
                gv_secondStormCountdownTimer = TimerCreate();
                gv_secondStormCountdownTimerWindow = c_timerWindowNone;
                gv_bonusKillHybridsTimer = TimerCreate();
                gv_bonusKillHybridsPing = c_invalidPingId;
                gv_bonusKillHybridsUnitGroup = UnitGroupEmpty();
                gv_lastCriticalEventPosition = RegionGetCenter(RegionEntireMap());
                for (init_i = 0; init_i &lt;= 7; init_i += 1) {
                    gv_bucketPerGroup[init_i] = libCOMI_ge_CoopAIAttackWaveBuckets__3Small;
                }
                for (init_i = 0; init_i &lt;= 7; init_i += 1) {
                    gv_techLvlPerGroup[init_i] = libCOMI_ge_CoopAITechLevelBuckets__1Early;
                }
                for (init_i = 0; init_i &lt;= 3; init_i += 1) {
                    gv_baseWaveVariant[init_i] = 1;
                }
                gv_objectiveDestroyZergBase = c_invalidObjectiveId;
                gv_objectiveDestroyZergBase2 = c_invalidObjectiveId;
                gv_objectiveRescueStalkers = c_invalidObjectiveId;
                gv_objectiveRescueStalkers2 = c_invalidObjectiveId;
            }
            //--------------------------------------------------------------------------------------------------
            // Global Function Declarations
            //--------------------------------------------------------------------------------------------------
            void gf_PickCrystal (int lp_wave, bool lp_forcelevel, int lp_forcedlevel);
            void gf_PickCrystalwithdebug (int lp_wave, bool lp_forcelevel, int lp_forcedlevel);
            void gf_SpawnCrystal (int lp_crystalLevel, int lp_crystalID, int lp_wave, bool lp_secondUsage);
            void gf_StartTransport (int lp_wave);
            void gf_SuccessfulTransport (int lp_wave);
            void gf_SetDoubleVariant (int lp_doubleVariant, int lp_doubleGroup);
            int gf_PickRandomTransmissionLine (int lp_transmissionType, int lp_maxLines);
            void gf_SendGuards (int lp_level, int lp_crystalid);
            void gf_SendGuardsTEST (int lp_level, int lp_crystalid);
            void gf_SendGuardsOBSOLETE (int lp_level, int lp_crystalid);
            void gf_SendAttackonTransport (int lp_level, int lp_crystalid, int lp_wave);
            void gf_SendDroponTransport (bool lp_isInstant, point lp_spawnlocation, point lp_targetlocation, int lp_wave, int lp_delay, bool lp_double, bool lp_forcemedium);
            void gf_SendHybridsAfterCrystal (int lp_wave, bool lp_forced);
            void gf_CrystalHybridForceShowArrows (point lp_startloc, point lp_endloc);
            //--------------------------------------------------------------------------------------------------
            // Trigger Variables
            //--------------------------------------------------------------------------------------------------
            trigger gt_Init01LoadData;
            void gt_Init02Players();
            trigger gt_Init03LoadingComplete;
            trigger gt_Init05Units;
            trigger gt_Init06MusicSound;
            trigger gt_Init07Environment;
            trigger gt_Init08Difficulties;
            trigger gt_StartGameQ;
            trigger gt_ArraySetup;
            trigger gt_StartCrystalController;
            trigger gt_OBSOLETEdoublesetup;
            trigger gt_IndicatepathWave1;
            trigger gt_IndicatepathWave2;
            trigger gt_CrystalisAttackedWave1;
            trigger gt_CrystalisAttackedWave2;
            trigger gt_CrystalDestroyedWave1;
            trigger gt_CrystalDestroyedWave2;
            trigger gt_TransportisAttackedWave1;
            trigger gt_TransportisAttackedWave2;
            trigger gt_TransportDestroyedWave1;
            trigger gt_TransportDestroyedWave2;
            trigger gt_Preparenextpick;
            trigger gt_Preparepickafterfifth;
            trigger gt_PreparenextpickOBSOLETE;
            trigger gt_StartCrystalTransportWave1;
            trigger gt_StartCrystalTransportWave2;
            trigger gt_TransportReachedDestinationWave1;
            trigger gt_TransportReachedDestinationWave2;
            trigger gt_NoEmemiesatDestinationWave1;
            trigger gt_NoEmemiesatDestinationWave2;
            trigger gt_NoEmemiesatDestinationWave1OBSOLETE;
            trigger gt_NoEmemiesatDestinationWave2OBSOLETE;
            trigger gt_Setuplevel5;
            trigger gt_rev01;
            trigger gt_rev02;
            trigger gt_rev03;
            trigger gt_rev04;
            trigger gt_rev05;
            trigger gt_rev06;
            trigger gt_rev07;
            trigger gt_rev08;
            trigger gt_rev09;
            trigger gt_rev10;
            trigger gt_rev11;
            trigger gt_rev12;
            trigger gt_rev13;
            trigger gt_DestroyStorm1;
            trigger gt_DestroyStorm2;
            trigger gt_DestroyStorm3;
            trigger gt_DestroyStorm4;
            trigger gt_DestroyStorm5;
            trigger gt_DestroyStorm6;
            trigger gt_StormController1;
            trigger gt_StormController2;
            trigger gt_StormController3;
            trigger gt_StormController4;
            trigger gt_StormController5;
            trigger gt_StormController6;
            trigger gt_DPdestroy1;
            trigger gt_DPdestructionpick;
            trigger gt_DPdestroy2;
            trigger gt_DPdestroy3;
            trigger gt_StormCountdownController;
            trigger gt_StormCountdownOBSOLETE;
            trigger gt_Stormin45sec;
            trigger gt_Stormin10sec;
            trigger gt_WaitingTimerExpired;
            trigger gt_StormStarts;
            trigger gt_SpawnStormUnits;
            trigger gt_Stormwarning;
            trigger gt_StormEnds;
            trigger gt_DestroyWeatherShield;
            trigger gt_SecondStormin25sec;
            trigger gt_SecondStormStarts;
            trigger gt_BonusKillHybridsInit;
            trigger gt_BonusKillHybridsInitOBSOLETE;
            trigger gt_BonusKillHybridMajorKilled;
            trigger gt_BonusKillHybridsKilled;
            trigger gt_BonusKillHybridsExpired;
            trigger gt_BonusKillHybridsTimerUpdate;
            trigger gt_BonusKillHybridsOrdersReset;
            trigger gt_IndicateDoublePath;
            trigger gt_StartDoubleTransport;
            trigger gt_OBSOLETEStartDoubleTransport2;
            trigger gt_ReactivateCrystal;
            trigger gt_InterruptDoubleTransport;
            trigger gt_ClearReservationsforDouble;
            trigger gt_PickupSecondCrystalWave1;
            trigger gt_PickupSecondCrystalWave2;
            trigger gt_DoubleProlongHybridDelay;
            trigger gt_Crystalisready;
            trigger gt_FirstCrystalreminder;
            trigger gt_Transportisonitsway;
            trigger gt_TransportComplete;
            trigger gt_Stormreminder;
            trigger gt_Weathershieldturnedon;
            trigger gt_StormClusterdanger;
            trigger gt_Hybriddetected;
            trigger gt_BaseAttack;
            trigger gt_DropWarpindetected;
            trigger gt_Hybridiscomingforcrystal;
            trigger gt_Crystalisattacked;
            trigger gt_Hybridkilledandtransportstarts;
            trigger gt_Crystaldestroyed;
            trigger gt_Transportattacked;
            trigger gt_Transportdestroyed;
            trigger gt_Stormisending;
            trigger gt_SecondBonusObjective;
            trigger gt_SecondBonusObjectiveSuccess;
            trigger gt_SecondBonusObjectiveFail;
            trigger gt_SecondStorm;
            trigger gt_Crystaldouble;
            trigger gt_VictoryTransmission;
            trigger gt_DefeatPrimaryObjectiveFailed;
            trigger gt_VictoryEscortingCompleted;
            trigger gt_VictorySequence;
            trigger gt_Victory;
            trigger gt_VictoryFanfareQ;
            trigger gt_Defeat;
            trigger gt_BaseAttackWave01A;
            trigger gt_BaseAttackWave01A2;
            trigger gt_BaseAttackWave01B;
            trigger gt_BaseAttackWave01C;
            trigger gt_BaseAttackWave02A;
            trigger gt_BaseAttackWave02B;
            trigger gt_BaseAttackWave03;
            trigger gt_BaseAttackWave03OBSOLETE;
            trigger gt_CrystalHybridForcePingController1;
            trigger gt_CrystalHybridForcePingController2;
            trigger gt_InitHybridStromWave;
            trigger gt_HybridStormWave01;
            trigger gt_HybridStormWave02;
            trigger gt_HybridStormWave03;
            trigger gt_HybridStormWave04;
            trigger gt_HybridStormWave05;
            trigger gt_SetupHybridTypes;
            trigger gt_InitSecondHybridStromWave;
            trigger gt_HybridStorm2Wave01;
            trigger gt_HybridStorm2Wave02;
            trigger gt_StartAI;
            trigger gt_StartAttackWaveController;
            trigger gt_AIGiveResources;
            trigger gt_CallBackStartingGuards;
            trigger gt_ObjectiveEscortCrystalsCreate;
            trigger gt_ObjectiveEscortCrystalsComplete;
            trigger gt_ObjectiveEscortCrystalsUpdate;
            trigger gt_ObjectiveEscortCrystalsFailed;
            trigger gt_ObjectiveDontLoseCrystalsCreate;
            trigger gt_ObjectiveDontLoseCrystalsComplete;
            trigger gt_ObjectiveDontLoseCrystalsUpdate;
            trigger gt_ObjectiveDontLoseCrystalsFailed;
            trigger gt_ObjectiveCrystalsBeforeStormCreate;
            trigger gt_ObjectiveCrystalsBeforeStormComplete;
            trigger gt_ObjectiveCrystalsBeforeStormUpdate;
            trigger gt_ObjectiveCrystalsBeforeStormFailed;
            trigger gt_ObjectiveKillHybridsCreate;
            trigger gt_ObjectiveKillHybridsComplete;
            trigger gt_ObjectiveKillHybridsUpdate;
            trigger gt_ObjectiveKillHybridsFailed;
            //--------------------------------------------------------------------------------------------------
            // Global Presets
            //--------------------------------------------------------------------------------------------------
            string ge_TransmissionType_Ident (int lp_val) {
                     if (lp_val == ge_TransmissionType_TH1CRYSTALISREADY) { return &quot;TH1CRYSTALISREADY&quot;; }
                else if (lp_val == ge_TransmissionType_TH2TRANSPORTSTARTED) { return &quot;TH2TRANSPORTSTARTED&quot;; }
                else if (lp_val == ge_TransmissionType_TH3TRANSPORTCOMPLETE) { return &quot;TH3TRANSPORTCOMPLETE&quot;; }
                else if (lp_val == ge_TransmissionType_TH4HYBRIDISCOMINGFORCRYSTAL) { return &quot;TH4HYBRIDISCOMINGFORCRYSTAL&quot;; }
                else if (lp_val == ge_TransmissionType_TH5CRYSTALISATTACKED) { return &quot;TH5CRYSTALISATTACKED&quot;; }
                else if (lp_val == ge_TransmissionType_TH6HYBRIDKILLED) { return &quot;TH6HYBRIDKILLED&quot;; }
                else if (lp_val == ge_TransmissionType_TH7CRYSTALDESTROYED) { return &quot;TH7CRYSTALDESTROYED&quot;; }
                else if (lp_val == ge_TransmissionType_TH8TRANSPORTISATTACKED) { return &quot;TH8TRANSPORTISATTACKED&quot;; }
                else if (lp_val == ge_TransmissionType_TH9TRANSPORTDESTROYED) { return &quot;TH9TRANSPORTDESTROYED&quot;; }
                return null;
            }
            //--------------------------------------------------------------------------------------------------
            // Global Functions
            //--------------------------------------------------------------------------------------------------
            void gf_PickCrystal (int lp_wave, bool lp_forcelevel, int lp_forcedlevel) {
                int autoECA80CA1_val;
                int auto88C8C0A5_ae;
                int auto88C8C0A5_ai;
                int autoED32A520_ae;
                int autoED32A520_ai;
                int auto3C948B55_val;
                // Variable Declarations
                int lv_crystalid;
                int lv_numberofchoices;
                int[6] lv_choice;
                int lv_choosen;
                int lv_level;
                bool lv_alreadyused;
                int lv_avoiddeliveryid;
                // Variable Initialization
                // Implementation
                if ((lp_forcelevel == true)) {
                    lv_level = lp_forcedlevel;
                }
                else {
                    lv_level = gv_lvlPerGroup[gv_objectiveEscortCrystalsEscorted];
                }
                if ((lv_level == 5)) {
                    TriggerExecute(gt_Setuplevel5, true, true);
                }
                if ((lv_level != 5) &amp;&amp; (gv_spawnedCrystalsPerLvl[lv_level] == gv_maxCrystalsPerLvl[lv_level])) {
                    lv_level += 1;
                }
                if ((lv_level == 5) &amp;&amp; (gv_objectiveDontLoseCrystalsLost &lt;= 1) &amp;&amp; (gv_crystalAvailable[5][1] == true)) {
                    gv_crystalAvoidIfPossible[5][3] = true;
                }
                autoECA80CA1_val = lp_wave;
                if (autoECA80CA1_val == 1) {
                    if ((gv_activeCrystalIsInGame[2] == true)) {
                        lv_avoiddeliveryid = gv_activeDeliveryID[2];
                    }
                    if ((gv_activeCrystalIsInGame[1] == true)) {
                        return ;
                    }
                }
                else if (autoECA80CA1_val == 2) {
                    if ((gv_activeCrystalIsInGame[1] == true)) {
                        lv_avoiddeliveryid = gv_activeDeliveryID[1];
                    }
                    if ((gv_activeCrystalIsInGame[2] == true)) {
                        return ;
                    }
                }
                else {
                }
                auto88C8C0A5_ae = gv_noCrystalsPerLvl[lv_level];
                auto88C8C0A5_ai = 1;
                lv_crystalid = 1;
                for ( ; ( (auto88C8C0A5_ai &gt;= 0 &amp;&amp; lv_crystalid &lt;= auto88C8C0A5_ae) || (auto88C8C0A5_ai &lt;= 0 &amp;&amp; lv_crystalid &gt;= auto88C8C0A5_ae) ) ; lv_crystalid += auto88C8C0A5_ai ) {
                    if ((gv_crystalAvailable[lv_level][lv_crystalid] == true) &amp;&amp; (gv_crystalAvoidIfPossible[lv_level][lv_crystalid] == false) &amp;&amp; (gv_crystalDeliverySiteID[lv_level][lv_crystalid] != lv_avoiddeliveryid)) {
                        lv_numberofchoices += 1;
                        lv_choice[lv_numberofchoices] = lv_crystalid;
                    }
                }
                if ((lv_numberofchoices == 0)) {
                    autoED32A520_ae = gv_noCrystalsPerLvl[lv_level];
                    autoED32A520_ai = 1;
                    lv_crystalid = 1;
                    for ( ; ( (autoED32A520_ai &gt;= 0 &amp;&amp; lv_crystalid &lt;= autoED32A520_ae) || (autoED32A520_ai &lt;= 0 &amp;&amp; lv_crystalid &gt;= autoED32A520_ae) ) ; lv_crystalid += autoED32A520_ai ) {
                        if ((gv_crystalAvailable[lv_level][lv_crystalid] == true) &amp;&amp; (gv_crystalDeliverySiteID[lv_level][lv_crystalid] != lv_avoiddeliveryid)) {
                            lv_numberofchoices += 1;
                            lv_choice[lv_numberofchoices] = lv_crystalid;
                        }
                    }
                }
                if ((lv_numberofchoices == 0)) {
                    if (((gv_crystalAvailable[3][3] == false) || (gv_crystalAvailable[5][3] == false))) {
                        lv_alreadyused = true;
                    }
                    TriggerExecute(gt_DPdestroy1, true, false);
                    gf_SpawnCrystal(5, 3, lp_wave, lv_alreadyused);
                }
                else {
                    lv_choosen = RandomInt(1, lv_numberofchoices);
                    if ((lv_level == 5) &amp;&amp; (lv_choice[lv_choosen] == 1) &amp;&amp; (gv_crystalAvailable[1][2] == false)) {
                        lv_alreadyused = true;
                    }
                    if ((lv_level == 5) &amp;&amp; (lv_choice[lv_choosen] == 3) &amp;&amp; (gv_crystalAvailable[3][3] == false)) {
                        lv_alreadyused = true;
                    }
                    gf_SpawnCrystal(lv_level, lv_choice[lv_choosen], lp_wave, lv_alreadyused);
                }
                gv_crystalAvoidIfPossible[3][2] = false;
                gv_crystalAvoidIfPossible[3][4] = false;
                gv_crystalAvoidIfPossible[4][1] = false;
                gv_crystalAvoidIfPossible[4][4] = false;
                gv_crystalAvoidIfPossible[5][3] = false;
                auto3C948B55_val = lv_level;
                if (auto3C948B55_val == 2) {
                    if ((lv_choice[lv_choosen] == 3)) {
                        gv_crystalAvoidIfPossible[3][4] = true;
                    }
                }
                else if (auto3C948B55_val == 3) {
                    gv_crystalAvoidIfPossible[3][1] = false;
                    if ((lv_choice[lv_choosen] == 3)) {
                        gv_crystalAvoidIfPossible[3][4] = true;
                    }
                    if ((lv_choice[lv_choosen] == 5)) {
                        gv_crystalAvoidIfPossible[3][2] = true;
                    }
                }
                else if (auto3C948B55_val == 4) {
                    gv_crystalAvoidIfPossible[4][2] = false;
                    if ((lv_choice[lv_choosen] == 1)) {
                        gv_crystalAvoidIfPossible[4][4] = true;
                    }
                    if ((lv_choice[lv_choosen] == 4)) {
                        gv_crystalAvoidIfPossible[4][1] = true;
                    }
                }
                else if (auto3C948B55_val == 5) {
                    if ((lv_choice[lv_choosen] == 1)) {
                        TriggerExecute(gt_DPdestroy2, true, false);
                    }
                    if ((lv_choice[lv_choosen] == 3)) {
                        TriggerExecute(gt_DPdestroy1, true, false);
                    }
                    if ((lv_choice[lv_choosen] == 4)) {
                        TriggerExecute(gt_DPdestroy3, true, false);
                    }
                }
                else {
                }
            }
            void gf_PickCrystalwithdebug (int lp_wave, bool lp_forcelevel, int lp_forcedlevel) {
                int auto21726BD1_val;
                int autoDE713E80_ae;
                int autoDE713E80_ai;
                int autoC88F9F29_ae;
                int autoC88F9F29_ai;
                int auto8B83AAE7_val;
                // Variable Declarations
                int lv_crystalid;
                int lv_numberofchoices;
                int[6] lv_choice;
                int lv_choosen;
                int lv_level;
                bool lv_alreadyused;
                int lv_avoiddeliveryid;
                // Variable Initialization
                // Implementation
                if ((lp_forcelevel == true)) {
                    lv_level = lp_forcedlevel;
                }
                else {
                    lv_level = gv_lvlPerGroup[gv_objectiveEscortCrystalsEscorted];
                }
                if ((lv_level == 5)) {
                    TriggerExecute(gt_Setuplevel5, true, true);
                }
                if ((lv_level != 5) &amp;&amp; (gv_spawnedCrystalsPerLvl[lv_level] == gv_maxCrystalsPerLvl[lv_level])) {
                    lv_level += 1;
                }
                if ((lv_level == 5) &amp;&amp; (gv_objectiveDontLoseCrystalsLost &lt;= 1) &amp;&amp; (gv_crystalAvailable[5][1] == true)) {
                    gv_crystalAvoidIfPossible[5][3] = true;
                }
                auto21726BD1_val = lp_wave;
                if (auto21726BD1_val == 1) {
                    if ((gv_activeCrystalIsInGame[2] == true)) {
                        lv_avoiddeliveryid = gv_activeDeliveryID[2];
                    }
                    if ((gv_activeCrystalIsInGame[1] == true)) {
                        UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal(&quot;Param/Value/EE3F950D&quot;));
                        return ;
                    }
                }
                else if (auto21726BD1_val == 2) {
                    if ((gv_activeCrystalIsInGame[1] == true)) {
                        lv_avoiddeliveryid = gv_activeDeliveryID[1];
                    }
                    if ((gv_activeCrystalIsInGame[2] == true)) {
                        UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal(&quot;Param/Value/1DBF4201&quot;));
                        return ;
                    }
                }
                else {
                }
                autoDE713E80_ae = gv_noCrystalsPerLvl[lv_level];
                autoDE713E80_ai = 1;
                lv_crystalid = 1;
                for ( ; ( (autoDE713E80_ai &gt;= 0 &amp;&amp; lv_crystalid &lt;= autoDE713E80_ae) || (autoDE713E80_ai &lt;= 0 &amp;&amp; lv_crystalid &gt;= autoDE713E80_ae) ) ; lv_crystalid += autoDE713E80_ai ) {
                    if ((gv_crystalAvailable[lv_level][lv_crystalid] == true) &amp;&amp; (gv_crystalAvoidIfPossible[lv_level][lv_crystalid] == false) &amp;&amp; (gv_crystalDeliverySiteID[lv_level][lv_crystalid] != lv_avoiddeliveryid)) {
                        lv_numberofchoices += 1;
                        lv_choice[lv_numberofchoices] = lv_crystalid;
                    }
                }
                if ((lv_numberofchoices == 0)) {
                    UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal(&quot;Param/Value/496F4B26&quot;));
                    autoC88F9F29_ae = gv_noCrystalsPerLvl[lv_level];
                    autoC88F9F29_ai = 1;
                    lv_crystalid = 1;
                    for ( ; ( (autoC88F9F29_ai &gt;= 0 &amp;&amp; lv_crystalid &lt;= autoC88F9F29_ae) || (autoC88F9F29_ai &lt;= 0 &amp;&amp; lv_crystalid &gt;= autoC88F9F29_ae) ) ; lv_crystalid += autoC88F9F29_ai ) {
                        if ((gv_crystalAvailable[lv_level][lv_crystalid] == true) &amp;&amp; (gv_crystalDeliverySiteID[lv_level][lv_crystalid] != lv_avoiddeliveryid)) {
                            lv_numberofchoices += 1;
                            lv_choice[lv_numberofchoices] = lv_crystalid;
                        }
                    }
                }
                lv_choosen = RandomInt(1, lv_numberofchoices);
                if ((lv_level == 5) &amp;&amp; (lv_choice[lv_choosen] == 1) &amp;&amp; (gv_crystalAvailable[1][2] == false)) {
                    lv_alreadyused = true;
                }
                if ((lv_level == 5) &amp;&amp; (lv_choice[lv_choosen] == 3) &amp;&amp; (gv_crystalAvailable[3][3] == false)) {
                    lv_alreadyused = true;
                }
                TextExpressionSetToken(&quot;Param/Expression/28659E48&quot;, &quot;A&quot;, IntToText(lv_numberofchoices));
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, TextExpressionAssemble(&quot;Param/Expression/28659E48&quot;));
                gf_SpawnCrystal(lv_level, lv_choice[lv_choosen], lp_wave, lv_alreadyused);
                gv_crystalAvoidIfPossible[3][2] = false;
                gv_crystalAvoidIfPossible[3][3] = false;
                gv_crystalAvoidIfPossible[3][4] = false;
                gv_crystalAvoidIfPossible[4][1] = false;
                gv_crystalAvoidIfPossible[4][4] = false;
                gv_crystalAvoidIfPossible[5][3] = false;
                auto8B83AAE7_val = lv_level;
                if (auto8B83AAE7_val == 2) {
                    if ((lv_choice[lv_choosen] == 3)) {
                        gv_crystalAvoidIfPossible[3][4] = true;
                    }
                }
                else if (auto8B83AAE7_val == 3) {
                    gv_crystalAvoidIfPossible[3][1] = false;
                    if ((lv_choice[lv_choosen] == 3)) {
                        gv_crystalAvoidIfPossible[3][4] = true;
                    }
                    if ((lv_choice[lv_choosen] == 4)) {
                        gv_crystalAvoidIfPossible[3][3] = true;
                    }
                    if ((lv_choice[lv_choosen] == 5)) {
                        gv_crystalAvoidIfPossible[3][2] = true;
                    }
                }
                else if (auto8B83AAE7_val == 4) {
                    gv_crystalAvoidIfPossible[4][2] = false;
                    if ((lv_choice[lv_choosen] == 1)) {
                        gv_crystalAvoidIfPossible[4][4] = true;
                    }
                    if ((lv_choice[lv_choosen] == 4)) {
                        gv_crystalAvoidIfPossible[4][1] = true;
                    }
                }
                else if (auto8B83AAE7_val == 5) {
                    if ((lv_choice[lv_choosen] == 1)) {
                        TriggerExecute(gt_DPdestroy2, true, false);
                    }
                    if ((lv_choice[lv_choosen] == 3)) {
                        TriggerExecute(gt_DPdestroy1, true, false);
                    }
                    if ((lv_choice[lv_choosen] == 4)) {
                        TriggerExecute(gt_DPdestroy3, true, false);
                    }
                }
                else {
                }
            }
            trigger auto_gf_SpawnCrystal_Trigger = null;
            int auto_gf_SpawnCrystal_lp_crystalLevel;
            int auto_gf_SpawnCrystal_lp_crystalID;
            int auto_gf_SpawnCrystal_lp_wave;
            bool auto_gf_SpawnCrystal_lp_secondUsage;
            void gf_SpawnCrystal (int lp_crystalLevel, int lp_crystalID, int lp_wave, bool lp_secondUsage) {
                auto_gf_SpawnCrystal_lp_crystalLevel = lp_crystalLevel;
                auto_gf_SpawnCrystal_lp_crystalID = lp_crystalID;
                auto_gf_SpawnCrystal_lp_wave = lp_wave;
                auto_gf_SpawnCrystal_lp_secondUsage = lp_secondUsage;
                if (auto_gf_SpawnCrystal_Trigger == null) {
                    auto_gf_SpawnCrystal_Trigger = TriggerCreate(&quot;auto_gf_SpawnCrystal_TriggerFunc&quot;);
                }
                TriggerExecute(auto_gf_SpawnCrystal_Trigger, false, false);
            }
            bool auto_gf_SpawnCrystal_TriggerFunc (bool testConds, bool runActions) {
                int lp_crystalLevel = auto_gf_SpawnCrystal_lp_crystalLevel;
                int lp_crystalID = auto_gf_SpawnCrystal_lp_crystalID;
                int lp_wave = auto_gf_SpawnCrystal_lp_wave;
                bool lp_secondUsage = auto_gf_SpawnCrystal_lp_secondUsage;
                int autoADB032FB_n;
                int autoADB032FB_i;
                // Implementation
                gv_activeCrystalIsInGame[lp_wave] = true;
                gv_activeCrystalLevel[lp_wave] = lp_crystalLevel;
                gv_activeCrystalID[lp_wave] = lp_crystalID;
                gv_activeCrystalRegion[lp_wave] = gv_crystalRegion[lp_crystalLevel][lp_crystalID];
                gv_activeDeliveryID[lp_wave] = gv_crystalDeliverySiteID[lp_crystalLevel][lp_crystalID];
                gv_crystalAvailable[lp_crystalLevel][lp_crystalID] = false;
                gv_spawnedCrystalsPerLvl[lp_crystalLevel] += 1;
                gv_spawnedCrystalsPerDP[gv_activeDeliveryID[lp_wave]] += 1;
                TriggerExecute(gt_Crystalisready, true, false);
                if ((lp_secondUsage == false)) {
                    libCOMI_gf_SendActorMessageToDoodadsInRegion(&quot;AnimBracketStart WorkStart Stand,Work,Start Stand,Work&quot;, &quot;AenythCrack&quot;, gv_crystalRegion[lp_crystalLevel][lp_crystalID]);
                }
                else {
                    libCOMI_gf_SendActorMessageToDoodadsInRegion(&quot;AnimBracketStart WorkStart Stand,Work,End Stand,Work&quot;, &quot;AenythCrack&quot;, gv_crystalRegion[lp_crystalLevel][lp_crystalID]);
                }
                Wait(0.2, c_timeGame);
                libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;CrystalPickupUnit&quot;, c_unitCreateIgnorePlacement, gv_pLAYER_10_Crystal, gv_crystalSpawnPoint[lp_crystalLevel][lp_crystalID]);
                gv_activeCrystalUnit[lp_wave] = UnitLastCreated();
                UnitSetState(gv_activeCrystalUnit[lp_wave], c_unitStateInvulnerable, true);
                UnitSetState(gv_activeCrystalUnit[lp_wave], c_unitStateTargetable, false);
                UnitSetState(gv_activeCrystalUnit[lp_wave], c_unitStateSelectable, false);
                libCOMI_gf_DisplayUnitProgressBar(gv_activeCrystalUnit[lp_wave], StringExternal(&quot;Param/Value/A368B8B9&quot;), 0, 100);
                libCOMI_gf_ShowHideUnitProgressBar2(gv_activeCrystalUnit[lp_wave], false);
                libCOMI_gf_ShowHideUnitProgressBar(gv_activeCrystalUnit[lp_wave], false);
                VisExploreArea(gv_pLAYER_01_USER, gv_crystalRegion[lp_crystalLevel][lp_crystalID], true, false);
                VisExploreArea(gv_pLAYER_02_USER, gv_crystalRegion[lp_crystalLevel][lp_crystalID], true, false);
                libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_Primary, UnitGetPosition(UnitLastCreated()), StringExternal(&quot;Param/Value/B53DBAF8&quot;));
                gv_activeTransportPing[lp_wave] = PingLastCreated();
                PingSetScale(PingLastCreated(), 1.1);
                Wait(0.25, c_timeGame);
                libCOMI_gf_AttachReticleEffectAndTextTagOnUnit(libCOMI_ge_CampaginReticleType_ProtossMainObjective, libCOMI_ge_CampaginReticleSize_Large, null, gv_activeCrystalUnit[lp_wave], &quot;Ref_Center&quot;);
                gv_activeCrystalReticle[lp_wave] = libNtve_gf_ActorLastCreated();
                ActorSend(libNtve_gf_ActorLastCreated(), &quot;SetTeamColor 192,255,255 192,255,255&quot;);
                ActorSend(libNtve_gf_ActorLastCreated(), &quot;AnimSetTimeScale BSD 0.400000&quot;);
                ActorSend(libNtve_gf_ActorLastCreated(), &quot;SetScale 1.200000&quot;);
                if ((gv_doubleActive == false)) {
                    if ((lp_wave == 1)) {
                        if ((gv_activeCrystalIsInGame[2] == true)) {
                            gv_spawnedCrystalsAttempt[(gv_objectiveEscortCrystalsEscorted + 1)] += 1;
                        }
                        else {
                            gv_spawnedCrystalsAttempt[gv_objectiveEscortCrystalsEscorted] += 1;
                        }
                    }
                    else {
                        if ((gv_activeCrystalIsInGame[1] == true)) {
                            gv_spawnedCrystalsAttempt[(gv_objectiveEscortCrystalsEscorted + 1)] += 1;
                        }
                        else {
                            gv_spawnedCrystalsAttempt[gv_objectiveEscortCrystalsEscorted] += 1;
                        }
                    }
                    PathCreateForUnitType(PlayerGroupAll(), &quot;Probe&quot;, 1, gv_crystalTransportSpawnPoint[lp_crystalLevel][lp_crystalID]);
                    gv_activePathDisplay[lp_wave] = PathLastCreated();
                    PathSetDestinationPoint(PathLastCreated(), gv_deliveryPoint[gv_crystalDeliverySiteID[lp_crystalLevel][lp_crystalID]]);
                    PathSetVisible(PathLastCreated(), c_pathLocationWorld, false);
                    PathSetLineWidth(PathLastCreated(), c_pathLocationMinimap, 8.0);
                    if ((lp_crystalLevel == 5) &amp;&amp; (lp_crystalID == 3)) {
                        PathAddWayPoint(PathLastCreated(), PointFromId(1417371748));
                    }
                }
                else {
                    gv_spawnedCrystalsAttempt[5] += 1;
                    gv_spawnedCrystalsAttempt[6] += 1;
                    TriggerExecute(gt_IndicateDoublePath, true, false);
                }
                gf_SendGuards(lp_crystalLevel, lp_crystalID);
                gf_SendHybridsAfterCrystal(lp_wave, false);
                Wait(1.5, c_timeGame);
                if ((lp_wave == 1)) {
                    TriggerEnable(gt_StartCrystalTransportWave1, true);
                    TriggerEnable(gt_CrystalisAttackedWave1, true);
                }
                else {
                    TriggerEnable(gt_StartCrystalTransportWave2, true);
                    TriggerEnable(gt_CrystalisAttackedWave2, true);
                }
                if ((gv_doubleActive == false)) {
                    autoADB032FB_n = 8;
                    for (autoADB032FB_i = 1; autoADB032FB_i &lt;= autoADB032FB_n; autoADB032FB_i += 1) {
                        if ((gv_activeCrystalIsTransported[lp_wave] == false)) {
                            PathSetVisible(PathLastCreated(), c_pathLocationAll, false);
                            Wait(1.0, c_timeGame);
                        }
                        else {
                            return true;
                        }
                        if ((gv_activeCrystalIsTransported[lp_wave] == false)) {
                            PathSetVisible(PathLastCreated(), c_pathLocationMinimap, true);
                            Wait(1.25, c_timeGame);
                        }
                        else {
                            return true;
                        }
                    }
                    if ((gv_activeCrystalIsTransported[lp_wave] == false)) {
                        PathDestroy(gv_activePathDisplay[lp_wave]);
                    }
                }
                return true;
            }
            void gf_StartTransport (int lp_wave) {
                int autoE11D1FFD_val;
                // Variable Declarations
                int lv_otherwave;
                // Variable Initialization
                // Implementation
                gv_activeCrystalIsTransported[lp_wave] = true;
                PathDestroy(gv_activePathDisplay[lp_wave]);
                libCOMI_gf_DestroyPingCoop(gv_activeTransportPing[lp_wave]);
                libNtve_gf_KillModel(gv_activeCrystalReticle[lp_wave]);
                UnitBehaviorAdd(gv_activeCrystalUnit[lp_wave], &quot;Invulnerable&quot;, gv_activeCrystalUnit[lp_wave], 1);
                libNtve_gf_UnitCreateFacingPoint(1, &quot;CrystalTransport&quot;, c_unitCreateIgnorePlacement, gv_pLAYER_11_Transport, gv_crystalTransportSpawnPoint[gv_activeCrystalLevel[lp_wave]][gv_activeCrystalID[lp_wave]], gv_crystalSpawnPoint[gv_activeCrystalLevel[lp_wave]][gv_activeCrystalID[lp_wave]]);
                gv_activeTransportUnit[lp_wave] = UnitLastCreated();
                UnitBehaviorAdd(UnitLastCreated(), &quot;Invulnerable&quot;, UnitLastCreated(), 1);
                UnitBehaviorAdd(UnitLastCreated(), &quot;CrystalPickupHarvestPrepareDisableWeapons&quot;, UnitLastCreated(), 1);
                UnitSetState(UnitLastCreated(), c_unitStateTargetable, false);
                if ((lp_wave == 1)) {
                    TriggerEnable(gt_TransportReachedDestinationWave1, true);
                    TriggerEnable(gt_CrystalisAttackedWave1, false);
                    TriggerEnable(gt_TransportisAttackedWave1, true);
                    TriggerExecute(gt_IndicatepathWave1, true, false);
                }
                else {
                    TriggerEnable(gt_TransportReachedDestinationWave2, true);
                    TriggerEnable(gt_CrystalisAttackedWave2, false);
                    TriggerEnable(gt_TransportisAttackedWave2, true);
                    TriggerExecute(gt_IndicatepathWave2, true, false);
                }
                TriggerExecute(gt_Transportisonitsway, true, false);
                Wait(1.5, c_timeGame);
                UnitIssueOrder(UnitLastCreated(), OrderTargetingUnit(AbilityCommand(&quot;CrystalPickupHarvest&quot;, 0), gv_activeCrystalUnit[lp_wave]), c_orderQueueReplace);
                libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_Primary, UnitGetPosition(UnitLastCreated()), StringExternal(&quot;Param/Value/11BF79C1&quot;));
                gv_activeTransportPing[lp_wave] = PingLastCreated();
                PingSetUnit(PingLastCreated(), UnitLastCreated());
                PingSetScale(PingLastCreated(), 1.1);
                Wait(9.0, c_timeGame);
                UnitBehaviorRemove(UnitLastCreated(), &quot;Invulnerable&quot;, 1);
                UnitBehaviorRemove(UnitLastCreated(), &quot;CrystalPickupHarvestPrepareDisableWeapons&quot;, 1);
                gf_SendAttackonTransport(gv_activeCrystalLevel[lp_wave], gv_activeCrystalID[lp_wave], lp_wave);
                if ((gv_doubleActive == true)) {
                    autoE11D1FFD_val = lp_wave;
                    if (autoE11D1FFD_val == 1) {
                        lv_otherwave = 2;
                        TriggerEnable(gt_TransportReachedDestinationWave1, false);
                        TriggerEnable(gt_TransportReachedDestinationWave2, true);
                        TriggerEnable(gt_PickupSecondCrystalWave2, true);
                    }
                    else if (autoE11D1FFD_val == 2) {
                        lv_otherwave = 1;
                        TriggerEnable(gt_TransportReachedDestinationWave1, true);
                        TriggerEnable(gt_TransportReachedDestinationWave2, false);
                        TriggerEnable(gt_PickupSecondCrystalWave1, true);
                    }
                    else {
                    }
                    libCOMI_gf_DestroyPingCoop(gv_activeTransportPing[lv_otherwave]);
                    libNtve_gf_KillModel(gv_activeCrystalReticle[lv_otherwave]);
                    PathDestroy(gv_activePathDisplay[lp_wave]);
                    PathCreateForUnit(PlayerGroupAll(), UnitLastCreated());
                    gv_activePathDisplay[lp_wave] = PathLastCreated();
                    PathSetDestinationPoint(PathLastCreated(), UnitGetPosition(gv_activeCrystalUnit[lv_otherwave]));
                    PathSetVisible(PathLastCreated(), c_pathLocationWorld, false);
                    PathSetColor(PathLastCreated(), c_pathLocationMinimap, Color(0.00, 100.00, 0.00));
                    PathSetLineWidth(PathLastCreated(), c_pathLocationMinimap, 8.0);
                    Wait(3.2, c_timeGame);
                    libCOMI_gf_CreatePingCoop(PlayerGroupAll(), &quot;BeaconRallyPing&quot;, UnitGetPosition(gv_activeCrystalUnit[lv_otherwave]), ColorWithAlpha(100.00, 100.00, 100.00, 0.00), 0.0);
                    gv_activeDeliveryPing[lp_wave] = PingLastCreated();
                    PingSetScale(PingLastCreated(), 0.6);
                    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), gv_doubleTransitionPath[gv_doubleActiveGroup]), c_orderQueueReplace);
                    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), gv_crystalTransportSpawnPoint[gv_activeCrystalLevel[lv_otherwave]][gv_activeCrystalID[lv_otherwave]]), c_orderQueueAddToEnd);
                    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), gv_crystalTransportPath1[gv_activeCrystalLevel[lv_otherwave]][gv_activeCrystalID[lv_otherwave]]), c_orderQueueAddToEnd);
                    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), gv_crystalTransportPath2[gv_activeCrystalLevel[lv_otherwave]][gv_activeCrystalID[lv_otherwave]]), c_orderQueueAddToEnd);
                    if ((gv_activeCrystalLevel[lv_otherwave] &gt; 2)) {
                        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), gv_crystalTransportPath3[gv_activeCrystalLevel[lv_otherwave]][gv_activeCrystalID[lv_otherwave]]), c_orderQueueAddToEnd);
                    }
                    UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand(&quot;move&quot;, 2)), c_orderQueueAddToEnd);
                }
                else {
                    PathDestroy(gv_activePathDisplay[lp_wave]);
                    PathCreateForUnit(PlayerGroupAll(), UnitLastCreated());
                    gv_activePathDisplay[lp_wave] = PathLastCreated();
                    PathSetDestinationPoint(PathLastCreated(), gv_deliveryPoint[gv_activeDeliveryID[lp_wave]]);
                    PathSetVisible(PathLastCreated(), c_pathLocationWorld, false);
                    PathSetColor(PathLastCreated(), c_pathLocationMinimap, Color(0.00, 100.00, 0.00));
                    PathSetLineWidth(PathLastCreated(), c_pathLocationMinimap, 8.0);
                    if ((gv_activeCrystalLevel[lp_wave] == 5) &amp;&amp; (gv_activeCrystalID[lp_wave] == 3)) {
                        PathAddWayPoint(PathLastCreated(), PointFromId(1417371748));
                    }
                    Wait(3.2, c_timeGame);
                    libCOMI_gf_CreatePingCoop(PlayerGroupAll(), &quot;BeaconRallyPing&quot;, gv_deliveryPoint[gv_activeDeliveryID[lp_wave]], ColorWithAlpha(100.00, 100.00, 100.00, 0.00), 0.0);
                    gv_activeDeliveryPing[lp_wave] = PingLastCreated();
                    PingSetScale(PingLastCreated(), 0.6);
                    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), gv_crystalTransportPath1[gv_activeCrystalLevel[lp_wave]][gv_activeCrystalID[lp_wave]]), c_orderQueueReplace);
                    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), gv_crystalTransportPath2[gv_activeCrystalLevel[lp_wave]][gv_activeCrystalID[lp_wave]]), c_orderQueueAddToEnd);
                    if ((gv_activeCrystalLevel[lp_wave] &gt; 2)) {
                        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), gv_crystalTransportPath3[gv_activeCrystalLevel[lp_wave]][gv_activeCrystalID[lp_wave]]), c_orderQueueAddToEnd);
                    }
                    UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand(&quot;move&quot;, 2)), c_orderQueueAddToEnd);
                    if ((gv_activeCrystalLevel[lp_wave] == 5) &amp;&amp; (gv_activeCrystalID[lp_wave] == 3)) {
                        Wait(22.0, c_timeGame);
                        if ((gv_activeCrystalIsTransported[lp_wave] == true)) {
                            PathClearWayPoints(PathLastCreated());
                        }
                    }
                }
            }
            void gf_SuccessfulTransport (int lp_wave) {
                int autoF48ED6B3_val;
                int auto20234DA2_val;
                int auto8CB2BBB5_val;
                // Variable Declarations
                revealer lv_rev1;
                revealer lv_rev2;
                int lv_numberOfCrystals;
                int lv_otherwave;
                bool lv_wasdouble;
                // Variable Initialization
                lv_numberOfCrystals = 1;
                // Implementation
                gv_lastCriticalEventPosition = gv_deliveryPoint[gv_activeDeliveryID[lp_wave]];
                if ((gv_doubleActive == true)) {
                    autoF48ED6B3_val = lp_wave;
                    if (autoF48ED6B3_val == 1) {
                        lv_otherwave = 2;
                    }
                    else if (autoF48ED6B3_val == 2) {
                        lv_otherwave = 1;
                    }
                    else {
                    }
                    gv_doubleActive = false;
                    gv_activeCrystalIsInGame[1] = false;
                    gv_activeCrystalIsTransported[1] = false;
                    gv_activeCrystalIsInGame[2] = false;
                    gv_activeCrystalIsTransported[2] = false;
                    lv_wasdouble = true;
                    libCOMI_gf_DestroyPingCoop(gv_activeTransportPing[lv_otherwave]);
                    UnitBehaviorAdd(gv_activeTransportUnit[lv_otherwave], &quot;Invulnerable&quot;, gv_activeTransportUnit[lv_otherwave], 1);
                    UnitIssueOrder(gv_activeTransportUnit[lv_otherwave], OrderTargetingPoint(AbilityCommand(&quot;CrystalPickupProcess&quot;, 0), gv_deliveryPoint[gv_activeDeliveryID[lp_wave]]), c_orderQueueReplace);
                }
                else {
                    gv_activeCrystalIsInGame[lp_wave] = false;
                    gv_activeCrystalIsTransported[lp_wave] = false;
                    libCOMI_gf_DestroyPingCoop(gv_activeTransportPing[lp_wave]);
                    UnitBehaviorAdd(gv_activeTransportUnit[lp_wave], &quot;Invulnerable&quot;, gv_activeTransportUnit[lp_wave], 1);
                    UnitIssueOrder(gv_activeTransportUnit[lp_wave], OrderTargetingPoint(AbilityCommand(&quot;CrystalPickupProcess&quot;, 0), gv_deliveryPoint[gv_activeDeliveryID[lp_wave]]), c_orderQueueReplace);
                }
                libCOMI_gf_CreateRevealerCoop(gv_pLAYER_01_USER, RegionCircle(gv_deliveryPoint[gv_activeDeliveryID[lp_wave]], 5.0));
                lv_rev1 = VisRevealerLastCreated();
                libCOMI_gf_CreateRevealerCoop(gv_pLAYER_02_USER, RegionCircle(gv_deliveryPoint[gv_activeDeliveryID[lp_wave]], 5.0));
                lv_rev2 = VisRevealerLastCreated();
                if ((gv_doubleBothCrystalsAreInside == true)) {
                    lv_numberOfCrystals = 2;
                }
                if ((gv_objectiveEscortCrystalsEscorted == (gv_objectiveEscortCrystalsGoal - lv_numberOfCrystals))) {
                    TriggerExecute(gt_ObjectiveEscortCrystalsUpdate, true, false);
                }
                else {
                    Wait(3.0, c_timeGame);
                    TriggerExecute(gt_ObjectiveEscortCrystalsUpdate, true, true);
                    TriggerExecute(gt_TransportComplete, true, false);
                    if ((lp_wave == 1)) {
                        if ((gv_objectiveEscortCrystalsEscorted != (gv_objectiveEscortCrystalsGoal - 1)) &amp;&amp; (gv_objectiveEscortCrystalsEscorted != 5)) {
                            TriggerExecute(gt_Preparenextpick, true, false);
                        }
                    }
                    else {
                        if ((lv_wasdouble == true)) {
                            TriggerExecute(gt_Preparenextpick, true, false);
                        }
                        else {
                            if ((gv_gameStage &gt; 3) &amp;&amp; (gv_activeCrystalIsInGame[1] == false)) {
                                TriggerExecute(gt_Preparenextpick, true, false);
                            }
                        }
                        if ((gv_objectiveEscortCrystalsEscorted == 2) &amp;&amp; (gv_gameStage &lt; 2)) {
                            TriggerEnable(gt_Preparenextpick, false);
                        }
                    }
                    Wait(5.0, c_timeGame);
                    libCOMI_gf_DestroyRevealerCoop(lv_rev1);
                    libCOMI_gf_DestroyRevealerCoop(lv_rev2);
                    auto20234DA2_val = gv_objectiveEscortCrystalsEscorted;
                    if (auto20234DA2_val == 4) {
                        if ((gv_baseWaveVariant[2] == 1)) {
                            Wait(RandomInt(6, 12), c_timeGame);
                            TriggerExecute(gt_BaseAttackWave02A, true, false);
                        }
                        Wait(RandomInt(18, 22), c_timeGame);
                        TriggerExecute(gt_BonusKillHybridsInit, true, false);
                    }
                    else if (auto20234DA2_val == 5) {
                        auto8CB2BBB5_val = RandomInt(1, 2);
                        if (auto8CB2BBB5_val == 1) {
                            TriggerExecute(gt_BaseAttackWave03, true, false);
                            Wait(40.0, c_timeGame);
                            TriggerExecute(gt_SecondStormin25sec, true, false);
                        }
                        else if (auto8CB2BBB5_val == 2) {
                            Wait(6.0, c_timeGame);
                            TriggerExecute(gt_SecondStormin25sec, true, false);
                        }
                        else {
                        }
                    }
                    else {
                    }
                }
            }
            void gf_SetDoubleVariant (int lp_doubleVariant, int lp_doubleGroup) {
                int auto8A3E9110_val;
                // Implementation
                auto8A3E9110_val = lp_doubleVariant;
                if (auto8A3E9110_val == ge_DoubleVariant_A) {
                    gv_doublePickedVariant[lp_doubleGroup] = ge_DoubleVariant_A;
                    gv_doublePickedLvl[lp_doubleGroup][1] = 3;
                    gv_doublePickedCrystalID[lp_doubleGroup][1] = 3;
                    gv_crystalAvailable[3][3] = false;
                    gv_doublePickedLvl[lp_doubleGroup][2] = 3;
                    gv_doublePickedCrystalID[lp_doubleGroup][2] = 4;
                    gv_crystalAvailable[3][4] = false;
                    gv_doubleTransitionPath[lp_doubleGroup] = PointFromId(581844785);
                }
                else if (auto8A3E9110_val == ge_DoubleVariant_B) {
                    gv_doublePickedVariant[lp_doubleGroup] = ge_DoubleVariant_B;
                    gv_doublePickedLvl[lp_doubleGroup][1] = 2;
                    gv_doublePickedCrystalID[lp_doubleGroup][1] = 3;
                    gv_crystalAvailable[2][3] = false;
                    gv_doublePickedLvl[lp_doubleGroup][2] = 1;
                    gv_doublePickedCrystalID[lp_doubleGroup][2] = 3;
                    gv_crystalAvailable[1][3] = false;
                    gv_doubleTransitionPath[lp_doubleGroup] = PointFromId(1540834025);
                }
                else if (auto8A3E9110_val == ge_DoubleVariant_C) {
                    gv_doublePickedVariant[lp_doubleGroup] = ge_DoubleVariant_C;
                    gv_doublePickedLvl[lp_doubleGroup][1] = 3;
                    gv_doublePickedCrystalID[lp_doubleGroup][1] = 2;
                    gv_crystalAvailable[3][2] = false;
                    gv_doublePickedLvl[lp_doubleGroup][2] = 3;
                    gv_doublePickedCrystalID[lp_doubleGroup][2] = 5;
                    gv_crystalAvailable[3][5] = false;
                    gv_doubleTransitionPath[lp_doubleGroup] = PointFromId(510249513);
                }
                else if (auto8A3E9110_val == ge_DoubleVariant_D) {
                    gv_doublePickedVariant[lp_doubleGroup] = ge_DoubleVariant_D;
                    gv_doublePickedLvl[lp_doubleGroup][1] = 2;
                    gv_doublePickedCrystalID[lp_doubleGroup][1] = 1;
                    gv_crystalAvailable[2][1] = false;
                    gv_doublePickedLvl[lp_doubleGroup][2] = 5;
                    gv_doublePickedCrystalID[lp_doubleGroup][2] = 5;
                    gv_doubleTransitionPath[lp_doubleGroup] = PointFromId(912597499);
                }
                else {
                }
            }
            int gf_PickRandomTransmissionLine (int lp_transmissionType, int lp_maxLines) {
                int autoDBFDC102_ae;
                int autoDBFDC102_ai;
                int auto1937E4B9_ae;
                int auto1937E4B9_ai;
                // Variable Declarations
                int[10] lv_choice;
                int lv_lineid;
                int lv_randomline;
                int lv_noofchoices;
                // Variable Initialization
                // Implementation
                if ((gv_transmissionSpoken[lp_transmissionType] == lp_maxLines)) {
                    autoDBFDC102_ae = lp_maxLines;
                    autoDBFDC102_ai = 1;
                    lv_lineid = 1;
                    for ( ; ( (autoDBFDC102_ai &gt;= 0 &amp;&amp; lv_lineid &lt;= autoDBFDC102_ae) || (autoDBFDC102_ai &lt;= 0 &amp;&amp; lv_lineid &gt;= autoDBFDC102_ae) ) ; lv_lineid += autoDBFDC102_ai ) {
                        if ((gv_transmissionLinelastspoken[lp_transmissionType] != lv_lineid)) {
                            gv_transmissionLinespoken[lp_transmissionType][lv_lineid] = false;
                        }
                    }
                    gv_transmissionSpoken[lp_transmissionType] = 1;
                }
                auto1937E4B9_ae = lp_maxLines;
                auto1937E4B9_ai = 1;
                lv_lineid = 1;
                for ( ; ( (auto1937E4B9_ai &gt;= 0 &amp;&amp; lv_lineid &lt;= auto1937E4B9_ae) || (auto1937E4B9_ai &lt;= 0 &amp;&amp; lv_lineid &gt;= auto1937E4B9_ae) ) ; lv_lineid += auto1937E4B9_ai ) {
                    if ((gv_transmissionLinespoken[lp_transmissionType][lv_lineid] == false)) {
                        lv_noofchoices += 1;
                        lv_choice[lv_noofchoices] = lv_lineid;
                    }
                }
                lv_randomline = RandomInt(1, lv_noofchoices);
                gv_transmissionLinelastspoken[lp_transmissionType] = lv_choice[lv_randomline];
                gv_transmissionLinespoken[lp_transmissionType][lv_choice[lv_randomline]] = true;
                gv_transmissionSpoken[lp_transmissionType] += 1;
                return lv_choice[lv_randomline];
            }
            trigger auto_gf_SendGuards_Trigger = null;
            int auto_gf_SendGuards_lp_level;
            int auto_gf_SendGuards_lp_crystalid;
            void gf_SendGuards (int lp_level, int lp_crystalid) {
                auto_gf_SendGuards_lp_level = lp_level;
                auto_gf_SendGuards_lp_crystalid = lp_crystalid;
                if (auto_gf_SendGuards_Trigger == null) {
                    auto_gf_SendGuards_Trigger = TriggerCreate(&quot;auto_gf_SendGuards_TriggerFunc&quot;);
                }
                TriggerExecute(auto_gf_SendGuards_Trigger, false, false);
            }
            bool auto_gf_SendGuards_TriggerFunc (bool testConds, bool runActions) {
                int lp_level = auto_gf_SendGuards_lp_level;
                int lp_crystalid = auto_gf_SendGuards_lp_crystalid;
                // Variable Declarations
                point lv_attackWaveSpawnLocation;
                point lv_attackWaveTargetLocation;
                bool lv_commit;
                int lv_bucket;
                int lv_techlvl;
                unitgroup lv_spawnedunitgroup;
                unitgroup lv_dw_unitgroup;
                wave[5] lv_dw_wave;
                waveinfo[5] lv_dw_waveinfo;
                wavetarget lv_dw_wavetarget;
                int lv_dw_playerid;
                unit lv_dw_unit;
                // Variable Initialization
                lv_bucket = libCOMI_ge_CoopAIAttackWaveBuckets__3Small;
                lv_techlvl = libCOMI_ge_CoopAITechLevelBuckets__1Early;
                lv_spawnedunitgroup = UnitGroupEmpty();
                lv_dw_unitgroup = UnitGroupEmpty();
                // Implementation
                if ((lp_level == 1) &amp;&amp; (lp_crystalid == 2)) {
                    lv_attackWaveSpawnLocation = PointFromId(1441514557);
                    lv_attackWaveTargetLocation = PointFromId(87053954);
                    lv_bucket = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
                    lv_techlvl = libCOMI_ge_CoopAITechLevelBuckets__1Early;
                    lv_commit = true;
                }
                if ((lp_level == 2) &amp;&amp; (lp_crystalid == 1)) {
                    lv_attackWaveSpawnLocation = PointFromId(649981719);
                    lv_attackWaveTargetLocation = PointFromId(986286895);
                    if ((gv_doubleActive == false)) {
                        lv_bucket = libCOMI_ge_CoopAIAttackWaveBuckets__3Small;
                        lv_techlvl = libCOMI_ge_CoopAITechLevelBuckets__1Early;
                    }
                    else {
                        lv_bucket = libCOMI_ge_CoopAIAttackWaveBuckets__6Larger;
                        lv_techlvl = libCOMI_ge_CoopAITechLevelBuckets__5Late;
                    }
                    lv_commit = true;
                }
                if ((lp_level == 3) &amp;&amp; (lp_crystalid == 1)) {
                    lv_attackWaveSpawnLocation = PointFromId(1433956354);
                    lv_attackWaveTargetLocation = PointFromId(1192857458);
                    lv_bucket = libCOMI_ge_CoopAIAttackWaveBuckets__5Large;
                    lv_techlvl = libCOMI_ge_CoopAITechLevelBuckets__4LateMid;
                    lv_commit = true;
                }
                if ((lp_level == 3) &amp;&amp; (lp_crystalid == 2) &amp;&amp; (gv_deliveryPointDestroyed[2] == true) &amp;&amp; (gv_doubleActive == false)) {
                    lv_attackWaveSpawnLocation = PointFromId(150329535);
                    lv_attackWaveTargetLocation = PointFromId(319580648);
                    lv_bucket = libCOMI_ge_CoopAIAttackWaveBuckets__5Large;
                    lv_techlvl = libCOMI_ge_CoopAITechLevelBuckets__4LateMid;
                    lv_commit = true;
                }
                if ((lp_level == 3) &amp;&amp; (lp_crystalid == 3) &amp;&amp; (gv_objectiveEscortCrystalsEscorted &gt;= 3)) {
                    lv_attackWaveSpawnLocation = PointFromId(316264140);
                    lv_attackWaveTargetLocation = PointFromId(1971724573);
                    if ((gv_doubleActive == false)) {
                        lv_bucket = libCOMI_ge_CoopAIAttackWaveBuckets__3Small;
                        lv_techlvl = libCOMI_ge_CoopAITechLevelBuckets__3Mid;
                    }
                    else {
                        lv_bucket = libCOMI_ge_CoopAIAttackWaveBuckets__5Large;
                        lv_techlvl = libCOMI_ge_CoopAITechLevelBuckets__5Late;
                    }
                    lv_commit = true;
                }
                if ((lp_level == 3) &amp;&amp; (lp_crystalid == 4) &amp;&amp; (gv_crystalAvailable[2][3] == true)) {
                    lv_attackWaveSpawnLocation = PointFromId(844693492);
                    lv_attackWaveTargetLocation = PointFromId(1540702724);
                    if ((gv_objectiveEscortCrystalsEscorted &gt;= 3)) {
                        lv_bucket = libCOMI_ge_CoopAIAttackWaveBuckets__4Medium;
                    }
                    else {
                        lv_bucket = libCOMI_ge_CoopAIAttackWaveBuckets__2Smaller;
                    }
                    lv_techlvl = libCOMI_ge_CoopAITechLevelBuckets__2EarlyMid;
                    lv_commit = true;
                }
                if ((lp_level == 3) &amp;&amp; (lp_crystalid == 5)) {
                    lv_attackWaveSpawnLocation = PointFromId(150329535);
                    lv_attackWaveTargetLocation = PointFromId(2116914853);
                    if ((gv_objectiveEscortCrystalsEscorted &gt;= 3)) {
                        lv_bucket = libCOMI_ge_CoopAIAttackWaveBuckets__4Medium;
                    }
                    else {
                        lv_bucket = libCOMI_ge_CoopAIAttackWaveBuckets__2Smaller;
                    }
                    if ((gv_doubleActive == false)) {
                        lv_techlvl = libCOMI_ge_CoopAITechLevelBuckets__2EarlyMid;
                    }
                    else {
                        lv_bucket = libCOMI_ge_CoopAIAttackWaveBuckets__5Large;
                        lv_techlvl = libCOMI_ge_CoopAITechLevelBuckets__5Late;
                    }
                    lv_commit = true;
                }
                if ((lp_level == 4) &amp;&amp; (lp_crystalid == 2)) {
                    lv_attackWaveSpawnLocation = PointFromId(463208794);
                    lv_attackWaveTargetLocation = PointFromId(2015378174);
                    lv_bucket = libCOMI_ge_CoopAIAttackWaveBuckets__6Larger;
                    lv_techlvl = libCOMI_ge_CoopAITechLevelBuckets__5Late;
                    lv_commit = true;
                }
                if ((lp_level == 4) &amp;&amp; (lp_crystalid == 3) &amp;&amp; (gv_deliveryPointDestroyed[3] == false)) {
                    lv_attackWaveSpawnLocation = PointFromId(150329535);
                    lv_attackWaveTargetLocation = PointFromId(189606526);
                    lv_bucket = libCOMI_ge_CoopAIAttackWaveBuckets__6Larger;
                    lv_techlvl = libCOMI_ge_CoopAITechLevelBuckets__5Late;
                    lv_commit = true;
                }
                if ((lp_level == 4) &amp;&amp; (lp_crystalid == 5)) {
                    lv_attackWaveSpawnLocation = PointFromId(150329535);
                    lv_attackWaveTargetLocation = PointFromId(2116914853);
                    lv_bucket = libCOMI_ge_CoopAIAttackWaveBuckets__5Large;
                    lv_techlvl = libCOMI_ge_CoopAITechLevelBuckets__4LateMid;
                    lv_commit = true;
                }
                if ((lp_level == 5) &amp;&amp; (lp_crystalid == 2)) {
                    lv_attackWaveSpawnLocation = PointFromId(463208794);
                    lv_attackWaveTargetLocation = PointFromId(818217337);
                    lv_bucket = libCOMI_ge_CoopAIAttackWaveBuckets__6Larger;
                    lv_techlvl = libCOMI_ge_CoopAITechLevelBuckets__5Late;
                    lv_commit = true;
                }
                if ((lp_level == 5) &amp;&amp; (lp_crystalid == 3)) {
                    lv_attackWaveSpawnLocation = PointFromId(316264140);
                    lv_attackWaveTargetLocation = PointFromId(1971724573);
                    lv_bucket = libCOMI_ge_CoopAIAttackWaveBuckets__5Large;
                    lv_techlvl = libCOMI_ge_CoopAITechLevelBuckets__4LateMid;
                    lv_commit = true;
                }
                if ((lp_level == 5) &amp;&amp; (lp_crystalid == 5)) {
                    lv_attackWaveSpawnLocation = PointFromId(463208794);
                    lv_attackWaveTargetLocation = PointFromId(2015378174);
                    lv_bucket = libCOMI_ge_CoopAIAttackWaveBuckets__5Large;
                    lv_techlvl = libCOMI_ge_CoopAITechLevelBuckets__5Late;
                    lv_commit = true;
                }
                if ((lv_commit == true)) {
                    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_Player01Enemy, gv_pLAYER_04_Player02Enemy, lv_bucket, lv_techlvl, lv_attackWaveSpawnLocation, true);
                    UnitGroupAddUnitGroup(lv_spawnedunitgroup, libCOMI_gf_LastCreatedCoopAttackForce());
                    UnitGroupAddUnitGroup(libCOMI_gv_cM_CoopAI_DontPingUnits, lv_spawnedunitgroup);
                    AIAttackWaveSetTargetRegion(gv_pLAYER_03_Player01Enemy, RegionCircle(lv_attackWaveTargetLocation, 8.0), 0);
                    AIAttackWaveUseGroup(gv_pLAYER_03_Player01Enemy, UnitGroupFilterPlayer(lv_spawnedunitgroup, gv_pLAYER_03_Player01Enemy, 0));
                    AIAttackWaveSend(gv_pLAYER_03_Player01Enemy, 0, false);
                    AIAttackWaveSetTargetRegion(gv_pLAYER_04_Player02Enemy, RegionCircle(lv_attackWaveTargetLocation, 8.0), 0);
                    AIAttackWaveUseGroup(gv_pLAYER_04_Player02Enemy, UnitGroupFilterPlayer(lv_spawnedunitgroup, gv_pLAYER_04_Player02Enemy, 0));
                    AIAttackWaveSend(gv_pLAYER_04_Player02Enemy, 0, false);
                }
                return true;
            }
            trigger auto_gf_SendGuardsTEST_Trigger = null;
            int auto_gf_SendGuardsTEST_lp_level;
            int auto_gf_SendGuardsTEST_lp_crystalid;
            void gf_SendGuardsTEST (int lp_level, int lp_crystalid) {
                auto_gf_SendGuardsTEST_lp_level = lp_level;
                auto_gf_SendGuardsTEST_lp_crystalid = lp_crystalid;
                if (auto_gf_SendGuardsTEST_Trigger == null) {
                    auto_gf_SendGuardsTEST_Trigger = TriggerCreate(&quot;auto_gf_SendGuardsTEST_TriggerFunc&quot;);
                }
                TriggerExecute(auto_gf_SendGuardsTEST_Trigger, false, false);
            }
            bool auto_gf_SendGuardsTEST_TriggerFunc (bool testConds, bool runActions) {
                int lp_level = auto_gf_SendGuardsTEST_lp_level;
                int lp_crystalid = auto_gf_SendGuardsTEST_lp_crystalid;
                int auto3998E0C4_ae;
                int auto3998E0C4_ai;
                unitgroup auto50964496_g;
                int auto50964496_u;
                int auto377410A7_ae;
                int auto377410A7_ai;
                // Variable Declarations
                point lv_attackWaveSpawnLocation;
                point lv_attackWaveTargetLocation;
                bool lv_commit;
                int lv_bucket;
                int lv_techlvl;
                unitgroup lv_dw_unitgroup;
                wave[5] lv_dw_wave;
                waveinfo[5] lv_dw_waveinfo;
                wavetarget lv_dw_wavetarget;
                int lv_dw_playerid;
                unit lv_dw_unit;
                // Variable Initialization
                lv_bucket = libCOMI_ge_CoopAIAttackWaveBuckets__3Small;
                lv_techlvl = libCOMI_ge_CoopAITechLevelBuckets__1Early;
                lv_dw_unitgroup = UnitGroupEmpty();
                // Implementation
                if ((lp_level == 1) &amp;&amp; (lp_crystalid == 2)) {
                    lv_attackWaveSpawnLocation = PointFromId(1441514557);
                    lv_attackWaveTargetLocation = PointFromId(87053954);
                    lv_bucket = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
                    lv_techlvl = libCOMI_ge_CoopAITechLevelBuckets__1Early;
                    lv_commit = true;
                }
                if ((lp_level == 2) &amp;&amp; (lp_crystalid == 1)) {
                    lv_attackWaveSpawnLocation = PointFromId(649981719);
                    lv_attackWaveTargetLocation = PointFromId(986286895);
                    if ((gv_doubleActive == false)) {
                        lv_bucket = libCOMI_ge_CoopAIAttackWaveBuckets__3Small;
                        lv_techlvl = libCOMI_ge_CoopAITechLevelBuckets__1Early;
                    }
                    else {
                        lv_bucket = libCOMI_ge_CoopAIAttackWaveBuckets__6Larger;
                        lv_techlvl = libCOMI_ge_CoopAITechLevelBuckets__5Late;
                    }
                    lv_commit = true;
                }
                if ((lp_level == 3) &amp;&amp; (lp_crystalid == 1)) {
                    lv_attackWaveSpawnLocation = PointFromId(1433956354);
                    lv_attackWaveTargetLocation = PointFromId(1192857458);
                    lv_bucket = libCOMI_ge_CoopAIAttackWaveBuckets__5Large;
                    lv_techlvl = libCOMI_ge_CoopAITechLevelBuckets__4LateMid;
                    lv_commit = true;
                }
                if ((lp_level == 3) &amp;&amp; (lp_crystalid == 2) &amp;&amp; (gv_deliveryPointDestroyed[2] == true) &amp;&amp; (gv_doubleActive == false)) {
                    lv_attackWaveSpawnLocation = PointFromId(150329535);
                    lv_attackWaveTargetLocation = PointFromId(319580648);
                    lv_bucket = libCOMI_ge_CoopAIAttackWaveBuckets__5Large;
                    lv_techlvl = libCOMI_ge_CoopAITechLevelBuckets__4LateMid;
                    lv_commit = true;
                }
                if ((lp_level == 3) &amp;&amp; (lp_crystalid == 3) &amp;&amp; (gv_objectiveEscortCrystalsEscorted &gt;= 3)) {
                    lv_attackWaveSpawnLocation = PointFromId(316264140);
                    lv_attackWaveTargetLocation = PointFromId(1971724573);
                    if ((gv_doubleActive == false)) {
                        lv_bucket = libCOMI_ge_CoopAIAttackWaveBuckets__3Small;
                        lv_techlvl = libCOMI_ge_CoopAITechLevelBuckets__3Mid;
                    }
                    else {
                        lv_bucket = libCOMI_ge_CoopAIAttackWaveBuckets__5Large;
                        lv_techlvl = libCOMI_ge_CoopAITechLevelBuckets__5Late;
                    }
                    lv_commit = true;
                }
                if ((lp_level == 3) &amp;&amp; (lp_crystalid == 4) &amp;&amp; (gv_crystalAvailable[2][3] == true)) {
                    lv_attackWaveSpawnLocation = PointFromId(844693492);
                    lv_attackWaveTargetLocation = PointFromId(1540702724);
                    if ((gv_objectiveEscortCrystalsEscorted &gt;= 3)) {
                        lv_bucket = libCOMI_ge_CoopAIAttackWaveBuckets__4Medium;
                    }
                    else {
                        lv_bucket = libCOMI_ge_CoopAIAttackWaveBuckets__2Smaller;
                    }
                    lv_techlvl = libCOMI_ge_CoopAITechLevelBuckets__2EarlyMid;
                    lv_commit = true;
                }
                if ((lp_level == 3) &amp;&amp; (lp_crystalid == 5)) {
                    lv_attackWaveSpawnLocation = PointFromId(150329535);
                    lv_attackWaveTargetLocation = PointFromId(2116914853);
                    if ((gv_objectiveEscortCrystalsEscorted &gt;= 3)) {
                        lv_bucket = libCOMI_ge_CoopAIAttackWaveBuckets__4Medium;
                    }
                    else {
                        lv_bucket = libCOMI_ge_CoopAIAttackWaveBuckets__2Smaller;
                    }
                    if ((gv_doubleActive == false)) {
                        lv_techlvl = libCOMI_ge_CoopAITechLevelBuckets__2EarlyMid;
                    }
                    else {
                        lv_bucket = libCOMI_ge_CoopAIAttackWaveBuckets__5Large;
                        lv_techlvl = libCOMI_ge_CoopAITechLevelBuckets__5Late;
                    }
                    lv_commit = true;
                }
                if ((lp_level == 4) &amp;&amp; (lp_crystalid == 2)) {
                    lv_attackWaveSpawnLocation = PointFromId(463208794);
                    lv_attackWaveTargetLocation = PointFromId(2015378174);
                    lv_bucket = libCOMI_ge_CoopAIAttackWaveBuckets__6Larger;
                    lv_techlvl = libCOMI_ge_CoopAITechLevelBuckets__5Late;
                    lv_commit = true;
                }
                if ((lp_level == 4) &amp;&amp; (lp_crystalid == 3) &amp;&amp; (gv_deliveryPointDestroyed[3] == false)) {
                    lv_attackWaveSpawnLocation = PointFromId(150329535);
                    lv_attackWaveTargetLocation = PointFromId(189606526);
                    lv_bucket = libCOMI_ge_CoopAIAttackWaveBuckets__7Largest;
                    lv_techlvl = libCOMI_ge_CoopAITechLevelBuckets__5Late;
                    lv_commit = true;
                }
                if ((lp_level == 4) &amp;&amp; (lp_crystalid == 5)) {
                    lv_attackWaveSpawnLocation = PointFromId(150329535);
                    lv_attackWaveTargetLocation = PointFromId(2116914853);
                    lv_bucket = libCOMI_ge_CoopAIAttackWaveBuckets__5Large;
                    lv_techlvl = libCOMI_ge_CoopAITechLevelBuckets__4LateMid;
                    lv_commit = true;
                }
                if ((lp_level == 5) &amp;&amp; (lp_crystalid == 2)) {
                    lv_attackWaveSpawnLocation = PointFromId(463208794);
                    lv_attackWaveTargetLocation = PointFromId(818217337);
                    lv_bucket = libCOMI_ge_CoopAIAttackWaveBuckets__7Largest;
                    lv_techlvl = libCOMI_ge_CoopAITechLevelBuckets__5Late;
                    lv_commit = true;
                }
                if ((lp_level == 5) &amp;&amp; (lp_crystalid == 3)) {
                    lv_attackWaveSpawnLocation = PointFromId(316264140);
                    lv_attackWaveTargetLocation = PointFromId(1971724573);
                    lv_bucket = libCOMI_ge_CoopAIAttackWaveBuckets__5Large;
                    lv_techlvl = libCOMI_ge_CoopAITechLevelBuckets__4LateMid;
                    lv_commit = true;
                }
                if ((lp_level == 5) &amp;&amp; (lp_crystalid == 5)) {
                    lv_attackWaveSpawnLocation = PointFromId(463208794);
                    lv_attackWaveTargetLocation = PointFromId(2015378174);
                    lv_bucket = libCOMI_ge_CoopAIAttackWaveBuckets__5Large;
                    lv_techlvl = libCOMI_ge_CoopAITechLevelBuckets__5Late;
                    lv_commit = true;
                }
                if ((lv_commit == true)) {
                    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_Player01Enemy, gv_pLAYER_04_Player02Enemy, lv_bucket, lv_techlvl, lv_attackWaveSpawnLocation, true);
                    lv_dw_unitgroup = libCOMI_gf_LastCreatedCoopAttackForce();
                    gv_defenseWaveIndex += 1;
                    AISetGroupScriptControlled(lv_dw_unitgroup, false);
                    auto3998E0C4_ae = gv_pLAYER_04_Player02Enemy;
                    auto3998E0C4_ai = 1;
                    lv_dw_playerid = gv_pLAYER_03_Player01Enemy;
                    for ( ; ( (auto3998E0C4_ai &gt;= 0 &amp;&amp; lv_dw_playerid &lt;= auto3998E0C4_ae) || (auto3998E0C4_ai &lt;= 0 &amp;&amp; lv_dw_playerid &gt;= auto3998E0C4_ae) ) ; lv_dw_playerid += auto3998E0C4_ai ) {
                        lv_dw_wave[lv_dw_playerid] = AIWaveCreate(lv_dw_waveinfo[lv_dw_playerid], lv_dw_playerid, lv_attackWaveTargetLocation);
                        AIWaveInfoAttack(AIWaveInfo(lv_dw_wave[lv_dw_playerid]), lv_dw_playerid, lv_attackWaveTargetLocation, AIWaveTargetRegion(RegionCircle(lv_attackWaveTargetLocation, 8.0), 0), 5);
                        AIWaveSet(lv_dw_playerid, gv_defenseWaveIndex, lv_dw_wave[lv_dw_playerid]);
                        AIWaveSetType(lv_dw_wave[lv_dw_playerid], c_waveStateDefend, lv_dw_wavetarget);
                    }
                    auto50964496_g = lv_dw_unitgroup;
                    auto50964496_u = 1;
                    for ( ; auto50964496_u &lt;= UnitGroupCount(auto50964496_g, c_unitCountAll) ; auto50964496_u += BoolToInt(lv_dw_unit == UnitGroupUnit(auto50964496_g, auto50964496_u)) ) {
                        lv_dw_unit = UnitGroupUnit(auto50964496_g, auto50964496_u);
                        auto377410A7_ae = gv_pLAYER_04_Player02Enemy;
                        auto377410A7_ai = 1;
                        lv_dw_playerid = gv_pLAYER_03_Player01Enemy;
                        for ( ; ( (auto377410A7_ai &gt;= 0 &amp;&amp; lv_dw_playerid &lt;= auto377410A7_ae) || (auto377410A7_ai &lt;= 0 &amp;&amp; lv_dw_playerid &gt;= auto377410A7_ae) ) ; lv_dw_playerid += auto377410A7_ai ) {
                            if ((UnitGetOwner(lv_dw_unit) == lv_dw_playerid)) {
                                AIWaveAddUnit(lv_dw_wave[lv_dw_playerid], lv_dw_unit);
                            }
                        }
                    }
                    lv_dw_wavetarget = AIWaveTargetRegion(RegionCircle(lv_attackWaveTargetLocation, 8.0), 0);
                }
                return true;
            }
            trigger auto_gf_SendGuardsOBSOLETE_Trigger = null;
            int auto_gf_SendGuardsOBSOLETE_lp_level;
            int auto_gf_SendGuardsOBSOLETE_lp_crystalid;
            void gf_SendGuardsOBSOLETE (int lp_level, int lp_crystalid) {
                auto_gf_SendGuardsOBSOLETE_lp_level = lp_level;
                auto_gf_SendGuardsOBSOLETE_lp_crystalid = lp_crystalid;
                if (auto_gf_SendGuardsOBSOLETE_Trigger == null) {
                    auto_gf_SendGuardsOBSOLETE_Trigger = TriggerCreate(&quot;auto_gf_SendGuardsOBSOLETE_TriggerFunc&quot;);
                }
                TriggerExecute(auto_gf_SendGuardsOBSOLETE_Trigger, false, false);
            }
            bool auto_gf_SendGuardsOBSOLETE_TriggerFunc (bool testConds, bool runActions) {
                int lp_level = auto_gf_SendGuardsOBSOLETE_lp_level;
                int lp_crystalid = auto_gf_SendGuardsOBSOLETE_lp_crystalid;
                // Variable Declarations
                point lv_attackWaveSpawnLocation;
                point lv_attackWaveTargetLocation;
                bool lv_commit;
                int lv_bucket;
                int lv_techlvl;
                // Variable Initialization
                lv_bucket = libCOMI_ge_CoopAIAttackWaveBuckets__3Small;
                lv_techlvl = libCOMI_ge_CoopAITechLevelBuckets__1Early;
                // Implementation
                if ((lp_level == 1) &amp;&amp; (lp_crystalid == 2)) {
                    lv_attackWaveSpawnLocation = PointFromId(1441514557);
                    lv_attackWaveTargetLocation = PointFromId(87053954);
                    lv_bucket = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
                    lv_techlvl = libCOMI_ge_CoopAITechLevelBuckets__1Early;
                    lv_commit = true;
                }
                if ((lp_level == 2) &amp;&amp; (lp_crystalid == 1)) {
                    lv_attackWaveSpawnLocation = PointFromId(649981719);
                    lv_attackWaveTargetLocation = PointFromId(986286895);
                    if ((gv_doubleActive == false)) {
                        lv_bucket = libCOMI_ge_CoopAIAttackWaveBuckets__3Small;
                        lv_techlvl = libCOMI_ge_CoopAITechLevelBuckets__1Early;
                    }
                    else {
                        lv_bucket = libCOMI_ge_CoopAIAttackWaveBuckets__6Larger;
                        lv_techlvl = libCOMI_ge_CoopAITechLevelBuckets__5Late;
                    }
                    lv_commit = true;
                }
                if ((lp_level == 3) &amp;&amp; (lp_crystalid == 1)) {
                    lv_attackWaveSpawnLocation = PointFromId(1433956354);
                    lv_attackWaveTargetLocation = PointFromId(1192857458);
                    lv_bucket = libCOMI_ge_CoopAIAttackWaveBuckets__5Large;
                    lv_techlvl = libCOMI_ge_CoopAITechLevelBuckets__4LateMid;
                    lv_commit = true;
                }
                if ((lp_level == 3) &amp;&amp; (lp_crystalid == 2) &amp;&amp; (gv_deliveryPointDestroyed[2] == true) &amp;&amp; (gv_doubleActive == false)) {
                    lv_attackWaveSpawnLocation = PointFromId(150329535);
                    lv_attackWaveTargetLocation = PointFromId(319580648);
                    lv_bucket = libCOMI_ge_CoopAIAttackWaveBuckets__5Large;
                    lv_techlvl = libCOMI_ge_CoopAITechLevelBuckets__4LateMid;
                    lv_commit = true;
                }
                if ((lp_level == 3) &amp;&amp; (lp_crystalid == 3) &amp;&amp; (gv_objectiveEscortCrystalsEscorted &gt;= 3)) {
                    lv_attackWaveSpawnLocation = PointFromId(316264140);
                    lv_attackWaveTargetLocation = PointFromId(1971724573);
                    if ((gv_doubleActive == false)) {
                        lv_bucket = libCOMI_ge_CoopAIAttackWaveBuckets__3Small;
                        lv_techlvl = libCOMI_ge_CoopAITechLevelBuckets__3Mid;
                    }
                    else {
                        lv_bucket = libCOMI_ge_CoopAIAttackWaveBuckets__5Large;
                        lv_techlvl = libCOMI_ge_CoopAITechLevelBuckets__5Late;
                    }
                    lv_commit = true;
                }
                if ((lp_level == 3) &amp;&amp; (lp_crystalid == 4) &amp;&amp; (gv_crystalAvailable[2][3] == true)) {
                    lv_attackWaveSpawnLocation = PointFromId(844693492);
                    lv_attackWaveTargetLocation = PointFromId(1540702724);
                    if ((gv_objectiveEscortCrystalsEscorted &gt;= 3)) {
                        lv_bucket = libCOMI_ge_CoopAIAttackWaveBuckets__4Medium;
                    }
                    else {
                        lv_bucket = libCOMI_ge_CoopAIAttackWaveBuckets__2Smaller;
                    }
                    lv_techlvl = libCOMI_ge_CoopAITechLevelBuckets__2EarlyMid;
                    lv_commit = true;
                }
                if ((lp_level == 3) &amp;&amp; (lp_crystalid == 5)) {
                    lv_attackWaveSpawnLocation = PointFromId(150329535);
                    lv_attackWaveTargetLocation = PointFromId(2116914853);
                    if ((gv_objectiveEscortCrystalsEscorted &gt;= 3)) {
                        lv_bucket = libCOMI_ge_CoopAIAttackWaveBuckets__4Medium;
                    }
                    else {
                        lv_bucket = libCOMI_ge_CoopAIAttackWaveBuckets__2Smaller;
                    }
                    if ((gv_doubleActive == false)) {
                        lv_techlvl = libCOMI_ge_CoopAITechLevelBuckets__2EarlyMid;
                    }
                    else {
                        lv_bucket = libCOMI_ge_CoopAIAttackWaveBuckets__5Large;
                        lv_techlvl = libCOMI_ge_CoopAITechLevelBuckets__5Late;
                    }
                    lv_commit = true;
                }
                if ((lp_level == 4) &amp;&amp; (lp_crystalid == 2)) {
                    lv_attackWaveSpawnLocation = PointFromId(463208794);
                    lv_attackWaveTargetLocation = PointFromId(2015378174);
                    lv_bucket = libCOMI_ge_CoopAIAttackWaveBuckets__6Larger;
                    lv_techlvl = libCOMI_ge_CoopAITechLevelBuckets__5Late;
                    lv_commit = true;
                }
                if ((lp_level == 4) &amp;&amp; (lp_crystalid == 3) &amp;&amp; (gv_deliveryPointDestroyed[3] == false)) {
                    lv_attackWaveSpawnLocation = PointFromId(150329535);
                    lv_attackWaveTargetLocation = PointFromId(189606526);
                    lv_bucket = libCOMI_ge_CoopAIAttackWaveBuckets__7Largest;
                    lv_techlvl = libCOMI_ge_CoopAITechLevelBuckets__5Late;
                    lv_commit = true;
                }
                if ((lp_level == 4) &amp;&amp; (lp_crystalid == 5)) {
                    lv_attackWaveSpawnLocation = PointFromId(150329535);
                    lv_attackWaveTargetLocation = PointFromId(2116914853);
                    lv_bucket = libCOMI_ge_CoopAIAttackWaveBuckets__5Large;
                    lv_techlvl = libCOMI_ge_CoopAITechLevelBuckets__4LateMid;
                    lv_commit = true;
                }
                if ((lp_level == 5) &amp;&amp; (lp_crystalid == 2)) {
                    lv_attackWaveSpawnLocation = PointFromId(463208794);
                    lv_attackWaveTargetLocation = PointFromId(818217337);
                    lv_bucket = libCOMI_ge_CoopAIAttackWaveBuckets__7Largest;
                    lv_techlvl = libCOMI_ge_CoopAITechLevelBuckets__5Late;
                    lv_commit = true;
                }
                if ((lp_level == 5) &amp;&amp; (lp_crystalid == 3)) {
                    lv_attackWaveSpawnLocation = PointFromId(316264140);
                    lv_attackWaveTargetLocation = PointFromId(1971724573);
                    lv_bucket = libCOMI_ge_CoopAIAttackWaveBuckets__5Large;
                    lv_techlvl = libCOMI_ge_CoopAITechLevelBuckets__4LateMid;
                    lv_commit = true;
                }
                if ((lp_level == 5) &amp;&amp; (lp_crystalid == 5)) {
                    lv_attackWaveSpawnLocation = PointFromId(463208794);
                    lv_attackWaveTargetLocation = PointFromId(2015378174);
                    lv_bucket = libCOMI_ge_CoopAIAttackWaveBuckets__5Large;
                    lv_techlvl = libCOMI_ge_CoopAITechLevelBuckets__5Late;
                    lv_commit = true;
                }
                if ((lv_commit == true)) {
                    libCOMI_gf_SetCoopAIAttackGroupSpawnPoint(gv_pLAYER_03_Player01Enemy, lv_attackWaveSpawnLocation);
                    AIAttackWaveSetTargetRegion(gv_pLAYER_03_Player01Enemy, RegionCircle(lv_attackWaveTargetLocation, 8.0), 0);
                    libCOMI_gf_AddCommanderUnitstoAttackWavePresetBucketTechLevel(gv_pLAYER_03_Player01Enemy, true, lv_bucket, lv_techlvl);
                    AIAttackWaveSend(gv_pLAYER_03_Player01Enemy, 0, false);
                    libCOMI_gf_EnableDisableCoopAIWavePing(WaveLastCreated(), false);
                    libCOMI_gf_SetCoopAIAttackGroupSpawnPoint(gv_pLAYER_04_Player02Enemy, lv_attackWaveSpawnLocation);
                    AIAttackWaveSetTargetRegion(gv_pLAYER_04_Player02Enemy, RegionCircle(lv_attackWaveTargetLocation, 8.0), 0);
                    libCOMI_gf_AddCommanderUnitstoAttackWavePresetBucketTechLevel(gv_pLAYER_04_Player02Enemy, true, lv_bucket, lv_techlvl);
                    AIAttackWaveSend(gv_pLAYER_04_Player02Enemy, 0, false);
                    libCOMI_gf_EnableDisableCoopAIWavePing(WaveLastCreated(), false);
                }
                return true;
            }
            trigger auto_gf_SendAttackonTransport_Trigger = null;
            int auto_gf_SendAttackonTransport_lp_level;
            int auto_gf_SendAttackonTransport_lp_crystalid;
            int auto_gf_SendAttackonTransport_lp_wave;
            void gf_SendAttackonTransport (int lp_level, int lp_crystalid, int lp_wave) {
                auto_gf_SendAttackonTransport_lp_level = lp_level;
                auto_gf_SendAttackonTransport_lp_crystalid = lp_crystalid;
                auto_gf_SendAttackonTransport_lp_wave = lp_wave;
                if (auto_gf_SendAttackonTransport_Trigger == null) {
                    auto_gf_SendAttackonTransport_Trigger = TriggerCreate(&quot;auto_gf_SendAttackonTransport_TriggerFunc&quot;);
                }
                TriggerExecute(auto_gf_SendAttackonTransport_Trigger, false, false);
            }
            bool auto_gf_SendAttackonTransport_TriggerFunc (bool testConds, bool runActions) {
                int lp_level = auto_gf_SendAttackonTransport_lp_level;
                int lp_crystalid = auto_gf_SendAttackonTransport_lp_crystalid;
                int lp_wave = auto_gf_SendAttackonTransport_lp_wave;
                int autoFA2762B6_val;
                int auto1E5E1471_val;
                // Variable Declarations
                point lv_attackWaveSpawnLocation;
                int lv_minwaittime;
                int lv_maxwaittime;
                int lv_bucket;
                int lv_techlvl;
                int lv_hybridminoramount;
                int lv_hybridmajoramount;
                unitgroup lv_attackunitgroup;
                // Variable Initialization
                lv_minwaittime = 1;
                lv_maxwaittime = 8;
                lv_bucket = libCOMI_ge_CoopAIAttackWaveBuckets__3Small;
                lv_techlvl = libCOMI_ge_CoopAITechLevelBuckets__1Early;
                lv_attackunitgroup = UnitGroupEmpty();
                // Implementation
                if ((lp_level == 1) &amp;&amp; (gv_doubleActive == false)) {
                    TriggerExecute(gt_CallBackStartingGuards, true, false);
                    return true;
                }
                lv_attackWaveSpawnLocation = gv_deliverySiteDefaultEnemySpwPoint[gv_activeDeliveryID[lp_wave]];
                lv_bucket = gv_bucketPerGroup[gv_objectiveEscortCrystalsEscorted];
                lv_techlvl = gv_techLvlPerGroup[gv_objectiveEscortCrystalsEscorted];
                if ((gv_spawnedCrystalsPerDP[5] == 1) &amp;&amp; (lp_level == 4) &amp;&amp; (lp_crystalid == 2)) {
                    lv_attackWaveSpawnLocation = PointFromId(1968462501);
                    lv_minwaittime = 1;
                    lv_maxwaittime = 3;
                }
                autoFA2762B6_val = RandomInt(1, 2);
                if (autoFA2762B6_val == 1) {
                    if ((lp_level == 1) &amp;&amp; (lp_crystalid == 3) &amp;&amp; (gv_doubleActive == true)) {
                        lv_attackWaveSpawnLocation = PointFromId(748196534);
                        lv_maxwaittime = 3;
                        gf_SendDroponTransport(false, PointFromId(1037600294), PointFromId(1197237727), lp_wave, RandomInt(1, 3), true, false);
                        if ((gv_doubleBothCrystalsAreInside == true)) {
                            gf_SendDroponTransport(true, PointFromId(1829065574), PointFromId(1829065574), lp_wave, 10, false, true);
                        }
                    }
                    if ((lp_level == 2) &amp;&amp; (lp_crystalid == 1)) {
                        lv_minwaittime = 3;
                        lv_maxwaittime = 5;
                        if ((gv_doubleActive == true)) {
                            if ((gv_activeCrystalIsTransported[2] == false)) {
                                lv_attackWaveSpawnLocation = PointFromId(1968462501);
                            }
                            else {
                                lv_attackWaveSpawnLocation = PointFromId(649981719);
                            }
                        }
                        if ((gv_doubleBothCrystalsAreInside == true)) {
                            gf_SendDroponTransport(false, PointFromId(1847916209), PointFromId(120586940), lp_wave, 1, false, true);
                        }
                    }
                    if ((lp_level == 2) &amp;&amp; (lp_crystalid == 2)) {
                        lv_techlvl = libCOMI_ge_CoopAITechLevelBuckets__2EarlyMid;
                        lv_attackWaveSpawnLocation = PointFromId(1010165593);
                    }
                    if ((lp_level == 2) &amp;&amp; (lp_crystalid == 3)) {
                        lv_attackWaveSpawnLocation = PointFromId(1632729408);
                        if ((gv_doubleActive == true)) {
                            gf_SendDroponTransport(false, PointFromId(114720453), PointFromId(1915464888), lp_wave, RandomInt(1, 3), true, false);
                        }
                        if ((gv_doubleBothCrystalsAreInside == true)) {
                            gf_SendDroponTransport(false, PointFromId(707140486), PointFromId(1447186232), lp_wave, 11, false, true);
                        }
                    }
                    if ((lp_level == 3) &amp;&amp; (lp_crystalid == 1)) {
                        lv_attackWaveSpawnLocation = PointFromId(1037486990);
                        lv_maxwaittime = 6;
                    }
                    if ((lp_level == 3) &amp;&amp; (lp_crystalid == 2)) {
                        lv_maxwaittime = 5;
                        if ((gv_doubleActive == false) &amp;&amp; (gv_deliveryPointDestroyed[2] == false)) {
                            gf_SendDroponTransport(false, PointFromId(2056201629), PointFromId(1331747686), lp_wave, RandomInt(3, 6), false, false);
                        }
                        else {
                            if ((gv_doubleActive == true)) {
                                lv_attackWaveSpawnLocation = PointFromId(1441514557);
                                gf_SendDroponTransport(false, PointFromId(77346852), PointFromId(1475157820), lp_wave, RandomInt(1, 3), true, false);
                            }
                        }
                        if ((gv_doubleBothCrystalsAreInside == true)) {
                            gf_SendDroponTransport(true, PointFromId(347059361), PointFromId(347059361), lp_wave, 20, false, true);
                        }
                    }
                    if ((lp_level == 3) &amp;&amp; (lp_crystalid == 3) &amp;&amp; (gv_doubleBothCrystalsAreInside == true)) {
                        if (true) {
                            gf_SendDroponTransport(true, PointFromId(1074723149), PointFromId(1074723149), lp_wave, 14, false, true);
                        }
                    }
                    if ((lp_level == 3) &amp;&amp; (lp_crystalid == 4)) {
                        if ((gv_doubleActive == false) &amp;&amp; (gv_crystalAvailable[2][3] == false)) {
                            gf_SendDroponTransport(false, PointFromId(1314458786), PointFromId(1086245243), lp_wave, RandomInt(4, 8), false, false);
                        }
                        if ((gv_doubleActive == true)) {
                            gf_SendDroponTransport(false, PointFromId(2097197372), PointFromId(695919146), lp_wave, RandomInt(1, 3), true, false);
                        }
                        if ((gv_doubleBothCrystalsAreInside == true)) {
                            gf_SendDroponTransport(false, PointFromId(707140486), PointFromId(1447186232), lp_wave, 15, false, true);
                        }
                    }
                    if ((lp_level == 3) &amp;&amp; (lp_crystalid == 5)) {
                        lv_maxwaittime = 5;
                        lv_attackWaveSpawnLocation = PointFromId(150329535);
                        if ((gv_doubleBothCrystalsAreInside == true)) {
                            gf_SendDroponTransport(false, PointFromId(2412804), PointFromId(696354108), lp_wave, 10, false, true);
                        }
                    }
                    if ((lp_level == 4) &amp;&amp; (lp_crystalid == 1)) {
                        if ((gv_deliveryPointDestroyed[2] == false)) {
                            gf_SendDroponTransport(false, PointFromId(1876561330), PointFromId(1053838482), lp_wave, RandomInt(3, 5), true, false);
                        }
                        else {
                            gf_SendDroponTransport(false, PointFromId(41983782), PointFromId(1302589843), lp_wave, RandomInt(4, 8), true, false);
                            lv_attackWaveSpawnLocation = PointFromId(1433956354);
                        }
                    }
                    if ((((lp_level == 4) &amp;&amp; (lp_crystalid == 3) &amp;&amp; (gv_deliveryPointDestroyed[3] == true)) || ((lp_level == 5) &amp;&amp; (lp_crystalid == 4) &amp;&amp; (gv_crystal54variant == 2)))) {
                        lv_attackWaveSpawnLocation = PointFromId(844693492);
                        lv_maxwaittime = 6;
                        gf_SendDroponTransport(false, PointFromId(2104446599), PointFromId(1736632798), lp_wave, RandomInt(1, 3), true, false);
                    }
                    if ((lp_level == 4) &amp;&amp; (lp_crystalid == 4)) {
                        lv_maxwaittime = 4;
                        gf_SendDroponTransport(false, PointFromId(1655332997), PointFromId(885667396), lp_wave, RandomInt(10, 15), true, false);
                    }
                    if ((((lp_level == 4) &amp;&amp; (lp_crystalid == 5)) || ((lp_level == 5) &amp;&amp; (lp_crystalid == 4) &amp;&amp; (gv_crystal54variant == 1)))) {
                        lv_minwaittime = 14;
                        lv_maxwaittime = 18;
                        gf_SendDroponTransport(false, PointFromId(630406996), PointFromId(2140461921), lp_wave, RandomInt(1, 3), false, false);
                    }
                    if ((lp_level == 5) &amp;&amp; (lp_crystalid == 1)) {
                        lv_attackWaveSpawnLocation = PointFromId(1433956354);
                        gf_SendDroponTransport(false, PointFromId(333874431), PointFromId(1716686435), lp_wave, RandomInt(1, 3), true, false);
                    }
                    if ((lp_level == 5) &amp;&amp; (lp_crystalid == 3)) {
                        gf_SendDroponTransport(false, PointFromId(1181674880), PointFromId(24574114), lp_wave, RandomInt(8, 14), false, false);
                    }
                    if ((lp_level == 5) &amp;&amp; (lp_crystalid == 5)) {
                        lv_attackWaveSpawnLocation = PointFromId(1968462501);
                        if ((gv_doubleBothCrystalsAreInside == true)) {
                            gf_SendDroponTransport(false, PointFromId(1705297615), PointFromId(1414714149), lp_wave, 10, false, true);
                        }
                    }
                }
                else if (autoFA2762B6_val == 2) {
                    if ((lp_level == 1) &amp;&amp; (lp_crystalid == 3) &amp;&amp; (gv_doubleActive == true)) {
                        lv_attackWaveSpawnLocation = PointFromId(748196534);
                        lv_maxwaittime = 3;
                        gf_SendDroponTransport(false, PointFromId(4229919), PointFromId(377070609), lp_wave, RandomInt(1, 3), true, false);
                        if ((gv_doubleBothCrystalsAreInside == true)) {
                            gf_SendDroponTransport(false, PointFromId(28708732), PointFromId(1829065574), lp_wave, 8, false, true);
                        }
                    }
                    if ((lp_level == 2) &amp;&amp; (lp_crystalid == 1)) {
                        lv_attackWaveSpawnLocation = PointFromId(2146904827);
                        if ((gv_doubleBothCrystalsAreInside == true)) {
                            gf_SendDroponTransport(true, PointFromId(120586940), PointFromId(120586940), lp_wave, 8, false, true);
                        }
                    }
                    if ((lp_level == 2) &amp;&amp; (lp_crystalid == 2)) {
                        lv_maxwaittime = 4;
                        if ((libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 0, 0, 0, 1, 1, 1) == 1)) {
                            lv_techlvl = libCOMI_ge_CoopAITechLevelBuckets__2EarlyMid;
                        }
                        else {
                            lv_bucket = libCOMI_ge_CoopAIAttackWaveBuckets__5Large;
                        }
                        lv_attackWaveSpawnLocation = PointFromId(1210165596);
                    }
                    if ((lp_level == 2) &amp;&amp; (lp_crystalid == 3)) {
                        lv_attackWaveSpawnLocation = PointFromId(844693492);
                        if ((gv_doubleActive == true)) {
                            lv_minwaittime = 1;
                            lv_maxwaittime = 3;
                            gf_SendDroponTransport(false, PointFromId(114720453), PointFromId(1915464888), lp_wave, RandomInt(1, 3), true, false);
                        }
                        else {
                            lv_minwaittime = 6;
                            lv_maxwaittime = 12;
                        }
                        if ((gv_doubleBothCrystalsAreInside == true)) {
                            gf_SendDroponTransport(false, PointFromId(707140486), PointFromId(1447186232), lp_wave, 11, false, true);
                        }
                    }
                    if ((lp_level == 3) &amp;&amp; (lp_crystalid == 1)) {
                        lv_attackWaveSpawnLocation = PointFromId(1010165593);
                        lv_maxwaittime = 6;
                    }
                    if ((lp_level == 3) &amp;&amp; (lp_crystalid == 2)) {
                        lv_maxwaittime = 4;
                        lv_attackWaveSpawnLocation = PointFromId(1441514557);
                        if ((gv_doubleActive == false) &amp;&amp; (gv_deliveryPointDestroyed[2] == false)) {
                            gf_SendDroponTransport(true, PointFromId(1331747686), PointFromId(1331747686), lp_wave, RandomInt(13, 17), false, false);
                        }
                        else {
                            if ((gv_doubleActive == false) &amp;&amp; (gv_deliveryPointDestroyed[2] == true)) {
                                lv_attackWaveSpawnLocation = PointFromId(748196534);
                                gf_SendDroponTransport(false, PointFromId(77346852), PointFromId(1475157820), lp_wave, RandomInt(1, 3), true, false);
                            }
                        }
                        if ((gv_doubleBothCrystalsAreInside == true)) {
                            gf_SendDroponTransport(true, PointFromId(347059361), PointFromId(347059361), lp_wave, 18, false, true);
                        }
                    }
                    if ((lp_level == 3) &amp;&amp; (lp_crystalid == 3)) {
                        lv_maxwaittime = 5;
                        lv_attackWaveSpawnLocation = PointFromId(682142716);
                        if ((gv_doubleBothCrystalsAreInside == true)) {
                            gf_SendDroponTransport(false, PointFromId(823817765), PointFromId(424177661), lp_wave, 12, false, true);
                        }
                    }
                    if ((lp_level == 3) &amp;&amp; (lp_crystalid == 4)) {
                        lv_attackWaveSpawnLocation = PointFromId(844693492);
                        lv_minwaittime = 8;
                        lv_maxwaittime = 16;
                        if ((gv_crystalAvailable[2][3] == false) &amp;&amp; (gv_doubleActive == false)) {
                            gf_SendDroponTransport(false, PointFromId(1314458786), PointFromId(1086245243), lp_wave, RandomInt(4, 8), false, false);
                        }
                        if ((gv_doubleActive == true)) {
                            gf_SendDroponTransport(false, PointFromId(2097197372), PointFromId(695919146), lp_wave, RandomInt(1, 3), true, false);
                        }
                        if ((gv_doubleBothCrystalsAreInside == true)) {
                            gf_SendDroponTransport(false, PointFromId(707140486), PointFromId(1447186232), lp_wave, 15, false, true);
                        }
                    }
                    if ((lp_level == 3) &amp;&amp; (lp_crystalid == 5)) {
                        lv_maxwaittime = 5;
                        lv_attackWaveSpawnLocation = PointFromId(150329535);
                        if ((gv_doubleBothCrystalsAreInside == true)) {
                            gf_SendDroponTransport(false, PointFromId(2412804), PointFromId(696354108), lp_wave, 10, false, true);
                        }
                    }
                    if ((lp_level == 4) &amp;&amp; (lp_crystalid == 1)) {
                        if ((gv_deliveryPointDestroyed[2] == false)) {
                            gf_SendDroponTransport(false, PointFromId(1876561330), PointFromId(1053838482), lp_wave, RandomInt(3, 5), true, false);
                        }
                        else {
                            gf_SendDroponTransport(false, PointFromId(1960749273), PointFromId(445635351), lp_wave, RandomInt(6, 9), true, false);
                            lv_attackWaveSpawnLocation = PointFromId(682142716);
                        }
                    }
                    if ((((lp_level == 4) &amp;&amp; (lp_crystalid == 3) &amp;&amp; (gv_deliveryPointDestroyed[3] == true)) || ((lp_level == 5) &amp;&amp; (lp_crystalid == 4) &amp;&amp; (gv_crystal54variant == 2)))) {
                        lv_attackWaveSpawnLocation = PointFromId(844693492);
                        lv_maxwaittime = 3;
                        gf_SendDroponTransport(false, PointFromId(2057752404), PointFromId(300555442), lp_wave, RandomInt(15, 18), true, false);
                    }
                    if ((lp_level == 4) &amp;&amp; (lp_crystalid == 4)) {
                        lv_attackWaveSpawnLocation = PointFromId(288105275);
                        gf_SendDroponTransport(true, PointFromId(885667396), PointFromId(885667396), lp_wave, RandomInt(24, 28), true, false);
                    }
                    if ((((lp_level == 4) &amp;&amp; (lp_crystalid == 5)) || ((lp_level == 5) &amp;&amp; (lp_crystalid == 4) &amp;&amp; (gv_crystal54variant == 1)))) {
                        lv_minwaittime = 14;
                        lv_maxwaittime = 18;
                        gf_SendDroponTransport(true, PointFromId(1451310947), PointFromId(1451310947), lp_wave, RandomInt(1, 3), false, false);
                    }
                    if ((lp_level == 5) &amp;&amp; (lp_crystalid == 1)) {
                        lv_attackWaveSpawnLocation = PointFromId(1433956354);
                        gf_SendDroponTransport(false, PointFromId(74584346), PointFromId(1638139374), lp_wave, RandomInt(2, 4), true, false);
                    }
                    if ((lp_level == 5) &amp;&amp; (lp_crystalid == 3)) {
                        gf_SendDroponTransport(true, PointFromId(575201607), PointFromId(575201607), lp_wave, RandomInt(18, 22), false, false);
                    }
                    if ((lp_level == 5) &amp;&amp; (lp_crystalid == 5)) {
                        lv_attackWaveSpawnLocation = PointFromId(1968462501);
                        if ((gv_doubleBothCrystalsAreInside == true)) {
                            gf_SendDroponTransport(false, PointFromId(1705297615), PointFromId(1414714149), lp_wave, 10, false, true);
                        }
                    }
                }
                else {
                }
                Wait(RandomInt(lv_minwaittime, lv_maxwaittime), c_timeGame);
                auto1E5E1471_val = gv_objectiveEscortCrystalsEscorted;
                if (auto1E5E1471_val == 3) {
                    lv_hybridmajoramount = libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 0, 0, 0, 0, 0, 1);
                    lv_hybridminoramount = libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 0, 1, 2, 2, 3, 3);
                }
                else if (auto1E5E1471_val == 4) {
                    lv_hybridmajoramount = libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 0, 0, 0, 1, 1, 1);
                    lv_hybridminoramount = libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 1, 2, 3, 3, 3, 3);
                }
                else if (auto1E5E1471_val == 5) {
                    lv_hybridmajoramount = libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 0, 1, 1, 1, 1, 1);
                    lv_hybridminoramount = libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 1, 2, 3, 3, 4, 4);
                }
                else if (auto1E5E1471_val == 6) {
                    lv_hybridmajoramount = libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 0, 1, 1, 1, 1, 1);
                    lv_hybridminoramount = libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 2, 2, 3, 3, 4, 4);
                }
                else {
                }
                if ((lv_hybridmajoramount != 0)) {
                    UnitCreate(lv_hybridmajoramount, gv_hybridMajor, 0, gv_pLAYER_03_Player01Enemy, lv_attackWaveSpawnLocation, 270.0);
                    UnitGroupAddUnitGroup(lv_attackunitgroup, UnitLastCreatedGroup());
                }
                if ((lv_hybridminoramount != 0)) {
                    UnitCreate(lv_hybridminoramount, gv_hybridMinor, 0, gv_pLAYER_04_Player02Enemy, lv_attackWaveSpawnLocation, 270.0);
                    UnitGroupAddUnitGroup(lv_attackunitgroup, UnitLastCreatedGroup());
                }
                libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_Player01Enemy, gv_pLAYER_04_Player02Enemy, lv_bucket, lv_techlvl, lv_attackWaveSpawnLocation, true);
                UnitGroupAddUnitGroup(lv_attackunitgroup, libCOMI_gf_LastCreatedCoopAttackForce());
                AIAttackWaveSetTargetUnit(gv_pLAYER_03_Player01Enemy, gv_activeTransportUnit[lp_wave]);
                AIAttackWaveUseGroup(gv_pLAYER_03_Player01Enemy, UnitGroupFilterPlayer(lv_attackunitgroup, gv_pLAYER_03_Player01Enemy, 0));
                AIAttackWaveSend(gv_pLAYER_03_Player01Enemy, 0, false);
                AIAttackWaveSetTargetUnit(gv_pLAYER_04_Player02Enemy, gv_activeTransportUnit[lp_wave]);
                AIAttackWaveUseGroup(gv_pLAYER_04_Player02Enemy, UnitGroupFilterPlayer(lv_attackunitgroup, gv_pLAYER_04_Player02Enemy, 0));
                AIAttackWaveSend(gv_pLAYER_04_Player02Enemy, 0, false);
                if ((gv_crystalHybridsSpawned[lp_level][lp_crystalid] == false) &amp;&amp; (gv_objectiveEscortCrystalsEscorted &gt;= 4) &amp;&amp; (gv_doubleActive == false) &amp;&amp; (gv_objectiveEscortCrystalsEscorted != (gv_objectiveEscortCrystalsGoal - 1))) {
                    gv_crystalHybridsSpawned[lp_level][lp_crystalid] = true;
                    Wait(RandomInt(1, 3), c_timeGame);
                    UnitCreate(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 1, 2, 2, 3, 3, 4), &quot;HybridNemesis&quot;, 0, gv_pLAYER_05_Player03Hybrids, gv_crystalHybridSpawnPoint[lp_level][lp_crystalid], 270.0);
                    UnitGroupLoopBegin(UnitLastCreatedGroup());
                    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                        AIAttackWaveUseUnit(UnitGetOwner(UnitGroupLoopCurrent()), UnitGroupLoopCurrent());
                    }
                    UnitGroupLoopEnd();
                    AIAttackWaveSetTargetUnit(gv_pLAYER_05_Player03Hybrids, gv_activeTransportUnit[lp_wave]);
                    AIAttackWaveSend(gv_pLAYER_05_Player03Hybrids, 0, true);
                }
                return true;
            }
            trigger auto_gf_SendDroponTransport_Trigger = null;
            bool auto_gf_SendDroponTransport_lp_isInstant;
            point auto_gf_SendDroponTransport_lp_spawnlocation;
            point auto_gf_SendDroponTransport_lp_targetlocation;
            int auto_gf_SendDroponTransport_lp_wave;
            int auto_gf_SendDroponTransport_lp_delay;
            bool auto_gf_SendDroponTransport_lp_double;
            bool auto_gf_SendDroponTransport_lp_forcemedium;
            void gf_SendDroponTransport (bool lp_isInstant, point lp_spawnlocation, point lp_targetlocation, int lp_wave, int lp_delay, bool lp_double, bool lp_forcemedium) {
                auto_gf_SendDroponTransport_lp_isInstant = lp_isInstant;
                auto_gf_SendDroponTransport_lp_spawnlocation = lp_spawnlocation;
                auto_gf_SendDroponTransport_lp_targetlocation = lp_targetlocation;
                auto_gf_SendDroponTransport_lp_wave = lp_wave;
                auto_gf_SendDroponTransport_lp_delay = lp_delay;
                auto_gf_SendDroponTransport_lp_double = lp_double;
                auto_gf_SendDroponTransport_lp_forcemedium = lp_forcemedium;
                if (auto_gf_SendDroponTransport_Trigger == null) {
                    auto_gf_SendDroponTransport_Trigger = TriggerCreate(&quot;auto_gf_SendDroponTransport_TriggerFunc&quot;);
                }
                TriggerExecute(auto_gf_SendDroponTransport_Trigger, false, false);
            }
            bool auto_gf_SendDroponTransport_TriggerFunc (bool testConds, bool runActions) {
                bool lp_isInstant = auto_gf_SendDroponTransport_lp_isInstant;
                point lp_spawnlocation = auto_gf_SendDroponTransport_lp_spawnlocation;
                point lp_targetlocation = auto_gf_SendDroponTransport_lp_targetlocation;
                int lp_wave = auto_gf_SendDroponTransport_lp_wave;
                int lp_delay = auto_gf_SendDroponTransport_lp_delay;
                bool lp_double = auto_gf_SendDroponTransport_lp_double;
                bool lp_forcemedium = auto_gf_SendDroponTransport_lp_forcemedium;
                int autoFB2BD151_val;
                // Variable Declarations
                int lv_bucket;
                int lv_techlvl;
                int lv_enemyPlayer;
                int lv_enemyPlayer2;
                unitgroup lv_dropunitgroup;
                // Variable Initialization
                lv_bucket = libCOMI_ge_CoopAIAttackWaveBuckets__3Small;
                lv_techlvl = libCOMI_ge_CoopAITechLevelBuckets__1Early;
                lv_dropunitgroup = UnitGroupEmpty();
                // Implementation
                if ((lp_forcemedium == false)) {
                    lv_bucket = gv_bucketPerGroup[gv_objectiveEscortCrystalsEscorted];
                    lv_techlvl = gv_techLvlPerGroup[gv_objectiveEscortCrystalsEscorted];
                }
                else {
                    lv_bucket = libCOMI_ge_CoopAIAttackWaveBuckets__5Large;
                    lv_techlvl = libCOMI_ge_CoopAITechLevelBuckets__4LateMid;
                }
                autoFB2BD151_val = RandomInt(1, 2);
                if (autoFB2BD151_val == 1) {
                    lv_enemyPlayer = gv_pLAYER_03_Player01Enemy;
                    lv_enemyPlayer2 = gv_pLAYER_04_Player02Enemy;
                }
                else if (autoFB2BD151_val == 2) {
                    lv_enemyPlayer = gv_pLAYER_04_Player02Enemy;
                    lv_enemyPlayer2 = gv_pLAYER_03_Player01Enemy;
                }
                else {
                }
                Wait(lp_delay, c_timeGame);
                if ((lp_isInstant == false)) {
                    if ((lp_double == true)) {
                        libCOMI_gf_CreateCoopDropForceinTransportsatLocationandWaitforthemtospawn(lv_enemyPlayer, lv_enemyPlayer2, lv_bucket, lv_techlvl, lp_spawnlocation, gv_transportType);
                    }
                    else {
                        libCOMI_gf_CreateCoopDropForceinTransportsatLocationandWaitforthemtospawn(lv_enemyPlayer, c_playerAny, lv_bucket, lv_techlvl, lp_spawnlocation, gv_transportType);
                    }
                    UnitGroupAddUnitGroup(lv_dropunitgroup, libCOMI_gf_LastCreatedCoopAttackForce());
                    AIAttackWaveSetTargetUnit(lv_enemyPlayer, gv_activeTransportUnit[lp_wave]);
                    AIAttackWaveAddWaypoint(lv_enemyPlayer, lp_targetlocation, true);
                    AIAttackWaveUseGroup(lv_enemyPlayer, UnitGroupFilterPlayer(lv_dropunitgroup, lv_enemyPlayer, 0));
                    AIAttackWaveSend(lv_enemyPlayer, 0, false);
                    if ((lp_double == true)) {
                        AIAttackWaveSetTargetUnit(lv_enemyPlayer2, gv_activeTransportUnit[lp_wave]);
                        AIAttackWaveAddWaypoint(lv_enemyPlayer2, lp_targetlocation, true);
                        AIAttackWaveUseGroup(lv_enemyPlayer2, UnitGroupFilterPlayer(lv_dropunitgroup, lv_enemyPlayer2, 0));
                        AIAttackWaveSend(lv_enemyPlayer2, 0, false);
                    }
                }
                else {
                    TriggerExecute(gt_DropWarpindetected, true, false);
                    libCOMI_gf_CreatePingCoop(PlayerGroupAll(), &quot;PingAlert&quot;, lp_spawnlocation, ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 4.0);
                    libCOMI_gf_SetCoopAIAttackGroupSpawnPoint(lv_enemyPlayer, lp_spawnlocation);
                    AIAttackWaveSetTargetUnit(lv_enemyPlayer, gv_activeTransportUnit[lp_wave]);
                    libCOMI_gf_AddCommanderUnitstoAttackWavePresetBucketTechLevel(lv_enemyPlayer, true, lv_bucket, lv_techlvl);
                    AIAttackWaveSend(lv_enemyPlayer, 0, false);
                    if ((lp_double == true)) {
                        libCOMI_gf_SetCoopAIAttackGroupSpawnPoint(lv_enemyPlayer2, lp_spawnlocation);
                        AIAttackWaveSetTargetUnit(lv_enemyPlayer2, gv_activeTransportUnit[lp_wave]);
                        libCOMI_gf_AddCommanderUnitstoAttackWavePresetBucketTechLevel(lv_enemyPlayer2, true, lv_bucket, lv_techlvl);
                        AIAttackWaveSend(lv_enemyPlayer2, 0, false);
                    }
                }
                return true;
            }
            trigger auto_gf_SendHybridsAfterCrystal_Trigger = null;
            int auto_gf_SendHybridsAfterCrystal_lp_wave;
            bool auto_gf_SendHybridsAfterCrystal_lp_forced;
            void gf_SendHybridsAfterCrystal (int lp_wave, bool lp_forced) {
                auto_gf_SendHybridsAfterCrystal_lp_wave = lp_wave;
                auto_gf_SendHybridsAfterCrystal_lp_forced = lp_forced;
                if (auto_gf_SendHybridsAfterCrystal_Trigger == null) {
                    auto_gf_SendHybridsAfterCrystal_Trigger = TriggerCreate(&quot;auto_gf_SendHybridsAfterCrystal_TriggerFunc&quot;);
                }
                TriggerExecute(auto_gf_SendHybridsAfterCrystal_Trigger, false, false);
            }
            bool auto_gf_SendHybridsAfterCrystal_TriggerFunc (bool testConds, bool runActions) {
                int lp_wave = auto_gf_SendHybridsAfterCrystal_lp_wave;
                bool lp_forced = auto_gf_SendHybridsAfterCrystal_lp_forced;
                int auto3D051723_val;
                // Variable Declarations
                int lv_sentlevel;
                int lv_sentcrystalid;
                // Variable Initialization
                // Implementation
                if (((gv_doubleActive == false) || ((lp_forced == true) &amp;&amp; (gv_doubleActive == true)))) {
                    lv_sentlevel = gv_activeCrystalLevel[lp_wave];
                    lv_sentcrystalid = gv_activeCrystalID[lp_wave];
                    if ((gv_objectiveDontLoseCrystalsLost != 0) &amp;&amp; (lp_wave == 2) &amp;&amp; (gv_objectiveEscortCrystalsEscorted == 5)) {
                        Wait(gv_hybridDelayPerGroup[7], c_timeGame);
                    }
                    else {
                        if ((lp_wave == 2) &amp;&amp; (gv_activeCrystalIsInGame[1] == true) &amp;&amp; (gv_doubleActive == false)) {
                            Wait(gv_hybridDelayPerGroup[(gv_objectiveEscortCrystalsEscorted + 1)], c_timeGame);
                        }
                        else {
                            Wait(gv_hybridDelayPerGroup[gv_objectiveEscortCrystalsEscorted], c_timeGame);
                        }
                    }
                    if ((gv_objectiveEscortCrystalsEscorted == 1) &amp;&amp; (gv_activeCrystalIsTransported[1] == false) &amp;&amp; (gv_activeCrystalIsTransported[2] == true)) {
                        Wait(175.0, c_timeGame);
                    }
                    if ((gv_doubleActive == true) &amp;&amp; ((gv_activeCrystalIsTransported[1] == true) || (gv_activeCrystalIsTransported[2] == true))) {
                        return true;
                    }
                    if ((gv_activeCrystalIsInGame[lp_wave] == true) &amp;&amp; (gv_activeCrystalIsTransported[lp_wave] == false) &amp;&amp; (lv_sentlevel == gv_activeCrystalLevel[lp_wave]) &amp;&amp; (lv_sentcrystalid == gv_activeCrystalID[lp_wave])) {
                        gv_activeCrystalHybridForceTargetLevel[lp_wave] = gv_activeCrystalLevel[lp_wave];
                        gv_activeCrystalHybridForceTargetCystalID[lp_wave] = gv_activeCrystalID[lp_wave];
                        gv_crystalHybridsSpawned[gv_activeCrystalLevel[lp_wave]][gv_activeCrystalID[lp_wave]] = true;
                        TriggerExecute(gt_Hybridiscomingforcrystal, true, false);
                        UnitSetState(gv_activeCrystalUnit[lp_wave], c_unitStateInvulnerable, false);
                        PingDestroy(gv_activeCrystalHybridForcePing[lp_wave]);
                        UnitGroupClear(gv_activeCrystalHybridForce[lp_wave]);
                        if ((gv_objectiveEscortCrystalsEscorted &lt; 3)) {
                            libCOMI_gf_CreatePingCoop(PlayerGroupAll(), &quot;PingBoss&quot;, gv_deliverySiteDefaultEnemySpwPoint[gv_activeDeliveryID[lp_wave]], ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0);
                            gv_activeCrystalHybridForcePing[lp_wave] = PingLastCreated();
                            gf_CrystalHybridForceShowArrows(gv_deliverySiteDefaultEnemySpwPoint[gv_activeDeliveryID[lp_wave]], UnitGetPosition(gv_activeCrystalUnit[lp_wave]));
                            Wait(10.0, c_timeGame);
                            UnitCreate(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 1, 1, 2, 3, 4, 4), &quot;HybridDestroyer&quot;, 0, gv_pLAYER_05_Player03Hybrids, gv_deliverySiteDefaultEnemySpwPoint[gv_activeDeliveryID[lp_wave]], 270.0);
                        }
                        else {
                            libCOMI_gf_CreatePingCoop(PlayerGroupAll(), &quot;PingBoss&quot;, gv_crystalHybridSpawnPoint[gv_activeCrystalHybridForceTargetLevel[lp_wave]][gv_activeCrystalHybridForceTargetCystalID[lp_wave]], ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0);
                            gv_activeCrystalHybridForcePing[lp_wave] = PingLastCreated();
                            gf_CrystalHybridForceShowArrows(gv_crystalHybridSpawnPoint[gv_activeCrystalHybridForceTargetLevel[lp_wave]][gv_activeCrystalHybridForceTargetCystalID[lp_wave]], UnitGetPosition(gv_activeCrystalUnit[lp_wave]));
                            Wait(12.0, c_timeGame);
                            UnitCreate(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 1, 2, 2, 3, 3, 4), &quot;HybridNemesis&quot;, 0, gv_pLAYER_05_Player03Hybrids, gv_crystalHybridSpawnPoint[gv_activeCrystalHybridForceTargetLevel[lp_wave]][gv_activeCrystalHybridForceTargetCystalID[lp_wave]], 270.0);
                        }
                        UnitGroupLoopBegin(UnitLastCreatedGroup());
                        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                            AIAttackWaveUseUnit(UnitGetOwner(UnitGroupLoopCurrent()), UnitGroupLoopCurrent());
                            UnitGroupAdd(gv_activeCrystalHybridForce[lp_wave], UnitGroupLoopCurrent());
                        }
                        UnitGroupLoopEnd();
                        auto3D051723_val = lp_wave;
                        if (auto3D051723_val == 1) {
                            TriggerEnable(gt_CrystalHybridForcePingController1, true);
                        }
                        else if (auto3D051723_val == 2) {
                            TriggerEnable(gt_CrystalHybridForcePingController2, true);
                        }
                        else {
                        }
                        if ((gv_activeCrystalIsTransported[lp_wave] == false)) {
                            AIAttackWaveSetTargetUnit(gv_pLAYER_05_Player03Hybrids, gv_activeCrystalUnit[lp_wave]);
                        }
                        else {
                            if ((UnitIsAlive(gv_activeTransportUnit[lp_wave]) == true)) {
                                AIAttackWaveSetTargetUnit(gv_pLAYER_05_Player03Hybrids, gv_activeTransportUnit[lp_wave]);
                            }
                            else {
                                AIAttackWaveSetTargetPlayer(gv_pLAYER_05_Player03Hybrids, PlayerGroupSingle(RandomInt(gv_pLAYER_01_USER, gv_pLAYER_02_USER)));
                            }
                        }
                        AIAttackWaveSend(gv_pLAYER_05_Player03Hybrids, 0, true);
                        libCOMI_gf_EnableDisableCoopAIWavePing(WaveLastCreated(), false);
                    }
                }
                return true;
            }
            trigger auto_gf_CrystalHybridForceShowArrows_Trigger = null;
            point auto_gf_CrystalHybridForceShowArrows_lp_startloc;
            point auto_gf_CrystalHybridForceShowArrows_lp_endloc;
            void gf_CrystalHybridForceShowArrows (point lp_startloc, point lp_endloc) {
                auto_gf_CrystalHybridForceShowArrows_lp_startloc = lp_startloc;
                auto_gf_CrystalHybridForceShowArrows_lp_endloc = lp_endloc;
                if (auto_gf_CrystalHybridForceShowArrows_Trigger == null) {
                    auto_gf_CrystalHybridForceShowArrows_Trigger = TriggerCreate(&quot;auto_gf_CrystalHybridForceShowArrows_TriggerFunc&quot;);
                }
                TriggerExecute(auto_gf_CrystalHybridForceShowArrows_Trigger, false, false);
            }
            bool auto_gf_CrystalHybridForceShowArrows_TriggerFunc (bool testConds, bool runActions) {
                point lp_startloc = auto_gf_CrystalHybridForceShowArrows_lp_startloc;
                point lp_endloc = auto_gf_CrystalHybridForceShowArrows_lp_endloc;
                int auto8740EEB5_n;
                int auto8740EEB5_i;
                int autoE4C81FDE_n;
                int autoE4C81FDE_i;
                // Variable Declarations
                int lv_spacer;
                int lv_numberofarrows;
                point lv_currentpos;
                // Variable Initialization
                lv_spacer = 10;
                // Implementation
                lv_numberofarrows = (TruncI((DistanceBetweenPoints(lp_startloc, lp_endloc) / lv_spacer)) - 1);
                auto8740EEB5_n = 3;
                for (auto8740EEB5_i = 1; auto8740EEB5_i &lt;= auto8740EEB5_n; auto8740EEB5_i += 1) {
                    lv_currentpos = libNtve_gf_PointOffsetTowardsPoint(lp_startloc, (lv_spacer / 2.0), lp_endloc);
                    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), &quot;PingArrow&quot;, lv_currentpos, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 2.5, AngleBetweenPoints(lp_startloc, lp_endloc));
                    PingSetScale(PingLastCreated(), 0.4);
                    Wait(0.2, c_timeGame);
                    autoE4C81FDE_n = lv_numberofarrows;
                    for (autoE4C81FDE_i = 1; autoE4C81FDE_i &lt;= autoE4C81FDE_n; autoE4C81FDE_i += 1) {
                        lv_currentpos = libNtve_gf_PointOffsetTowardsPoint(lv_currentpos, lv_spacer, lp_endloc);
                        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), &quot;PingArrow&quot;, lv_currentpos, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 2.5, AngleBetweenPoints(lp_startloc, lp_endloc));
                        PingSetScale(PingLastCreated(), 0.4);
                        Wait(0.2, c_timeGame);
                    }
                    Wait(3.0, c_timeGame);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Init 01 Load Data
            //--------------------------------------------------------------------------------------------------
            bool gt_Init01LoadData_Func (bool testConds, bool runActions) {
                libCOMI_gf_LoadCoopMission(&quot;COOP_Placeholder&quot;, gt_Init03LoadingComplete);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_Init01LoadData_Init () {
                gt_Init01LoadData = TriggerCreate(&quot;gt_Init01LoadData_Func&quot;);
                TriggerAddEventMapInit(gt_Init01LoadData);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Init 02 Players
            //--------------------------------------------------------------------------------------------------
            void gt_Init02Players () {
                PlayerSetColorIndex(gv_pLAYER_10_Crystal, 6, true);
                PlayerSetColorIndex(gv_pLAYER_11_Transport, 0, true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Init 03 Loading Complete
            //--------------------------------------------------------------------------------------------------
            bool gt_Init03LoadingComplete_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                gt_Init02Players();
                gv_pLAYER_01_USER = libCOMI_gf_GetRolePlayer(1);
                gv_pLAYER_02_USER = libCOMI_gf_GetRolePlayer(2);
                TriggerExecute(gt_Init05Units, true, false);
                TriggerExecute(gt_Init06MusicSound, true, false);
                TriggerExecute(gt_Init07Environment, true, false);
                TriggerExecute(gt_Init08Difficulties, true, false);
                TriggerExecute(gt_StartGameQ, true, false);
                TriggerExecute(gt_StartAI, true, false);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_Init03LoadingComplete_Init () {
                gt_Init03LoadingComplete = TriggerCreate(&quot;gt_Init03LoadingComplete_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Init 05 Units
            //--------------------------------------------------------------------------------------------------
            bool gt_Init05Units_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                UnitGroupLoopBegin(UnitGroup(&quot;AncientXelNagaArtifact&quot;, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0));
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    UnitSetState(gv_bonusKillHybridsPCUnit, c_unitStateHighlightable, false);
                }
                UnitGroupLoopEnd();
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_Init05Units_Init () {
                gt_Init05Units = TriggerCreate(&quot;gt_Init05Units_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Init 06 Music/Sound
            //--------------------------------------------------------------------------------------------------
            bool gt_Init06MusicSound_Func (bool testConds, bool runActions) {
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_Init06MusicSound_Init () {
                gt_Init06MusicSound = TriggerCreate(&quot;gt_Init06MusicSound_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Init 07 Environment
            //--------------------------------------------------------------------------------------------------
            bool gt_Init07Environment_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                VisExploreArea(gv_pLAYER_01_USER, RegionFromId(1), true, false);
                VisExploreArea(gv_pLAYER_02_USER, RegionFromId(1), true, false);
                VisRevealArea(gv_pLAYER_01_USER, RegionFromId(42), 0.0, false);
                VisRevealArea(gv_pLAYER_02_USER, RegionFromId(42), 0.0, false);
                libNtve_gf_ShowHideDoodadsInRegion(false, RegionEntireMap(), &quot;ShakurasBaseShield&quot;);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_Init07Environment_Init () {
                gt_Init07Environment = TriggerCreate(&quot;gt_Init07Environment_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Init 08 Difficulties
            //--------------------------------------------------------------------------------------------------
            bool gt_Init08Difficulties_Func (bool testConds, bool runActions) {
                int auto014204F0_val;
                // Actions
                if (!runActions) {
                    return true;
                }
                UnitGroupLoopBegin(UnitGroup(&quot;DestructibleRockEx14x4&quot;, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0));
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropLifeMax, libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 500, 1000, 1500, 2000, 2000, 2000));
                    UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropLifePercent, 100.0);
                }
                UnitGroupLoopEnd();
                UnitGroupLoopBegin(UnitGroup(&quot;DestructibleRockEx12x4Horizontal&quot;, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0));
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropLifeMax, libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 300, 500, 600, 750, 750, 750));
                    UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropLifePercent, 100.0);
                }
                UnitGroupLoopEnd();
                auto014204F0_val = libCOMI_gf_GetMissionDifficulty();
                if (auto014204F0_val == 1) {
                    UnitGroupLoopBegin(UnitGroupFromId(5));
                    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                        UnitRemove(UnitGroupLoopCurrent());
                    }
                    UnitGroupLoopEnd();
                    UnitGroupLoopBegin(UnitGroupFromId(3));
                    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                        UnitRemove(UnitGroupLoopCurrent());
                    }
                    UnitGroupLoopEnd();
                    UnitGroupLoopBegin(UnitGroupFromId(4));
                    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                        UnitRemove(UnitGroupLoopCurrent());
                    }
                    UnitGroupLoopEnd();
                }
                else if (auto014204F0_val == 2) {
                    UnitGroupLoopBegin(UnitGroupFromId(3));
                    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                        UnitRemove(UnitGroupLoopCurrent());
                    }
                    UnitGroupLoopEnd();
                    UnitGroupLoopBegin(UnitGroupFromId(4));
                    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                        UnitRemove(UnitGroupLoopCurrent());
                    }
                    UnitGroupLoopEnd();
                }
                else if (auto014204F0_val == 3) {
                    UnitGroupLoopBegin(UnitGroupFromId(4));
                    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                        UnitRemove(UnitGroupLoopCurrent());
                    }
                    UnitGroupLoopEnd();
                }
                else {
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_Init08Difficulties_Init () {
                gt_Init08Difficulties = TriggerCreate(&quot;gt_Init08Difficulties_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Start Game Q
            //--------------------------------------------------------------------------------------------------
            bool gt_StartGameQ_Func (bool testConds, bool runActions) {
                int auto01C93E02_val;
                // Actions
                if (!runActions) {
                    return true;
                }
                TimerStart(gv_debuggametimer, c_timerDurationInfinite, false, c_timeGame);
                TriggerExecute(gt_ArraySetup, true, false);
                TimerStart(gv_stormCountdownTimer, libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 615, 600, 585, 580, 575, 570), false, c_timeGame);
                TimerStart(gv_stormCountdownTimer95, (TimerGetRemaining(gv_stormCountdownTimer) - 95.0), false, c_timeGame);
                TimerStart(gv_stormCountdownTimer45, (TimerGetRemaining(gv_stormCountdownTimer) - 45.0), false, c_timeGame);
                TimerStart(gv_stormCountdownTimer10, (TimerGetRemaining(gv_stormCountdownTimer) - 10.0), false, c_timeGame);
                TriggerExecute(gt_StartCrystalController, true, false);
                Wait(4.5, c_timeGame);
                TriggerExecute(gt_ObjectiveEscortCrystalsCreate, true, false);
                Wait(4.5, c_timeGame);
                TriggerExecute(gt_ObjectiveDontLoseCrystalsCreate, true, false);
                Wait(3.0, c_timeGame); 
                libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
                auto01C93E02_val = RandomInt(1, 3);
                if (auto01C93E02_val == 1) {
                    UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal(&quot;Param/Value/5854820D&quot;));
                    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(&quot;AenythAdvisorPortrait&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), SoundLink(&quot;AenythAdvisorA1a&quot;, -1), 0.0, c_transmissionDurationAdd, true);
                    UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal(&quot;Param/Value/51564CA6&quot;));
                    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(&quot;AenythAdvisorPortrait&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), SoundLink(&quot;AenythAdvisorA1b&quot;, -1), 1.0, c_transmissionDurationAdd, true);
                }
                else if (auto01C93E02_val == 2) {
                    UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal(&quot;Param/Value/B99AED65&quot;));
                    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(&quot;AenythAdvisorPortrait&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), SoundLink(&quot;AenythAdvisorA2a&quot;, -1), 0.0, c_transmissionDurationAdd, true);
                    UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal(&quot;Param/Value/3189F5D5&quot;));
                    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(&quot;AenythAdvisorPortrait&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), SoundLink(&quot;AenythAdvisorA2b&quot;, -1), 1.0, c_transmissionDurationAdd, true);
                }
                else if (auto01C93E02_val == 3) {
                    UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal(&quot;Param/Value/26A42231&quot;));
                    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(&quot;AenythAdvisorPortrait&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), SoundLink(&quot;AenythAdvisorA3a&quot;, -1), 0.0, c_transmissionDurationAdd, true);
                    UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal(&quot;Param/Value/920C53FE&quot;));
                    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(&quot;AenythAdvisorPortrait&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), SoundLink(&quot;AenythAdvisorA3b&quot;, -1), 1.0, c_transmissionDurationAdd, true);
                }
                else {
                }
                libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_StartGameQ_Init () {
                gt_StartGameQ = TriggerCreate(&quot;gt_StartGameQ_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Array Setup
            //--------------------------------------------------------------------------------------------------
            bool gt_ArraySetup_Func (bool testConds, bool runActions) {
                int auto331E6E1D_ae;
                int auto331E6E1D_ai;
                int autoE7A85018_ae;
                int autoE7A85018_ai;
                int auto1DC16C3C_ae;
                int auto1DC16C3C_ai;
                int autoE223E650_ae;
                int autoE223E650_ai;
                int autoD9E532E5_ae;
                int autoD9E532E5_ai;
                int auto6417363C_val;
                // Variable Declarations
                int lv_lvl;
                int lv_crystalid;
                int lv_dp;
                int lv_stormgroup;
                int lv_stormid;
                // Variable Initialization
                // Actions
                if (!runActions) {
                    return true;
                }
                auto331E6E1D_ae = 5;
                auto331E6E1D_ai = 1;
                lv_dp = 1;
                for ( ; ( (auto331E6E1D_ai &gt;= 0 &amp;&amp; lv_dp &lt;= auto331E6E1D_ae) || (auto331E6E1D_ai &lt;= 0 &amp;&amp; lv_dp &gt;= auto331E6E1D_ae) ) ; lv_dp += auto331E6E1D_ai ) {
                    gv_deliveryPoint[lv_dp] = PointFromName((&quot;D_center&quot; + IntToString(lv_dp)));
                    gv_deliveryPointRegion[lv_dp] = RegionFromName((&quot;D_reg&quot; + IntToString(lv_dp)));
                }
                autoE7A85018_ae = 5;
                autoE7A85018_ai = 1;
                lv_lvl = 1;
                for ( ; ( (autoE7A85018_ai &gt;= 0 &amp;&amp; lv_lvl &lt;= autoE7A85018_ae) || (autoE7A85018_ai &lt;= 0 &amp;&amp; lv_lvl &gt;= autoE7A85018_ae) ) ; lv_lvl += autoE7A85018_ai ) {
                    auto1DC16C3C_ae = 5;
                    auto1DC16C3C_ai = 1;
                    lv_crystalid = 1;
                    for ( ; ( (auto1DC16C3C_ai &gt;= 0 &amp;&amp; lv_crystalid &lt;= auto1DC16C3C_ae) || (auto1DC16C3C_ai &lt;= 0 &amp;&amp; lv_crystalid &gt;= auto1DC16C3C_ae) ) ; lv_crystalid += auto1DC16C3C_ai ) {
                        gv_crystalSpawnPoint[lv_lvl][lv_crystalid] = PointFromName((&quot;C_spw&quot; + IntToString(lv_lvl) + &quot;-&quot; + IntToString(lv_crystalid)));
                        gv_crystalHybridSpawnPoint[lv_lvl][lv_crystalid] = PointFromName((&quot;C_H_spw&quot; + IntToString(lv_lvl) + &quot;-&quot; + IntToString(lv_crystalid)));
                        gv_crystalRegion[lv_lvl][lv_crystalid] = RegionFromName((&quot;C_reg&quot; + IntToString(lv_lvl) + &quot;-&quot; + IntToString(lv_crystalid)));
                        gv_crystalTransportSpawnPoint[lv_lvl][lv_crystalid] = PointFromName((&quot;C_T_spw&quot; + IntToString(lv_lvl) + &quot;-&quot; + IntToString(lv_crystalid)));
                        gv_crystalTransportPath1[lv_lvl][lv_crystalid] = PointFromName((&quot;C_T_pathA&quot; + IntToString(lv_lvl) + &quot;-&quot; + IntToString(lv_crystalid)));
                        gv_crystalTransportPath2[lv_lvl][lv_crystalid] = PointFromName((&quot;C_T_pathB&quot; + IntToString(lv_lvl) + &quot;-&quot; + IntToString(lv_crystalid)));
                        gv_crystalTransportPath3[lv_lvl][lv_crystalid] = PointFromName((&quot;C_T_pathC&quot; + IntToString(lv_lvl) + &quot;-&quot; + IntToString(lv_crystalid)));
                    }
                }
                gv_crystalSpawnPoint[5][1] = PointFromId(1444187677);
                gv_crystalSpawnPoint[5][3] = PointFromId(1437915990);
                gv_crystalRegion[5][1] = RegionFromId(6);
                gv_crystalRegion[5][3] = RegionFromId(12);
                gv_crystalTransportSpawnPoint[5][3] = PointFromId(1770899225);
                gv_crystalAvoidIfPossible[3][1] = true;
                gv_crystalAvoidIfPossible[4][2] = true;
                gv_crystalAvailable[4][5] = false;
                gv_crystalSpawnPoint[4][5] = PointFromId(1477234424);
                gv_crystalRegion[4][5] = RegionFromId(10);
                gv_crystalTransportSpawnPoint[4][5] = PointFromId(1704820604);
                gv_crystalHybridSpawnPoint[4][5] = PointFromId(874546580);
                gv_crystalAvailable[5][4] = false;
                gv_noCrystalsPerLvl[1] = 3;
                gv_noCrystalsPerLvl[2] = 3;
                gv_noCrystalsPerLvl[3] = 5;
                gv_noCrystalsPerLvl[4] = 5;
                gv_noCrystalsPerLvl[5] = 3;
                gv_maxCrystalsPerLvl[1] = 2;
                gv_maxCrystalsPerLvl[2] = 2;
                gv_maxCrystalsPerLvl[3] = 3;
                gv_maxCrystalsPerLvl[4] = 3;
                gv_lvlPerGroup[0] = 1;
                gv_lvlPerGroup[1] = 2;
                gv_lvlPerGroup[2] = 3;
                gv_lvlPerGroup[3] = 3;
                gv_lvlPerGroup[4] = 4;
                gv_lvlPerGroup[5] = 4;
                gv_lvlPerGroup[6] = 5;
                gv_crystalDeliverySiteID[1][1] = 1;
                gv_crystalDeliverySiteID[1][2] = 2;
                gv_crystalDeliverySiteID[1][3] = 3;
                gv_crystalDeliverySiteID[2][1] = 2;
                gv_crystalDeliverySiteID[2][2] = 1;
                gv_crystalDeliverySiteID[2][3] = 4;
                gv_crystalDeliverySiteID[3][1] = 1;
                gv_crystalDeliverySiteID[3][2] = 2;
                gv_crystalDeliverySiteID[3][3] = 1;
                gv_crystalDeliverySiteID[3][4] = 4;
                gv_crystalDeliverySiteID[3][5] = 3;
                gv_crystalDeliverySiteID[4][1] = 2;
                gv_crystalDeliverySiteID[4][2] = 5;
                gv_crystalDeliverySiteID[4][3] = 3;
                gv_crystalDeliverySiteID[4][4] = 4;
                gv_crystalDeliverySiteID[4][5] = 5;
                gv_crystalDeliverySiteID[5][1] = 1;
                gv_crystalDeliverySiteID[5][2] = 5;
                gv_crystalDeliverySiteID[5][3] = 4;
                gv_crystalDeliverySiteID[5][4] = 1;
                gv_crystalDeliverySiteID[5][5] = 5;
                gv_deliverySiteDefaultEnemySpwPoint[1] = PointFromId(316264140);
                gv_deliverySiteDefaultEnemySpwPoint[2] = PointFromId(649981719);
                gv_deliverySiteDefaultEnemySpwPoint[3] = PointFromId(150329535);
                gv_deliverySiteDefaultEnemySpwPoint[4] = PointFromId(316264140);
                gv_deliverySiteDefaultEnemySpwPoint[5] = PointFromId(463208794);
                gv_bucketPerGroup[1] = libCOMI_ge_CoopAIAttackWaveBuckets__4Medium;
                gv_bucketPerGroup[2] = libCOMI_ge_CoopAIAttackWaveBuckets__4Medium;
                gv_techLvlPerGroup[2] = libCOMI_ge_CoopAITechLevelBuckets__2EarlyMid;
                gv_bucketPerGroup[3] = libCOMI_ge_CoopAIAttackWaveBuckets__5Large;
                gv_techLvlPerGroup[3] = libCOMI_ge_CoopAITechLevelBuckets__3Mid;
                gv_bucketPerGroup[4] = libCOMI_ge_CoopAIAttackWaveBuckets__6Larger;
                gv_techLvlPerGroup[4] = libCOMI_ge_CoopAITechLevelBuckets__4LateMid;
                gv_bucketPerGroup[5] = libCOMI_ge_CoopAIAttackWaveBuckets__6Larger;
                gv_techLvlPerGroup[5] = libCOMI_ge_CoopAITechLevelBuckets__5Late;
                gv_bucketPerGroup[6] = libCOMI_ge_CoopAIAttackWaveBuckets__7Largest;
                gv_techLvlPerGroup[6] = libCOMI_ge_CoopAITechLevelBuckets_TechLevel06;
                autoE223E650_ae = 3;
                autoE223E650_ai = 1;
                lv_stormgroup = 1;
                for ( ; ( (autoE223E650_ai &gt;= 0 &amp;&amp; lv_stormgroup &lt;= autoE223E650_ae) || (autoE223E650_ai &lt;= 0 &amp;&amp; lv_stormgroup &gt;= autoE223E650_ae) ) ; lv_stormgroup += autoE223E650_ai ) {
                    autoD9E532E5_ae = 6;
                    autoD9E532E5_ai = 1;
                    lv_stormid = 1;
                    for ( ; ( (autoD9E532E5_ai &gt;= 0 &amp;&amp; lv_stormid &lt;= autoD9E532E5_ae) || (autoD9E532E5_ai &lt;= 0 &amp;&amp; lv_stormid &gt;= autoD9E532E5_ae) ) ; lv_stormid += autoD9E532E5_ai ) {
                        gv_stormUnitSpwLoc[lv_stormgroup][lv_stormid] = PointFromName((&quot;Storm&quot; + IntToString(lv_stormgroup) + &quot;-&quot; + IntToString(lv_stormid)));
                        gv_stormUnitTarget[lv_stormgroup][lv_stormid] = PointFromName((&quot;Storm_target&quot; + IntToString(lv_stormgroup) + &quot;-&quot; + IntToString(lv_stormid)));
                        gv_stormUnitTarget0[lv_stormgroup][lv_stormid] = PointFromName((&quot;Storm_target&quot; + IntToString(lv_stormgroup) + &quot;-&quot; + IntToString(lv_stormid) + &quot;a&quot;));
                    }
                }
                gv_hybridDelayPerGroup[0] = 125;
                gv_hybridDelayPerGroup[1] = 125;
                gv_hybridDelayPerGroup[2] = 280;
                gv_hybridDelayPerGroup[3] = libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 120, 110, 110, 100, 100, 100);
                gv_hybridDelayPerGroup[4] = libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 65, 55, 50, 50, 45, 45);
                gv_hybridDelayPerGroup[5] = libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 110, 100, 100, 90, 90, 90);
                gv_hybridDelayPerGroup[6] = libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 100, 90, 80, 80, 75, 75);
                gv_hybridDelayPerGroup[7] = libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 190, 185, 180, 180, 175, 175);
                auto6417363C_val = RandomInt(1, 6);
                if (auto6417363C_val == 1) {
                    gf_SetDoubleVariant(ge_DoubleVariant_A, 1);
                }
                else if (auto6417363C_val == 2) {
                    gf_SetDoubleVariant(ge_DoubleVariant_B, 1);
                }
                else if (auto6417363C_val == 3) {
                    gf_SetDoubleVariant(ge_DoubleVariant_C, 1);
                }
                else if (auto6417363C_val == 4) {
                    gf_SetDoubleVariant(ge_DoubleVariant_D, 1);
                }
                else if (auto6417363C_val == 5) {
                    gf_SetDoubleVariant(ge_DoubleVariant_B, 1);
                }
                else if (auto6417363C_val == 6) {
                    gf_SetDoubleVariant(ge_DoubleVariant_D, 1);
                }
                else {
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_ArraySetup_Init () {
                gt_ArraySetup = TriggerCreate(&quot;gt_ArraySetup_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Start Crystal Controller
            //--------------------------------------------------------------------------------------------------
            bool gt_StartCrystalController_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                Wait(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 210, 195, 190, 185, 180, 180), c_timeGame);
                gf_PickCrystal(1, false, 0);
                Wait(72.0, c_timeGame);
                TriggerExecute(gt_FirstCrystalreminder, true, false);
                Wait(158.0, c_timeGame);
                gf_PickCrystal(2, true, 3);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_StartCrystalController_Init () {
                gt_StartCrystalController = TriggerCreate(&quot;gt_StartCrystalController_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: OBSOLETE double setup
            //--------------------------------------------------------------------------------------------------
            bool gt_OBSOLETEdoublesetup_Func (bool testConds, bool runActions) {
                int auto8157CAE2_val;
                // Actions
                if (!runActions) {
                    return true;
                }
                auto8157CAE2_val = RandomInt(1, 4);
                if (auto8157CAE2_val == 1) {
                    gf_SetDoubleVariant(ge_DoubleVariant_A, 1);
                    gf_SetDoubleVariant(ge_DoubleVariant_B, 2);
                }
                else if (auto8157CAE2_val == 2) {
                    gf_SetDoubleVariant(ge_DoubleVariant_A, 1);
                    gf_SetDoubleVariant(ge_DoubleVariant_D, 2);
                }
                else if (auto8157CAE2_val == 3) {
                    gf_SetDoubleVariant(ge_DoubleVariant_C, 1);
                    gf_SetDoubleVariant(ge_DoubleVariant_D, 2);
                }
                else if (auto8157CAE2_val == 4) {
                    gf_SetDoubleVariant(ge_DoubleVariant_B, 1);
                    gf_SetDoubleVariant(ge_DoubleVariant_C, 2);
                }
                else {
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_OBSOLETEdoublesetup_Init () {
                gt_OBSOLETEdoublesetup = TriggerCreate(&quot;gt_OBSOLETEdoublesetup_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Indicate path - Wave 1
            //--------------------------------------------------------------------------------------------------
            bool gt_IndicatepathWave1_Func (bool testConds, bool runActions) {
                int auto3D32CF66_n;
                int auto3D32CF66_i;
                // Variable Declarations
                int lv_pd;
                // Variable Initialization
                // Conditions
                if (testConds) {
                    if (!((gv_doubleActive == false))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                Wait(1.0, c_timeGame);
                PathCreateForUnitType(PlayerGroupAll(), &quot;Probe&quot;, 1, gv_crystalTransportSpawnPoint[gv_activeCrystalLevel[1]][gv_activeCrystalID[1]]);
                lv_pd = PathLastCreated();
                PathSetDestinationPoint(lv_pd, gv_deliveryPoint[gv_crystalDeliverySiteID[gv_activeCrystalLevel[1]][gv_activeCrystalID[1]]]);
                PathSetVisible(lv_pd, c_pathLocationWorld, false);
                PathSetLineWidth(lv_pd, c_pathLocationMinimap, 8.0);
                if ((gv_activeCrystalLevel[1] == 5) &amp;&amp; (gv_activeCrystalID[1] == 3)) {
                    PathAddWayPoint(lv_pd, PointFromId(1417371748));
                }
                Wait(1.0, c_timeGame);
                auto3D32CF66_n = 2;
                for (auto3D32CF66_i = 1; auto3D32CF66_i &lt;= auto3D32CF66_n; auto3D32CF66_i += 1) {
                    PathSetVisible(lv_pd, c_pathLocationAll, false);
                    Wait(1.0, c_timeGame);
                    PathSetVisible(lv_pd, c_pathLocationMinimap, true);
                    Wait(1.0, c_timeGame);
                }
                PathDestroy(lv_pd);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_IndicatepathWave1_Init () {
                gt_IndicatepathWave1 = TriggerCreate(&quot;gt_IndicatepathWave1_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Indicate path - Wave 2
            //--------------------------------------------------------------------------------------------------
            bool gt_IndicatepathWave2_Func (bool testConds, bool runActions) {
                int autoBD619833_n;
                int autoBD619833_i;
                // Variable Declarations
                int lv_pd;
                // Variable Initialization
                // Conditions
                if (testConds) {
                    if (!((gv_doubleActive == false))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                Wait(1.0, c_timeGame);
                PathCreateForUnitType(PlayerGroupAll(), &quot;Probe&quot;, 1, gv_crystalTransportSpawnPoint[gv_activeCrystalLevel[2]][gv_activeCrystalID[2]]);
                lv_pd = PathLastCreated();
                PathSetDestinationPoint(lv_pd, gv_deliveryPoint[gv_crystalDeliverySiteID[gv_activeCrystalLevel[2]][gv_activeCrystalID[2]]]);
                PathSetVisible(lv_pd, c_pathLocationWorld, false);
                PathSetLineWidth(lv_pd, c_pathLocationMinimap, 8.0);
                if ((gv_activeCrystalLevel[2] == 5) &amp;&amp; (gv_activeCrystalID[2] == 3)) {
                    PathAddWayPoint(lv_pd, PointFromId(1417371748));
                }
                Wait(1.0, c_timeGame);
                autoBD619833_n = 2;
                for (autoBD619833_i = 1; autoBD619833_i &lt;= autoBD619833_n; autoBD619833_i += 1) {
                    PathSetVisible(lv_pd, c_pathLocationAll, false);
                    Wait(1.0, c_timeGame);
                    PathSetVisible(lv_pd, c_pathLocationMinimap, true);
                    Wait(1.0, c_timeGame);
                }
                PathDestroy(lv_pd);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_IndicatepathWave2_Init () {
                gt_IndicatepathWave2 = TriggerCreate(&quot;gt_IndicatepathWave2_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Crystal is Attacked - Wave 1
            //--------------------------------------------------------------------------------------------------
            bool gt_CrystalisAttackedWave1_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((EventUnit() == gv_activeCrystalUnit[1]))) {
                        return false;
                    }
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                TriggerExecute(gt_Crystalisattacked, true, false);
                libCOMI_gf_DestroyPingCoop(gv_activeTransportPing[1]);
                libCOMI_gf_CreatePingCoop(PlayerGroupAll(), &quot;PingAlert&quot;, UnitGetPosition(gv_activeCrystalUnit[1]), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0);
                gv_activeTransportPing[1] = PingLastCreated();
                libCOMI_gf_DisplayUnitProgressBar(gv_activeCrystalUnit[1], StringExternal(&quot;Param/Value/B642C380&quot;), 0, 100);
                libCOMI_gf_ShowHideUnitProgressBar2(gv_activeCrystalUnit[1], false);
                while (((UnitIsAlive(gv_activeCrystalUnit[1]) == true) || (gv_activeCrystalIsTransported[1] == false))) {
                    libCOMI_gf_SetUnitProgressBarProgress(gv_activeCrystalUnit[1], FixedToInt(UnitGetPropertyFixed(gv_activeCrystalUnit[1], c_unitPropLifePercent, c_unitPropCurrent)));
                    Wait(0.0625, c_timeGame);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_CrystalisAttackedWave1_Init () {
                gt_CrystalisAttackedWave1 = TriggerCreate(&quot;gt_CrystalisAttackedWave1_Func&quot;);
                TriggerEnable(gt_CrystalisAttackedWave1, false);
                TriggerAddEventUnitAttacked2(gt_CrystalisAttackedWave1, null, null);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Crystal is Attacked - Wave 2
            //--------------------------------------------------------------------------------------------------
            bool gt_CrystalisAttackedWave2_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((EventUnit() == gv_activeCrystalUnit[2]))) {
                        return false;
                    }
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                TriggerExecute(gt_Crystalisattacked, true, false);
                libCOMI_gf_DestroyPingCoop(gv_activeTransportPing[2]);
                libCOMI_gf_CreatePingCoop(PlayerGroupAll(), &quot;PingAlert&quot;, UnitGetPosition(gv_activeCrystalUnit[2]), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0);
                gv_activeTransportPing[2] = PingLastCreated();
                libCOMI_gf_DisplayUnitProgressBar(gv_activeCrystalUnit[2], StringExternal(&quot;Param/Value/D0F420A9&quot;), 0, 100);
                libCOMI_gf_ShowHideUnitProgressBar2(gv_activeCrystalUnit[2], false);
                while (((UnitIsAlive(gv_activeCrystalUnit[2]) == true) || (gv_activeCrystalIsTransported[2] == false))) {
                    libCOMI_gf_SetUnitProgressBarProgress(gv_activeCrystalUnit[2], FixedToInt(UnitGetPropertyFixed(gv_activeCrystalUnit[2], c_unitPropLifePercent, c_unitPropCurrent)));
                    Wait(0.0625, c_timeGame);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_CrystalisAttackedWave2_Init () {
                gt_CrystalisAttackedWave2 = TriggerCreate(&quot;gt_CrystalisAttackedWave2_Func&quot;);
                TriggerEnable(gt_CrystalisAttackedWave2, false);
                TriggerAddEventUnitAttacked2(gt_CrystalisAttackedWave2, null, null);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Crystal Destroyed - Wave 1
            //--------------------------------------------------------------------------------------------------
            bool gt_CrystalDestroyedWave1_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((EventUnit() == gv_activeCrystalUnit[1]))) {
                        return false;
                    }
                    if (!((EventUnitDamageDeathCheck(c_deathTypeRemove) == false))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                gv_lastCriticalEventPosition = UnitGetPosition(EventUnit());
                gv_activeCrystalIsInGame[1] = false;
                TriggerEnable(gt_StartCrystalTransportWave1, false);
                libCOMI_gf_DestroyPingCoop(gv_activeTransportPing[1]);
                libNtve_gf_KillModel(gv_activeCrystalReticle[1]);
                TriggerExecute(gt_ObjectiveDontLoseCrystalsUpdate, true, true);
                if ((gv_objectiveDontLoseCrystalsLost &lt; gv_objectiveDontLoseCrystalsGoal)) {
                    TriggerExecute(gt_Crystaldestroyed, true, false);
                }
                if ((gv_doubleActive == true)) {
                    TriggerExecute(gt_InterruptDoubleTransport, true, false);
                    if ((UnitIsAlive(gv_activeCrystalUnit[2]) == true) &amp;&amp; (UnitIsAlive(gv_activeTransportUnit[1]) == false) &amp;&amp; (UnitIsAlive(gv_activeTransportUnit[2]) == false)) {
                        gv_doubleActive = false;
                        Wait(RandomInt(12, 22), c_timeGame);
                        gf_SendHybridsAfterCrystal(2, true);
                    }
                }
                else {
                    TriggerExecute(gt_Preparenextpick, true, false);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_CrystalDestroyedWave1_Init () {
                gt_CrystalDestroyedWave1 = TriggerCreate(&quot;gt_CrystalDestroyedWave1_Func&quot;);
                TriggerAddEventUnitDied(gt_CrystalDestroyedWave1, null);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Crystal Destroyed - Wave 2
            //--------------------------------------------------------------------------------------------------
            bool gt_CrystalDestroyedWave2_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((EventUnit() == gv_activeCrystalUnit[2]))) {
                        return false;
                    }
                    if (!((EventUnitDamageDeathCheck(c_deathTypeRemove) == false))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                gv_lastCriticalEventPosition = UnitGetPosition(EventUnit());
                gv_activeCrystalIsInGame[2] = false;
                TriggerExecute(gt_InterruptDoubleTransport, true, false);
                TriggerEnable(gt_StartCrystalTransportWave2, false);
                libCOMI_gf_DestroyPingCoop(gv_activeTransportPing[2]);
                libNtve_gf_KillModel(gv_activeCrystalReticle[2]);
                TriggerExecute(gt_ObjectiveDontLoseCrystalsUpdate, true, true);
                if ((gv_objectiveDontLoseCrystalsLost &lt; gv_objectiveDontLoseCrystalsGoal)) {
                    TriggerExecute(gt_Crystaldestroyed, true, false);
                }
                if ((gv_doubleActive == false) &amp;&amp; (gv_objectiveEscortCrystalsEscorted &gt;= (gv_objectiveEscortCrystalsGoal - 2)) &amp;&amp; (gv_activeCrystalIsInGame[1] == false)) {
                    TriggerExecute(gt_Preparenextpick, true, false);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_CrystalDestroyedWave2_Init () {
                gt_CrystalDestroyedWave2 = TriggerCreate(&quot;gt_CrystalDestroyedWave2_Func&quot;);
                TriggerAddEventUnitDied(gt_CrystalDestroyedWave2, null);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Transport is Attacked - Wave 1
            //--------------------------------------------------------------------------------------------------
            bool gt_TransportisAttackedWave1_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((EventUnit() == gv_activeTransportUnit[1]))) {
                        return false;
                    }
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                if (((gv_objectiveEscortCrystalsEscorted == 0) || (gv_doubleBothCrystalsAreInside == true))) {
                    TriggerEnable(TriggerGetCurrent(), false);
                    TriggerExecute(gt_Transportattacked, true, false);
                    libCOMI_gf_CreatePingCoop(PlayerGroupAll(), &quot;PingWarning&quot;, UnitGetPosition(gv_activeTransportUnit[1]), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 5.0);
                    PingSetUnit(PingLastCreated(), gv_activeTransportUnit[1]);
                }
                else {
                    if ((UnitGetPropertyFixed(gv_activeTransportUnit[1], c_unitPropLifePercent, c_unitPropCurrent) != 100.0)) {
                        TriggerEnable(TriggerGetCurrent(), false);
                        TriggerExecute(gt_Transportattacked, true, false);
                        libCOMI_gf_CreatePingCoop(PlayerGroupAll(), &quot;PingWarning&quot;, UnitGetPosition(gv_activeTransportUnit[1]), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 5.0);
                        PingSetUnit(PingLastCreated(), gv_activeTransportUnit[1]);
                    }
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_TransportisAttackedWave1_Init () {
                gt_TransportisAttackedWave1 = TriggerCreate(&quot;gt_TransportisAttackedWave1_Func&quot;);
                TriggerEnable(gt_TransportisAttackedWave1, false);
                TriggerAddEventUnitAttacked2(gt_TransportisAttackedWave1, null, null);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Transport is Attacked - Wave 2
            //--------------------------------------------------------------------------------------------------
            bool gt_TransportisAttackedWave2_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((EventUnit() == gv_activeTransportUnit[2]))) {
                        return false;
                    }
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                if (((gv_objectiveEscortCrystalsEscorted == 0) || (gv_doubleBothCrystalsAreInside == true))) {
                    TriggerEnable(TriggerGetCurrent(), false);
                    TriggerExecute(gt_Transportattacked, true, false);
                    libCOMI_gf_CreatePingCoop(PlayerGroupAll(), &quot;PingWarning&quot;, UnitGetPosition(gv_activeTransportUnit[2]), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 5.0);
                    PingSetUnit(PingLastCreated(), gv_activeTransportUnit[2]);
                }
                else {
                    if ((UnitGetPropertyFixed(gv_activeTransportUnit[2], c_unitPropLifePercent, c_unitPropCurrent) != 100.0)) {
                        TriggerEnable(TriggerGetCurrent(), false);
                        TriggerExecute(gt_Transportattacked, true, false);
                        libCOMI_gf_CreatePingCoop(PlayerGroupAll(), &quot;PingWarning&quot;, UnitGetPosition(gv_activeTransportUnit[2]), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 5.0);
                        PingSetUnit(PingLastCreated(), gv_activeTransportUnit[2]);
                    }
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_TransportisAttackedWave2_Init () {
                gt_TransportisAttackedWave2 = TriggerCreate(&quot;gt_TransportisAttackedWave2_Func&quot;);
                TriggerEnable(gt_TransportisAttackedWave2, false);
                TriggerAddEventUnitAttacked2(gt_TransportisAttackedWave2, null, null);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Transport Destroyed - Wave 1
            //--------------------------------------------------------------------------------------------------
            bool gt_TransportDestroyedWave1_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((EventUnit() == gv_activeTransportUnit[1]))) {
                        return false;
                    }
                    if (!((EventUnitDamageDeathCheck(c_deathTypeRemove) == false))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(gt_TransportReachedDestinationWave1, false);
                TriggerEnable(gt_NoEmemiesatDestinationWave1, false);
                TriggerEnable(gt_TransportisAttackedWave1, false);
                gv_lastCriticalEventPosition = UnitGetPosition(EventUnit());
                gv_activeCrystalIsInGame[1] = false;
                gv_activeCrystalIsTransported[1] = false;
                libCOMI_gf_DestroyPingCoop(gv_activeTransportPing[1]);
                libCOMI_gf_DestroyPingCoop(gv_activeDeliveryPing[1]);
                PathDestroy(gv_activePathDisplay[1]);
                libNtve_gf_KillModel(gv_activeDeliveryFailReticle[1]);
                TextTagDestroy(gv_activeDeliveryFailTextTag[1]);
                if ((gv_stormCountdownWaiting == true)) {
                    gv_stormCountdownWaiting = false;
                    TimerPause(gv_stormCountdownTimer, false);
                }
                if ((gv_doubleActive == true)) {
                    libCOMI_gf_DestroyPingCoop(gv_activeTransportPing[2]);
                    libCOMI_gf_DestroyPingCoop(gv_activeDeliveryPing[2]);
                    PathDestroy(gv_activePathDisplay[2]);
                    libNtve_gf_KillModel(gv_activeDeliveryFailReticle[2]);
                    TextTagDestroy(gv_activeDeliveryFailTextTag[2]);
                    TriggerEnable(gt_TransportReachedDestinationWave2, false);
                    TriggerEnable(gt_NoEmemiesatDestinationWave2, false);
                    if ((gv_doubleBothCrystalsAreInside == true)) {
                        gv_objectiveDontLoseCrystalsLost += 1;
                        gv_doubleBothCrystalsAreInside = false;
                        gv_activeCrystalIsInGame[2] = false;
                        gv_activeCrystalIsTransported[2] = false;
                    }
                    else {
                        TriggerExecute(gt_ReactivateCrystal, true, false);
                    }
                }
                TriggerExecute(gt_ObjectiveDontLoseCrystalsUpdate, true, true);
                if ((gv_objectiveDontLoseCrystalsLost &lt; gv_objectiveDontLoseCrystalsGoal)) {
                    TriggerExecute(gt_Transportdestroyed, true, false);
                }
                if ((gv_doubleActive == false)) {
                    gv_hybridDelayPerGroup[gv_objectiveEscortCrystalsEscorted] += 20;
                    TriggerExecute(gt_Preparenextpick, true, false);
                }
                else {
                    TriggerExecute(gt_DoubleProlongHybridDelay, true, false);
                }
                TriggerExecute(gt_InterruptDoubleTransport, true, false);
                TriggerEnable(gt_PickupSecondCrystalWave1, false);
                TriggerEnable(gt_PickupSecondCrystalWave2, false);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_TransportDestroyedWave1_Init () {
                gt_TransportDestroyedWave1 = TriggerCreate(&quot;gt_TransportDestroyedWave1_Func&quot;);
                TriggerAddEventUnitDied(gt_TransportDestroyedWave1, null);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Transport Destroyed - Wave 2
            //--------------------------------------------------------------------------------------------------
            bool gt_TransportDestroyedWave2_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((EventUnit() == gv_activeTransportUnit[2]))) {
                        return false;
                    }
                    if (!((EventUnitDamageDeathCheck(c_deathTypeRemove) == false))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(gt_TransportReachedDestinationWave2, false);
                TriggerEnable(gt_NoEmemiesatDestinationWave2, false);
                TriggerEnable(gt_TransportisAttackedWave2, false);
                gv_lastCriticalEventPosition = UnitGetPosition(EventUnit());
                gv_activeCrystalIsInGame[2] = false;
                gv_activeCrystalIsTransported[2] = false;
                libCOMI_gf_DestroyPingCoop(gv_activeTransportPing[2]);
                libCOMI_gf_DestroyPingCoop(gv_activeDeliveryPing[2]);
                PathDestroy(gv_activePathDisplay[2]);
                libNtve_gf_KillModel(gv_activeDeliveryFailReticle[2]);
                TextTagDestroy(gv_activeDeliveryFailTextTag[2]);
                if ((gv_stormCountdownWaiting == true)) {
                    gv_stormCountdownWaiting = false;
                    TimerPause(gv_stormCountdownTimer, false);
                }
                if ((gv_doubleActive == true)) {
                    libCOMI_gf_DestroyPingCoop(gv_activeTransportPing[1]);
                    libCOMI_gf_DestroyPingCoop(gv_activeDeliveryPing[1]);
                    PathDestroy(gv_activePathDisplay[1]);
                    libNtve_gf_KillModel(gv_activeDeliveryFailReticle[2]);
                    TextTagDestroy(gv_activeDeliveryFailTextTag[2]);
                    TriggerEnable(gt_TransportReachedDestinationWave1, false);
                    TriggerEnable(gt_NoEmemiesatDestinationWave1, false);
                    if ((gv_doubleBothCrystalsAreInside == true)) {
                        gv_objectiveDontLoseCrystalsLost += 1;
                        gv_doubleBothCrystalsAreInside = false;
                        gv_activeCrystalIsInGame[1] = false;
                        gv_activeCrystalIsTransported[1] = false;
                    }
                    else {
                        TriggerExecute(gt_ReactivateCrystal, true, false);
                    }
                }
                TriggerExecute(gt_ObjectiveDontLoseCrystalsUpdate, true, true);
                if ((gv_objectiveDontLoseCrystalsLost &lt; gv_objectiveDontLoseCrystalsGoal)) {
                    TriggerExecute(gt_Transportdestroyed, true, false);
                }
                TriggerExecute(gt_InterruptDoubleTransport, true, false);
                TriggerEnable(gt_PickupSecondCrystalWave1, false);
                TriggerEnable(gt_PickupSecondCrystalWave2, false);
                if ((gv_doubleActive == false) &amp;&amp; (gv_objectiveEscortCrystalsEscorted &gt;= (gv_objectiveEscortCrystalsGoal - 2)) &amp;&amp; (gv_activeCrystalIsInGame[1] == false)) {
                    TriggerExecute(gt_Preparenextpick, true, false);
                }
                if ((gv_doubleActive == true)) {
                    TriggerExecute(gt_DoubleProlongHybridDelay, true, false);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_TransportDestroyedWave2_Init () {
                gt_TransportDestroyedWave2 = TriggerCreate(&quot;gt_TransportDestroyedWave2_Func&quot;);
                TriggerAddEventUnitDied(gt_TransportDestroyedWave2, null);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Prepare next pick
            //--------------------------------------------------------------------------------------------------
            bool gt_Preparenextpick_Func (bool testConds, bool runActions) {
                int auto7973645B_val;
                // Variable Declarations
                int lv_mintime;
                int lv_maxtime;
                bool lv_picksecondary;
                // Variable Initialization
                lv_mintime = 35;
                lv_maxtime = 45;
                // Actions
                if (!runActions) {
                    return true;
                }
                auto7973645B_val = gv_objectiveEscortCrystalsEscorted;
                if (auto7973645B_val == 0) {
                    lv_mintime = 25;
                    lv_maxtime = 30;
                }
                else if (auto7973645B_val == 1) {
                    lv_mintime = 44;
                    lv_maxtime = 46;
                }
                else if (auto7973645B_val == 2) {
                    if ((gv_gameStage &lt; 2)) {
                        TriggerEnable(TriggerGetCurrent(), false);
                        return true;
                    }
                    else {
                        lv_mintime = 25;
                        lv_maxtime = 35;
                    }
                }
                else if (auto7973645B_val == 3) {
                    if ((gv_gameStage &lt; 2)) {
                        lv_mintime = 80;
                        lv_maxtime = 85;
                    }
                    else {
                        lv_mintime = 32;
                        lv_maxtime = 36;
                    }
                }
                else if (auto7973645B_val == 4) {
                    if ((gv_baseWaveVariant[2] == 1)) {
                        lv_mintime = 74;
                        lv_maxtime = 78;
                    }
                    else {
                        lv_mintime = 64;
                        lv_maxtime = 68;
                    }
                }
                else {
                }
                if ((gv_spawnedCrystalsAttempt[gv_objectiveEscortCrystalsEscorted] &gt; 0)) {
                    if (((gv_activeCrystalIsInGame[1] == true) || (gv_activeCrystalIsInGame[2] == true))) {
                        lv_mintime = 40;
                        lv_maxtime = 45;
                    }
                    else {
                        lv_mintime = 28;
                        lv_maxtime = 32;
                    }
                }
                Wait(RandomInt(lv_mintime, lv_maxtime), c_timeGame);
                gf_PickCrystal(1, false, 0);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_Preparenextpick_Init () {
                gt_Preparenextpick = TriggerCreate(&quot;gt_Preparenextpick_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Prepare pick after fifth
            //--------------------------------------------------------------------------------------------------
            bool gt_Preparepickafterfifth_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((gv_objectiveDontLoseCrystalsLost == 0) &amp;&amp; ((PlayerGetPropertyFixed(gv_pLAYER_01_USER, c_playerPropSuppliesUsed) + PlayerGetPropertyFixed(gv_pLAYER_02_USER, c_playerPropSuppliesUsed)) &gt; libCOMI_gf_DifficultyValueFixed2(libCOMI_gf_GetMissionDifficulty(), 175.0, 200.0, 225.0, 275.0, 275.0, 275.0))) {
                    TriggerExecute(gt_StartDoubleTransport, true, false);
                }
                else {
                    gv_secondaryPicked = true;
                    TriggerExecute(gt_ClearReservationsforDouble, true, true);
                    gf_PickCrystal(1, false, 0);
                    Wait(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 85, 80, 75, 75, 70, 70), c_timeGame);
                    gf_PickCrystal(2, false, 0);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_Preparepickafterfifth_Init () {
                gt_Preparepickafterfifth = TriggerCreate(&quot;gt_Preparepickafterfifth_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Prepare next pick OBSOLETE
            //--------------------------------------------------------------------------------------------------
            bool gt_PreparenextpickOBSOLETE_Func (bool testConds, bool runActions) {
                int auto474D7478_val;
                // Variable Declarations
                int lv_mintime;
                int lv_maxtime;
                bool lv_picksecondary;
                // Variable Initialization
                lv_mintime = 50;
                lv_maxtime = 70;
                // Actions
                if (!runActions) {
                    return true;
                }
                auto474D7478_val = gv_objectiveEscortCrystalsEscorted;
                if (auto474D7478_val == 0) {
                    lv_mintime = 25;
                    lv_maxtime = 30;
                }
                else if (auto474D7478_val == 1) {
                    lv_mintime = 44;
                    lv_maxtime = 46;
                }
                else if (auto474D7478_val == 2) {
                    if ((gv_gameStage &lt; 2)) {
                        TriggerEnable(TriggerGetCurrent(), false);
                        return true;
                    }
                    else {
                        lv_mintime = 25;
                        lv_maxtime = 35;
                    }
                }
                else if (auto474D7478_val == 3) {
                    lv_mintime = 80;
                    lv_maxtime = 85;
                }
                else if (auto474D7478_val == 4) {
                    lv_mintime = 74;
                    lv_maxtime = 78;
                }
                else if (auto474D7478_val == 5) {
                    lv_mintime = 105;
                    lv_maxtime = 110;
                    if ((gv_objectiveDontLoseCrystalsLost == 0) &amp;&amp; ((PlayerGetPropertyFixed(gv_pLAYER_01_USER, c_playerPropSuppliesUsed) + PlayerGetPropertyFixed(gv_pLAYER_02_USER, c_playerPropSuppliesUsed)) &gt; libCOMI_gf_DifficultyValueFixed2(libCOMI_gf_GetMissionDifficulty(), 175.0, 175.0, 200.0, 250.0, 250.0, 250.0))) {
                        Wait(RandomInt(110, 115), c_timeGame);
                        TriggerExecute(gt_StartDoubleTransport, true, false);
                        return true;
                    }
                    else {
                        if ((gv_secondaryPicked == false)) {
                            gv_secondaryPicked = true;
                            lv_picksecondary = true;
                        }
                    }
                }
                else {
                }
                Wait(RandomInt(lv_mintime, lv_maxtime), c_timeGame);
                gf_PickCrystal(1, false, 0);
                if ((lv_picksecondary == true)) {
                    Wait(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 75, 70, 70, 65, 65, 65), c_timeGame);
                    gf_PickCrystal(2, false, 0);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_PreparenextpickOBSOLETE_Init () {
                gt_PreparenextpickOBSOLETE = TriggerCreate(&quot;gt_PreparenextpickOBSOLETE_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Start Crystal Transport - Wave 1
            //--------------------------------------------------------------------------------------------------
            bool gt_StartCrystalTransportWave1_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                    if (!(((UnitCount(null, gv_pLAYER_01_USER, gv_activeCrystalRegion[1], UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterStructure) | (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32)) | (1 &lt;&lt; (c_targetFilterInvulnerable - 32))), 0) &gt; 0) || (UnitCount(null, gv_pLAYER_02_USER, gv_activeCrystalRegion[1], UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterStructure) | (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32)) | (1 &lt;&lt; (c_targetFilterInvulnerable - 32))), 0) &gt; 0)))) {
                        return false;
                    }
                    if (!((UnitCount(null, gv_pLAYER_03_Player01Enemy, gv_activeCrystalRegion[1], UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterStructure) | (1 &lt;&lt; c_targetFilterMissile) | (1 &lt;&lt; c_targetFilterCloaked), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0) == 0))) {
                        return false;
                    }
                    if (!((UnitCount(null, gv_pLAYER_04_Player02Enemy, gv_activeCrystalRegion[1], UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterStructure) | (1 &lt;&lt; c_targetFilterMissile) | (1 &lt;&lt; c_targetFilterCloaked), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0) == 0))) {
                        return false;
                    }
                    if (!((UnitCount(null, gv_pLAYER_05_Player03Hybrids, gv_activeCrystalRegion[1], UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterStructure) | (1 &lt;&lt; c_targetFilterMissile) | (1 &lt;&lt; c_targetFilterCloaked), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32)) | (1 &lt;&lt; (c_targetFilterInvulnerable - 32))), 0) == 0))) {
                        return false;
                    }
                    if (!((UnitCount(&quot;Bunker&quot;, gv_pLAYER_04_Player02Enemy, gv_activeCrystalRegion[1], UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32)) | (1 &lt;&lt; (c_targetFilterInvulnerable - 32))), 0) == 0))) {
                        return false;
                    }
                    if (!((UnitCount(&quot;SpineCrawler&quot;, gv_pLAYER_04_Player02Enemy, gv_activeCrystalRegion[1], UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32)) | (1 &lt;&lt; (c_targetFilterInvulnerable - 32))), 0) == 0))) {
                        return false;
                    }
                    if (!((UnitCount(&quot;PhotonCannon&quot;, gv_pLAYER_04_Player02Enemy, gv_activeCrystalRegion[1], UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32)) | (1 &lt;&lt; (c_targetFilterInvulnerable - 32))), 0) == 0))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                libCOMI_gf_ShowHideUnitProgressBar(gv_activeCrystalUnit[1], false);
                if ((gv_doubleActive == true)) {
                    TriggerEnable(gt_StartCrystalTransportWave2, false);
                }
                gf_StartTransport(1);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_StartCrystalTransportWave1_Init () {
                gt_StartCrystalTransportWave1 = TriggerCreate(&quot;gt_StartCrystalTransportWave1_Func&quot;);
                TriggerEnable(gt_StartCrystalTransportWave1, false);
                TriggerAddEventTimePeriodic(gt_StartCrystalTransportWave1, 1.0, c_timeGame);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Start Crystal Transport - Wave 2
            //--------------------------------------------------------------------------------------------------
            bool gt_StartCrystalTransportWave2_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                    if (!(((UnitCount(null, gv_pLAYER_01_USER, gv_activeCrystalRegion[2], UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterStructure) | (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32)) | (1 &lt;&lt; (c_targetFilterInvulnerable - 32))), 0) &gt; 0) || (UnitCount(null, gv_pLAYER_02_USER, gv_activeCrystalRegion[2], UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterStructure) | (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32)) | (1 &lt;&lt; (c_targetFilterInvulnerable - 32))), 0) &gt; 0)))) {
                        return false;
                    }
                    if (!((UnitCount(null, gv_pLAYER_03_Player01Enemy, gv_activeCrystalRegion[2], UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterStructure) | (1 &lt;&lt; c_targetFilterMissile) | (1 &lt;&lt; c_targetFilterCloaked), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0) == 0))) {
                        return false;
                    }
                    if (!((UnitCount(null, gv_pLAYER_04_Player02Enemy, gv_activeCrystalRegion[2], UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterStructure) | (1 &lt;&lt; c_targetFilterMissile) | (1 &lt;&lt; c_targetFilterCloaked), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0) == 0))) {
                        return false;
                    }
                    if (!((UnitCount(null, gv_pLAYER_05_Player03Hybrids, gv_activeCrystalRegion[2], UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterStructure) | (1 &lt;&lt; c_targetFilterMissile) | (1 &lt;&lt; c_targetFilterCloaked), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32)) | (1 &lt;&lt; (c_targetFilterInvulnerable - 32))), 0) == 0))) {
                        return false;
                    }
                    if (!((UnitCount(&quot;Bunker&quot;, gv_pLAYER_04_Player02Enemy, gv_activeCrystalRegion[2], UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32)) | (1 &lt;&lt; (c_targetFilterInvulnerable - 32))), 0) == 0))) {
                        return false;
                    }
                    if (!((UnitCount(&quot;SpineCrawler&quot;, gv_pLAYER_04_Player02Enemy, gv_activeCrystalRegion[2], UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32)) | (1 &lt;&lt; (c_targetFilterInvulnerable - 32))), 0) == 0))) {
                        return false;
                    }
                    if (!((UnitCount(&quot;PhotonCannon&quot;, gv_pLAYER_04_Player02Enemy, gv_activeCrystalRegion[2], UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32)) | (1 &lt;&lt; (c_targetFilterInvulnerable - 32))), 0) == 0))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                libCOMI_gf_ShowHideUnitProgressBar(gv_activeCrystalUnit[2], false);
                if ((gv_doubleActive == true)) {
                    TriggerEnable(gt_StartCrystalTransportWave1, false);
                }
                gf_StartTransport(2);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_StartCrystalTransportWave2_Init () {
                gt_StartCrystalTransportWave2 = TriggerCreate(&quot;gt_StartCrystalTransportWave2_Func&quot;);
                TriggerEnable(gt_StartCrystalTransportWave2, false);
                TriggerAddEventTimePeriodic(gt_StartCrystalTransportWave2, 1.0, c_timeGame);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Transport Reached Destination - Wave 1
            //--------------------------------------------------------------------------------------------------
            bool gt_TransportReachedDestinationWave1_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_relevantwave;
                // Variable Initialization
                lv_relevantwave = 1;
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                    if (!((UnitCount(&quot;CrystalTransport&quot;, gv_pLAYER_11_Transport, gv_deliveryPointRegion[gv_activeDeliveryID[1]], UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0) &gt; 0))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                PathDestroy(gv_activePathDisplay[1]);
                libCOMI_gf_DestroyPingCoop(gv_activeDeliveryPing[1]);
                if ((gv_doubleActive == true)) {
                    lv_relevantwave = 2;
                }
                RegionSetCenter(RegionFromId(27), UnitGetPosition(gv_activeTransportUnit[lv_relevantwave]));
                TriggerEnable(gt_NoEmemiesatDestinationWave1, true);
                Wait(0.5, c_timeGame);
                if ((gv_stormCountdownWaiting == true)) {
                    gv_stormCountdownWaiting = false;
                    TimerPause(gv_stormCountdownTimer, false);
                }
                if ((gv_activeCrystalIsInGame[1] == true)) {
                    libCOMI_gf_AttachReticleEffectAndTextTagOnUnit(libCOMI_ge_CampaginReticleType_ProtossMainObjective, libCOMI_ge_CampaginReticleSize_Large, StringExternal(&quot;Param/Value/2F90B207&quot;), gv_activeTransportUnit[lv_relevantwave], &quot;Ref_Center&quot;);
                    gv_activeDeliveryFailReticle[1] = libNtve_gf_ActorLastCreated();
                    gv_activeDeliveryFailTextTag[1] = TextTagLastCreated();
                    ActorSend(libNtve_gf_ActorLastCreated(), &quot;SetTeamColor 192,255,255 192,255,255&quot;);
                    TextTagSetPosition(TextTagLastCreated(), UnitGetPosition(gv_activeTransportUnit[lv_relevantwave]), 3.2);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_TransportReachedDestinationWave1_Init () {
                gt_TransportReachedDestinationWave1 = TriggerCreate(&quot;gt_TransportReachedDestinationWave1_Func&quot;);
                TriggerEnable(gt_TransportReachedDestinationWave1, false);
                TriggerAddEventTimePeriodic(gt_TransportReachedDestinationWave1, 1.0, c_timeGame);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Transport Reached Destination - Wave 2
            //--------------------------------------------------------------------------------------------------
            bool gt_TransportReachedDestinationWave2_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_relevantwave;
                // Variable Initialization
                lv_relevantwave = 2;
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                    if (!((UnitCount(&quot;CrystalTransport&quot;, gv_pLAYER_11_Transport, gv_deliveryPointRegion[gv_activeDeliveryID[2]], UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0) &gt; 0))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                PathDestroy(gv_activePathDisplay[2]);
                libCOMI_gf_DestroyPingCoop(gv_activeDeliveryPing[2]);
                if ((gv_doubleActive == true)) {
                    lv_relevantwave = 1;
                }
                RegionSetCenter(RegionFromId(28), UnitGetPosition(gv_activeTransportUnit[lv_relevantwave]));
                TriggerEnable(gt_NoEmemiesatDestinationWave2, true);
                Wait(0.5, c_timeGame);
                if ((gv_activeCrystalIsInGame[2] == true)) {
                    libCOMI_gf_AttachReticleEffectAndTextTagOnUnit(libCOMI_ge_CampaginReticleType_ProtossMainObjective, libCOMI_ge_CampaginReticleSize_Large, StringExternal(&quot;Param/Value/3C0719D6&quot;), gv_activeTransportUnit[lv_relevantwave], &quot;Ref_Center&quot;);
                    gv_activeDeliveryFailReticle[2] = libNtve_gf_ActorLastCreated();
                    gv_activeDeliveryFailTextTag[2] = TextTagLastCreated();
                    ActorSend(libNtve_gf_ActorLastCreated(), &quot;SetTeamColor 192,255,255 192,255,255&quot;);
                    TextTagSetPosition(TextTagLastCreated(), UnitGetPosition(gv_activeTransportUnit[lv_relevantwave]), 3.2);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_TransportReachedDestinationWave2_Init () {
                gt_TransportReachedDestinationWave2 = TriggerCreate(&quot;gt_TransportReachedDestinationWave2_Func&quot;);
                TriggerEnable(gt_TransportReachedDestinationWave2, false);
                TriggerAddEventTimePeriodic(gt_TransportReachedDestinationWave2, 1.0, c_timeGame);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: No Ememies at Destination - Wave 1
            //--------------------------------------------------------------------------------------------------
            bool gt_NoEmemiesatDestinationWave1_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                    if (!((((gv_doubleActive == true) &amp;&amp; (UnitCount(null, gv_pLAYER_03_Player01Enemy, RegionFromId(27), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile) | (1 &lt;&lt; c_targetFilterCloaked), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0) == 0) &amp;&amp; (UnitCount(null, gv_pLAYER_04_Player02Enemy, RegionFromId(27), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile) | (1 &lt;&lt; c_targetFilterCloaked), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0) == 0) &amp;&amp; (UnitCount(null, gv_pLAYER_05_Player03Hybrids, RegionFromId(27), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile) | (1 &lt;&lt; c_targetFilterCloaked), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32)) | (1 &lt;&lt; (c_targetFilterInvulnerable - 32))), 0) == 0)) || ((gv_doubleActive == false) &amp;&amp; (UnitCount(null, gv_pLAYER_03_Player01Enemy, RegionFromId(27), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile) | (1 &lt;&lt; c_targetFilterCloaked), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0) == 0) &amp;&amp; (UnitCount(null, gv_pLAYER_04_Player02Enemy, RegionFromId(27), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile) | (1 &lt;&lt; c_targetFilterCloaked), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0) == 0) &amp;&amp; (UnitCount(null, gv_pLAYER_05_Player03Hybrids, RegionFromId(27), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile) | (1 &lt;&lt; c_targetFilterCloaked), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32)) | (1 &lt;&lt; (c_targetFilterInvulnerable - 32))), 0) == 0))))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                TriggerEnable(gt_TransportisAttackedWave1, false);
                libNtve_gf_KillModel(gv_activeDeliveryFailReticle[1]);
                TextTagDestroy(gv_activeDeliveryFailTextTag[1]);
                gf_SuccessfulTransport(1);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_NoEmemiesatDestinationWave1_Init () {
                gt_NoEmemiesatDestinationWave1 = TriggerCreate(&quot;gt_NoEmemiesatDestinationWave1_Func&quot;);
                TriggerEnable(gt_NoEmemiesatDestinationWave1, false);
                TriggerAddEventTimePeriodic(gt_NoEmemiesatDestinationWave1, 1.0, c_timeGame);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: No Ememies at Destination - Wave 2
            //--------------------------------------------------------------------------------------------------
            bool gt_NoEmemiesatDestinationWave2_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                    if (!((((gv_doubleActive == true) &amp;&amp; (UnitCount(null, gv_pLAYER_03_Player01Enemy, RegionFromId(28), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile) | (1 &lt;&lt; c_targetFilterCloaked), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0) == 0) &amp;&amp; (UnitCount(null, gv_pLAYER_04_Player02Enemy, RegionFromId(28), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile) | (1 &lt;&lt; c_targetFilterCloaked), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0) == 0) &amp;&amp; (UnitCount(null, gv_pLAYER_05_Player03Hybrids, RegionFromId(28), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile) | (1 &lt;&lt; c_targetFilterCloaked), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0) == 0)) || ((gv_doubleActive == false) &amp;&amp; (UnitCount(null, gv_pLAYER_03_Player01Enemy, RegionFromId(28), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile) | (1 &lt;&lt; c_targetFilterCloaked), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0) == 0) &amp;&amp; (UnitCount(null, gv_pLAYER_04_Player02Enemy, RegionFromId(28), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile) | (1 &lt;&lt; c_targetFilterCloaked), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0) == 0) &amp;&amp; (UnitCount(null, gv_pLAYER_05_Player03Hybrids, RegionFromId(28), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile) | (1 &lt;&lt; c_targetFilterCloaked), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0) == 0))))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                TriggerEnable(gt_TransportisAttackedWave2, false);
                libNtve_gf_KillModel(gv_activeDeliveryFailReticle[2]);
                TextTagDestroy(gv_activeDeliveryFailTextTag[2]);
                gf_SuccessfulTransport(2);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_NoEmemiesatDestinationWave2_Init () {
                gt_NoEmemiesatDestinationWave2 = TriggerCreate(&quot;gt_NoEmemiesatDestinationWave2_Func&quot;);
                TriggerEnable(gt_NoEmemiesatDestinationWave2, false);
                TriggerAddEventTimePeriodic(gt_NoEmemiesatDestinationWave2, 1.0, c_timeGame);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: No Ememies at Destination - Wave 1 OBSOLETE
            //--------------------------------------------------------------------------------------------------
            bool gt_NoEmemiesatDestinationWave1OBSOLETE_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                    if (!((((gv_doubleActive == true) &amp;&amp; (UnitCount(null, gv_pLAYER_03_Player01Enemy, RegionCircle(UnitGetPosition(gv_activeTransportUnit[2]), 7.5), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile) | (1 &lt;&lt; c_targetFilterCloaked), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0) == 0) &amp;&amp; (UnitCount(null, gv_pLAYER_04_Player02Enemy, RegionCircle(UnitGetPosition(gv_activeTransportUnit[2]), 7.5), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile) | (1 &lt;&lt; c_targetFilterCloaked), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0) == 0) &amp;&amp; (UnitCount(null, gv_pLAYER_05_Player03Hybrids, RegionCircle(UnitGetPosition(gv_activeTransportUnit[2]), 7.5), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile) | (1 &lt;&lt; c_targetFilterCloaked), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0) == 0)) || ((gv_doubleActive == false) &amp;&amp; (UnitCount(null, gv_pLAYER_03_Player01Enemy, RegionCircle(UnitGetPosition(gv_activeTransportUnit[1]), 7.5), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile) | (1 &lt;&lt; c_targetFilterCloaked), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0) == 0) &amp;&amp; (UnitCount(null, gv_pLAYER_04_Player02Enemy, RegionCircle(UnitGetPosition(gv_activeTransportUnit[1]), 7.5), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile) | (1 &lt;&lt; c_targetFilterCloaked), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0) == 0) &amp;&amp; (UnitCount(null, gv_pLAYER_05_Player03Hybrids, RegionCircle(UnitGetPosition(gv_activeTransportUnit[1]), 7.5), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile) | (1 &lt;&lt; c_targetFilterCloaked), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0) == 0))))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                libNtve_gf_KillModel(gv_activeDeliveryFailReticle[1]);
                TextTagDestroy(gv_activeDeliveryFailTextTag[1]);
                gf_SuccessfulTransport(1);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_NoEmemiesatDestinationWave1OBSOLETE_Init () {
                gt_NoEmemiesatDestinationWave1OBSOLETE = TriggerCreate(&quot;gt_NoEmemiesatDestinationWave1OBSOLETE_Func&quot;);
                TriggerEnable(gt_NoEmemiesatDestinationWave1OBSOLETE, false);
                TriggerAddEventTimePeriodic(gt_NoEmemiesatDestinationWave1OBSOLETE, 1.0, c_timeGame);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: No Ememies at Destination - Wave 2 OBSOLETE
            //--------------------------------------------------------------------------------------------------
            bool gt_NoEmemiesatDestinationWave2OBSOLETE_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                    if (!((((gv_doubleActive == true) &amp;&amp; (UnitCount(null, gv_pLAYER_03_Player01Enemy, RegionCircle(UnitGetPosition(gv_activeTransportUnit[1]), 7.5), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile) | (1 &lt;&lt; c_targetFilterCloaked), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0) == 0) &amp;&amp; (UnitCount(null, gv_pLAYER_04_Player02Enemy, RegionCircle(UnitGetPosition(gv_activeTransportUnit[1]), 7.5), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile) | (1 &lt;&lt; c_targetFilterCloaked), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0) == 0) &amp;&amp; (UnitCount(null, gv_pLAYER_05_Player03Hybrids, RegionCircle(UnitGetPosition(gv_activeTransportUnit[1]), 7.5), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile) | (1 &lt;&lt; c_targetFilterCloaked), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0) == 0)) || ((gv_doubleActive == false) &amp;&amp; (UnitCount(null, gv_pLAYER_03_Player01Enemy, RegionCircle(UnitGetPosition(gv_activeTransportUnit[2]), 7.5), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile) | (1 &lt;&lt; c_targetFilterCloaked), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0) == 0) &amp;&amp; (UnitCount(null, gv_pLAYER_04_Player02Enemy, RegionCircle(UnitGetPosition(gv_activeTransportUnit[2]), 7.5), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile) | (1 &lt;&lt; c_targetFilterCloaked), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0) == 0) &amp;&amp; (UnitCount(null, gv_pLAYER_05_Player03Hybrids, RegionCircle(UnitGetPosition(gv_activeTransportUnit[2]), 7.5), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile) | (1 &lt;&lt; c_targetFilterCloaked), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0) == 0))))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                libNtve_gf_KillModel(gv_activeDeliveryFailReticle[2]);
                TextTagDestroy(gv_activeDeliveryFailTextTag[2]);
                gf_SuccessfulTransport(2);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_NoEmemiesatDestinationWave2OBSOLETE_Init () {
                gt_NoEmemiesatDestinationWave2OBSOLETE = TriggerCreate(&quot;gt_NoEmemiesatDestinationWave2OBSOLETE_Func&quot;);
                TriggerEnable(gt_NoEmemiesatDestinationWave2OBSOLETE, false);
                TriggerAddEventTimePeriodic(gt_NoEmemiesatDestinationWave2OBSOLETE, 1.0, c_timeGame);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Setup level 5
            //--------------------------------------------------------------------------------------------------
            bool gt_Setuplevel5_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                if ((((gv_deliveryPointDestroyed[3] == false) &amp;&amp; (gv_crystalAvailable[3][5] == true)) || ((gv_deliveryPointDestroyed[3] == true) &amp;&amp; (gv_crystalAvailable[4][5] == true)))) {
                    gv_crystal54variant = 1;
                    gv_crystalAvailable[5][1] = false;
                    gv_crystalAvailable[3][5] = false;
                    gv_crystalAvailable[4][5] = false;
                    gv_crystalSpawnPoint[4][5] = PointFromId(1477234424);
                    gv_crystalRegion[4][5] = RegionFromId(10);
                    gv_crystalTransportSpawnPoint[4][5] = PointFromId(1704820604);
                    gv_crystalHybridSpawnPoint[4][5] = PointFromId(874546580);
                    gv_crystalTransportPath1[5][4] = PointFromId(75175866);
                    gv_crystalTransportPath2[5][4] = PointFromId(1729412916);
                    gv_crystalTransportPath3[5][4] = PointFromId(1421050991);
                    gv_crystalDeliverySiteID[5][4] = 5;
                    gv_noCrystalsPerLvl[5] = 4;
                }
                else {
                    if ((gv_crystalAvailable[4][3] == true)) {
                        gv_crystal54variant = 2;
                        gv_crystalAvailable[5][4] = true;
                        gv_crystalSpawnPoint[5][4] = PointFromId(269326662);
                        gv_crystalRegion[5][4] = RegionFromId(15);
                        gv_crystalTransportSpawnPoint[5][4] = PointFromId(517584531);
                        gv_crystalHybridSpawnPoint[5][4] = PointFromId(1222049362);
                        gv_crystalTransportPath1[5][4] = PointFromId(988507296);
                        gv_crystalTransportPath2[5][4] = PointFromId(1486479125);
                        gv_crystalTransportPath3[5][4] = PointFromId(1391246096);
                        gv_crystalDeliverySiteID[5][4] = 4;
                        gv_noCrystalsPerLvl[5] = 4;
                    }
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_Setuplevel5_Init () {
                gt_Setuplevel5 = TriggerCreate(&quot;gt_Setuplevel5_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: rev01
            //--------------------------------------------------------------------------------------------------
            bool gt_rev01_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                    if (!(((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER) || (UnitGetOwner(EventUnit()) == gv_pLAYER_02_USER)))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                VisExploreArea(gv_pLAYER_01_USER, RegionFromId(29), true, false);
                VisExploreArea(gv_pLAYER_02_USER, RegionFromId(29), true, false);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_rev01_Init () {
                gt_rev01 = TriggerCreate(&quot;gt_rev01_Func&quot;);
                TriggerAddEventUnitRegion(gt_rev01, null, RegionFromId(29), true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: rev02
            //--------------------------------------------------------------------------------------------------
            bool gt_rev02_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                    if (!(((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER) || (UnitGetOwner(EventUnit()) == gv_pLAYER_02_USER)))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                VisExploreArea(gv_pLAYER_01_USER, RegionFromId(30), true, false);
                VisExploreArea(gv_pLAYER_02_USER, RegionFromId(30), true, false);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_rev02_Init () {
                gt_rev02 = TriggerCreate(&quot;gt_rev02_Func&quot;);
                TriggerAddEventUnitRegion(gt_rev02, null, RegionFromId(30), true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: rev03
            //--------------------------------------------------------------------------------------------------
            bool gt_rev03_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                    if (!(((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER) || (UnitGetOwner(EventUnit()) == gv_pLAYER_02_USER)))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                VisExploreArea(gv_pLAYER_01_USER, RegionFromId(31), true, false);
                VisExploreArea(gv_pLAYER_02_USER, RegionFromId(31), true, false);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_rev03_Init () {
                gt_rev03 = TriggerCreate(&quot;gt_rev03_Func&quot;);
                TriggerAddEventUnitRegion(gt_rev03, null, RegionFromId(31), true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: rev04
            //--------------------------------------------------------------------------------------------------
            bool gt_rev04_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                    if (!(((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER) || (UnitGetOwner(EventUnit()) == gv_pLAYER_02_USER)))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                VisExploreArea(gv_pLAYER_01_USER, RegionFromId(32), true, false);
                VisExploreArea(gv_pLAYER_02_USER, RegionFromId(32), true, false);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_rev04_Init () {
                gt_rev04 = TriggerCreate(&quot;gt_rev04_Func&quot;);
                TriggerAddEventUnitRegion(gt_rev04, null, RegionFromId(32), true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: rev05
            //--------------------------------------------------------------------------------------------------
            bool gt_rev05_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                    if (!(((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER) || (UnitGetOwner(EventUnit()) == gv_pLAYER_02_USER)))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                VisExploreArea(gv_pLAYER_01_USER, RegionFromId(33), true, false);
                VisExploreArea(gv_pLAYER_02_USER, RegionFromId(33), true, false);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_rev05_Init () {
                gt_rev05 = TriggerCreate(&quot;gt_rev05_Func&quot;);
                TriggerAddEventUnitRegion(gt_rev05, null, RegionFromId(33), true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: rev06
            //--------------------------------------------------------------------------------------------------
            bool gt_rev06_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                    if (!(((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER) || (UnitGetOwner(EventUnit()) == gv_pLAYER_02_USER)))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                VisExploreArea(gv_pLAYER_01_USER, RegionFromId(34), true, false);
                VisExploreArea(gv_pLAYER_02_USER, RegionFromId(34), true, false);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_rev06_Init () {
                gt_rev06 = TriggerCreate(&quot;gt_rev06_Func&quot;);
                TriggerAddEventUnitRegion(gt_rev06, null, RegionFromId(34), true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: rev07
            //--------------------------------------------------------------------------------------------------
            bool gt_rev07_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                    if (!(((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER) || (UnitGetOwner(EventUnit()) == gv_pLAYER_02_USER)))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                VisExploreArea(gv_pLAYER_01_USER, RegionFromId(35), true, false);
                VisExploreArea(gv_pLAYER_02_USER, RegionFromId(35), true, false);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_rev07_Init () {
                gt_rev07 = TriggerCreate(&quot;gt_rev07_Func&quot;);
                TriggerAddEventUnitRegion(gt_rev07, null, RegionFromId(35), true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: rev08
            //--------------------------------------------------------------------------------------------------
            bool gt_rev08_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                    if (!(((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER) || (UnitGetOwner(EventUnit()) == gv_pLAYER_02_USER)))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                VisExploreArea(gv_pLAYER_01_USER, RegionFromId(36), true, false);
                VisExploreArea(gv_pLAYER_02_USER, RegionFromId(36), true, false);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_rev08_Init () {
                gt_rev08 = TriggerCreate(&quot;gt_rev08_Func&quot;);
                TriggerAddEventUnitRegion(gt_rev08, null, RegionFromId(36), true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: rev09
            //--------------------------------------------------------------------------------------------------
            bool gt_rev09_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                    if (!(((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER) || (UnitGetOwner(EventUnit()) == gv_pLAYER_02_USER)))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                VisExploreArea(gv_pLAYER_01_USER, RegionFromId(37), true, false);
                VisExploreArea(gv_pLAYER_02_USER, RegionFromId(37), true, false);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_rev09_Init () {
                gt_rev09 = TriggerCreate(&quot;gt_rev09_Func&quot;);
                TriggerAddEventUnitRegion(gt_rev09, null, RegionFromId(37), true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: rev10
            //--------------------------------------------------------------------------------------------------
            bool gt_rev10_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                    if (!(((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER) || (UnitGetOwner(EventUnit()) == gv_pLAYER_02_USER)))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                VisExploreArea(gv_pLAYER_01_USER, RegionFromId(38), true, false);
                VisExploreArea(gv_pLAYER_02_USER, RegionFromId(38), true, false);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_rev10_Init () {
                gt_rev10 = TriggerCreate(&quot;gt_rev10_Func&quot;);
                TriggerAddEventUnitRegion(gt_rev10, null, RegionFromId(38), true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: rev11
            //--------------------------------------------------------------------------------------------------
            bool gt_rev11_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                    if (!(((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER) || (UnitGetOwner(EventUnit()) == gv_pLAYER_02_USER)))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                VisExploreArea(gv_pLAYER_01_USER, RegionFromId(39), true, false);
                VisExploreArea(gv_pLAYER_02_USER, RegionFromId(39), true, false);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_rev11_Init () {
                gt_rev11 = TriggerCreate(&quot;gt_rev11_Func&quot;);
                TriggerAddEventUnitRegion(gt_rev11, null, RegionFromId(39), true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: rev12
            //--------------------------------------------------------------------------------------------------
            bool gt_rev12_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                    if (!(((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER) || (UnitGetOwner(EventUnit()) == gv_pLAYER_02_USER)))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                VisExploreArea(gv_pLAYER_01_USER, RegionFromId(40), true, false);
                VisExploreArea(gv_pLAYER_02_USER, RegionFromId(40), true, false);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_rev12_Init () {
                gt_rev12 = TriggerCreate(&quot;gt_rev12_Func&quot;);
                TriggerAddEventUnitRegion(gt_rev12, null, RegionFromId(40), true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: rev13
            //--------------------------------------------------------------------------------------------------
            bool gt_rev13_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                    if (!(((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER) || (UnitGetOwner(EventUnit()) == gv_pLAYER_02_USER)))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                VisExploreArea(gv_pLAYER_01_USER, RegionFromId(41), true, false);
                VisExploreArea(gv_pLAYER_02_USER, RegionFromId(41), true, false);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_rev13_Init () {
                gt_rev13 = TriggerCreate(&quot;gt_rev13_Func&quot;);
                TriggerAddEventUnitRegion(gt_rev13, null, RegionFromId(41), true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Destroy Storm 1
            //--------------------------------------------------------------------------------------------------
            bool gt_DestroyStorm1_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                    if (!((UnitCount(null, gv_pLAYER_05_Player03Hybrids, RegionCircle(gv_stormUnitTarget[gv_pickedStromGroup][1], 6.0), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0) &gt; 0))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                TriggerEnable(gt_Stormwarning, false);
                TriggerStop(gt_StormController1);
                libCOMI_gf_DestroyPingCoop(gv_stormPing[1]);
                UnitKill(gv_stormUnit[1]);
                gv_stormUnitsCount -= 1;
                TriggerExecute(gt_StormEnds, true, false);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_DestroyStorm1_Init () {
                gt_DestroyStorm1 = TriggerCreate(&quot;gt_DestroyStorm1_Func&quot;);
                TriggerEnable(gt_DestroyStorm1, false);
                TriggerAddEventTimePeriodic(gt_DestroyStorm1, 2.0, c_timeGame);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Destroy Storm 2
            //--------------------------------------------------------------------------------------------------
            bool gt_DestroyStorm2_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                    if (!((UnitCount(null, gv_pLAYER_05_Player03Hybrids, RegionCircle(gv_stormUnitTarget[gv_pickedStromGroup][2], 6.0), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0) &gt; 0))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                TriggerEnable(gt_Stormwarning, false);
                TriggerStop(gt_StormController2);
                libCOMI_gf_DestroyPingCoop(gv_stormPing[2]);
                UnitKill(gv_stormUnit[2]);
                gv_stormUnitsCount -= 1;
                TriggerExecute(gt_StormEnds, true, false);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_DestroyStorm2_Init () {
                gt_DestroyStorm2 = TriggerCreate(&quot;gt_DestroyStorm2_Func&quot;);
                TriggerEnable(gt_DestroyStorm2, false);
                TriggerAddEventTimePeriodic(gt_DestroyStorm2, 2.0, c_timeGame);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Destroy Storm 3
            //--------------------------------------------------------------------------------------------------
            bool gt_DestroyStorm3_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                    if (!((UnitCount(null, gv_pLAYER_05_Player03Hybrids, RegionCircle(gv_stormUnitTarget[gv_pickedStromGroup][3], 6.0), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0) &gt; 0))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                TriggerEnable(gt_Stormwarning, false);
                TriggerStop(gt_StormController3);
                libCOMI_gf_DestroyPingCoop(gv_stormPing[3]);
                UnitKill(gv_stormUnit[3]);
                gv_stormUnitsCount -= 1;
                TriggerExecute(gt_StormEnds, true, false);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_DestroyStorm3_Init () {
                gt_DestroyStorm3 = TriggerCreate(&quot;gt_DestroyStorm3_Func&quot;);
                TriggerEnable(gt_DestroyStorm3, false);
                TriggerAddEventTimePeriodic(gt_DestroyStorm3, 2.0, c_timeGame);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Destroy Storm 4
            //--------------------------------------------------------------------------------------------------
            bool gt_DestroyStorm4_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                    if (!((UnitCount(null, gv_pLAYER_05_Player03Hybrids, RegionCircle(gv_stormUnitTarget[gv_pickedStromGroup][4], 6.0), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0) &gt; 0))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                TriggerEnable(gt_Stormwarning, false);
                TriggerStop(gt_StormController4);
                libCOMI_gf_DestroyPingCoop(gv_stormPing[4]);
                UnitKill(gv_stormUnit[4]);
                gv_stormUnitsCount -= 1;
                TriggerExecute(gt_StormEnds, true, false);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_DestroyStorm4_Init () {
                gt_DestroyStorm4 = TriggerCreate(&quot;gt_DestroyStorm4_Func&quot;);
                TriggerEnable(gt_DestroyStorm4, false);
                TriggerAddEventTimePeriodic(gt_DestroyStorm4, 2.0, c_timeGame);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Destroy Storm 5
            //--------------------------------------------------------------------------------------------------
            bool gt_DestroyStorm5_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                    if (!((UnitCount(null, gv_pLAYER_05_Player03Hybrids, RegionCircle(gv_stormUnitTarget[gv_pickedStromGroup][5], 6.0), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0) &gt; 0))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                TriggerEnable(gt_Stormwarning, false);
                TriggerStop(gt_StormController5);
                libCOMI_gf_DestroyPingCoop(gv_stormPing[5]);
                UnitKill(gv_stormUnit[5]);
                gv_stormUnitsCount -= 1;
                TriggerExecute(gt_StormEnds, true, false);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_DestroyStorm5_Init () {
                gt_DestroyStorm5 = TriggerCreate(&quot;gt_DestroyStorm5_Func&quot;);
                TriggerEnable(gt_DestroyStorm5, false);
                TriggerAddEventTimePeriodic(gt_DestroyStorm5, 2.0, c_timeGame);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Destroy Storm 6
            //--------------------------------------------------------------------------------------------------
            bool gt_DestroyStorm6_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                    if (!((UnitCount(null, gv_pLAYER_05_Player03Hybrids, RegionCircle(gv_stormUnitTarget[gv_pickedStromGroup][6], 6.0), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0) &gt; 0))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                TriggerEnable(gt_Stormwarning, false);
                TriggerStop(gt_StormController6);
                libCOMI_gf_DestroyPingCoop(gv_stormPing[6]);
                UnitKill(gv_stormUnit[6]);
                gv_stormUnitsCount -= 1;
                TriggerExecute(gt_StormEnds, true, false);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_DestroyStorm6_Init () {
                gt_DestroyStorm6 = TriggerCreate(&quot;gt_DestroyStorm6_Func&quot;);
                TriggerEnable(gt_DestroyStorm6, false);
                TriggerAddEventTimePeriodic(gt_DestroyStorm6, 2.0, c_timeGame);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Storm Controller 1
            //--------------------------------------------------------------------------------------------------
            bool gt_StormController1_Func (bool testConds, bool runActions) {
                int autoF31B904D_n;
                int autoF31B904D_i;
                int auto8805CA00_val;
                // Variable Declarations
                point lv_orderpoint;
                // Variable Initialization
                // Actions
                if (!runActions) {
                    return true;
                }
                Wait(RandomFixed(12.0, 16.0), c_timeGame);
                while (true) {
                    autoF31B904D_n = 2;
                    for (autoF31B904D_i = 1; autoF31B904D_i &lt;= autoF31B904D_n; autoF31B904D_i += 1) {
                        if ((UnitIsAlive(gv_stormUnit[1]) == true)) {
                            auto8805CA00_val = RandomInt(1, 2);
                            if (auto8805CA00_val == 1) {
                                if ((gv_pickedStromGroup == 2)) {
                                    lv_orderpoint = PointWithOffsetPolar(UnitGetPosition(gv_stormUnit[1]), 7.0, (AngleBetweenPoints(UnitGetPosition(gv_stormUnit[1]), gv_stormUnitTarget[gv_pickedStromGroup][1]) + RandomFixed(15.0, 45.0)));
                                }
                                else {
                                    lv_orderpoint = PointWithOffsetPolar(UnitGetPosition(gv_stormUnit[1]), 7.0, (AngleBetweenPoints(UnitGetPosition(gv_stormUnit[1]), gv_stormUnitTarget[gv_pickedStromGroup][1]) + RandomFixed(5.0, 20.0)));
                                }
                                if ((DistanceBetweenPoints(RegionGetCenter(gv_shieldRegion), lv_orderpoint) &gt; (libNtve_gf_WidthOfRegion(gv_shieldRegion) / 2.0))) {
                                    UnitIssueOrder(gv_stormUnit[1], OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), lv_orderpoint), c_orderQueueReplace);
                                }
                                else {
                                    UnitIssueOrder(gv_stormUnit[1], OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), gv_stormUnitTarget[gv_pickedStromGroup][1]), c_orderQueueReplace);
                                }
                            }
                            else if (auto8805CA00_val == 2) {
                                lv_orderpoint = PointWithOffsetPolar(UnitGetPosition(gv_stormUnit[1]), 7.0, (AngleBetweenPoints(UnitGetPosition(gv_stormUnit[1]), gv_stormUnitTarget[gv_pickedStromGroup][1]) - RandomFixed(15.0, 45.0)));
                                if ((DistanceBetweenPoints(RegionGetCenter(gv_shieldRegion), lv_orderpoint) &gt; (libNtve_gf_WidthOfRegion(gv_shieldRegion) / 2.0))) {
                                    UnitIssueOrder(gv_stormUnit[1], OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), lv_orderpoint), c_orderQueueReplace);
                                }
                                else {
                                    UnitIssueOrder(gv_stormUnit[1], OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), gv_stormUnitTarget[gv_pickedStromGroup][1]), c_orderQueueReplace);
                                }
                            }
                            else {
                            }
                            Wait(RandomInt(4, 8), c_timeGame);
                        }
                        else {
                            break;
                        }
                    }
                    if ((UnitIsAlive(gv_stormUnit[1]) == true)) {
                        UnitIssueOrder(gv_stormUnit[1], OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), gv_stormUnitTarget[gv_pickedStromGroup][1]), c_orderQueueReplace);
                        Wait(RandomInt(6, 10), c_timeGame);
                    }
                    else {
                        break;
                    }
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_StormController1_Init () {
                gt_StormController1 = TriggerCreate(&quot;gt_StormController1_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Storm Controller 2
            //--------------------------------------------------------------------------------------------------
            bool gt_StormController2_Func (bool testConds, bool runActions) {
                int auto8FCD6494_n;
                int auto8FCD6494_i;
                int autoC6B0F051_val;
                // Variable Declarations
                point lv_orderpoint;
                // Variable Initialization
                // Actions
                if (!runActions) {
                    return true;
                }
                while (true) {
                    while (true) {
                        auto8FCD6494_n = 2;
                        for (auto8FCD6494_i = 1; auto8FCD6494_i &lt;= auto8FCD6494_n; auto8FCD6494_i += 1) {
                            if ((UnitIsAlive(gv_stormUnit[2]) == true)) {
                                autoC6B0F051_val = RandomInt(1, 2);
                                if (autoC6B0F051_val == 1) {
                                    lv_orderpoint = PointWithOffsetPolar(UnitGetPosition(gv_stormUnit[2]), 7.0, (AngleBetweenPoints(UnitGetPosition(gv_stormUnit[2]), gv_stormUnitTarget[gv_pickedStromGroup][2]) + RandomFixed(5.0, 20.0)));
                                    if ((DistanceBetweenPoints(RegionGetCenter(gv_shieldRegion), lv_orderpoint) &gt; (libNtve_gf_WidthOfRegion(gv_shieldRegion) / 2.0))) {
                                        UnitIssueOrder(gv_stormUnit[2], OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), lv_orderpoint), c_orderQueueReplace);
                                    }
                                    else {
                                        UnitIssueOrder(gv_stormUnit[2], OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), gv_stormUnitTarget[gv_pickedStromGroup][2]), c_orderQueueReplace);
                                    }
                                }
                                else if (autoC6B0F051_val == 2) {
                                    lv_orderpoint = PointWithOffsetPolar(UnitGetPosition(gv_stormUnit[2]), 7.0, (AngleBetweenPoints(UnitGetPosition(gv_stormUnit[2]), gv_stormUnitTarget[gv_pickedStromGroup][2]) - RandomFixed(15.0, 45.0)));
                                    if ((DistanceBetweenPoints(RegionGetCenter(gv_shieldRegion), lv_orderpoint) &gt; (libNtve_gf_WidthOfRegion(gv_shieldRegion) / 2.0))) {
                                        UnitIssueOrder(gv_stormUnit[2], OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), lv_orderpoint), c_orderQueueReplace);
                                    }
                                    else {
                                        UnitIssueOrder(gv_stormUnit[2], OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), gv_stormUnitTarget[gv_pickedStromGroup][2]), c_orderQueueReplace);
                                    }
                                }
                                else {
                                }
                                Wait(RandomInt(4, 8), c_timeGame);
                            }
                            else {
                                break;
                            }
                        }
                        if ((UnitIsAlive(gv_stormUnit[2]) == true)) {
                            UnitIssueOrder(gv_stormUnit[2], OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), gv_stormUnitTarget[gv_pickedStromGroup][2]), c_orderQueueReplace);
                            Wait(RandomInt(6, 10), c_timeGame);
                        }
                        else {
                            break;
                        }
                    }
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_StormController2_Init () {
                gt_StormController2 = TriggerCreate(&quot;gt_StormController2_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Storm Controller 3
            //--------------------------------------------------------------------------------------------------
            bool gt_StormController3_Func (bool testConds, bool runActions) {
                int auto4D12361A_n;
                int auto4D12361A_i;
                int auto4D1A165F_val;
                // Variable Declarations
                point lv_orderpoint;
                // Variable Initialization
                // Actions
                if (!runActions) {
                    return true;
                }
                Wait(RandomFixed(2.0, 8.0), c_timeGame);
                while (true) {
                    auto4D12361A_n = 2;
                    for (auto4D12361A_i = 1; auto4D12361A_i &lt;= auto4D12361A_n; auto4D12361A_i += 1) {
                        if ((UnitIsAlive(gv_stormUnit[3]) == true)) {
                            auto4D1A165F_val = RandomInt(1, 2);
                            if (auto4D1A165F_val == 1) {
                                if ((gv_pickedStromGroup == 2)) {
                                    lv_orderpoint = PointWithOffsetPolar(UnitGetPosition(gv_stormUnit[3]), 7.0, (AngleBetweenPoints(UnitGetPosition(gv_stormUnit[3]), gv_stormUnitTarget[gv_pickedStromGroup][3]) + RandomFixed(15.0, 45.0)));
                                }
                                else {
                                    lv_orderpoint = PointWithOffsetPolar(UnitGetPosition(gv_stormUnit[3]), 7.0, (AngleBetweenPoints(UnitGetPosition(gv_stormUnit[3]), gv_stormUnitTarget[gv_pickedStromGroup][3]) + RandomFixed(5.0, 20.0)));
                                }
                                if ((DistanceBetweenPoints(RegionGetCenter(gv_shieldRegion), lv_orderpoint) &gt; (libNtve_gf_WidthOfRegion(gv_shieldRegion) / 2.0))) {
                                    UnitIssueOrder(gv_stormUnit[3], OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), lv_orderpoint), c_orderQueueReplace);
                                }
                                else {
                                    UnitIssueOrder(gv_stormUnit[3], OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), gv_stormUnitTarget[gv_pickedStromGroup][3]), c_orderQueueReplace);
                                }
                            }
                            else if (auto4D1A165F_val == 2) {
                                if ((gv_pickedStromGroup == 2)) {
                                    lv_orderpoint = PointWithOffsetPolar(UnitGetPosition(gv_stormUnit[3]), 7.0, (AngleBetweenPoints(UnitGetPosition(gv_stormUnit[3]), gv_stormUnitTarget[gv_pickedStromGroup][3]) - RandomFixed(5.0, 20.0)));
                                }
                                else {
                                    lv_orderpoint = PointWithOffsetPolar(UnitGetPosition(gv_stormUnit[3]), 7.0, (AngleBetweenPoints(UnitGetPosition(gv_stormUnit[3]), gv_stormUnitTarget[gv_pickedStromGroup][3]) - RandomFixed(15.0, 45.0)));
                                }
                                if ((DistanceBetweenPoints(RegionGetCenter(gv_shieldRegion), lv_orderpoint) &gt; (libNtve_gf_WidthOfRegion(gv_shieldRegion) / 2.0))) {
                                    UnitIssueOrder(gv_stormUnit[3], OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), lv_orderpoint), c_orderQueueReplace);
                                }
                                else {
                                    UnitIssueOrder(gv_stormUnit[3], OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), gv_stormUnitTarget[gv_pickedStromGroup][3]), c_orderQueueReplace);
                                }
                            }
                            else {
                            }
                            Wait(RandomInt(4, 8), c_timeGame);
                        }
                        else {
                            break;
                        }
                    }
                    if ((UnitIsAlive(gv_stormUnit[3]) == true)) {
                        UnitIssueOrder(gv_stormUnit[3], OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), gv_stormUnitTarget[gv_pickedStromGroup][3]), c_orderQueueReplace);
                        Wait(RandomInt(6, 10), c_timeGame);
                    }
                    else {
                        break;
                    }
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_StormController3_Init () {
                gt_StormController3 = TriggerCreate(&quot;gt_StormController3_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Storm Controller 4
            //--------------------------------------------------------------------------------------------------
            bool gt_StormController4_Func (bool testConds, bool runActions) {
                int auto66736DF8_n;
                int auto66736DF8_i;
                int autoE1A35EBD_val;
                // Variable Declarations
                point lv_orderpoint;
                // Variable Initialization
                // Actions
                if (!runActions) {
                    return true;
                }
                Wait(RandomFixed(8.0, 14.0), c_timeGame);
                while (true) {
                    auto66736DF8_n = 2;
                    for (auto66736DF8_i = 1; auto66736DF8_i &lt;= auto66736DF8_n; auto66736DF8_i += 1) {
                        if ((UnitIsAlive(gv_stormUnit[4]) == true)) {
                            autoE1A35EBD_val = RandomInt(1, 2);
                            if (autoE1A35EBD_val == 1) {
                                lv_orderpoint = PointWithOffsetPolar(UnitGetPosition(gv_stormUnit[4]), 7.0, (AngleBetweenPoints(UnitGetPosition(gv_stormUnit[4]), gv_stormUnitTarget[gv_pickedStromGroup][4]) + RandomFixed(5.0, 20.0)));
                                if ((DistanceBetweenPoints(RegionGetCenter(gv_shieldRegion), lv_orderpoint) &gt; (libNtve_gf_WidthOfRegion(gv_shieldRegion) / 2.0))) {
                                    UnitIssueOrder(gv_stormUnit[4], OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), lv_orderpoint), c_orderQueueReplace);
                                }
                                else {
                                    UnitIssueOrder(gv_stormUnit[4], OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), gv_stormUnitTarget[gv_pickedStromGroup][4]), c_orderQueueReplace);
                                }
                            }
                            else if (autoE1A35EBD_val == 2) {
                                lv_orderpoint = PointWithOffsetPolar(UnitGetPosition(gv_stormUnit[4]), 7.0, (AngleBetweenPoints(UnitGetPosition(gv_stormUnit[4]), gv_stormUnitTarget[gv_pickedStromGroup][4]) - RandomFixed(15.0, 45.0)));
                                if ((DistanceBetweenPoints(RegionGetCenter(gv_shieldRegion), lv_orderpoint) &gt; (libNtve_gf_WidthOfRegion(gv_shieldRegion) / 2.0))) {
                                    UnitIssueOrder(gv_stormUnit[4], OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), lv_orderpoint), c_orderQueueReplace);
                                }
                                else {
                                    UnitIssueOrder(gv_stormUnit[4], OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), gv_stormUnitTarget[gv_pickedStromGroup][4]), c_orderQueueReplace);
                                }
                            }
                            else {
                            }
                            Wait(RandomInt(4, 8), c_timeGame);
                        }
                        else {
                            break;
                        }
                    }
                    if ((UnitIsAlive(gv_stormUnit[4]) == true)) {
                        UnitIssueOrder(gv_stormUnit[4], OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), gv_stormUnitTarget[gv_pickedStromGroup][4]), c_orderQueueReplace);
                        Wait(RandomInt(6, 10), c_timeGame);
                    }
                    else {
                        break;
                    }
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_StormController4_Init () {
                gt_StormController4 = TriggerCreate(&quot;gt_StormController4_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Storm Controller 5
            //--------------------------------------------------------------------------------------------------
            bool gt_StormController5_Func (bool testConds, bool runActions) {
                int autoC0F49DF3_n;
                int autoC0F49DF3_i;
                int autoCD40C734_val;
                // Variable Declarations
                point lv_orderpoint;
                // Variable Initialization
                // Actions
                if (!runActions) {
                    return true;
                }
                Wait(RandomFixed(14.0, 18.0), c_timeGame);
                while (true) {
                    autoC0F49DF3_n = 2;
                    for (autoC0F49DF3_i = 1; autoC0F49DF3_i &lt;= autoC0F49DF3_n; autoC0F49DF3_i += 1) {
                        if ((UnitIsAlive(gv_stormUnit[5]) == true)) {
                            autoCD40C734_val = RandomInt(1, 2);
                            if (autoCD40C734_val == 1) {
                                lv_orderpoint = PointWithOffsetPolar(UnitGetPosition(gv_stormUnit[5]), 7.0, (AngleBetweenPoints(UnitGetPosition(gv_stormUnit[5]), gv_stormUnitTarget[gv_pickedStromGroup][5]) + RandomFixed(10.0, 45.0)));
                                if ((DistanceBetweenPoints(RegionGetCenter(gv_shieldRegion), lv_orderpoint) &gt; (libNtve_gf_WidthOfRegion(gv_shieldRegion) / 2.0))) {
                                    UnitIssueOrder(gv_stormUnit[5], OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), lv_orderpoint), c_orderQueueReplace);
                                }
                                else {
                                    UnitIssueOrder(gv_stormUnit[5], OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), gv_stormUnitTarget[gv_pickedStromGroup][5]), c_orderQueueReplace);
                                }
                            }
                            else if (autoCD40C734_val == 2) {
                                lv_orderpoint = PointWithOffsetPolar(UnitGetPosition(gv_stormUnit[5]), 7.0, (AngleBetweenPoints(UnitGetPosition(gv_stormUnit[5]), gv_stormUnitTarget[gv_pickedStromGroup][5]) - RandomFixed(10.0, 45.0)));
                                if ((DistanceBetweenPoints(RegionGetCenter(gv_shieldRegion), lv_orderpoint) &gt; (libNtve_gf_WidthOfRegion(gv_shieldRegion) / 2.0))) {
                                    UnitIssueOrder(gv_stormUnit[5], OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), lv_orderpoint), c_orderQueueReplace);
                                }
                                else {
                                    UnitIssueOrder(gv_stormUnit[5], OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), gv_stormUnitTarget[gv_pickedStromGroup][5]), c_orderQueueReplace);
                                }
                            }
                            else {
                            }
                            Wait(RandomInt(4, 8), c_timeGame);
                        }
                        else {
                            break;
                        }
                    }
                    if ((UnitIsAlive(gv_stormUnit[5]) == true)) {
                        UnitIssueOrder(gv_stormUnit[5], OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), gv_stormUnitTarget[gv_pickedStromGroup][5]), c_orderQueueReplace);
                        Wait(RandomInt(6, 10), c_timeGame);
                    }
                    else {
                        break;
                    }
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_StormController5_Init () {
                gt_StormController5 = TriggerCreate(&quot;gt_StormController5_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Storm Controller 6
            //--------------------------------------------------------------------------------------------------
            bool gt_StormController6_Func (bool testConds, bool runActions) {
                int auto703E2778_n;
                int auto703E2778_i;
                int auto05942D27_val;
                // Variable Declarations
                point lv_orderpoint;
                // Variable Initialization
                // Actions
                if (!runActions) {
                    return true;
                }
                Wait(RandomFixed(18.0, 22.0), c_timeGame);
                while (true) {
                    auto703E2778_n = 2;
                    for (auto703E2778_i = 1; auto703E2778_i &lt;= auto703E2778_n; auto703E2778_i += 1) {
                        if ((UnitIsAlive(gv_stormUnit[6]) == true)) {
                            auto05942D27_val = RandomInt(1, 2);
                            if (auto05942D27_val == 1) {
                                lv_orderpoint = PointWithOffsetPolar(UnitGetPosition(gv_stormUnit[6]), 7.0, (AngleBetweenPoints(UnitGetPosition(gv_stormUnit[6]), gv_stormUnitTarget[gv_pickedStromGroup][6]) + RandomFixed(10.0, 45.0)));
                                if ((DistanceBetweenPoints(RegionGetCenter(gv_shieldRegion), lv_orderpoint) &gt; (libNtve_gf_WidthOfRegion(gv_shieldRegion) / 2.0))) {
                                    UnitIssueOrder(gv_stormUnit[6], OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), lv_orderpoint), c_orderQueueReplace);
                                }
                                else {
                                    UnitIssueOrder(gv_stormUnit[6], OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), gv_stormUnitTarget[gv_pickedStromGroup][6]), c_orderQueueReplace);
                                }
                            }
                            else if (auto05942D27_val == 2) {
                                lv_orderpoint = PointWithOffsetPolar(UnitGetPosition(gv_stormUnit[6]), 7.0, (AngleBetweenPoints(UnitGetPosition(gv_stormUnit[6]), gv_stormUnitTarget[gv_pickedStromGroup][6]) - RandomFixed(10.0, 45.0)));
                                if ((DistanceBetweenPoints(RegionGetCenter(gv_shieldRegion), lv_orderpoint) &gt; (libNtve_gf_WidthOfRegion(gv_shieldRegion) / 2.0))) {
                                    UnitIssueOrder(gv_stormUnit[6], OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), lv_orderpoint), c_orderQueueReplace);
                                }
                                else {
                                    UnitIssueOrder(gv_stormUnit[6], OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), gv_stormUnitTarget[gv_pickedStromGroup][6]), c_orderQueueReplace);
                                }
                            }
                            else {
                            }
                            Wait(RandomInt(4, 8), c_timeGame);
                        }
                        else {
                            break;
                        }
                    }
                    if ((UnitIsAlive(gv_stormUnit[6]) == true)) {
                        UnitIssueOrder(gv_stormUnit[6], OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), gv_stormUnitTarget[gv_pickedStromGroup][6]), c_orderQueueReplace);
                        Wait(RandomInt(6, 10), c_timeGame);
                    }
                    else {
                        break;
                    }
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_StormController6_Init () {
                gt_StormController6 = TriggerCreate(&quot;gt_StormController6_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: DP destroy 1
            //--------------------------------------------------------------------------------------------------
            bool gt_DPdestroy1_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                gv_deliveryPointDestroyed[1] = true;
                libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Large, libNtve_ge_ExplosionType_Protoss, PointFromId(1986540999));
                libNtve_gf_CreateActorAtPoint(&quot;GenericProtossFire_Shakuras_Large&quot;, PointFromId(1986540999));
                ActorSend(libNtve_gf_ActorLastCreated(), &quot;SetHeight -4.000000&quot;);
                SoundPlayAtPointForPlayer(SoundLink(&quot;Generic_ProtossFire_Large&quot;, -1), c_maxPlayers, PlayerGroupAll(), PointFromId(1986540999), 0.0, 80.0, 0.0);
                libNtve_gf_CreateActorAtPoint(&quot;Smoke_Pillar_Tall_DT&quot;, PointFromId(1986540999));
                ActorSend(libNtve_gf_ActorLastCreated(), &quot;SetHeight -3.200000&quot;);
                gv_crystalAvailable[5][1] = false;
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_DPdestroy1_Init () {
                gt_DPdestroy1 = TriggerCreate(&quot;gt_DPdestroy1_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: DP destruction pick
            //--------------------------------------------------------------------------------------------------
            bool gt_DPdestructionpick_Func (bool testConds, bool runActions) {
                int auto593DCFE4_val;
                int autoAC5FE2B9_val;
                int auto2C505FC5_val;
                int auto32F5F252_val;
                // Actions
                if (!runActions) {
                    return true;
                }
                Wait(120.0, c_timeGame);
                if ((gv_objectiveEscortCrystalsEscorted &gt;= 2) &amp;&amp; (gv_activeCrystalIsInGame[1] == false) &amp;&amp; (gv_activeCrystalIsInGame[2] == false)) {
                    if ((gv_spawnedCrystalsPerDP[2] != 0) &amp;&amp; (gv_doublePickedVariant[1] != ge_DoubleVariant_B) &amp;&amp; (gv_doublePickedVariant[1] != ge_DoubleVariant_D)) {
                        TriggerExecute(gt_DPdestroy2, true, false);
                    }
                    else {
                        auto593DCFE4_val = gv_doublePickedVariant[1];
                        if (auto593DCFE4_val == ge_DoubleVariant_B) {
                            autoAC5FE2B9_val = RandomInt(1, 3);
                            if (autoAC5FE2B9_val == 1) {
                                TriggerExecute(gt_DPdestroy2, true, false);
                            }
                            else if (autoAC5FE2B9_val == 2) {
                                TriggerExecute(gt_DPdestroy2, true, false);
                            }
                            else {
                            }
                        }
                        else if (auto593DCFE4_val == ge_DoubleVariant_D) {
                            auto2C505FC5_val = RandomInt(1, 3);
                            if (auto2C505FC5_val == 1) {
                                TriggerExecute(gt_DPdestroy3, true, false);
                            }
                            else if (auto2C505FC5_val == 2) {
                                TriggerExecute(gt_DPdestroy3, true, false);
                            }
                            else {
                            }
                        }
                        else if (auto593DCFE4_val == ge_DoubleVariant_A) {
                            TriggerExecute(gt_DPdestroy3, true, false);
                        }
                        else if (auto593DCFE4_val == ge_DoubleVariant_C) {
                            auto32F5F252_val = RandomInt(1, 3);
                            if (auto32F5F252_val == 1) {
                                TriggerExecute(gt_DPdestroy2, true, false);
                            }
                            else if (auto32F5F252_val == 2) {
                                TriggerExecute(gt_DPdestroy3, true, false);
                            }
                            else {
                            }
                        }
                        else {
                        }
                    }
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_DPdestructionpick_Init () {
                gt_DPdestructionpick = TriggerCreate(&quot;gt_DPdestructionpick_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: DP destroy 2
            //--------------------------------------------------------------------------------------------------
            bool gt_DPdestroy2_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                gv_deliveryPointDestroyed[2] = true;
                libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Large, libNtve_ge_ExplosionType_Protoss, PointFromId(1550332234));
                libNtve_gf_CreateActorAtPoint(&quot;GenericProtossFire_Shakuras_Large&quot;, PointFromId(1550332234));
                ActorSend(libNtve_gf_ActorLastCreated(), &quot;SetHeight -4.000000&quot;);
                SoundPlayAtPointForPlayer(SoundLink(&quot;Generic_ProtossFire_Large&quot;, -1), c_maxPlayers, PlayerGroupAll(), PointFromId(1550332234), 0.0, 80.0, 0.0);
                libNtve_gf_CreateActorAtPoint(&quot;Smoke_Pillar_Tall_DT&quot;, PointFromId(1550332234));
                ActorSend(libNtve_gf_ActorLastCreated(), &quot;SetHeight -3.200000&quot;);
                gv_crystalDeliverySiteID[3][2] = 3;
                gv_crystalTransportPath1[3][2] = PointFromId(1582266514);
                gv_crystalTransportPath2[3][2] = PointFromId(833888498);
                gv_crystalTransportPath3[3][2] = PointFromId(2046491228);
                gv_crystalDeliverySiteID[4][1] = 1;
                gv_crystalTransportPath1[4][1] = PointFromId(958323307);
                gv_crystalTransportPath2[4][1] = PointFromId(1641142272);
                gv_crystalTransportPath3[4][1] = PointFromId(213961211);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_DPdestroy2_Init () {
                gt_DPdestroy2 = TriggerCreate(&quot;gt_DPdestroy2_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: DP destroy 3
            //--------------------------------------------------------------------------------------------------
            bool gt_DPdestroy3_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                gv_deliveryPointDestroyed[3] = true;
                libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Large, libNtve_ge_ExplosionType_Protoss, PointFromId(1395066301));
                libNtve_gf_CreateActorAtPoint(&quot;GenericProtossFire_Shakuras_Large&quot;, PointFromId(1395066301));
                ActorSend(libNtve_gf_ActorLastCreated(), &quot;SetHeight -4.000000&quot;);
                SoundPlayAtPointForPlayer(SoundLink(&quot;Generic_ProtossFire_Large&quot;, -1), c_maxPlayers, PlayerGroupAll(), PointFromId(1395066301), 0.0, 80.0, 0.0);
                libNtve_gf_CreateActorAtPoint(&quot;Smoke_Pillar_Tall_DT&quot;, PointFromId(1395066301));
                ActorSend(libNtve_gf_ActorLastCreated(), &quot;SetHeight -3.200000&quot;);
                gv_crystalDeliverySiteID[4][3] = 4;
                gv_crystalTransportPath1[4][3] = PointFromId(988507296);
                gv_crystalTransportPath2[4][3] = PointFromId(1486479125);
                gv_crystalTransportPath3[4][3] = PointFromId(1391246096);
                gv_crystalDeliverySiteID[3][5] = 5;
                gv_crystalTransportPath1[3][5] = PointFromId(75175866);
                gv_crystalTransportPath2[3][5] = PointFromId(1729412916);
                gv_crystalTransportPath3[3][5] = PointFromId(1421050991);
                if ((gv_crystalAvailable[3][5] == true)) {
                    gv_crystalAvailable[3][5] = false;
                    gv_crystalAvailable[4][5] = true;
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_DPdestroy3_Init () {
                gt_DPdestroy3 = TriggerCreate(&quot;gt_DPdestroy3_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Storm Countdown Controller
            //--------------------------------------------------------------------------------------------------
            bool gt_StormCountdownController_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                while ((TimerGetRemaining(gv_stormCountdownTimer) &gt; 0.0) &amp;&amp; (gv_objectiveEscortCrystalsEscorted &lt; gv_objectiveCrystalsBeforeStormGoal)) {
                    TriggerExecute(gt_ObjectiveCrystalsBeforeStormUpdate, true, false);
                    Wait(0.25, c_timeGame);
                }
                if ((TimerGetRemaining(gv_stormCountdownTimer) == 0.0)) {
                    TriggerExecute(gt_ObjectiveCrystalsBeforeStormFailed, true, false);
                }
                else {
                    if ((gv_objectiveEscortCrystalsEscorted == gv_objectiveCrystalsBeforeStormGoal)) {
                        TriggerExecute(gt_ObjectiveCrystalsBeforeStormComplete, true, false);
                    }
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_StormCountdownController_Init () {
                gt_StormCountdownController = TriggerCreate(&quot;gt_StormCountdownController_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Storm Countdown OBSOLETE
            //--------------------------------------------------------------------------------------------------
            bool gt_StormCountdownOBSOLETE_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                libCOMI_gf_TimerWindowCreate(gv_stormCountdownTimer, StringExternal(&quot;Param/Value/EF5EF4AD&quot;), true, false);
                TimerWindowSetFormat(TimerWindowLastCreated(), StringToText(&quot;&lt;min2/&gt;:&lt;sec2/&gt;&quot;));
                TimerWindowShowBorder(TimerWindowLastCreated(), false);
                TimerWindowShowProgressBar(TimerWindowLastCreated(), false);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_StormCountdownOBSOLETE_Init () {
                gt_StormCountdownOBSOLETE = TriggerCreate(&quot;gt_StormCountdownOBSOLETE_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Storm in 45sec
            //--------------------------------------------------------------------------------------------------
            bool gt_Stormin45sec_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryAmbience, &quot;Ambience_PShakuras02_LowIntensity_Quad&quot;, c_soundtrackCueAny, c_soundtrackIndexAny, true);
                GameSetLighting(&quot;AenythStorm&quot;, 45.0);
                FogSetColorOverTime(Color(10.98, 14.51, 18.43), 45.0);
                FogSetStartHeightOverTime(2.0, 45.0);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_Stormin45sec_Init () {
                gt_Stormin45sec = TriggerCreate(&quot;gt_Stormin45sec_Func&quot;);
                TriggerAddEventTimer(gt_Stormin45sec, gv_stormCountdownTimer45);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Storm in 10sec
            //--------------------------------------------------------------------------------------------------
            bool gt_Stormin10sec_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((ObjectiveGetState(gv_objectiveRescueStalkers) == c_objectiveStateActive))) {
                        return false;
                    }
                    if (!((((gv_activeCrystalIsTransported[1] == true) &amp;&amp; (DistanceBetweenPoints(UnitGetPosition(gv_activeTransportUnit[1]), gv_deliveryPoint[gv_activeDeliveryID[1]]) &lt; 22.0)) || ((gv_activeCrystalIsTransported[2] == true) &amp;&amp; (DistanceBetweenPoints(UnitGetPosition(gv_activeTransportUnit[2]), gv_deliveryPoint[gv_activeDeliveryID[2]]) &lt; 22.0))))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                gv_stormCountdownWaiting = true;
                TimerPause(gv_stormCountdownTimer, true);
                TimerStart(gv_stormCountdownWaitingTimer, 15.0, false, c_timeGame);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_Stormin10sec_Init () {
                gt_Stormin10sec = TriggerCreate(&quot;gt_Stormin10sec_Func&quot;);
                TriggerAddEventTimer(gt_Stormin10sec, gv_stormCountdownTimer10);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Waiting Timer Expired
            //--------------------------------------------------------------------------------------------------
            bool gt_WaitingTimerExpired_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((gv_stormCountdownWaiting == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                gv_stormCountdownWaiting = false;
                TimerPause(gv_stormCountdownTimer, false);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_WaitingTimerExpired_Init () {
                gt_WaitingTimerExpired = TriggerCreate(&quot;gt_WaitingTimerExpired_Func&quot;);
                TriggerAddEventTimer(gt_WaitingTimerExpired, gv_stormCountdownWaitingTimer);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Storm Starts
            //--------------------------------------------------------------------------------------------------
            bool gt_StormStarts_Func (bool testConds, bool runActions) {
                int autoFD04CA46_ae;
                int autoFD04CA46_ai;
                // Variable Declarations
                int lv_mintime;
                int lv_maxtime;
                int lv_doodadid;
                // Variable Initialization
                lv_mintime = 18;
                lv_maxtime = 28;
                // Actions
                if (!runActions) {
                    return true;
                }
                gv_gameStage = 1;
                gv_hybridDelayPerGroup[2] = 90;
                libNtve_gf_ShowHideDoodadsInRegion(true, RegionEntireMap(), &quot;ShakurasBaseShield&quot;);
                libCOMI_gf_SendActorMessageToDoodadsInRegion(&quot;SetTintColor 0,0,0&quot;, &quot;ShakurasBaseShield&quot;, RegionEntireMap());
                libCOMI_gf_SendActorMessageToDoodadsInRegion(&quot;SetTintColor {64,64,64 8.000000} 2.000000&quot;, &quot;ShakurasBaseShield&quot;, RegionEntireMap());
                SoundPlayForPlayer(SoundLink(&quot;Fenix_MegaShields_Start&quot;, -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
                libNtve_gf_CreateModelAtPoint(&quot;SOAWarpInReinforcementsBeam&quot;, PointFromId(751626843));
                gv_stormCenterEffect = libNtve_gf_ActorLastCreated();
                ActorSend(gv_stormCenterEffect, &quot;AnimBracketStart BSD Birth Stand Death&quot;);
                ActorSend(gv_stormCenterEffect, &quot;SetOpacity 0.100000&quot;);
                ActorSend(gv_stormCenterEffect, &quot;SetHeight 3.500000&quot;);
                if ((ObjectiveGetState(gv_objectiveRescueStalkers) == c_objectiveStateCompleted)) {
                    libCOMI_gf_SendActorMessageToDoodadsInRegion(&quot;SetScale 1.600000,1.600000,0.880000 6.000000&quot;, &quot;ShakurasBaseShield&quot;, RegionEntireMap());
                    libCOMI_gf_SendActorMessageToDoodadsInRegion(&quot;SetHeight -5.500000&quot;, &quot;ShakurasBaseShield&quot;, RegionEntireMap());
                    gv_shieldRegion = RegionFromId(21);
                }
                else {
                    TriggerExecute(gt_ObjectiveCrystalsBeforeStormFailed, true, false);
                    gv_shieldRegion = RegionFromId(20);
                }
                gv_pickedStromGroup = RandomInt(1, 3);
                TriggerExecute(gt_SpawnStormUnits, true, false);
                TriggerExecute(gt_InitHybridStromWave, true, false);
                TriggerExecute(gt_DPdestructionpick, true, false);
                TriggerExecute(gt_Weathershieldturnedon, true, false);
                Wait(2.0, c_timeGame);
                libCOMI_gf_SendActorMessageToDoodadsInRegion(&quot;SetTintColor 16,16,16 3.000000&quot;, &quot;ShakurasBaseShield&quot;, RegionEntireMap());
                if ((gv_objectiveCrystalsBeforeStormCompletedsoon == true)) {
                    Wait(130.0, c_timeGame);
                }
                else {
                    Wait(136.0, c_timeGame);
                }
                gv_gameStage = 2;
                TriggerEnable(gt_Preparenextpick, true);
                if ((gv_activeCrystalIsInGame[1] == false)) {
                    if ((gv_activeCrystalIsInGame[2] == true)) {
                        Wait(45.0, c_timeGame);
                    }
                    gf_PickCrystal(1, false, 0);
                }
                TriggerExecute(gt_BaseAttackWave02B, true, false);
                Wait(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 115, 135, 150, 175, 175, 175), c_timeGame);
                autoFD04CA46_ae = 18;
                autoFD04CA46_ai = 1;
                lv_doodadid = 1;
                for ( ; ( (autoFD04CA46_ai &gt;= 0 &amp;&amp; lv_doodadid &lt;= autoFD04CA46_ae) || (autoFD04CA46_ai &lt;= 0 &amp;&amp; lv_doodadid &gt;= autoFD04CA46_ae) ) ; lv_doodadid += autoFD04CA46_ai ) {
                    libNtve_gf_KillModel(gv_lBeffect[lv_doodadid]);
                }
                TriggerExecute(gt_Stormisending, true, false);
                SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryAmbience, &quot;Ambience_PShakuras02_LowIntensity_Quad&quot;, c_soundtrackCueAny, c_soundtrackIndexAny, true);
                GameSetLighting(&quot;Aenyth&quot;, 40.0);
                FogSetColorOverTime(Color(18.04, 18.04, 11.37), 40.0);
                FogSetStartHeightOverTime(-2.0, 40.0);
                TriggerEnable(gt_Stormwarning, false);
                if ((TriggerGetExecCount(gt_DestroyStorm1) == 0)) {
                    TriggerExecute(gt_DestroyStorm1, false, false);
                }
                Wait(4.0, c_timeGame);
                if ((TriggerGetExecCount(gt_DestroyStorm2) == 0)) {
                    TriggerExecute(gt_DestroyStorm2, false, false);
                }
                Wait(4.0, c_timeGame);
                if ((TriggerGetExecCount(gt_DestroyStorm3) == 0)) {
                    TriggerExecute(gt_DestroyStorm3, false, false);
                }
                Wait(4.0, c_timeGame);
                if ((TriggerGetExecCount(gt_DestroyStorm4) == 0)) {
                    TriggerExecute(gt_DestroyStorm4, false, false);
                }
                Wait(4.0, c_timeGame);
                if ((TriggerGetExecCount(gt_DestroyStorm5) == 0)) {
                    TriggerExecute(gt_DestroyStorm5, false, false);
                }
                Wait(4.0, c_timeGame);
                if ((TriggerGetExecCount(gt_DestroyStorm6) == 0)) {
                    TriggerExecute(gt_DestroyStorm6, false, false);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_StormStarts_Init () {
                gt_StormStarts = TriggerCreate(&quot;gt_StormStarts_Func&quot;);
                TriggerAddEventTimer(gt_StormStarts, gv_stormCountdownTimer);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Spawn Storm Units
            //--------------------------------------------------------------------------------------------------
            bool gt_SpawnStormUnits_Func (bool testConds, bool runActions) {
                int auto56CA54AA_ae;
                int auto56CA54AA_ai;
                int auto301F61DC_n;
                int auto301F61DC_i;
                // Variable Declarations
                int lv_stormid;
                int lv_doodadid;
                // Variable Initialization
                lv_stormid = 1;
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((gv_gameStage == 1)) {
                    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryAmbience, &quot;Ambience_Aenyth_HighIntensity_First&quot;, c_soundtrackCueAny, c_soundtrackIndexAny, true);
                }
                else {
                    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryAmbience, &quot;Ambience_Aenyth_HighIntensity_Second&quot;, c_soundtrackCueAny, c_soundtrackIndexAny, true);
                }
                auto56CA54AA_ae = 18;
                auto56CA54AA_ai = 1;
                lv_doodadid = 1;
                for ( ; ( (auto56CA54AA_ai &gt;= 0 &amp;&amp; lv_doodadid &lt;= auto56CA54AA_ae) || (auto56CA54AA_ai &lt;= 0 &amp;&amp; lv_doodadid &gt;= auto56CA54AA_ae) ) ; lv_doodadid += auto56CA54AA_ai ) {
                    libNtve_gf_CreateModelAtPoint(&quot;LightningBolt&quot;, PointFromName((&quot;Storm_LB&quot; + IntToString(lv_doodadid))));
                    gv_lBeffect[lv_doodadid] = libNtve_gf_ActorLastCreated();
                }
                auto301F61DC_n = 6;
                for (auto301F61DC_i = 1; auto301F61DC_i &lt;= auto301F61DC_n; auto301F61DC_i += 1) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;AenythStormUnit&quot;, c_unitCreateIgnorePlacement, gv_pLAYER_05_Player03Hybrids, Point((PointGetX(gv_stormUnitSpwLoc[gv_pickedStromGroup][lv_stormid]) + RandomFixed(0.0, 18.0)), (PointGetY(gv_stormUnitSpwLoc[gv_pickedStromGroup][lv_stormid]) + RandomFixed(0.0, 18.0))));
                    gv_stormUnit[lv_stormid] = UnitLastCreated();
                    gv_stormUnitsCount += 1;
                    libCOMI_gf_CreatePingCoop(PlayerGroupAll(), &quot;PingSimple&quot;, gv_stormUnitSpwLoc[gv_pickedStromGroup][lv_stormid], ColorWithAlpha(50.20, 0.00, 0.00, 0.00), 0.0);
                    gv_stormPing[lv_stormid] = PingLastCreated();
                    PingSetScale(gv_stormPing[lv_stormid], 0.35);
                    PingSetUnit(gv_stormPing[lv_stormid], gv_stormUnit[lv_stormid]);
                    if ((ObjectiveGetState(gv_objectiveRescueStalkers) == c_objectiveStateCompleted)) {
                        UnitIssueOrder(gv_stormUnit[lv_stormid], OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), gv_stormUnitTarget0[gv_pickedStromGroup][lv_stormid]), c_orderQueueReplace);
                        UnitIssueOrder(gv_stormUnit[lv_stormid], OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), gv_stormUnitTarget[gv_pickedStromGroup][lv_stormid]), c_orderQueueAddToEnd);
                    }
                    else {
                        UnitIssueOrder(gv_stormUnit[lv_stormid], OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), gv_stormUnitTarget[gv_pickedStromGroup][lv_stormid]), c_orderQueueReplace);
                    }
                    lv_stormid += 1;
                    if ((lv_stormid != 7)) {
                        Wait(RandomInt(3, 9), c_timeGame);
                    }
                }
                TriggerEnable(gt_Stormwarning, true);
                if (((ObjectiveGetState(gv_objectiveRescueStalkers) == c_objectiveStateCompleted) || (gv_gameStage &gt;= 3))) {
                    Wait(15.0, c_timeGame);
                }
                TriggerExecute(gt_StormController1, true, false);
                TriggerExecute(gt_StormController2, true, false);
                TriggerExecute(gt_StormController3, true, false);
                TriggerExecute(gt_StormController4, true, false);
                TriggerExecute(gt_StormController5, true, false);
                TriggerExecute(gt_StormController6, true, false);
                TriggerEnable(gt_DestroyStorm1, true);
                TriggerEnable(gt_DestroyStorm2, true);
                TriggerEnable(gt_DestroyStorm3, true);
                TriggerEnable(gt_DestroyStorm4, true);
                TriggerEnable(gt_DestroyStorm5, true);
                TriggerEnable(gt_DestroyStorm6, true);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_SpawnStormUnits_Init () {
                gt_SpawnStormUnits = TriggerCreate(&quot;gt_SpawnStormUnits_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Storm warning
            //--------------------------------------------------------------------------------------------------
            bool gt_Stormwarning_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!(((UnitCount(null, gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(gv_stormUnit[1]), 7.0), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterStructure) | (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32)) | (1 &lt;&lt; (c_targetFilterInvulnerable - 32))), 0) != 0) || (UnitCount(null, gv_pLAYER_02_USER, RegionCircle(UnitGetPosition(gv_stormUnit[1]), 7.0), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterStructure) | (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32)) | (1 &lt;&lt; (c_targetFilterInvulnerable - 32))), 0) != 0) || (UnitCount(null, gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(gv_stormUnit[2]), 7.0), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterStructure) | (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32)) | (1 &lt;&lt; (c_targetFilterInvulnerable - 32))), 0) != 0) || (UnitCount(null, gv_pLAYER_02_USER, RegionCircle(UnitGetPosition(gv_stormUnit[2]), 7.0), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterStructure) | (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32)) | (1 &lt;&lt; (c_targetFilterInvulnerable - 32))), 0) != 0) || (UnitCount(null, gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(gv_stormUnit[3]), 7.0), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterStructure) | (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32)) | (1 &lt;&lt; (c_targetFilterInvulnerable - 32))), 0) != 0) || (UnitCount(null, gv_pLAYER_02_USER, RegionCircle(UnitGetPosition(gv_stormUnit[3]), 7.0), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterStructure) | (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32)) | (1 &lt;&lt; (c_targetFilterInvulnerable - 32))), 0) != 0) || (UnitCount(null, gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(gv_stormUnit[4]), 7.0), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterStructure) | (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32)) | (1 &lt;&lt; (c_targetFilterInvulnerable - 32))), 0) != 0) || (UnitCount(null, gv_pLAYER_02_USER, RegionCircle(UnitGetPosition(gv_stormUnit[4]), 7.0), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterStructure) | (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32)) | (1 &lt;&lt; (c_targetFilterInvulnerable - 32))), 0) != 0) || (UnitCount(null, gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(gv_stormUnit[5]), 7.0), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterStructure) | (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32)) | (1 &lt;&lt; (c_targetFilterInvulnerable - 32))), 0) != 0) || (UnitCount(null, gv_pLAYER_02_USER, RegionCircle(UnitGetPosition(gv_stormUnit[5]), 7.0), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterStructure) | (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32)) | (1 &lt;&lt; (c_targetFilterInvulnerable - 32))), 0) != 0) || (UnitCount(null, gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(gv_stormUnit[6]), 7.0), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterStructure) | (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32)) | (1 &lt;&lt; (c_targetFilterInvulnerable - 32))), 0) != 0) || (UnitCount(null, gv_pLAYER_02_USER, RegionCircle(UnitGetPosition(gv_stormUnit[6]), 7.0), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterStructure) | (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32)) | (1 &lt;&lt; (c_targetFilterInvulnerable - 32))), 0) != 0)))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                TriggerExecute(gt_StormClusterdanger, true, false);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_Stormwarning_Init () {
                gt_Stormwarning = TriggerCreate(&quot;gt_Stormwarning_Func&quot;);
                TriggerEnable(gt_Stormwarning, false);
                TriggerAddEventTimePeriodic(gt_Stormwarning, 1.25, c_timeGame);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Storm Ends
            //--------------------------------------------------------------------------------------------------
            bool gt_StormEnds_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                    if (!((gv_stormUnitsCount == 0))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                TriggerExecute(gt_DestroyWeatherShield, true, false);
                SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryAmbience, &quot;Ambience_Shakuras&quot;, c_soundtrackCueAny, c_soundtrackIndexAny, true);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_StormEnds_Init () {
                gt_StormEnds = TriggerCreate(&quot;gt_StormEnds_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Destroy Weather Shield
            //--------------------------------------------------------------------------------------------------
            bool gt_DestroyWeatherShield_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                SoundPlayForPlayer(SoundLink(&quot;Fenix_MegaShields_End&quot;, -1), c_maxPlayers, PlayerGroupAll(), 80.0, 0.0);
                libCOMI_gf_SendActorMessageToDoodadsInRegion(&quot;AnimPlay Death Death&quot;, &quot;ShakurasBaseShield&quot;, RegionEntireMap());
                ActorSend(gv_stormCenterEffect, &quot;AnimBracketStop BSD&quot;);
                Wait(0.6, c_timeGame);
                libNtve_gf_KillModel(gv_stormCenterEffect);
                Wait(0.35, c_timeGame);
                if ((gv_gameStage &lt; 3)) {
                    libNtve_gf_ShowHideDoodadsInRegion(false, RegionEntireMap(), &quot;ShakurasBaseShield&quot;);
                }
                else {
                    libNtve_gf_RemoveDoodadsinRegion(RegionEntireMap(), &quot;ShakurasBaseShield&quot;);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_DestroyWeatherShield_Init () {
                gt_DestroyWeatherShield = TriggerCreate(&quot;gt_DestroyWeatherShield_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Second Storm in 25sec
            //--------------------------------------------------------------------------------------------------
            bool gt_SecondStormin25sec_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                TimerStart(gv_secondStormCountdownTimer, 25.0, false, c_timeGame);
                libCOMI_gf_TimerWindowCreate(gv_secondStormCountdownTimer, StringExternal(&quot;Param/Value/625E28FE&quot;), true, false);
                gv_secondStormCountdownTimerWindow = TimerWindowLastCreated();
                GameSetLighting(&quot;AenythStorm&quot;, 32.0);
                FogSetColorOverTime(Color(10.98, 14.51, 18.43), 32.0);
                FogSetStartHeightOverTime(2.0, 32.0);
                TriggerExecute(gt_SecondStorm, true, false);
                SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryAmbience, &quot;Ambience_PShakuras02_LowIntensity_Quad&quot;, c_soundtrackCueAny, c_soundtrackIndexAny, true);
                Wait(16.0, c_timeGame);
                SoundPlayForPlayer(SoundLink(&quot;HybridZerg_DistantRoar&quot;, -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_SecondStormin25sec_Init () {
                gt_SecondStormin25sec = TriggerCreate(&quot;gt_SecondStormin25sec_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Second Storm Starts
            //--------------------------------------------------------------------------------------------------
            bool gt_SecondStormStarts_Func (bool testConds, bool runActions) {
                int auto7B164B1B_ae;
                int auto7B164B1B_ai;
                // Variable Declarations
                bool lv_picksecondary;
                int lv_doodadid;
                // Variable Initialization
                // Actions
                if (!runActions) {
                    return true;
                }
                gv_gameStage = 3;
                TimerWindowDestroy(gv_secondStormCountdownTimerWindow);
                libNtve_gf_ShowHideDoodadsInRegion(true, RegionEntireMap(), &quot;ShakurasBaseShield&quot;);
                libCOMI_gf_SendActorMessageToDoodadsInRegion(&quot;SetScale 0.920000&quot;, &quot;ShakurasBaseShield&quot;, RegionEntireMap());
                libCOMI_gf_SendActorMessageToDoodadsInRegion(&quot;SetTintColor 0,0,0&quot;, &quot;ShakurasBaseShield&quot;, RegionEntireMap());
                libCOMI_gf_SendActorMessageToDoodadsInRegion(&quot;SetTintColor {64,64,64 8.000000} 2.000000&quot;, &quot;ShakurasBaseShield&quot;, RegionEntireMap());
                SoundPlayForPlayer(SoundLink(&quot;Fenix_MegaShields_Start&quot;, -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
                libNtve_gf_CreateModelAtPoint(&quot;SOAWarpInReinforcementsBeam&quot;, PointFromId(751626843));
                gv_stormCenterEffect = libNtve_gf_ActorLastCreated();
                ActorSend(gv_stormCenterEffect, &quot;AnimBracketStart BSD Birth Stand Death&quot;);
                ActorSend(gv_stormCenterEffect, &quot;SetOpacity 0.100000&quot;);
                ActorSend(gv_stormCenterEffect, &quot;SetHeight 3.500000&quot;);
                libCOMI_gf_SendActorMessageToDoodadsInRegion(&quot;SetScale 1.600000,1.600000,0.880000 6.000000&quot;, &quot;ShakurasBaseShield&quot;, RegionEntireMap());
                libCOMI_gf_SendActorMessageToDoodadsInRegion(&quot;SetHeight -5.500000&quot;, &quot;ShakurasBaseShield&quot;, RegionEntireMap());
                gv_shieldRegion = RegionFromId(21);
                gv_pickedStromGroup = RandomInt(1, 3);
                TriggerExecute(gt_SpawnStormUnits, true, false);
                Wait(2.0, c_timeGame);
                libCOMI_gf_SendActorMessageToDoodadsInRegion(&quot;SetTintColor 16,16,16 3.000000&quot;, &quot;ShakurasBaseShield&quot;, RegionEntireMap());
                TriggerExecute(gt_InitSecondHybridStromWave, true, false);
                Wait(92.0, c_timeGame);
                gv_gameStage = 4;
                TriggerEnable(gt_Preparenextpick, true);
                TriggerExecute(gt_Preparepickafterfifth, true, false);
                TriggerExecute(gt_BaseAttackWave03, true, false);
                Wait(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 62, 70, 78, 86, 90, 90), c_timeGame);
                SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryAmbience, &quot;Ambience_PShakuras02_LowIntensity_Quad&quot;, c_soundtrackCueAny, c_soundtrackIndexAny, true);
                GameSetLighting(&quot;Aenyth&quot;, 40.0);
                FogSetColorOverTime(Color(18.04, 18.04, 11.37), 40.0);
                FogSetStartHeightOverTime(-2.0, 40.0);
                TriggerEnable(gt_Stormwarning, false);
                TriggerEnable(gt_StormEnds, true);
                if ((TriggerGetExecCount(gt_DestroyStorm1) == 1)) {
                    TriggerExecute(gt_DestroyStorm1, false, false);
                }
                Wait(4.0, c_timeGame);
                if ((TriggerGetExecCount(gt_DestroyStorm2) == 1)) {
                    TriggerExecute(gt_DestroyStorm2, false, false);
                }
                Wait(4.0, c_timeGame);
                if ((TriggerGetExecCount(gt_DestroyStorm3) == 1)) {
                    TriggerExecute(gt_DestroyStorm3, false, false);
                }
                Wait(4.0, c_timeGame);
                if ((TriggerGetExecCount(gt_DestroyStorm4) == 1)) {
                    TriggerExecute(gt_DestroyStorm4, false, false);
                }
                Wait(4.0, c_timeGame);
                if ((TriggerGetExecCount(gt_DestroyStorm5) == 1)) {
                    TriggerExecute(gt_DestroyStorm5, false, false);
                }
                Wait(4.0, c_timeGame);
                if ((TriggerGetExecCount(gt_DestroyStorm6) == 1)) {
                    TriggerExecute(gt_DestroyStorm6, false, false);
                }
                auto7B164B1B_ae = 18;
                auto7B164B1B_ai = 1;
                lv_doodadid = 1;
                for ( ; ( (auto7B164B1B_ai &gt;= 0 &amp;&amp; lv_doodadid &lt;= auto7B164B1B_ae) || (auto7B164B1B_ai &lt;= 0 &amp;&amp; lv_doodadid &gt;= auto7B164B1B_ae) ) ; lv_doodadid += auto7B164B1B_ai ) {
                    libNtve_gf_KillModel(gv_lBeffect[lv_doodadid]);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_SecondStormStarts_Init () {
                gt_SecondStormStarts = TriggerCreate(&quot;gt_SecondStormStarts_Func&quot;);
                TriggerAddEventTimer(gt_SecondStormStarts, gv_secondStormCountdownTimer);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Bonus Kill Hybrids Init
            //--------------------------------------------------------------------------------------------------
            bool gt_BonusKillHybridsInit_Func (bool testConds, bool runActions) {
                int auto3BC8194E_val;
                // Variable Declarations
                point lv_spwloc;
                point lv_targetloc;
                // Variable Initialization
                // Actions
                if (!runActions) {
                    return true;
                }
                auto3BC8194E_val = RandomInt(1, 2);
                if (auto3BC8194E_val == 1) {
                    gv_bonusKillHybridsPCUnit = UnitFromId(2139156188);
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, gv_hybridMajor, 0, gv_pLAYER_05_Player03Hybrids, PointFromId(1027267174));
                    UnitGroupAddUnitGroup(gv_bonusKillHybridsUnitGroup, UnitLastCreatedGroup());
                    gv_bonusKillHybridsHMUnit = UnitLastCreated();
                    libNtve_gf_CreateUnitsWithDefaultFacing(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 1, 2, 3, 3, 3, 3), gv_hybridMinor, 0, gv_pLAYER_03_Player01Enemy, PointFromId(112647677));
                    UnitGroupAddUnitGroup(gv_bonusKillHybridsUnitGroup, UnitLastCreatedGroup());
                    libNtve_gf_CreateUnitsWithDefaultFacing(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 1, 2, 2, 3, 3, 3), gv_hybridMinor, 0, gv_pLAYER_03_Player01Enemy, PointFromId(818864809));
                    UnitGroupAddUnitGroup(gv_bonusKillHybridsUnitGroup, UnitLastCreatedGroup());
                    lv_spwloc = PointFromId(1333720092);
                    lv_targetloc = PointFromId(2024183032);
                }
                else if (auto3BC8194E_val == 2) {
                    gv_bonusKillHybridsPCUnit = UnitFromId(860039315);
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, gv_hybridMajor, 0, gv_pLAYER_05_Player03Hybrids, PointFromId(1002950520));
                    UnitGroupAddUnitGroup(gv_bonusKillHybridsUnitGroup, UnitLastCreatedGroup());
                    gv_bonusKillHybridsHMUnit = UnitLastCreated();
                    libNtve_gf_CreateUnitsWithDefaultFacing(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 1, 2, 3, 3, 3, 3), gv_hybridMinor, 0, gv_pLAYER_03_Player01Enemy, PointFromId(1304305178));
                    UnitGroupAddUnitGroup(gv_bonusKillHybridsUnitGroup, UnitLastCreatedGroup());
                    libNtve_gf_CreateUnitsWithDefaultFacing(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 1, 2, 2, 3, 3, 3), gv_hybridMinor, 0, gv_pLAYER_03_Player01Enemy, PointFromId(1582125929));
                    UnitGroupAddUnitGroup(gv_bonusKillHybridsUnitGroup, UnitLastCreatedGroup());
                    lv_spwloc = PointFromId(683824452);
                    lv_targetloc = PointFromId(2013356174);
                }
                else {
                }
                libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_Secondary, UnitGetPosition(gv_bonusKillHybridsPCUnit), StringExternal(&quot;Param/Value/59705727&quot;));
                gv_bonusKillHybridsPing = PingLastCreated();
                UnitIssueOrder(gv_bonusKillHybridsPCUnit, Order(AbilityCommand(&quot;ChargeAncientXelNagaArtifact&quot;, 0)), c_orderQueueReplace);
                TriggerExecute(gt_ObjectiveKillHybridsCreate, true, false);
                TriggerEnable(gt_BonusKillHybridsKilled, true);
                TriggerEnable(gt_BonusKillHybridsExpired, true);
                TriggerEnable(gt_BonusKillHybridMajorKilled, true);
                TriggerEnable(gt_BonusKillHybridsOrdersReset, true);
                libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_Player01Enemy, gv_pLAYER_04_Player02Enemy, libCOMI_ge_CoopAIAttackWaveBuckets__6Larger, libCOMI_ge_CoopAITechLevelBuckets__5Late, lv_targetloc, true);
                UnitGroupAddUnitGroup(libCOMI_gv_cM_CoopAI_DontPingUnits, libCOMI_gf_LastCreatedCoopAttackForce());
                Wait(3.0, c_timeGame);
                libNtve_gf_MakeUnitInvulnerable(gv_bonusKillHybridsPCUnit, false);
                Wait(2.0, c_timeGame);
                TriggerEnable(gt_BonusKillHybridsTimerUpdate, true);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_BonusKillHybridsInit_Init () {
                gt_BonusKillHybridsInit = TriggerCreate(&quot;gt_BonusKillHybridsInit_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Bonus Kill Hybrids Init OBSOLETE
            //--------------------------------------------------------------------------------------------------
            bool gt_BonusKillHybridsInitOBSOLETE_Func (bool testConds, bool runActions) {
                int auto3121D328_val;
                // Variable Declarations
                point lv_spwloc;
                point lv_targetloc;
                // Variable Initialization
                // Actions
                if (!runActions) {
                    return true;
                }
                auto3121D328_val = RandomInt(1, 2);
                if (auto3121D328_val == 1) {
                    gv_bonusKillHybridsPCUnit = UnitFromId(2139156188);
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, gv_hybridMajor, 0, gv_pLAYER_05_Player03Hybrids, PointFromId(1027267174));
                    UnitGroupAddUnitGroup(gv_bonusKillHybridsUnitGroup, UnitLastCreatedGroup());
                    gv_bonusKillHybridsHMUnit = UnitLastCreated();
                    libNtve_gf_CreateUnitsWithDefaultFacing(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 1, 2, 3, 3, 3, 3), gv_hybridMinor, 0, gv_pLAYER_03_Player01Enemy, PointFromId(112647677));
                    UnitGroupAddUnitGroup(gv_bonusKillHybridsUnitGroup, UnitLastCreatedGroup());
                    libNtve_gf_CreateUnitsWithDefaultFacing(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 1, 2, 2, 3, 3, 3), gv_hybridMinor, 0, gv_pLAYER_03_Player01Enemy, PointFromId(818864809));
                    UnitGroupAddUnitGroup(gv_bonusKillHybridsUnitGroup, UnitLastCreatedGroup());
                    lv_spwloc = PointFromId(1333720092);
                    lv_targetloc = PointFromId(2024183032);
                }
                else if (auto3121D328_val == 2) {
                    gv_bonusKillHybridsPCUnit = UnitFromId(860039315);
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, gv_hybridMajor, 0, gv_pLAYER_05_Player03Hybrids, PointFromId(1002950520));
                    UnitGroupAddUnitGroup(gv_bonusKillHybridsUnitGroup, UnitLastCreatedGroup());
                    gv_bonusKillHybridsHMUnit = UnitLastCreated();
                    libNtve_gf_CreateUnitsWithDefaultFacing(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 1, 2, 3, 3, 3, 3), gv_hybridMinor, 0, gv_pLAYER_03_Player01Enemy, PointFromId(1304305178));
                    UnitGroupAddUnitGroup(gv_bonusKillHybridsUnitGroup, UnitLastCreatedGroup());
                    libNtve_gf_CreateUnitsWithDefaultFacing(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 1, 2, 2, 3, 3, 3), gv_hybridMinor, 0, gv_pLAYER_03_Player01Enemy, PointFromId(1582125929));
                    UnitGroupAddUnitGroup(gv_bonusKillHybridsUnitGroup, UnitLastCreatedGroup());
                    lv_spwloc = PointFromId(683824452);
                    lv_targetloc = PointFromId(2013356174);
                }
                else {
                }
                libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_Secondary, UnitGetPosition(gv_bonusKillHybridsPCUnit), StringExternal(&quot;Param/Value/33D033D9&quot;));
                gv_bonusKillHybridsPing = PingLastCreated();
                UnitIssueOrder(gv_bonusKillHybridsPCUnit, Order(AbilityCommand(&quot;ChargeAncientXelNagaArtifact&quot;, 0)), c_orderQueueReplace);
                TriggerExecute(gt_ObjectiveKillHybridsCreate, true, false);
                TriggerEnable(gt_BonusKillHybridsKilled, true);
                TriggerEnable(gt_BonusKillHybridsExpired, true);
                TriggerEnable(gt_BonusKillHybridMajorKilled, true);
                TriggerEnable(gt_BonusKillHybridsOrdersReset, true);
                libCOMI_gf_SetCoopAIAttackGroupSpawnPoint(gv_pLAYER_03_Player01Enemy, lv_spwloc);
                AIAttackWaveSetTargetRegion(gv_pLAYER_03_Player01Enemy, RegionCircle(lv_targetloc, 4.5), 0);
                libCOMI_gf_AddCommanderUnitstoAttackWavePresetBucketTechLevel(gv_pLAYER_03_Player01Enemy, true, libCOMI_ge_CoopAIAttackWaveBuckets__6Larger, libCOMI_ge_CoopAITechLevelBuckets__5Late);
                AIAttackWaveSend(gv_pLAYER_03_Player01Enemy, 0, true);
                libCOMI_gf_EnableDisableCoopAIWavePing(WaveLastCreated(), false);
                libCOMI_gf_SetCoopAIAttackGroupSpawnPoint(gv_pLAYER_04_Player02Enemy, lv_spwloc);
                AIAttackWaveSetTargetRegion(gv_pLAYER_04_Player02Enemy, RegionCircle(lv_targetloc, 4.5), 0);
                libCOMI_gf_AddCommanderUnitstoAttackWavePresetBucketTechLevel(gv_pLAYER_04_Player02Enemy, true, libCOMI_ge_CoopAIAttackWaveBuckets__6Larger, libCOMI_ge_CoopAITechLevelBuckets__5Late);
                AIAttackWaveSend(gv_pLAYER_04_Player02Enemy, 0, true);
                libCOMI_gf_EnableDisableCoopAIWavePing(WaveLastCreated(), false);
                Wait(3.0, c_timeGame);
                libNtve_gf_MakeUnitInvulnerable(gv_bonusKillHybridsPCUnit, false);
                Wait(2.0, c_timeGame);
                TriggerEnable(gt_BonusKillHybridsTimerUpdate, true);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_BonusKillHybridsInitOBSOLETE_Init () {
                gt_BonusKillHybridsInitOBSOLETE = TriggerCreate(&quot;gt_BonusKillHybridsInitOBSOLETE_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Bonus Kill Hybrid Major Killed
            //--------------------------------------------------------------------------------------------------
            bool gt_BonusKillHybridMajorKilled_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                    if (!((gv_bonusKillHybridsHMUnit == EventUnit()))) {
                        return false;
                    }
                    if (!((libNtve_gf_UnitGroupIsDead(gv_bonusKillHybridsUnitGroup) == false))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                UnitGroupLoopBegin(gv_bonusKillHybridsUnitGroup);
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    UnitSetOwner(UnitGroupLoopCurrent(), gv_pLAYER_05_Player03Hybrids, false);
                }
                UnitGroupLoopEnd();
                UnitGroupIssueOrder(gv_bonusKillHybridsUnitGroup, OrderTargetingPoint(AbilityCommand(&quot;attack&quot;, 0), UnitGetPosition(gv_bonusKillHybridsPCUnit)), c_orderQueueReplace);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_BonusKillHybridMajorKilled_Init () {
                gt_BonusKillHybridMajorKilled = TriggerCreate(&quot;gt_BonusKillHybridMajorKilled_Func&quot;);
                TriggerEnable(gt_BonusKillHybridMajorKilled, false);
                TriggerAddEventUnitDied(gt_BonusKillHybridMajorKilled, null);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Bonus Kill Hybrids Killed
            //--------------------------------------------------------------------------------------------------
            bool gt_BonusKillHybridsKilled_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((libNtve_gf_UnitGroupIsDead(gv_bonusKillHybridsUnitGroup) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                libNtve_gf_MakeUnitInvulnerable(gv_bonusKillHybridsPCUnit, true);
                UnitSetState(gv_bonusKillHybridsPCUnit, c_unitStateHighlightable, false);
                TimerPause(gv_bonusKillHybridsTimer, true);
                TriggerEnable(gt_BonusKillHybridsTimerUpdate, false);
                TriggerEnable(gt_BonusKillHybridMajorKilled, false);
                TriggerEnable(gt_BonusKillHybridsOrdersReset, false);
                PingDestroy(gv_bonusKillHybridsPing);
                TriggerExecute(gt_ObjectiveKillHybridsComplete, true, false);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_BonusKillHybridsKilled_Init () {
                gt_BonusKillHybridsKilled = TriggerCreate(&quot;gt_BonusKillHybridsKilled_Func&quot;);
                TriggerEnable(gt_BonusKillHybridsKilled, false);
                TriggerAddEventUnitDied(gt_BonusKillHybridsKilled, null);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Bonus Kill Hybrids Expired
            //--------------------------------------------------------------------------------------------------
            bool gt_BonusKillHybridsExpired_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((EventUnit() == gv_bonusKillHybridsPCUnit))) {
                        return false;
                    }
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Large, libNtve_ge_ExplosionType_Protoss, UnitGetPosition(EventUnit()));
                TriggerEnable(TriggerGetCurrent(), false);
                TriggerEnable(gt_BonusKillHybridsTimerUpdate, false);
                TriggerEnable(gt_BonusKillHybridsKilled, false);
                TriggerEnable(gt_BonusKillHybridMajorKilled, false);
                TriggerEnable(gt_BonusKillHybridsOrdersReset, false);
                PingDestroy(gv_bonusKillHybridsPing);
                TriggerExecute(gt_ObjectiveKillHybridsFailed, true, false);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_BonusKillHybridsExpired_Init () {
                gt_BonusKillHybridsExpired = TriggerCreate(&quot;gt_BonusKillHybridsExpired_Func&quot;);
                TriggerEnable(gt_BonusKillHybridsExpired, false);
                TriggerAddEventUnitDied(gt_BonusKillHybridsExpired, null);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Bonus Kill Hybrids Timer Update
            //--------------------------------------------------------------------------------------------------
            bool gt_BonusKillHybridsTimerUpdate_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((EventUnit() == gv_bonusKillHybridsPCUnit))) {
                        return false;
                    }
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerExecute(gt_ObjectiveKillHybridsUpdate, true, false);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_BonusKillHybridsTimerUpdate_Init () {
                gt_BonusKillHybridsTimerUpdate = TriggerCreate(&quot;gt_BonusKillHybridsTimerUpdate_Func&quot;);
                TriggerEnable(gt_BonusKillHybridsTimerUpdate, false);
                TriggerAddEventUnitAttacked2(gt_BonusKillHybridsTimerUpdate, null, null);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Bonus Kill Hybrids Orders Reset
            //--------------------------------------------------------------------------------------------------
            bool gt_BonusKillHybridsOrdersReset_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((UnitIsAlive(gv_bonusKillHybridsHMUnit) == true)) {
                    UnitIssueOrder(gv_bonusKillHybridsHMUnit, OrderTargetingPoint(AbilityCommand(&quot;attack&quot;, 0), UnitGetPosition(gv_bonusKillHybridsPCUnit)), c_orderQueueReplace);
                }
                else {
                    UnitGroupIssueOrder(gv_bonusKillHybridsUnitGroup, OrderTargetingPoint(AbilityCommand(&quot;attack&quot;, 0), UnitGetPosition(gv_bonusKillHybridsPCUnit)), c_orderQueueReplace);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_BonusKillHybridsOrdersReset_Init () {
                gt_BonusKillHybridsOrdersReset = TriggerCreate(&quot;gt_BonusKillHybridsOrdersReset_Func&quot;);
                TriggerEnable(gt_BonusKillHybridsOrdersReset, false);
                TriggerAddEventTimePeriodic(gt_BonusKillHybridsOrdersReset, 3.0, c_timeGame);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Indicate Double Path
            //--------------------------------------------------------------------------------------------------
            bool gt_IndicateDoublePath_Func (bool testConds, bool runActions) {
                int auto4008294A_n;
                int auto4008294A_i;
                int auto298CD6FF_n;
                int auto298CD6FF_i;
                int autoBE01DBCA_n;
                int autoBE01DBCA_i;
                // Variable Declarations
                int lv_doublepathdisplay;
                // Variable Initialization
                // Actions
                if (!runActions) {
                    return true;
                }
                auto4008294A_n = 3;
                for (auto4008294A_i = 1; auto4008294A_i &lt;= auto4008294A_n; auto4008294A_i += 1) {
                    if ((gv_activeCrystalIsTransported[1] == false) &amp;&amp; (gv_activeCrystalIsTransported[2] == false)) {
                        PathCreateForUnitType(PlayerGroupAll(), &quot;Probe&quot;, 1, gv_crystalTransportSpawnPoint[gv_activeCrystalLevel[1]][gv_activeCrystalID[1]]);
                        lv_doublepathdisplay = PathLastCreated();
                        PathSetDestinationPoint(PathLastCreated(), gv_deliveryPoint[gv_crystalDeliverySiteID[gv_activeCrystalLevel[2]][gv_activeCrystalID[2]]]);
                        PathSetVisible(PathLastCreated(), c_pathLocationWorld, false);
                        PathSetLineWidth(PathLastCreated(), c_pathLocationMinimap, 8.0);
                        PathAddWayPoint(PathLastCreated(), gv_crystalTransportSpawnPoint[gv_activeCrystalLevel[2]][gv_activeCrystalID[2]]);
                        Wait(1.5, c_timeGame);
                    }
                    else {
                        PathDestroy(lv_doublepathdisplay);
                        return true;
                    }
                    auto298CD6FF_n = 2;
                    for (auto298CD6FF_i = 1; auto298CD6FF_i &lt;= auto298CD6FF_n; auto298CD6FF_i += 1) {
                        if ((gv_activeCrystalIsTransported[1] == false) &amp;&amp; (gv_activeCrystalIsTransported[2] == false)) {
                            PathSetVisible(PathLastCreated(), c_pathLocationAll, false);
                            Wait(1.0, c_timeGame);
                            PathSetVisible(PathLastCreated(), c_pathLocationMinimap, true);
                            Wait(1.25, c_timeGame);
                        }
                        else {
                            PathDestroy(lv_doublepathdisplay);
                            return true;
                        }
                    }
                    if ((gv_activeCrystalIsTransported[1] == false) &amp;&amp; (gv_activeCrystalIsTransported[2] == false)) {
                        PathDestroy(lv_doublepathdisplay);
                        Wait(1.5, c_timeGame);
                        PathCreateForUnitType(PlayerGroupAll(), &quot;Probe&quot;, 1, gv_crystalTransportSpawnPoint[gv_activeCrystalLevel[2]][gv_activeCrystalID[2]]);
                        lv_doublepathdisplay = PathLastCreated();
                        PathSetDestinationPoint(PathLastCreated(), gv_deliveryPoint[gv_crystalDeliverySiteID[gv_activeCrystalLevel[1]][gv_activeCrystalID[1]]]);
                        PathSetVisible(PathLastCreated(), c_pathLocationWorld, false);
                        PathSetLineWidth(PathLastCreated(), c_pathLocationMinimap, 8.0);
                        PathAddWayPoint(PathLastCreated(), gv_crystalTransportSpawnPoint[gv_activeCrystalLevel[1]][gv_activeCrystalID[1]]);
                        Wait(1.5, c_timeGame);
                    }
                    else {
                        PathDestroy(lv_doublepathdisplay);
                        return true;
                    }
                    autoBE01DBCA_n = 2;
                    for (autoBE01DBCA_i = 1; autoBE01DBCA_i &lt;= autoBE01DBCA_n; autoBE01DBCA_i += 1) {
                        if ((gv_activeCrystalIsTransported[1] == false) &amp;&amp; (gv_activeCrystalIsTransported[2] == false)) {
                            PathSetVisible(PathLastCreated(), c_pathLocationAll, false);
                            Wait(1.0, c_timeGame);
                            PathSetVisible(PathLastCreated(), c_pathLocationMinimap, true);
                            Wait(1.25, c_timeGame);
                        }
                        else {
                            PathDestroy(lv_doublepathdisplay);
                            return true;
                        }
                    }
                    PathDestroy(lv_doublepathdisplay);
                    Wait(1.5, c_timeGame);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_IndicateDoublePath_Init () {
                gt_IndicateDoublePath = TriggerCreate(&quot;gt_IndicateDoublePath_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Start Double Transport
            //--------------------------------------------------------------------------------------------------
            bool gt_StartDoubleTransport_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                gv_doubleActive = true;
                gv_doubleActiveGroup = 1;
                TriggerExecute(gt_Crystaldouble, true, false);
                gf_SpawnCrystal(gv_doublePickedLvl[1][1], gv_doublePickedCrystalID[1][1], 1, false);
                gf_SpawnCrystal(gv_doublePickedLvl[1][2], gv_doublePickedCrystalID[1][2], 2, false);
                Wait(RandomInt(20, 25), c_timeGame);
                gf_SendHybridsAfterCrystal(1, true);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_StartDoubleTransport_Init () {
                gt_StartDoubleTransport = TriggerCreate(&quot;gt_StartDoubleTransport_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: OBSOLETE Start Double Transport 2
            //--------------------------------------------------------------------------------------------------
            bool gt_OBSOLETEStartDoubleTransport2_Func (bool testConds, bool runActions) {
                int auto0196D19C_val;
                // Variable Declarations
                int lv_pickedgroup;
                // Variable Initialization
                // Actions
                if (!runActions) {
                    return true;
                }
                gv_doubleActive = true;
                if ((gv_doubleActiveGroup == 0)) {
                    lv_pickedgroup = RandomInt(1, 2);
                }
                else {
                    auto0196D19C_val = gv_doubleActiveGroup;
                    if (auto0196D19C_val == 1) {
                        lv_pickedgroup = 2;
                    }
                    else if (auto0196D19C_val == 2) {
                        lv_pickedgroup = 1;
                    }
                    else {
                    }
                }
                gv_doubleActiveGroup = lv_pickedgroup;
                TriggerExecute(gt_Crystaldouble, true, false);
                gf_SpawnCrystal(gv_doublePickedLvl[lv_pickedgroup][1], gv_doublePickedCrystalID[lv_pickedgroup][1], 1, false);
                gf_SpawnCrystal(gv_doublePickedLvl[lv_pickedgroup][2], gv_doublePickedCrystalID[lv_pickedgroup][2], 2, false);
                Wait(RandomInt(60, 75), c_timeGame);
                gf_SendHybridsAfterCrystal(1, true);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_OBSOLETEStartDoubleTransport2_Init () {
                gt_OBSOLETEStartDoubleTransport2 = TriggerCreate(&quot;gt_OBSOLETEStartDoubleTransport2_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Reactivate Crystal
            //--------------------------------------------------------------------------------------------------
            bool gt_ReactivateCrystal_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((UnitIsAlive(gv_activeCrystalUnit[1]) == true)) {
                    libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_Primary, UnitGetPosition(gv_activeCrystalUnit[1]), StringExternal(&quot;Param/Value/3556F047&quot;));
                    gv_activeTransportPing[1] = PingLastCreated();
                    PingSetScale(PingLastCreated(), 1.1);
                    libCOMI_gf_AttachReticleEffectAndTextTagOnUnit(libCOMI_ge_CampaginReticleType_ProtossMainObjective, libCOMI_ge_CampaginReticleSize_Large, null, gv_activeCrystalUnit[1], &quot;Ref_Center&quot;);
                    gv_activeCrystalReticle[1] = libNtve_gf_ActorLastCreated();
                    ActorSend(libNtve_gf_ActorLastCreated(), &quot;SetTeamColor 192,255,255 192,255,255&quot;);
                    ActorSend(libNtve_gf_ActorLastCreated(), &quot;AnimSetTimeScale BSD 0.400000&quot;);
                    ActorSend(libNtve_gf_ActorLastCreated(), &quot;SetScale 1.200000&quot;);
                    TriggerEnable(gt_StartCrystalTransportWave1, true);
                }
                else {
                    if ((UnitIsAlive(gv_activeCrystalUnit[2]) == true)) {
                        libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_Primary, UnitGetPosition(gv_activeCrystalUnit[2]), StringExternal(&quot;Param/Value/1965FDF2&quot;));
                        gv_activeTransportPing[2] = PingLastCreated();
                        PingSetScale(PingLastCreated(), 1.1);
                        libCOMI_gf_AttachReticleEffectAndTextTagOnUnit(libCOMI_ge_CampaginReticleType_ProtossMainObjective, libCOMI_ge_CampaginReticleSize_Large, null, gv_activeCrystalUnit[2], &quot;Ref_Center&quot;);
                        gv_activeCrystalReticle[2] = libNtve_gf_ActorLastCreated();
                        ActorSend(libNtve_gf_ActorLastCreated(), &quot;SetTeamColor 192,255,255 192,255,255&quot;);
                        ActorSend(libNtve_gf_ActorLastCreated(), &quot;AnimSetTimeScale BSD 0.400000&quot;);
                        ActorSend(libNtve_gf_ActorLastCreated(), &quot;SetScale 1.200000&quot;);
                        TriggerEnable(gt_StartCrystalTransportWave2, true);
                    }
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_ReactivateCrystal_Init () {
                gt_ReactivateCrystal = TriggerCreate(&quot;gt_ReactivateCrystal_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Interrupt Double Transport
            //--------------------------------------------------------------------------------------------------
            bool gt_InterruptDoubleTransport_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((gv_doubleActiveGroup == 0)) {
                    TriggerExecute(gt_ClearReservationsforDouble, true, false);
                }
                else {
                    if ((gv_doubleActive == true) &amp;&amp; ((UnitIsAlive(gv_activeCrystalUnit[1]) == false) || (UnitIsAlive(gv_activeCrystalUnit[2]) == false)) &amp;&amp; (UnitIsAlive(gv_activeTransportUnit[1]) == false) &amp;&amp; (UnitIsAlive(gv_activeTransportUnit[2]) == false)) {
                        gv_doubleActive = false;
                        TriggerEnable(gt_PickupSecondCrystalWave1, false);
                        TriggerEnable(gt_PickupSecondCrystalWave2, false);
                        if ((UnitIsAlive(gv_activeCrystalUnit[1]) == false) &amp;&amp; (UnitIsAlive(gv_activeCrystalUnit[2]) == false)) {
                            TriggerExecute(gt_Preparenextpick, true, false);
                        }
                    }
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_InterruptDoubleTransport_Init () {
                gt_InterruptDoubleTransport = TriggerCreate(&quot;gt_InterruptDoubleTransport_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Clear Reservations for Double
            //--------------------------------------------------------------------------------------------------
            bool gt_ClearReservationsforDouble_Func (bool testConds, bool runActions) {
                int auto638E54E4_ae;
                int auto638E54E4_ai;
                int auto35ECAE92_val;
                // Variable Declarations
                int lv_doublegroup;
                // Variable Initialization
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                auto638E54E4_ae = 2;
                auto638E54E4_ai = 1;
                lv_doublegroup = 1;
                for ( ; ( (auto638E54E4_ai &gt;= 0 &amp;&amp; lv_doublegroup &lt;= auto638E54E4_ae) || (auto638E54E4_ai &lt;= 0 &amp;&amp; lv_doublegroup &gt;= auto638E54E4_ae) ) ; lv_doublegroup += auto638E54E4_ai ) {
                    auto35ECAE92_val = gv_doublePickedVariant[lv_doublegroup];
                    if (auto35ECAE92_val == ge_DoubleVariant_A) {
                        gv_crystalAvailable[3][3] = true;
                        gv_crystalAvailable[3][4] = true;
                    }
                    else if (auto35ECAE92_val == ge_DoubleVariant_B) {
                        gv_crystalAvailable[2][3] = true;
                        gv_crystalAvailable[1][3] = true;
                    }
                    else if (auto35ECAE92_val == ge_DoubleVariant_C) {
                        gv_crystalAvailable[3][2] = true;
                        if ((gv_deliveryPointDestroyed[3] == true)) {
                            gv_crystalAvailable[4][5] = true;
                        }
                        else {
                            gv_crystalAvailable[3][5] = true;
                        }
                    }
                    else if (auto35ECAE92_val == ge_DoubleVariant_D) {
                        gv_crystalAvailable[2][1] = true;
                    }
                    else {
                    }
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_ClearReservationsforDouble_Init () {
                gt_ClearReservationsforDouble = TriggerCreate(&quot;gt_ClearReservationsforDouble_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Pickup Second Crystal - Wave 1
            //--------------------------------------------------------------------------------------------------
            bool gt_PickupSecondCrystalWave1_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                    if (!((UnitCount(null, gv_pLAYER_11_Transport, RegionCircle(gv_crystalSpawnPoint[gv_activeCrystalLevel[1]][gv_activeCrystalID[1]], 7.0), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile) | (1 &lt;&lt; c_targetFilterCloaked), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0) &gt; 0))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                PathDestroy(gv_activePathDisplay[2]);
                libCOMI_gf_DestroyPingCoop(gv_activeDeliveryPing[2]);
                if ((UnitIsAlive(gv_activeCrystalUnit[1]) == true)) {
                    gv_doubleBothCrystalsAreInside = true;
                    UnitIssueOrder(gv_activeTransportUnit[2], OrderTargetingUnit(AbilityCommand(&quot;CrystalPickupHarvest&quot;, 0), gv_activeCrystalUnit[1]), c_orderQueueReplace);
                    UnitBehaviorAdd(gv_activeCrystalUnit[1], &quot;Invulnerable&quot;, gv_activeCrystalUnit[1], 1);
                    UnitBehaviorAdd(gv_activeTransportUnit[2], &quot;Invulnerable&quot;, gv_activeTransportUnit[2], 1);
                    Wait(7.0, c_timeGame);
                    UnitBehaviorRemove(gv_activeTransportUnit[2], &quot;Invulnerable&quot;, 1);
                    gf_SendAttackonTransport(gv_activeCrystalLevel[1], gv_activeCrystalID[1], 2);
                    PathCreateForUnit(PlayerGroupAll(), gv_activeTransportUnit[2]);
                    gv_activePathDisplay[1] = PathLastCreated();
                    PathSetDestinationPoint(PathLastCreated(), gv_deliveryPoint[gv_activeDeliveryID[1]]);
                    PathSetVisible(PathLastCreated(), c_pathLocationWorld, false);
                    PathSetColor(PathLastCreated(), c_pathLocationMinimap, Color(0.00, 100.00, 0.00));
                    PathSetLineWidth(PathLastCreated(), c_pathLocationMinimap, 8.0);
                    Wait(3.2, c_timeGame);
                    libCOMI_gf_CreatePingCoop(PlayerGroupAll(), &quot;BeaconRallyPing&quot;, gv_deliveryPoint[gv_activeDeliveryID[1]], ColorWithAlpha(100.00, 100.00, 100.00, 0.00), 0.0);
                    gv_activeDeliveryPing[1] = PingLastCreated();
                    PingSetScale(PingLastCreated(), 0.6);
                    UnitIssueOrder(gv_activeTransportUnit[2], OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), gv_crystalTransportPath1[gv_activeCrystalLevel[1]][gv_activeCrystalID[1]]), c_orderQueueReplace);
                    UnitIssueOrder(gv_activeTransportUnit[2], OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), gv_crystalTransportPath2[gv_activeCrystalLevel[1]][gv_activeCrystalID[1]]), c_orderQueueAddToEnd);
                    if ((gv_activeCrystalLevel[1] &gt; 2)) {
                        UnitIssueOrder(gv_activeTransportUnit[2], OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), gv_crystalTransportPath3[gv_activeCrystalLevel[1]][gv_activeCrystalID[1]]), c_orderQueueAddToEnd);
                    }
                    UnitIssueOrder(gv_activeTransportUnit[2], Order(AbilityCommand(&quot;move&quot;, 2)), c_orderQueueAddToEnd);
                }
                else {
                    PathCreateForUnit(PlayerGroupAll(), gv_activeTransportUnit[2]);
                    gv_activePathDisplay[1] = PathLastCreated();
                    PathSetDestinationPoint(PathLastCreated(), gv_deliveryPoint[gv_activeDeliveryID[1]]);
                    PathSetVisible(PathLastCreated(), c_pathLocationWorld, false);
                    PathSetColor(PathLastCreated(), c_pathLocationMinimap, Color(0.00, 100.00, 0.00));
                    PathSetLineWidth(PathLastCreated(), c_pathLocationMinimap, 8.0);
                    libCOMI_gf_CreatePingCoop(PlayerGroupAll(), &quot;BeaconRallyPing&quot;, gv_deliveryPoint[gv_activeDeliveryID[1]], ColorWithAlpha(100.00, 100.00, 100.00, 0.00), 0.0);
                    gv_activeDeliveryPing[1] = PingLastCreated();
                    PingSetScale(PingLastCreated(), 0.6);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_PickupSecondCrystalWave1_Init () {
                gt_PickupSecondCrystalWave1 = TriggerCreate(&quot;gt_PickupSecondCrystalWave1_Func&quot;);
                TriggerEnable(gt_PickupSecondCrystalWave1, false);
                TriggerAddEventTimePeriodic(gt_PickupSecondCrystalWave1, 1.0, c_timeGame);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Pickup Second Crystal - Wave 2
            //--------------------------------------------------------------------------------------------------
            bool gt_PickupSecondCrystalWave2_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                    if (!((UnitCount(null, gv_pLAYER_11_Transport, RegionCircle(gv_crystalSpawnPoint[gv_activeCrystalLevel[2]][gv_activeCrystalID[2]], 7.0), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile) | (1 &lt;&lt; c_targetFilterCloaked), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0) &gt; 0))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                PathDestroy(gv_activePathDisplay[1]);
                libCOMI_gf_DestroyPingCoop(gv_activeDeliveryPing[1]);
                if ((UnitIsAlive(gv_activeCrystalUnit[2]) == true)) {
                    gv_doubleBothCrystalsAreInside = true;
                    UnitIssueOrder(gv_activeTransportUnit[1], OrderTargetingUnit(AbilityCommand(&quot;CrystalPickupHarvest&quot;, 0), gv_activeCrystalUnit[2]), c_orderQueueReplace);
                    UnitBehaviorAdd(gv_activeCrystalUnit[2], &quot;Invulnerable&quot;, gv_activeCrystalUnit[2], 1);
                    UnitBehaviorAdd(gv_activeTransportUnit[1], &quot;Invulnerable&quot;, gv_activeTransportUnit[1], 1);
                    Wait(7.0, c_timeGame);
                    UnitBehaviorRemove(gv_activeTransportUnit[1], &quot;Invulnerable&quot;, 1);
                    gf_SendAttackonTransport(gv_activeCrystalLevel[2], gv_activeCrystalID[2], 1);
                    PathCreateForUnit(PlayerGroupAll(), gv_activeTransportUnit[1]);
                    gv_activePathDisplay[2] = PathLastCreated();
                    PathSetDestinationPoint(PathLastCreated(), gv_deliveryPoint[gv_activeDeliveryID[2]]);
                    PathSetVisible(PathLastCreated(), c_pathLocationWorld, false);
                    PathSetColor(PathLastCreated(), c_pathLocationMinimap, Color(0.00, 100.00, 0.00));
                    PathSetLineWidth(PathLastCreated(), c_pathLocationMinimap, 8.0);
                    Wait(3.2, c_timeGame);
                    libCOMI_gf_CreatePingCoop(PlayerGroupAll(), &quot;BeaconRallyPing&quot;, gv_deliveryPoint[gv_activeDeliveryID[2]], ColorWithAlpha(100.00, 100.00, 100.00, 0.00), 0.0);
                    gv_activeDeliveryPing[2] = PingLastCreated();
                    PingSetScale(PingLastCreated(), 0.6);
                    UnitIssueOrder(gv_activeTransportUnit[1], OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), gv_crystalTransportPath1[gv_activeCrystalLevel[2]][gv_activeCrystalID[2]]), c_orderQueueReplace);
                    UnitIssueOrder(gv_activeTransportUnit[1], OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), gv_crystalTransportPath2[gv_activeCrystalLevel[2]][gv_activeCrystalID[2]]), c_orderQueueAddToEnd);
                    if ((gv_activeCrystalLevel[2] &gt; 2)) {
                        UnitIssueOrder(gv_activeTransportUnit[1], OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), gv_crystalTransportPath3[gv_activeCrystalLevel[2]][gv_activeCrystalID[2]]), c_orderQueueAddToEnd);
                    }
                    UnitIssueOrder(gv_activeTransportUnit[1], Order(AbilityCommand(&quot;move&quot;, 2)), c_orderQueueAddToEnd);
                }
                else {
                    PathCreateForUnit(PlayerGroupAll(), gv_activeTransportUnit[1]);
                    gv_activePathDisplay[2] = PathLastCreated();
                    PathSetDestinationPoint(PathLastCreated(), gv_deliveryPoint[gv_activeDeliveryID[2]]);
                    PathSetVisible(PathLastCreated(), c_pathLocationWorld, false);
                    PathSetColor(PathLastCreated(), c_pathLocationMinimap, Color(0.00, 100.00, 0.00));
                    PathSetLineWidth(PathLastCreated(), c_pathLocationMinimap, 8.0);
                    libCOMI_gf_CreatePingCoop(PlayerGroupAll(), &quot;BeaconRallyPing&quot;, gv_deliveryPoint[gv_activeDeliveryID[2]], ColorWithAlpha(100.00, 100.00, 100.00, 0.00), 0.0);
                    gv_activeDeliveryPing[2] = PingLastCreated();
                    PingSetScale(PingLastCreated(), 0.6);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_PickupSecondCrystalWave2_Init () {
                gt_PickupSecondCrystalWave2 = TriggerCreate(&quot;gt_PickupSecondCrystalWave2_Func&quot;);
                TriggerEnable(gt_PickupSecondCrystalWave2, false);
                TriggerAddEventTimePeriodic(gt_PickupSecondCrystalWave2, 1.0, c_timeGame);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Double Prolong Hybrid Delay
            //--------------------------------------------------------------------------------------------------
            bool gt_DoubleProlongHybridDelay_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                gv_hybridDelayPerGroup[gv_objectiveEscortCrystalsEscorted] += 20;
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_DoubleProlongHybridDelay_Init () {
                gt_DoubleProlongHybridDelay = TriggerCreate(&quot;gt_DoubleProlongHybridDelay_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Crystal is ready
            //--------------------------------------------------------------------------------------------------
            bool gt_Crystalisready_Func (bool testConds, bool runActions) {
                int autoF81437F5_val;
                int auto314CBB2E_val;
                // Variable Declarations
                int lv_transmissiontype;
                // Variable Initialization
                lv_transmissiontype = ge_TransmissionType_TH1CRYSTALISREADY;
                // Conditions
                if (testConds) {
                    if (!((libCOMI_gf_GameIsOver() == false))) {
                        return false;
                    }
                    if (!((libCOMI_gf_PlayerInCinematicModeCampaign() == false))) {
                        return false;
                    }
                    if (!((gv_doubleActive == false))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerQueueEnter();
                libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
                if ((TriggerGetExecCount(TriggerGetCurrent()) == 0)) {
                    if ((gv_activeCrystalID[1] == 2)) {
                        UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal(&quot;Param/Value/703D2FAA&quot;));
                        libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(&quot;AenythAdvisorPortrait&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), SoundLink(&quot;AenythAdvisorB1&quot;, -1), 0.6, c_transmissionDurationAdd, true);
                    }
                    else {
                        autoF81437F5_val = RandomInt(1, 2);
                        if (autoF81437F5_val == 1) {
                            UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal(&quot;Param/Value/B14243A6&quot;));
                            libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(&quot;AenythAdvisorPortrait&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), SoundLink(&quot;AenythAdvisorB3&quot;, -1), 0.6, c_transmissionDurationAdd, true);
                            gv_transmissionLinespoken[lv_transmissiontype][5] = true;
                            gv_transmissionSpoken[lv_transmissiontype] += 1;
                        }
                        else if (autoF81437F5_val == 2) {
                            UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal(&quot;Param/Value/BFC1433A&quot;));
                            libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(&quot;AenythAdvisorPortrait&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), SoundLink(&quot;AenythAdvisorB2&quot;, -1), 0.6, c_transmissionDurationAdd, true);
                        }
                        else {
                        }
                    }
                }
                else {
                    auto314CBB2E_val = gf_PickRandomTransmissionLine(lv_transmissiontype, 6);
                    if (auto314CBB2E_val == 1) {
                        UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal(&quot;Param/Value/FB0E12F6&quot;));
                        libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(&quot;AenythAdvisorPortrait&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), SoundLink(&quot;AenythAdvisorD1&quot;, -1), 0.6, c_transmissionDurationAdd, true);
                    }
                    else if (auto314CBB2E_val == 2) {
                        UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal(&quot;Param/Value/FC338028&quot;));
                        libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(&quot;AenythAdvisorPortrait&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), SoundLink(&quot;AenythAdvisorD2&quot;, -1), 0.6, c_transmissionDurationAdd, true);
                    }
                    else if (auto314CBB2E_val == 3) {
                        UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal(&quot;Param/Value/65818BB2&quot;));
                        libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(&quot;AenythAdvisorPortrait&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), SoundLink(&quot;AenythAdvisorD3&quot;, -1), 0.6, c_transmissionDurationAdd, true);
                    }
                    else if (auto314CBB2E_val == 4) {
                        UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal(&quot;Param/Value/54491956&quot;));
                        libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(&quot;AenythAdvisorPortrait&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), SoundLink(&quot;AenythAdvisorD4&quot;, -1), 0.6, c_transmissionDurationAdd, true);
                    }
                    else if (auto314CBB2E_val == 5) {
                        UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal(&quot;Param/Value/004B4861&quot;));
                        libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(&quot;AenythAdvisorPortrait&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), SoundLink(&quot;AenythAdvisorD5&quot;, -1), 0.6, c_transmissionDurationAdd, true);
                    }
                    else if (auto314CBB2E_val == 6) {
                        UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal(&quot;Param/Value/88664630&quot;));
                        libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(&quot;AenythAdvisorPortrait&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), SoundLink(&quot;AenythAdvisorD6&quot;, -1), 0.6, c_transmissionDurationAdd, true);
                    }
                    else {
                    }
                }
                libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
                TriggerQueueExit();
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_Crystalisready_Init () {
                gt_Crystalisready = TriggerCreate(&quot;gt_Crystalisready_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: First Crystal reminder
            //--------------------------------------------------------------------------------------------------
            bool gt_FirstCrystalreminder_Func (bool testConds, bool runActions) {
                int auto8D3D86F2_val;
                // Conditions
                if (testConds) {
                    if (!((gv_activeCrystalIsTransported[1] == false))) {
                        return false;
                    }
                    if (!((libCOMI_gf_GameIsOver() == false))) {
                        return false;
                    }
                    if (!((libCOMI_gf_PlayerInCinematicModeCampaign() == false))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                TriggerQueueEnter();
                if ((gv_activeCrystalIsTransported[1] == false) &amp;&amp; (gv_objectiveEscortCrystalsEscorted == 0)) {
                    TriggerExecute(gt_ObjectiveCrystalsBeforeStormCreate, true, false);
                    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
                    auto8D3D86F2_val = RandomInt(1, 2);
                    if (auto8D3D86F2_val == 1) {
                        UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal(&quot;Param/Value/4F12C3A5&quot;));
                        libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(&quot;AenythAdvisorPortrait&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), SoundLink(&quot;AenythAdvisorN1&quot;, -1), 0.6, c_transmissionDurationAdd, true);
                    }
                    else if (auto8D3D86F2_val == 2) {
                        UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal(&quot;Param/Value/8E74A62E&quot;));
                        libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(&quot;AenythAdvisorPortrait&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), SoundLink(&quot;AenythAdvisorN2&quot;, -1), 0.6, c_transmissionDurationAdd, true);
                    }
                    else {
                    }
                    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
                }
                TriggerQueueExit();
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_FirstCrystalreminder_Init () {
                gt_FirstCrystalreminder = TriggerCreate(&quot;gt_FirstCrystalreminder_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Transport is on its way
            //--------------------------------------------------------------------------------------------------
            bool gt_Transportisonitsway_Func (bool testConds, bool runActions) {
                int autoB85416D2_val;
                int auto6BFBFFA6_val;
                // Variable Declarations
                int lv_transmissiontype;
                // Variable Initialization
                lv_transmissiontype = ge_TransmissionType_TH2TRANSPORTSTARTED;
                // Conditions
                if (testConds) {
                    if (!((libCOMI_gf_GameIsOver() == false))) {
                        return false;
                    }
                    if (!((libCOMI_gf_PlayerInCinematicModeCampaign() == false))) {
                        return false;
                    }
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerQueueEnter();
                Wait(0.5, c_timeGame);
                libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
                if ((TriggerGetExecCount(TriggerGetCurrent()) == 0)) {
                    auto6BFBFFA6_val = RandomInt(1, 3);
                    if (auto6BFBFFA6_val == 1) {
                        UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal(&quot;Param/Value/61451AF6&quot;));
                        libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(&quot;AenythAdvisorPortrait&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), SoundLink(&quot;AenythAdvisorC1&quot;, -1), 0.6, c_transmissionDurationAdd, true);
                    }
                    else if (auto6BFBFFA6_val == 2) {
                        UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal(&quot;Param/Value/F436CD55&quot;));
                        libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(&quot;AenythAdvisorPortrait&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), SoundLink(&quot;AenythAdvisorC2&quot;, -1), 0.6, c_transmissionDurationAdd, true);
                    }
                    else if (auto6BFBFFA6_val == 3) {
                        UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal(&quot;Param/Value/4D8420B7&quot;));
                        libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(&quot;AenythAdvisorPortrait&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), SoundLink(&quot;AenythAdvisorC3&quot;, -1), 0.6, c_transmissionDurationAdd, true);
                    }
                    else {
                    }
                }
                else {
                    autoB85416D2_val = gf_PickRandomTransmissionLine(lv_transmissiontype, 6);
                    if (autoB85416D2_val == 1) {
                        UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal(&quot;Param/Value/BA08D5EE&quot;));
                        libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(&quot;AenythAdvisorPortrait&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), SoundLink(&quot;AenythAdvisorE1&quot;, -1), 0.6, c_transmissionDurationAdd, true);
                    }
                    else if (autoB85416D2_val == 2) {
                        UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal(&quot;Param/Value/4D614F6D&quot;));
                        libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(&quot;AenythAdvisorPortrait&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), SoundLink(&quot;AenythAdvisorE2&quot;, -1), 0.6, c_transmissionDurationAdd, true);
                    }
                    else if (autoB85416D2_val == 3) {
                        UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal(&quot;Param/Value/7E642E8F&quot;));
                        libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(&quot;AenythAdvisorPortrait&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), SoundLink(&quot;AenythAdvisorE3&quot;, -1), 0.6, c_transmissionDurationAdd, true);
                    }
                    else if (autoB85416D2_val == 4) {
                        UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal(&quot;Param/Value/FF7F94FD&quot;));
                        libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(&quot;AenythAdvisorPortrait&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), SoundLink(&quot;AenythAdvisorE4&quot;, -1), 0.6, c_transmissionDurationAdd, true);
                    }
                    else if (autoB85416D2_val == 5) {
                        UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal(&quot;Param/Value/B5A8F65E&quot;));
                        libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(&quot;AenythAdvisorPortrait&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), SoundLink(&quot;AenythAdvisorE5&quot;, -1), 0.6, c_transmissionDurationAdd, true);
                    }
                    else if (autoB85416D2_val == 6) {
                        UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal(&quot;Param/Value/C9FBB369&quot;));
                        libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(&quot;AenythAdvisorPortrait&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), SoundLink(&quot;AenythAdvisorE6&quot;, -1), 0.6, c_transmissionDurationAdd, true);
                    }
                    else {
                    }
                }
                libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
                TriggerQueueExit();
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_Transportisonitsway_Init () {
                gt_Transportisonitsway = TriggerCreate(&quot;gt_Transportisonitsway_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Transport Complete
            //--------------------------------------------------------------------------------------------------
            bool gt_TransportComplete_Func (bool testConds, bool runActions) {
                int autoBAA1AAFD_val;
                int autoBDC4ADE1_val;
                int auto9E01682C_val;
                int auto88E1502F_val;
                // Variable Declarations
                int lv_transmissiontype;
                // Variable Initialization
                lv_transmissiontype = ge_TransmissionType_TH3TRANSPORTCOMPLETE;
                // Conditions
                if (testConds) {
                    if (!((libCOMI_gf_GameIsOver() == false))) {
                        return false;
                    }
                    if (!((libCOMI_gf_PlayerInCinematicModeCampaign() == false))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerQueueEnter();
                libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
                if ((gv_objectiveEscortCrystalsEscorted == 1) &amp;&amp; (TriggerGetExecCount(gt_FirstCrystalreminder) == 0)) {
                    TriggerExecute(gt_ObjectiveCrystalsBeforeStormCreate, true, false);
                    autoBAA1AAFD_val = RandomInt(1, 2);
                    if (autoBAA1AAFD_val == 1) {
                        UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal(&quot;Param/Value/5A2FF357&quot;));
                        libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(&quot;AenythAdvisorPortrait&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), SoundLink(&quot;AenythAdvisorM1&quot;, -1), 0.6, c_transmissionDurationAdd, true);
                    }
                    else if (autoBAA1AAFD_val == 2) {
                        UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal(&quot;Param/Value/6ABFAABC&quot;));
                        libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(&quot;AenythAdvisorPortrait&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), SoundLink(&quot;AenythAdvisorM2&quot;, -1), 0.6, c_transmissionDurationAdd, true);
                    }
                    else {
                    }
                    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
                    return true;
                }
                if ((gv_objectiveEscortCrystalsEscorted == 3) &amp;&amp; (ObjectiveGetState(gv_objectiveRescueStalkers) != c_objectiveStateFailed)) {
                    autoBDC4ADE1_val = RandomInt(1, 2);
                    if (autoBDC4ADE1_val == 1) {
                        UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal(&quot;Param/Value/DE3E0B26&quot;));
                        libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(&quot;AenythAdvisorPortrait&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), SoundLink(&quot;AenythAdvisorP1&quot;, -1), 0.6, c_transmissionDurationAdd, true);
                    }
                    else if (autoBDC4ADE1_val == 2) {
                        UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal(&quot;Param/Value/3E9029A7&quot;));
                        libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(&quot;AenythAdvisorPortrait&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), SoundLink(&quot;AenythAdvisorP2&quot;, -1), 0.6, c_transmissionDurationAdd, true);
                    }
                    else {
                    }
                    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
                    return true;
                }
                if ((gv_objectiveEscortCrystalsEscorted == 4)) {
                    auto9E01682C_val = RandomInt(1, 3);
                    if (auto9E01682C_val == 1) {
                        UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal(&quot;Param/Value/B47D320E&quot;));
                        libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(&quot;AenythAdvisorPortrait&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), SoundLink(&quot;AenythAdvisorS1&quot;, -1), 0.6, c_transmissionDurationAdd, true);
                    }
                    else if (auto9E01682C_val == 2) {
                        UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal(&quot;Param/Value/CED282AF&quot;));
                        libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(&quot;AenythAdvisorPortrait&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), SoundLink(&quot;AenythAdvisorS2&quot;, -1), 0.6, c_transmissionDurationAdd, true);
                    }
                    else if (auto9E01682C_val == 3) {
                        UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal(&quot;Param/Value/ACAFAD5F&quot;));
                        libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(&quot;AenythAdvisorPortrait&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), SoundLink(&quot;AenythAdvisorS3&quot;, -1), 0.6, c_transmissionDurationAdd, true);
                    }
                    else {
                    }
                    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
                    return true;
                }
                auto88E1502F_val = gf_PickRandomTransmissionLine(lv_transmissiontype, 7);
                if (auto88E1502F_val == 1) {
                    UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal(&quot;Param/Value/DF9EDB8A&quot;));
                    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(&quot;AenythAdvisorPortrait&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), SoundLink(&quot;AenythAdvisorF1&quot;, -1), 0.6, c_transmissionDurationAdd, true);
                }
                else if (auto88E1502F_val == 2) {
                    UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal(&quot;Param/Value/F6A27589&quot;));
                    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(&quot;AenythAdvisorPortrait&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), SoundLink(&quot;AenythAdvisorF2&quot;, -1), 0.6, c_transmissionDurationAdd, true);
                }
                else if (auto88E1502F_val == 3) {
                    UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal(&quot;Param/Value/D7B7475E&quot;));
                    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(&quot;AenythAdvisorPortrait&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), SoundLink(&quot;AenythAdvisorF3&quot;, -1), 0.6, c_transmissionDurationAdd, true);
                }
                else if (auto88E1502F_val == 4) {
                    UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal(&quot;Param/Value/E47F7C0E&quot;));
                    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(&quot;AenythAdvisorPortrait&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), SoundLink(&quot;AenythAdvisorF4&quot;, -1), 0.6, c_transmissionDurationAdd, true);
                }
                else if (auto88E1502F_val == 5) {
                    UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal(&quot;Param/Value/6DA3F789&quot;));
                    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(&quot;AenythAdvisorPortrait&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), SoundLink(&quot;AenythAdvisorF5&quot;, -1), 0.6, c_transmissionDurationAdd, true);
                }
                else if (auto88E1502F_val == 6) {
                    UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal(&quot;Param/Value/D81C3695&quot;));
                    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(&quot;AenythAdvisorPortrait&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), SoundLink(&quot;AenythAdvisorF6&quot;, -1), 0.6, c_transmissionDurationAdd, true);
                }
                else if (auto88E1502F_val == 7) {
                    UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal(&quot;Param/Value/6699731E&quot;));
                    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(&quot;AenythAdvisorPortrait&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), SoundLink(&quot;AenythAdvisorF7&quot;, -1), 1.0, c_transmissionDurationAdd, true);
                }
                else {
                }
                libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
                TriggerQueueExit();
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_TransportComplete_Init () {
                gt_TransportComplete = TriggerCreate(&quot;gt_TransportComplete_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Storm reminder
            //--------------------------------------------------------------------------------------------------
            bool gt_Stormreminder_Func (bool testConds, bool runActions) {
                int auto33ACE6B6_val;
                // Conditions
                if (testConds) {
                    if (!((gv_objectiveEscortCrystalsEscorted == 2))) {
                        return false;
                    }
                    if (!((gv_activeCrystalIsTransported[1] == false))) {
                        return false;
                    }
                    if (!((gv_activeCrystalIsTransported[2] == false))) {
                        return false;
                    }
                    if (!((ObjectiveGetState(gv_objectiveRescueStalkers) == c_objectiveStateActive))) {
                        return false;
                    }
                    if (!((TriggerGetExecCount(gt_FirstCrystalreminder) == 0))) {
                        return false;
                    }
                    if (!((libCOMI_gf_GameIsOver() == false))) {
                        return false;
                    }
                    if (!((libCOMI_gf_PlayerInCinematicModeCampaign() == false))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                TriggerQueueEnter();
                libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
                auto33ACE6B6_val = RandomInt(1, 2);
                if (auto33ACE6B6_val == 1) {
                    UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal(&quot;Param/Value/8EF7C353&quot;));
                    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(&quot;AenythAdvisorPortrait&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), SoundLink(&quot;AenythAdvisorO1&quot;, -1), 0.6, c_transmissionDurationAdd, true);
                }
                else if (auto33ACE6B6_val == 2) {
                    UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal(&quot;Param/Value/A2D3981F&quot;));
                    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(&quot;AenythAdvisorPortrait&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), SoundLink(&quot;AenythAdvisorO2&quot;, -1), 0.6, c_transmissionDurationAdd, true);
                }
                else {
                }
                libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
                TriggerQueueExit();
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_Stormreminder_Init () {
                gt_Stormreminder = TriggerCreate(&quot;gt_Stormreminder_Func&quot;);
                TriggerAddEventTimer(gt_Stormreminder, gv_stormCountdownTimer95);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Weather shield turned on
            //--------------------------------------------------------------------------------------------------
            bool gt_Weathershieldturnedon_Func (bool testConds, bool runActions) {
                int autoC399BC90_val;
                // Conditions
                if (testConds) {
                    if (!((libCOMI_gf_GameIsOver() == false))) {
                        return false;
                    }
                    if (!((libCOMI_gf_PlayerInCinematicModeCampaign() == false))) {
                        return false;
                    }
                    if (!((gv_doubleActive == false))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerQueueEnter();
                Wait(1.0, c_timeGame);
                libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
                autoC399BC90_val = RandomInt(1, 2);
                if (autoC399BC90_val == 1) {
                    UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal(&quot;Param/Value/17309F68&quot;));
                    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(&quot;AenythAdvisorPortrait&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), SoundLink(&quot;AenythAdvisorQ1&quot;, -1), 0.6, c_transmissionDurationAdd, true);
                }
                else if (autoC399BC90_val == 2) {
                    UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal(&quot;Param/Value/6BA99C4D&quot;));
                    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(&quot;AenythAdvisorPortrait&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), SoundLink(&quot;AenythAdvisorQ3&quot;, -1), 0.6, c_transmissionDurationAdd, true);
                }
                else {
                }
                libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
                TriggerQueueExit();
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_Weathershieldturnedon_Init () {
                gt_Weathershieldturnedon = TriggerCreate(&quot;gt_Weathershieldturnedon_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Storm Cluster danger
            //--------------------------------------------------------------------------------------------------
            bool gt_StormClusterdanger_Func (bool testConds, bool runActions) {
                int auto5DAC53EE_val;
                // Conditions
                if (testConds) {
                    if (!((libCOMI_gf_GameIsOver() == false))) {
                        return false;
                    }
                    if (!((libCOMI_gf_PlayerInCinematicModeCampaign() == false))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerQueueEnter();
                libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
                auto5DAC53EE_val = RandomInt(1, 2);
                if (auto5DAC53EE_val == 1) {
                    UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal(&quot;Param/Value/1685A975&quot;));
                    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(&quot;AenythAdvisorPortrait&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), SoundLink(&quot;AenythAdvisorR1&quot;, -1), 0.6, c_transmissionDurationAdd, true);
                }
                else if (auto5DAC53EE_val == 2) {
                    UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal(&quot;Param/Value/A90DEF86&quot;));
                    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(&quot;AenythAdvisorPortrait&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), SoundLink(&quot;AenythAdvisorR2&quot;, -1), 0.6, c_transmissionDurationAdd, true);
                }
                else {
                }
                libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
                TriggerQueueExit();
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_StormClusterdanger_Init () {
                gt_StormClusterdanger = TriggerCreate(&quot;gt_StormClusterdanger_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Hybrid detected
            //--------------------------------------------------------------------------------------------------
            bool gt_Hybriddetected_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((libCOMI_gf_GameIsOver() == false))) {
                        return false;
                    }
                    if (!((libCOMI_gf_PlayerInCinematicModeCampaign() == false))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerQueueEnter();
                libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
                libCOMI_gf_SendMissionTransmission(&quot;HybridDetected&quot;, true, -1);
                libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
                TriggerQueueExit();
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_Hybriddetected_Init () {
                gt_Hybriddetected = TriggerCreate(&quot;gt_Hybriddetected_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Base Attack
            //--------------------------------------------------------------------------------------------------
            bool gt_BaseAttack_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((libCOMI_gf_GameIsOver() == false))) {
                        return false;
                    }
                    if (!((libCOMI_gf_PlayerInCinematicModeCampaign() == false))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerQueueEnter();
                libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
                libCOMI_gf_SendMissionTransmission(&quot;AttackWave&quot;, true, RandomInt(gv_pLAYER_01_USER, gv_pLAYER_02_USER));
                libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
                TriggerQueueExit();
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_BaseAttack_Init () {
                gt_BaseAttack = TriggerCreate(&quot;gt_BaseAttack_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Drop/Warpin detected
            //--------------------------------------------------------------------------------------------------
            bool gt_DropWarpindetected_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((libCOMI_gf_GameIsOver() == false))) {
                        return false;
                    }
                    if (!((libCOMI_gf_PlayerInCinematicModeCampaign() == false))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerQueueEnter();
                libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
                if ((PlayerRace(gv_pLAYER_03_Player01Enemy) == &quot;Prot&quot;)) {
                    libCOMI_gf_SendMissionTransmission(&quot;EnemyWarningWarpIn&quot;, true, -1);
                }
                else {
                    libCOMI_gf_SendMissionTransmission(&quot;EnemyWarningDropPods&quot;, true, -1);
                }
                libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
                TriggerQueueExit();
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_DropWarpindetected_Init () {
                gt_DropWarpindetected = TriggerCreate(&quot;gt_DropWarpindetected_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Hybrid is coming for crystal
            //--------------------------------------------------------------------------------------------------
            bool gt_Hybridiscomingforcrystal_Func (bool testConds, bool runActions) {
                int autoED0A262D_val;
                // Variable Declarations
                int lv_transmissiontype;
                // Variable Initialization
                lv_transmissiontype = ge_TransmissionType_TH4HYBRIDISCOMINGFORCRYSTAL;
                // Conditions
                if (testConds) {
                    if (!((libCOMI_gf_GameIsOver() == false))) {
                        return false;
                    }
                    if (!((libCOMI_gf_PlayerInCinematicModeCampaign() == false))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerQueueEnter();
                libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
                autoED0A262D_val = gf_PickRandomTransmissionLine(lv_transmissiontype, 4);
                if (autoED0A262D_val == 1) {
                    UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal(&quot;Param/Value/39D2E6D4&quot;));
                    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(&quot;AenythAdvisorPortrait&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), SoundLink(&quot;AenythAdvisorI1&quot;, -1), 0.6, c_transmissionDurationAdd, true);
                }
                else if (autoED0A262D_val == 2) {
                    UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal(&quot;Param/Value/1EE21410&quot;));
                    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(&quot;AenythAdvisorPortrait&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), SoundLink(&quot;AenythAdvisorI2&quot;, -1), 0.6, c_transmissionDurationAdd, true);
                }
                else if (autoED0A262D_val == 3) {
                    UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal(&quot;Param/Value/25A555BF&quot;));
                    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(&quot;AenythAdvisorPortrait&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), SoundLink(&quot;AenythAdvisorI3&quot;, -1), 0.6, c_transmissionDurationAdd, true);
                }
                else if (autoED0A262D_val == 4) {
                    UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal(&quot;Param/Value/6880585C&quot;));
                    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(&quot;AenythAdvisorPortrait&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), SoundLink(&quot;AenythAdvisorI4&quot;, -1), 0.6, c_transmissionDurationAdd, true);
                }
                else {
                }
                libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
                TriggerQueueExit();
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_Hybridiscomingforcrystal_Init () {
                gt_Hybridiscomingforcrystal = TriggerCreate(&quot;gt_Hybridiscomingforcrystal_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Crystal is attacked
            //--------------------------------------------------------------------------------------------------
            bool gt_Crystalisattacked_Func (bool testConds, bool runActions) {
                int autoA77CD322_val;
                // Variable Declarations
                int lv_transmissiontype;
                // Variable Initialization
                lv_transmissiontype = ge_TransmissionType_TH5CRYSTALISATTACKED;
                // Conditions
                if (testConds) {
                    if (!((libCOMI_gf_GameIsOver() == false))) {
                        return false;
                    }
                    if (!((libCOMI_gf_PlayerInCinematicModeCampaign() == false))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerQueueEnter();
                libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
                autoA77CD322_val = gf_PickRandomTransmissionLine(lv_transmissiontype, 4);
                if (autoA77CD322_val == 1) {
                    UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal(&quot;Param/Value/8F0C6CE1&quot;));
                    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(&quot;AenythAdvisorPortrait&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), SoundLink(&quot;AenythAdvisorJ1&quot;, -1), 0.6, c_transmissionDurationAdd, true);
                }
                else if (autoA77CD322_val == 2) {
                    UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal(&quot;Param/Value/F48F5835&quot;));
                    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(&quot;AenythAdvisorPortrait&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), SoundLink(&quot;AenythAdvisorJ2&quot;, -1), 0.6, c_transmissionDurationAdd, true);
                }
                else if (autoA77CD322_val == 3) {
                    UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal(&quot;Param/Value/141143F5&quot;));
                    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(&quot;AenythAdvisorPortrait&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), SoundLink(&quot;AenythAdvisorJ3&quot;, -1), 0.6, c_transmissionDurationAdd, true);
                }
                else if (autoA77CD322_val == 4) {
                    UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal(&quot;Param/Value/900BF3B1&quot;));
                    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(&quot;AenythAdvisorPortrait&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), SoundLink(&quot;AenythAdvisorJ4&quot;, -1), 0.6, c_transmissionDurationAdd, true);
                }
                else {
                }
                libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
                TriggerQueueExit();
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_Crystalisattacked_Init () {
                gt_Crystalisattacked = TriggerCreate(&quot;gt_Crystalisattacked_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Hybrid killed and transport starts
            //--------------------------------------------------------------------------------------------------
            bool gt_Hybridkilledandtransportstarts_Func (bool testConds, bool runActions) {
                int autoF6B30550_val;
                // Variable Declarations
                int lv_transmissiontype;
                // Variable Initialization
                lv_transmissiontype = ge_TransmissionType_TH6HYBRIDKILLED;
                // Conditions
                if (testConds) {
                    if (!((libCOMI_gf_GameIsOver() == false))) {
                        return false;
                    }
                    if (!((libCOMI_gf_PlayerInCinematicModeCampaign() == false))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(gt_Transportisonitsway, false);
                TriggerQueueEnter();
                libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
                autoF6B30550_val = gf_PickRandomTransmissionLine(lv_transmissiontype, 3);
                if (autoF6B30550_val == 1) {
                    UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal(&quot;Param/Value/98F2B68D&quot;));
                    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(&quot;AenythAdvisorPortrait&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), SoundLink(&quot;AenythAdvisorK1&quot;, -1), 0.6, c_transmissionDurationAdd, true);
                }
                else if (autoF6B30550_val == 2) {
                    UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal(&quot;Param/Value/740420D2&quot;));
                    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(&quot;AenythAdvisorPortrait&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), SoundLink(&quot;AenythAdvisorK2&quot;, -1), 0.6, c_transmissionDurationAdd, true);
                }
                else if (autoF6B30550_val == 3) {
                    UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal(&quot;Param/Value/D7E5A15A&quot;));
                    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(&quot;AenythAdvisorPortrait&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), SoundLink(&quot;AenythAdvisorK3&quot;, -1), 0.6, c_transmissionDurationAdd, true);
                }
                else {
                }
                libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
                TriggerEnable(gt_Transportisonitsway, true);
                TriggerQueueExit();
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_Hybridkilledandtransportstarts_Init () {
                gt_Hybridkilledandtransportstarts = TriggerCreate(&quot;gt_Hybridkilledandtransportstarts_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Crystal destroyed
            //--------------------------------------------------------------------------------------------------
            bool gt_Crystaldestroyed_Func (bool testConds, bool runActions) {
                int autoB73395F4_val;
                // Variable Declarations
                int lv_transmissiontype;
                // Variable Initialization
                lv_transmissiontype = ge_TransmissionType_TH7CRYSTALDESTROYED;
                // Conditions
                if (testConds) {
                    if (!((libCOMI_gf_GameIsOver() == false))) {
                        return false;
                    }
                    if (!((libCOMI_gf_PlayerInCinematicModeCampaign() == false))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerQueueEnter();
                libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
                autoB73395F4_val = gf_PickRandomTransmissionLine(lv_transmissiontype, 3);
                if (autoB73395F4_val == 1) {
                    UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal(&quot;Param/Value/64444F98&quot;));
                    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(&quot;AenythAdvisorPortrait&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), SoundLink(&quot;AenythAdvisorL1&quot;, -1), 0.6, c_transmissionDurationAdd, true);
                }
                else if (autoB73395F4_val == 2) {
                    UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal(&quot;Param/Value/3C49A522&quot;));
                    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(&quot;AenythAdvisorPortrait&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), SoundLink(&quot;AenythAdvisorL2&quot;, -1), 0.6, c_transmissionDurationAdd, true);
                }
                else if (autoB73395F4_val == 3) {
                    UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal(&quot;Param/Value/44CCD0ED&quot;));
                    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(&quot;AenythAdvisorPortrait&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), SoundLink(&quot;AenythAdvisorL3&quot;, -1), 0.6, c_transmissionDurationAdd, true);
                }
                else {
                }
                libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
                TriggerQueueExit();
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_Crystaldestroyed_Init () {
                gt_Crystaldestroyed = TriggerCreate(&quot;gt_Crystaldestroyed_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Transport attacked
            //--------------------------------------------------------------------------------------------------
            bool gt_Transportattacked_Func (bool testConds, bool runActions) {
                bool auto6D7CEA2D_val;
                int auto769EB1DC_val;
                int auto88101DF4_val;
                // Variable Declarations
                int lv_transmissiontype;
                // Variable Initialization
                lv_transmissiontype = ge_TransmissionType_TH8TRANSPORTISATTACKED;
                // Conditions
                if (testConds) {
                    if (!((libCOMI_gf_GameIsOver() == false))) {
                        return false;
                    }
                    if (!((libCOMI_gf_PlayerInCinematicModeCampaign() == false))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerQueueEnter();
                libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
                auto6D7CEA2D_val = gv_doubleBothCrystalsAreInside;
                if (auto6D7CEA2D_val == false) {
                    auto769EB1DC_val = gf_PickRandomTransmissionLine(lv_transmissiontype, 6);
                    if (auto769EB1DC_val == 1) {
                        UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal(&quot;Param/Value/4A10D302&quot;));
                        libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(&quot;AenythAdvisorPortrait&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), SoundLink(&quot;AenythAdvisorH1&quot;, -1), 0.6, c_transmissionDurationAdd, true);
                    }
                    else if (auto769EB1DC_val == 2) {
                        UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal(&quot;Param/Value/72209181&quot;));
                        libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(&quot;AenythAdvisorPortrait&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), SoundLink(&quot;AenythAdvisorH2&quot;, -1), 0.6, c_transmissionDurationAdd, true);
                    }
                    else if (auto769EB1DC_val == 3) {
                        UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal(&quot;Param/Value/CBCC2FB4&quot;));
                        libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(&quot;AenythAdvisorPortrait&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), SoundLink(&quot;AenythAdvisorH3&quot;, -1), 0.6, c_transmissionDurationAdd, true);
                    }
                    else if (auto769EB1DC_val == 4) {
                        UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal(&quot;Param/Value/02B317D9&quot;));
                        libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(&quot;AenythAdvisorPortrait&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), SoundLink(&quot;AenythAdvisorH4&quot;, -1), 0.6, c_transmissionDurationAdd, true);
                    }
                    else if (auto769EB1DC_val == 5) {
                        UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal(&quot;Param/Value/4A165833&quot;));
                        libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(&quot;AenythAdvisorPortrait&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), SoundLink(&quot;AenythAdvisorH5&quot;, -1), 0.6, c_transmissionDurationAdd, true);
                    }
                    else if (auto769EB1DC_val == 6) {
                        UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal(&quot;Param/Value/5C97B297&quot;));
                        libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(&quot;AenythAdvisorPortrait&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), SoundLink(&quot;AenythAdvisorH6&quot;, -1), 0.6, c_transmissionDurationAdd, true);
                    }
                    else {
                    }
                }
                else if (auto6D7CEA2D_val == true) {
                    auto88101DF4_val = gf_PickRandomTransmissionLine(lv_transmissiontype, 2);
                    if (auto88101DF4_val == 1) {
                        UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal(&quot;Param/Value/FD3D3F39&quot;));
                        libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(&quot;AenythAdvisorPortrait&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), SoundLink(&quot;AenythAdvisorX1&quot;, -1), 0.6, c_transmissionDurationAdd, true);
                    }
                    else if (auto88101DF4_val == 2) {
                        UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal(&quot;Param/Value/F81D3278&quot;));
                        libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(&quot;AenythAdvisorPortrait&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), SoundLink(&quot;AenythAdvisorX2&quot;, -1), 0.6, c_transmissionDurationAdd, true);
                    }
                    else {
                    }
                }
                else {
                }
                libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
                TriggerQueueExit();
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_Transportattacked_Init () {
                gt_Transportattacked = TriggerCreate(&quot;gt_Transportattacked_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Transport destroyed
            //--------------------------------------------------------------------------------------------------
            bool gt_Transportdestroyed_Func (bool testConds, bool runActions) {
                int auto08966E5E_val;
                // Variable Declarations
                int lv_transmissiontype;
                // Variable Initialization
                lv_transmissiontype = ge_TransmissionType_TH9TRANSPORTDESTROYED;
                // Conditions
                if (testConds) {
                    if (!((libCOMI_gf_GameIsOver() == false))) {
                        return false;
                    }
                    if (!((libCOMI_gf_PlayerInCinematicModeCampaign() == false))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerQueueEnter();
                libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
                auto08966E5E_val = gf_PickRandomTransmissionLine(lv_transmissiontype, 3);
                if (auto08966E5E_val == 1) {
                    UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal(&quot;Param/Value/7FA4BAE1&quot;));
                    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(&quot;AenythAdvisorPortrait&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), SoundLink(&quot;AenythAdvisorG1&quot;, -1), 0.6, c_transmissionDurationAdd, true);
                }
                else if (auto08966E5E_val == 2) {
                    UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal(&quot;Param/Value/C0B3B99B&quot;));
                    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(&quot;AenythAdvisorPortrait&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), SoundLink(&quot;AenythAdvisorG2&quot;, -1), 0.6, c_transmissionDurationAdd, true);
                }
                else if (auto08966E5E_val == 3) {
                    UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal(&quot;Param/Value/60AD6FF2&quot;));
                    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(&quot;AenythAdvisorPortrait&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), SoundLink(&quot;AenythAdvisorG3&quot;, -1), 0.6, c_transmissionDurationAdd, true);
                }
                else {
                }
                libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
                TriggerQueueExit();
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_Transportdestroyed_Init () {
                gt_Transportdestroyed = TriggerCreate(&quot;gt_Transportdestroyed_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Storm is ending
            //--------------------------------------------------------------------------------------------------
            bool gt_Stormisending_Func (bool testConds, bool runActions) {
                int autoD72B483D_val;
                // Conditions
                if (testConds) {
                    if (!((libCOMI_gf_GameIsOver() == false))) {
                        return false;
                    }
                    if (!((libCOMI_gf_PlayerInCinematicModeCampaign() == false))) {
                        return false;
                    }
                    if (!((gv_doubleActive == false))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerQueueEnter();
                libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
                autoD72B483D_val = RandomInt(1, 2);
                if (autoD72B483D_val == 1) {
                    UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal(&quot;Param/Value/28868F45&quot;));
                    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(&quot;AenythAdvisorPortrait&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), SoundLink(&quot;AenythAdvisorQ6&quot;, -1), 0.6, c_transmissionDurationAdd, true);
                }
                else if (autoD72B483D_val == 2) {
                    UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal(&quot;Param/Value/0383B8DD&quot;));
                    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(&quot;AenythAdvisorPortrait&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), SoundLink(&quot;AenythAdvisorQ7&quot;, -1), 0.6, c_transmissionDurationAdd, true);
                }
                else {
                }
                libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
                TriggerQueueExit();
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_Stormisending_Init () {
                gt_Stormisending = TriggerCreate(&quot;gt_Stormisending_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Second Bonus Objective
            //--------------------------------------------------------------------------------------------------
            bool gt_SecondBonusObjective_Func (bool testConds, bool runActions) {
                int autoDEA57BB5_val;
                // Conditions
                if (testConds) {
                    if (!((libCOMI_gf_GameIsOver() == false))) {
                        return false;
                    }
                    if (!((libCOMI_gf_PlayerInCinematicModeCampaign() == false))) {
                        return false;
                    }
                    if (!((gv_doubleActive == false))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerQueueEnter();
                libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
                autoDEA57BB5_val = RandomInt(1, 3);
                if (autoDEA57BB5_val == 1) {
                    UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal(&quot;Param/Value/A91AA99A&quot;));
                    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(&quot;AenythAdvisorPortrait&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), SoundLink(&quot;AenythAdvisorT1&quot;, -1), 0.6, c_transmissionDurationAdd, true);
                }
                else if (autoDEA57BB5_val == 2) {
                    UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal(&quot;Param/Value/293DA200&quot;));
                    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(&quot;AenythAdvisorPortrait&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), SoundLink(&quot;AenythAdvisorT2&quot;, -1), 0.6, c_transmissionDurationAdd, true);
                }
                else if (autoDEA57BB5_val == 3) {
                    UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal(&quot;Param/Value/DFF55077&quot;));
                    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(&quot;AenythAdvisorPortrait&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), SoundLink(&quot;AenythAdvisorT3&quot;, -1), 0.6, c_transmissionDurationAdd, true);
                }
                else {
                }
                libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
                TriggerQueueExit();
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_SecondBonusObjective_Init () {
                gt_SecondBonusObjective = TriggerCreate(&quot;gt_SecondBonusObjective_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Second Bonus Objective - Success
            //--------------------------------------------------------------------------------------------------
            bool gt_SecondBonusObjectiveSuccess_Func (bool testConds, bool runActions) {
                int auto12BD01E0_val;
                // Conditions
                if (testConds) {
                    if (!((libCOMI_gf_GameIsOver() == false))) {
                        return false;
                    }
                    if (!((libCOMI_gf_PlayerInCinematicModeCampaign() == false))) {
                        return false;
                    }
                    if (!((gv_doubleActive == false))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerQueueEnter();
                libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
                auto12BD01E0_val = RandomInt(1, 2);
                if (auto12BD01E0_val == 1) {
                    UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal(&quot;Param/Value/AF80C4C4&quot;));
                    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(&quot;AenythAdvisorPortrait&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), SoundLink(&quot;AenythAdvisorU1&quot;, -1), 0.6, c_transmissionDurationAdd, true);
                }
                else if (auto12BD01E0_val == 2) {
                    UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal(&quot;Param/Value/F9933EDC&quot;));
                    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(&quot;AenythAdvisorPortrait&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), SoundLink(&quot;AenythAdvisorU2&quot;, -1), 0.6, c_transmissionDurationAdd, true);
                }
                else {
                }
                libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
                TriggerQueueExit();
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_SecondBonusObjectiveSuccess_Init () {
                gt_SecondBonusObjectiveSuccess = TriggerCreate(&quot;gt_SecondBonusObjectiveSuccess_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Second Bonus Objective - Fail
            //--------------------------------------------------------------------------------------------------
            bool gt_SecondBonusObjectiveFail_Func (bool testConds, bool runActions) {
                int autoF805EA45_val;
                // Conditions
                if (testConds) {
                    if (!((libCOMI_gf_GameIsOver() == false))) {
                        return false;
                    }
                    if (!((libCOMI_gf_PlayerInCinematicModeCampaign() == false))) {
                        return false;
                    }
                    if (!((gv_doubleActive == false))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerQueueEnter();
                libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
                autoF805EA45_val = RandomInt(1, 2);
                if (autoF805EA45_val == 1) {
                    UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal(&quot;Param/Value/7C8CCB2A&quot;));
                    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(&quot;AenythAdvisorPortrait&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), SoundLink(&quot;AenythAdvisorV1&quot;, -1), 0.6, c_transmissionDurationAdd, true);
                }
                else if (autoF805EA45_val == 2) {
                    UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal(&quot;Param/Value/AC747A65&quot;));
                    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(&quot;AenythAdvisorPortrait&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), SoundLink(&quot;AenythAdvisorV2&quot;, -1), 0.6, c_transmissionDurationAdd, true);
                }
                else {
                }
                libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
                TriggerQueueExit();
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_SecondBonusObjectiveFail_Init () {
                gt_SecondBonusObjectiveFail = TriggerCreate(&quot;gt_SecondBonusObjectiveFail_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Second Storm
            //--------------------------------------------------------------------------------------------------
            bool gt_SecondStorm_Func (bool testConds, bool runActions) {
                int auto835EF9C0_val;
                // Conditions
                if (testConds) {
                    if (!((libCOMI_gf_GameIsOver() == false))) {
                        return false;
                    }
                    if (!((libCOMI_gf_PlayerInCinematicModeCampaign() == false))) {
                        return false;
                    }
                    if (!((gv_doubleActive == false))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerQueueEnter();
                libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
                auto835EF9C0_val = RandomInt(1, 2);
                if (auto835EF9C0_val == 1) {
                    UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal(&quot;Param/Value/89F28F88&quot;));
                    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(&quot;AenythAdvisorPortrait&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), SoundLink(&quot;AenythAdvisorQ4&quot;, -1), 0.6, c_transmissionDurationAdd, true);
                }
                else if (auto835EF9C0_val == 2) {
                    UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal(&quot;Param/Value/F5D9F182&quot;));
                    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(&quot;AenythAdvisorPortrait&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), SoundLink(&quot;AenythAdvisorQ5&quot;, -1), 0.6, c_transmissionDurationAdd, true);
                }
                else {
                }
                libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
                TriggerQueueExit();
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_SecondStorm_Init () {
                gt_SecondStorm = TriggerCreate(&quot;gt_SecondStorm_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Crystal double
            //--------------------------------------------------------------------------------------------------
            bool gt_Crystaldouble_Func (bool testConds, bool runActions) {
                int auto4F685BFC_val;
                // Conditions
                if (testConds) {
                    if (!((libCOMI_gf_GameIsOver() == false))) {
                        return false;
                    }
                    if (!((libCOMI_gf_PlayerInCinematicModeCampaign() == false))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerQueueEnter();
                libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
                auto4F685BFC_val = RandomInt(1, 2);
                if (auto4F685BFC_val == 1) {
                    UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal(&quot;Param/Value/F6AC16F7&quot;));
                    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(&quot;AenythAdvisorPortrait&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), SoundLink(&quot;AenythAdvisorW1&quot;, -1), 0.6, c_transmissionDurationAdd, true);
                }
                else if (auto4F685BFC_val == 2) {
                    UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal(&quot;Param/Value/ABF07B8B&quot;));
                    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(&quot;AenythAdvisorPortrait&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), SoundLink(&quot;AenythAdvisorW2&quot;, -1), 0.6, c_transmissionDurationAdd, true);
                }
                else {
                }
                libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
                TriggerQueueExit();
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_Crystaldouble_Init () {
                gt_Crystaldouble = TriggerCreate(&quot;gt_Crystaldouble_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Victory Transmission
            //--------------------------------------------------------------------------------------------------
            bool gt_VictoryTransmission_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_VictoryTransmission_Init () {
                gt_VictoryTransmission = TriggerCreate(&quot;gt_VictoryTransmission_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Defeat Primary Objective Failed
            //--------------------------------------------------------------------------------------------------
            bool gt_DefeatPrimaryObjectiveFailed_Func (bool testConds, bool runActions) {
                int auto24528792_val;
                // Conditions
                if (testConds) {
                    if (!((libCOMI_gf_GameIsOver() == false))) {
                        return false;
                    }
                } 
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                libCOMI_gf_BeforeFanfare(c_gameOverDefeat);
                auto24528792_val = RandomInt(1, 2);
                if (auto24528792_val == 1) {
                    UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal(&quot;Param/Value/C1AFE0E0&quot;));
                    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(&quot;AenythAdvisorPortrait&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), SoundLink(&quot;AenythAdvisorZ1&quot;, -1), 0.2, c_transmissionDurationAdd, true);
                }
                else if (auto24528792_val == 2) {
                    UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal(&quot;Param/Value/E325EEE2&quot;));
                    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(&quot;AenythAdvisorPortrait&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), SoundLink(&quot;AenythAdvisorZ2&quot;, -1), 0.2, c_transmissionDurationAdd, true);
                }
                libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
                UISetCursorVisible(PlayerGroupAll(), true);
                TriggerExecute(gt_Defeat, true, false);
                libCOMI_gf_DisplayCampaignMessage(libCOMI_gf_HumanPlayers(), libCOMI_ge_CampaignMessageType_MissionFailed, StringExternal(&quot;Param/Value/285C8236&quot;), libCOMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
                libCOMI_gf_MoveCameraForAllPlayers(gv_lastCriticalEventPosition, 2.0);
                libCOMI_gf_AfterFanfare(c_gameOverDefeat);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_DefeatPrimaryObjectiveFailed_Init () {
                gt_DefeatPrimaryObjectiveFailed = TriggerCreate(&quot;gt_DefeatPrimaryObjectiveFailed_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Victory Escorting Completed
            //--------------------------------------------------------------------------------------------------
            bool gt_VictoryEscortingCompleted_Func (bool testConds, bool runActions) {
                int auto2B941A8E_val;
                // Conditions
                if (testConds) {
                    if (!((libCOMI_gf_GameIsOver() == false))) {
                        return false;
                    }
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                VictoryPanelAddCustomStatisticLine(StringExternal(&quot;Param/Value/63CB2206&quot;), StringExternal(&quot;Param/Value/D5D27AD3&quot;));
                VictoryPanelAddCustomStatisticLine(StringExternal(&quot;Param/Value/620A36D3&quot;), StringExternal(&quot;Param/Value/550EAE47&quot;));
                libCOMI_gf_BeforeFanfare(c_gameOverVictory);
                auto2B941A8E_val = RandomInt(1, 2);
                if (auto2B941A8E_val == 1) {
                    UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal(&quot;Param/Value/5D351F06&quot;));
                    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(&quot;AenythAdvisorPortrait&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), SoundLink(&quot;AenythAdvisorY1&quot;, -1), 0.2, c_transmissionDurationAdd, true);
                }
                else if (auto2B941A8E_val == 2) {
                    UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal(&quot;Param/Value/0CB25634&quot;));
                    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(&quot;AenythAdvisorPortrait&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), SoundLink(&quot;AenythAdvisorY2&quot;, -1), 0.2, c_transmissionDurationAdd, true);
                }
                libCOMI_gf_MoveCameraForAllPlayers(gv_lastCriticalEventPosition, 2.0);
                libCOMI_gf_DisplayCampaignMessage(libCOMI_gf_HumanPlayers(), libCOMI_ge_CampaignMessageType_MissionVictory, StringExternal(&quot;Param/Value/2F58291D&quot;), libCOMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
                Wait(0.5, c_timeGame);
                libCOMI_gf_MoveCameraForAllPlayers(gv_lastCriticalEventPosition, 2.0);
                libCOMI_gf_AfterFanfare(c_gameOverVictory);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_VictoryEscortingCompleted_Init () {
                gt_VictoryEscortingCompleted = TriggerCreate(&quot;gt_VictoryEscortingCompleted_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Victory Sequence
            //--------------------------------------------------------------------------------------------------
            bool gt_VictorySequence_Func (bool testConds, bool runActions) {
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_VictorySequence_Init () {
                gt_VictorySequence = TriggerCreate(&quot;gt_VictorySequence_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Victory
            //--------------------------------------------------------------------------------------------------
            bool gt_Victory_Func (bool testConds, bool runActions) {
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_Victory_Init () {
                gt_Victory = TriggerCreate(&quot;gt_Victory_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Victory Fanfare Q
            //--------------------------------------------------------------------------------------------------
            bool gt_VictoryFanfareQ_Func (bool testConds, bool runActions) {
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_VictoryFanfareQ_Init () {
                gt_VictoryFanfareQ = TriggerCreate(&quot;gt_VictoryFanfareQ_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Defeat
            //--------------------------------------------------------------------------------------------------
            bool gt_Defeat_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                libCOMI_gf_GameOver(libCOMI_ge_CampaignMissionGameResultType_Defeat);
                libCOMI_gf_EndCampaignMission(c_gameOverDefeat);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_Defeat_Init () {
                gt_Defeat = TriggerCreate(&quot;gt_Defeat_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Base Attack Wave 01A
            //--------------------------------------------------------------------------------------------------
            bool gt_BaseAttackWave01A_Func (bool testConds, bool runActions) {
                int auto694283FC_val;
                // Variable Declarations
                int lv_resourceAmount;
                int lv_techLevel;
                point lv_attackWaveSpawnLocation;
                // Variable Initialization
                lv_resourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__2Smaller;
                lv_techLevel = libCOMI_ge_CoopAITechLevelBuckets__1Early;
                // Actions
                if (!runActions) {
                    return true;
                }
                auto694283FC_val = RandomInt(1, 4);
                if (auto694283FC_val == 1) {
                    lv_attackWaveSpawnLocation = PointFromId(649981719);
                }
                else if (auto694283FC_val == 2) {
                    lv_attackWaveSpawnLocation = PointFromId(513022589);
                }
                else if (auto694283FC_val == 3) {
                    lv_attackWaveSpawnLocation = PointFromId(1433956354);
                }
                else if (auto694283FC_val == 4) {
                    lv_attackWaveSpawnLocation = PointFromId(844693492);
                }
                else {
                }
                TriggerExecute(gt_BaseAttack, true, false);
                libCOMI_gf_SetCoopAIAttackGroupSpawnPoint(gv_pLAYER_03_Player01Enemy, lv_attackWaveSpawnLocation);
                AIAttackWaveSetTargetPlayer(gv_pLAYER_03_Player01Enemy, PlayerGroupSingle(gv_pLAYER_01_USER));
                libCOMI_gf_AddCommanderUnitstoAttackWavePresetBucketTechLevel(gv_pLAYER_03_Player01Enemy, true, lv_resourceAmount, lv_techLevel);
                AIAttackWaveSend(gv_pLAYER_03_Player01Enemy, 0, true);
                libCOMI_gf_SetCoopAIAttackGroupSpawnPoint(gv_pLAYER_04_Player02Enemy, lv_attackWaveSpawnLocation);
                AIAttackWaveSetTargetPlayer(gv_pLAYER_04_Player02Enemy, PlayerGroupSingle(gv_pLAYER_02_USER));
                libCOMI_gf_AddCommanderUnitstoAttackWavePresetBucketTechLevel(gv_pLAYER_04_Player02Enemy, true, lv_resourceAmount, lv_techLevel);
                AIAttackWaveSend(gv_pLAYER_04_Player02Enemy, 0, true);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_BaseAttackWave01A_Init () {
                gt_BaseAttackWave01A = TriggerCreate(&quot;gt_BaseAttackWave01A_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Base Attack Wave 01A-2
            //--------------------------------------------------------------------------------------------------
            bool gt_BaseAttackWave01A2_Func (bool testConds, bool runActions) {
                int auto2499DFE0_val;
                // Variable Declarations
                int lv_resourceAmount;
                int lv_techLevel;
                point lv_attackWaveSpawnLocation;
                // Variable Initialization
                lv_resourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__4Medium;
                lv_techLevel = libCOMI_ge_CoopAITechLevelBuckets__1Early;
                // Actions
                if (!runActions) {
                    return true;
                }
                auto2499DFE0_val = RandomInt(1, 4);
                if (auto2499DFE0_val == 1) {
                    lv_attackWaveSpawnLocation = PointFromId(649981719);
                }
                else if (auto2499DFE0_val == 2) {
                    lv_attackWaveSpawnLocation = PointFromId(513022589);
                }
                else if (auto2499DFE0_val == 3) {
                    lv_attackWaveSpawnLocation = PointFromId(1433956354);
                }
                else if (auto2499DFE0_val == 4) {
                    lv_attackWaveSpawnLocation = PointFromId(844693492);
                }
                else {
                }
                TriggerExecute(gt_BaseAttack, true, false);
                libCOMI_gf_SetCoopAIAttackGroupSpawnPoint(gv_pLAYER_03_Player01Enemy, lv_attackWaveSpawnLocation);
                AIAttackWaveSetTargetPlayer(gv_pLAYER_03_Player01Enemy, PlayerGroupSingle(gv_pLAYER_01_USER));
                libCOMI_gf_AddCommanderUnitstoAttackWavePresetBucketTechLevel(gv_pLAYER_03_Player01Enemy, true, lv_resourceAmount, lv_techLevel);
                AIAttackWaveSend(gv_pLAYER_03_Player01Enemy, 0, true);
                libCOMI_gf_SetCoopAIAttackGroupSpawnPoint(gv_pLAYER_04_Player02Enemy, lv_attackWaveSpawnLocation);
                AIAttackWaveSetTargetPlayer(gv_pLAYER_04_Player02Enemy, PlayerGroupSingle(gv_pLAYER_02_USER));
                libCOMI_gf_AddCommanderUnitstoAttackWavePresetBucketTechLevel(gv_pLAYER_04_Player02Enemy, true, lv_resourceAmount, lv_techLevel);
                AIAttackWaveSend(gv_pLAYER_04_Player02Enemy, 0, true);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_BaseAttackWave01A2_Init () {
                gt_BaseAttackWave01A2 = TriggerCreate(&quot;gt_BaseAttackWave01A2_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Base Attack Wave 01B
            //--------------------------------------------------------------------------------------------------
            bool gt_BaseAttackWave01B_Func (bool testConds, bool runActions) {
                int auto5FCC1C68_val;
                // Variable Declarations
                int lv_resourceAmount;
                int lv_techLevel;
                point lv_attackWaveSpawnLocation;
                // Variable Initialization
                lv_resourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
                lv_techLevel = libCOMI_ge_CoopAITechLevelBuckets__1Early;
                // Actions
                if (!runActions) {
                    return true;
                }
                auto5FCC1C68_val = RandomInt(1, 4);
                if (auto5FCC1C68_val == 1) {
                    lv_attackWaveSpawnLocation = PointFromId(649981719);
                }
                else if (auto5FCC1C68_val == 2) {
                    lv_attackWaveSpawnLocation = PointFromId(513022589);
                }
                else if (auto5FCC1C68_val == 3) {
                    lv_attackWaveSpawnLocation = PointFromId(1433956354);
                }
                else if (auto5FCC1C68_val == 4) {
                    lv_attackWaveSpawnLocation = PointFromId(844693492);
                }
                else {
                }
                TriggerExecute(gt_BaseAttack, true, false);
                libCOMI_gf_SetCoopAIAttackGroupSpawnPoint(gv_pLAYER_03_Player01Enemy, lv_attackWaveSpawnLocation);
                AIAttackWaveSetTargetPlayer(gv_pLAYER_03_Player01Enemy, PlayerGroupSingle(gv_pLAYER_01_USER));
                libCOMI_gf_AddCommanderUnitstoAttackWavePresetBucketTechLevel(gv_pLAYER_03_Player01Enemy, true, lv_resourceAmount, lv_techLevel);
                AIAttackWaveSend(gv_pLAYER_03_Player01Enemy, 0, true);
                libCOMI_gf_SetCoopAIAttackGroupSpawnPoint(gv_pLAYER_04_Player02Enemy, lv_attackWaveSpawnLocation);
                AIAttackWaveSetTargetPlayer(gv_pLAYER_04_Player02Enemy, PlayerGroupSingle(gv_pLAYER_02_USER));
                libCOMI_gf_AddCommanderUnitstoAttackWavePresetBucketTechLevel(gv_pLAYER_04_Player02Enemy, true, lv_resourceAmount, lv_techLevel);
                AIAttackWaveSend(gv_pLAYER_04_Player02Enemy, 0, true);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_BaseAttackWave01B_Init () {
                gt_BaseAttackWave01B = TriggerCreate(&quot;gt_BaseAttackWave01B_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Base Attack Wave 01C
            //--------------------------------------------------------------------------------------------------
            bool gt_BaseAttackWave01C_Func (bool testConds, bool runActions) {
                int auto68CB46B5_val;
                bool auto9DD8C003_val;
                bool auto95314D31_val;
                // Variable Declarations
                int lv_resourceAmount;
                int lv_techLevel;
                point lv_attackWaveSpawnLocation;
                bool lv_attackexpo;
                // Variable Initialization
                lv_resourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__2Smaller;
                lv_techLevel = libCOMI_ge_CoopAITechLevelBuckets__1Early;
                // Actions
                if (!runActions) {
                    return true;
                }
                auto68CB46B5_val = RandomInt(1, 4);
                if (auto68CB46B5_val == 1) {
                    lv_attackWaveSpawnLocation = PointFromId(649981719);
                    lv_attackexpo = true;
                }
                else if (auto68CB46B5_val == 2) {
                    lv_attackWaveSpawnLocation = PointFromId(463208794);
                    lv_attackexpo = true;
                }
                else if (auto68CB46B5_val == 3) {
                    lv_attackWaveSpawnLocation = PointFromId(1210165596);
                }
                else if (auto68CB46B5_val == 4) {
                    lv_attackWaveSpawnLocation = PointFromId(316264140);
                }
                else {
                }
                TriggerExecute(gt_BaseAttack, true, false);
                libCOMI_gf_SetCoopAIAttackGroupSpawnPoint(gv_pLAYER_03_Player01Enemy, lv_attackWaveSpawnLocation);
                auto9DD8C003_val = lv_attackexpo;
                if (auto9DD8C003_val == true) {
                    AIAttackWaveSetTargetPoint(gv_pLAYER_03_Player01Enemy, PointFromId(402087163));
                }
                else if (auto9DD8C003_val == false) {
                    AIAttackWaveSetTargetPlayer(gv_pLAYER_03_Player01Enemy, PlayerGroupSingle(gv_pLAYER_01_USER));
                }
                else {
                }
                AIAttackWaveSetTargetPlayer(gv_pLAYER_03_Player01Enemy, PlayerGroupSingle(gv_pLAYER_01_USER));
                libCOMI_gf_AddCommanderUnitstoAttackWavePresetBucketTechLevel(gv_pLAYER_03_Player01Enemy, true, lv_resourceAmount, lv_techLevel);
                AIAttackWaveSend(gv_pLAYER_03_Player01Enemy, 0, true);
                libCOMI_gf_SetCoopAIAttackGroupSpawnPoint(gv_pLAYER_04_Player02Enemy, lv_attackWaveSpawnLocation);
                auto95314D31_val = lv_attackexpo;
                if (auto95314D31_val == true) {
                    AIAttackWaveSetTargetPoint(gv_pLAYER_04_Player02Enemy, PointFromId(402087163));
                }
                else if (auto95314D31_val == false) {
                    AIAttackWaveSetTargetPlayer(gv_pLAYER_04_Player02Enemy, PlayerGroupSingle(gv_pLAYER_02_USER));
                }
                else {
                }
                AIAttackWaveSetTargetPlayer(gv_pLAYER_04_Player02Enemy, PlayerGroupSingle(gv_pLAYER_02_USER));
                libCOMI_gf_AddCommanderUnitstoAttackWavePresetBucketTechLevel(gv_pLAYER_04_Player02Enemy, true, lv_resourceAmount, lv_techLevel);
                AIAttackWaveSend(gv_pLAYER_04_Player02Enemy, 0, true);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_BaseAttackWave01C_Init () {
                gt_BaseAttackWave01C = TriggerCreate(&quot;gt_BaseAttackWave01C_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Base Attack Wave 02A
            //--------------------------------------------------------------------------------------------------
            bool gt_BaseAttackWave02A_Func (bool testConds, bool runActions) {
                int auto0C417FD4_val;
                bool autoC36CC789_val;
                bool auto49FA33A5_val;
                // Variable Declarations
                int lv_resourceAmount;
                int lv_techLevel;
                point lv_attackWaveSpawnLocation;
                bool lv_attackexpo;
                // Variable Initialization
                lv_resourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__7Largest;
                lv_techLevel = libCOMI_ge_CoopAITechLevelBuckets__5Late;
                lv_attackexpo = true;
                // Conditions
                if (testConds) {
                    if (!((gv_baseWaveVariant[2] == 1))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                auto0C417FD4_val = RandomInt(1, 4);
                if (auto0C417FD4_val == 1) {
                    lv_attackWaveSpawnLocation = PointFromId(513022589);
                    lv_attackexpo = false;
                }
                else if (auto0C417FD4_val == 2) {
                    lv_attackWaveSpawnLocation = PointFromId(463208794);
                }
                else if (auto0C417FD4_val == 3) {
                    lv_attackWaveSpawnLocation = PointFromId(649981719);
                }
                else if (auto0C417FD4_val == 4) {
                    lv_attackWaveSpawnLocation = PointFromId(150329535);
                }
                else {
                }
                TriggerExecute(gt_BaseAttack, true, false);
                libCOMI_gf_SetCoopAIAttackGroupSpawnPoint(gv_pLAYER_03_Player01Enemy, lv_attackWaveSpawnLocation);
                autoC36CC789_val = lv_attackexpo;
                if (autoC36CC789_val == true) {
                    AIAttackWaveSetTargetPoint(gv_pLAYER_03_Player01Enemy, PointFromId(402087163));
                }
                else if (autoC36CC789_val == false) {
                    AIAttackWaveSetTargetPlayer(gv_pLAYER_03_Player01Enemy, PlayerGroupSingle(gv_pLAYER_01_USER));
                }
                else {
                }
                libCOMI_gf_AddCommanderUnitstoAttackWavePresetBucketTechLevel(gv_pLAYER_03_Player01Enemy, true, lv_resourceAmount, lv_techLevel);
                AIAttackWaveSend(gv_pLAYER_03_Player01Enemy, 0, true);
                libCOMI_gf_SetCoopAIAttackGroupSpawnPoint(gv_pLAYER_04_Player02Enemy, lv_attackWaveSpawnLocation);
                auto49FA33A5_val = lv_attackexpo;
                if (auto49FA33A5_val == true) {
                    AIAttackWaveSetTargetPoint(gv_pLAYER_04_Player02Enemy, PointFromId(402087163));
                }
                else if (auto49FA33A5_val == false) {
                    AIAttackWaveSetTargetPlayer(gv_pLAYER_04_Player02Enemy, PlayerGroupSingle(gv_pLAYER_02_USER));
                }
                else {
                }
                libCOMI_gf_AddCommanderUnitstoAttackWavePresetBucketTechLevel(gv_pLAYER_04_Player02Enemy, true, lv_resourceAmount, lv_techLevel);
                AIAttackWaveSend(gv_pLAYER_04_Player02Enemy, 0, true);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_BaseAttackWave02A_Init () {
                gt_BaseAttackWave02A = TriggerCreate(&quot;gt_BaseAttackWave02A_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Base Attack Wave 02B
            //--------------------------------------------------------------------------------------------------
            bool gt_BaseAttackWave02B_Func (bool testConds, bool runActions) {
                int autoAB0429FB_val;
                // Variable Declarations
                int lv_resourceAmount;
                int lv_techLevel;
                point lv_attackWaveSpawnLocation;
                // Variable Initialization
                lv_resourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__6Larger;
                lv_techLevel = libCOMI_ge_CoopAITechLevelBuckets__3Mid;
                // Conditions
                if (testConds) {
                    if (!((gv_baseWaveVariant[2] == 2))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                Wait(RandomInt(15, 18), c_timeGame);
                autoAB0429FB_val = RandomInt(1, 4);
                if (autoAB0429FB_val == 1) {
                    lv_attackWaveSpawnLocation = PointFromId(844693492);
                }
                else if (autoAB0429FB_val == 2) {
                    lv_attackWaveSpawnLocation = PointFromId(463208794);
                }
                else if (autoAB0429FB_val == 3) {
                    lv_attackWaveSpawnLocation = PointFromId(649981719);
                }
                else if (autoAB0429FB_val == 4) {
                    lv_attackWaveSpawnLocation = PointFromId(1433956354);
                }
                else {
                }
                TriggerExecute(gt_BaseAttack, true, false);
                libCOMI_gf_SetCoopAIAttackGroupSpawnPoint(gv_pLAYER_03_Player01Enemy, lv_attackWaveSpawnLocation);
                AIAttackWaveSetTargetPlayer(gv_pLAYER_03_Player01Enemy, PlayerGroupSingle(gv_pLAYER_01_USER));
                libCOMI_gf_AddCommanderUnitstoAttackWavePresetBucketTechLevel(gv_pLAYER_03_Player01Enemy, true, lv_resourceAmount, lv_techLevel);
                AIAttackWaveSend(gv_pLAYER_03_Player01Enemy, 0, true);
                libCOMI_gf_SetCoopAIAttackGroupSpawnPoint(gv_pLAYER_04_Player02Enemy, lv_attackWaveSpawnLocation);
                AIAttackWaveSetTargetPlayer(gv_pLAYER_04_Player02Enemy, PlayerGroupSingle(gv_pLAYER_02_USER));
                libCOMI_gf_AddCommanderUnitstoAttackWavePresetBucketTechLevel(gv_pLAYER_04_Player02Enemy, true, lv_resourceAmount, lv_techLevel);
                AIAttackWaveSend(gv_pLAYER_04_Player02Enemy, 0, true);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_BaseAttackWave02B_Init () {
                gt_BaseAttackWave02B = TriggerCreate(&quot;gt_BaseAttackWave02B_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Base Attack Wave 03
            //--------------------------------------------------------------------------------------------------
            bool gt_BaseAttackWave03_Func (bool testConds, bool runActions) {
                int autoD9B16757_val;
                bool auto947F72BA_val;
                bool auto5422ACAD_val;
                // Variable Declarations
                int lv_resourceAmount;
                int lv_techLevel;
                point lv_attackWaveSpawnLocation;
                bool lv_attackexpo;
                int lv_hybridminoramount;
                int lv_hybridmajoramount;
                unitgroup lv_attackunitgroup;
                // Variable Initialization
                lv_resourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__7Largest;
                lv_techLevel = libCOMI_ge_CoopAITechLevelBuckets__5Late;
                lv_attackunitgroup = UnitGroupEmpty();
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                Wait(16.0, c_timeGame);
                autoD9B16757_val = RandomInt(1, 4);
                if (autoD9B16757_val == 1) {
                    lv_attackWaveSpawnLocation = PointFromId(316264140);
                }
                else if (autoD9B16757_val == 2) {
                    lv_attackWaveSpawnLocation = PointFromId(1433956354);
                }
                else if (autoD9B16757_val == 3) {
                    lv_attackWaveSpawnLocation = PointFromId(844693492);
                }
                else if (autoD9B16757_val == 4) {
                    lv_attackWaveSpawnLocation = PointFromId(150329535);
                    lv_attackexpo = true;
                }
                else {
                }
                TriggerExecute(gt_BaseAttack, true, false);
                libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_Player01Enemy, gv_pLAYER_04_Player02Enemy, lv_resourceAmount, lv_techLevel, lv_attackWaveSpawnLocation, true);
                UnitGroupAddUnitGroup(lv_attackunitgroup, libCOMI_gf_LastCreatedCoopAttackForce());
                auto947F72BA_val = lv_attackexpo;
                if (auto947F72BA_val == true) {
                    AIAttackWaveSetTargetPoint(gv_pLAYER_03_Player01Enemy, PointFromId(402087163));
                }
                else if (auto947F72BA_val == false) {
                    AIAttackWaveSetTargetPlayer(gv_pLAYER_03_Player01Enemy, PlayerGroupSingle(gv_pLAYER_01_USER));
                }
                else {
                }
                AIAttackWaveUseGroup(gv_pLAYER_03_Player01Enemy, UnitGroupFilterPlayer(lv_attackunitgroup, gv_pLAYER_03_Player01Enemy, 0));
                AIAttackWaveSend(gv_pLAYER_03_Player01Enemy, 0, false);
                auto5422ACAD_val = lv_attackexpo;
                if (auto5422ACAD_val == true) {
                    AIAttackWaveSetTargetPoint(gv_pLAYER_04_Player02Enemy, PointFromId(402087163));
                }
                else if (auto5422ACAD_val == false) {
                    AIAttackWaveSetTargetPlayer(gv_pLAYER_04_Player02Enemy, PlayerGroupSingle(gv_pLAYER_02_USER));
                }
                else {
                }
                AIAttackWaveUseGroup(gv_pLAYER_04_Player02Enemy, UnitGroupFilterPlayer(lv_attackunitgroup, gv_pLAYER_04_Player02Enemy, 0));
                AIAttackWaveSend(gv_pLAYER_04_Player02Enemy, 0, false);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_BaseAttackWave03_Init () {
                gt_BaseAttackWave03 = TriggerCreate(&quot;gt_BaseAttackWave03_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Base Attack Wave 03 OBSOLETE
            //--------------------------------------------------------------------------------------------------
            bool gt_BaseAttackWave03OBSOLETE_Func (bool testConds, bool runActions) {
                int autoD9E4DB69_val;
                bool auto4D1CB3C2_val;
                bool auto82CBF088_val;
                // Variable Declarations
                int lv_resourceAmount;
                int lv_techLevel;
                point lv_attackWaveSpawnLocation;
                bool lv_attackexpo;
                int lv_hybridminoramount;
                int lv_hybridmajoramount;
                unitgroup lv_attackunitgroup;
                // Variable Initialization
                lv_resourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__7Largest;
                lv_techLevel = libCOMI_ge_CoopAITechLevelBuckets__5Late;
                lv_attackunitgroup = UnitGroupEmpty();
                // Actions
                if (!runActions) {
                    return true;
                }
                Wait(RandomInt(20, 30), c_timeGame);
                autoD9E4DB69_val = RandomInt(1, 4);
                if (autoD9E4DB69_val == 1) {
                    lv_attackWaveSpawnLocation = PointFromId(316264140);
                }
                else if (autoD9E4DB69_val == 2) {
                    lv_attackWaveSpawnLocation = PointFromId(1433956354);
                }
                else if (autoD9E4DB69_val == 3) {
                    lv_attackWaveSpawnLocation = PointFromId(844693492);
                }
                else if (autoD9E4DB69_val == 4) {
                    lv_attackWaveSpawnLocation = PointFromId(150329535);
                    lv_attackexpo = true;
                }
                else {
                }
                TriggerExecute(gt_BaseAttack, true, false);
                lv_hybridmajoramount = libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 0, 0, 0, 1, 1, 1);
                lv_hybridminoramount = libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 0, 1, 2, 2, 2, 2);
                if ((lv_hybridmajoramount != 0)) {
                    UnitCreate(lv_hybridmajoramount, gv_hybridMajor, 0, gv_pLAYER_03_Player01Enemy, lv_attackWaveSpawnLocation, 270.0);
                    UnitGroupAddUnitGroup(lv_attackunitgroup, UnitLastCreatedGroup());
                }
                if ((lv_hybridminoramount != 0)) {
                    UnitCreate(lv_hybridminoramount, gv_hybridMinor, 0, gv_pLAYER_04_Player02Enemy, lv_attackWaveSpawnLocation, 270.0);
                    UnitGroupAddUnitGroup(lv_attackunitgroup, UnitLastCreatedGroup());
                }
                libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_Player01Enemy, gv_pLAYER_04_Player02Enemy, lv_resourceAmount, lv_techLevel, lv_attackWaveSpawnLocation, true);
                UnitGroupAddUnitGroup(lv_attackunitgroup, libCOMI_gf_LastCreatedCoopAttackForce());
                auto4D1CB3C2_val = lv_attackexpo;
                if (auto4D1CB3C2_val == true) {
                    AIAttackWaveSetTargetPoint(gv_pLAYER_03_Player01Enemy, PointFromId(402087163));
                }
                else if (auto4D1CB3C2_val == false) {
                    AIAttackWaveSetTargetPlayer(gv_pLAYER_03_Player01Enemy, PlayerGroupSingle(gv_pLAYER_01_USER));
                }
                else {
                }
                AIAttackWaveUseGroup(gv_pLAYER_03_Player01Enemy, UnitGroupFilterPlayer(lv_attackunitgroup, gv_pLAYER_03_Player01Enemy, 0));
                AIAttackWaveSend(gv_pLAYER_03_Player01Enemy, 0, false);
                auto82CBF088_val = lv_attackexpo;
                if (auto82CBF088_val == true) {
                    AIAttackWaveSetTargetPoint(gv_pLAYER_04_Player02Enemy, PointFromId(402087163));
                }
                else if (auto82CBF088_val == false) {
                    AIAttackWaveSetTargetPlayer(gv_pLAYER_04_Player02Enemy, PlayerGroupSingle(gv_pLAYER_02_USER));
                }
                else {
                }
                AIAttackWaveUseGroup(gv_pLAYER_04_Player02Enemy, UnitGroupFilterPlayer(lv_attackunitgroup, gv_pLAYER_04_Player02Enemy, 0));
                AIAttackWaveSend(gv_pLAYER_04_Player02Enemy, 0, false);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_BaseAttackWave03OBSOLETE_Init () {
                gt_BaseAttackWave03OBSOLETE = TriggerCreate(&quot;gt_BaseAttackWave03OBSOLETE_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Crystal Hybrid Force Ping Controller 1
            //--------------------------------------------------------------------------------------------------
            bool gt_CrystalHybridForcePingController1_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((UnitGroupCount(gv_activeCrystalHybridForce[1], c_unitCountAlive) != 0)) {
                    PingSetPosition(gv_activeCrystalHybridForcePing[1], UnitGroupCenterOfGroup(gv_activeCrystalHybridForce[1]));
                }
                else {
                    TriggerEnable(TriggerGetCurrent(), false);
                    libCOMI_gf_DestroyPingCoop(gv_activeCrystalHybridForcePing[1]);
                    if ((((gv_doubleActive == true) &amp;&amp; (gv_activeCrystalIsInGame[1] == true) &amp;&amp; (gv_activeCrystalIsTransported[1] == false) &amp;&amp; (gv_activeCrystalIsTransported[2] == false) &amp;&amp; (gv_activeCrystalHybridForceTargetLevel[1] == gv_activeCrystalLevel[1]) &amp;&amp; (gv_activeCrystalHybridForceTargetCystalID[1] == gv_activeCrystalID[1])) || ((gv_doubleActive == false) &amp;&amp; (gv_activeCrystalIsInGame[1] == true) &amp;&amp; (gv_activeCrystalIsTransported[1] == false) &amp;&amp; (gv_activeCrystalHybridForceTargetLevel[1] == gv_activeCrystalLevel[1]) &amp;&amp; (gv_activeCrystalHybridForceTargetCystalID[1] == gv_activeCrystalID[1])))) {
                        TriggerExecute(gt_Hybridkilledandtransportstarts, true, false);
                        TriggerExecute(gt_StartCrystalTransportWave1, false, false);
                    }
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_CrystalHybridForcePingController1_Init () {
                gt_CrystalHybridForcePingController1 = TriggerCreate(&quot;gt_CrystalHybridForcePingController1_Func&quot;);
                TriggerEnable(gt_CrystalHybridForcePingController1, false);
                TriggerAddEventTimePeriodic(gt_CrystalHybridForcePingController1, 0.125, c_timeReal);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Crystal Hybrid Force Ping Controller 2
            //--------------------------------------------------------------------------------------------------
            bool gt_CrystalHybridForcePingController2_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((UnitGroupCount(gv_activeCrystalHybridForce[2], c_unitCountAlive) != 0)) {
                    PingSetPosition(gv_activeCrystalHybridForcePing[2], UnitGroupCenterOfGroup(gv_activeCrystalHybridForce[2]));
                }
                else {
                    TriggerEnable(TriggerGetCurrent(), false);
                    libCOMI_gf_DestroyPingCoop(gv_activeCrystalHybridForcePing[2]);
                    if ((((gv_doubleActive == true) &amp;&amp; (gv_activeCrystalIsInGame[2] == true) &amp;&amp; (gv_activeCrystalIsTransported[1] == false) &amp;&amp; (gv_activeCrystalIsTransported[2] == false) &amp;&amp; (gv_activeCrystalHybridForceTargetLevel[2] == gv_activeCrystalLevel[2]) &amp;&amp; (gv_activeCrystalHybridForceTargetCystalID[2] == gv_activeCrystalID[2])) || ((gv_doubleActive == false) &amp;&amp; (gv_activeCrystalIsInGame[2] == true) &amp;&amp; (gv_activeCrystalIsTransported[2] == false) &amp;&amp; (gv_activeCrystalHybridForceTargetLevel[2] == gv_activeCrystalLevel[2]) &amp;&amp; (gv_activeCrystalHybridForceTargetCystalID[2] == gv_activeCrystalID[2])))) {
                        TriggerExecute(gt_Hybridkilledandtransportstarts, true, false);
                        TriggerExecute(gt_StartCrystalTransportWave2, false, false);
                    }
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_CrystalHybridForcePingController2_Init () {
                gt_CrystalHybridForcePingController2 = TriggerCreate(&quot;gt_CrystalHybridForcePingController2_Func&quot;);
                TriggerEnable(gt_CrystalHybridForcePingController2, false);
                TriggerAddEventTimePeriodic(gt_CrystalHybridForcePingController2, 0.125, c_timeReal);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Init Hybrid Strom Wave
            //--------------------------------------------------------------------------------------------------
            bool gt_InitHybridStromWave_Func (bool testConds, bool runActions) {
                int auto6617BC87_val;
                // Variable Declarations
                int lv_mintime;
                int lv_maxtime;
                // Variable Initialization
                lv_mintime = 25;
                lv_maxtime = 28;
                // Actions
                if (!runActions) {
                    return true;
                }
                if (((gv_activeCrystalIsTransported[1] == true) || (gv_activeCrystalIsTransported[2] == true))) {
                    lv_mintime = libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 40, 38, 36, 34, 34, 34);
                    lv_maxtime = libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 42, 40, 38, 36, 36, 36);
                }
                else {
                    lv_mintime = libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 35, 32, 27, 25, 25, 25);
                    lv_maxtime = libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 38, 35, 30, 28, 28, 28);
                }
                if (((gv_objectiveCrystalsBeforeStormCompletedsoon == true) || ((gv_objectiveEscortCrystalsEscorted == 2) &amp;&amp; (gv_objectiveDontLoseCrystalsLost == 0) &amp;&amp; (gv_activeCrystalIsTransported[1] == false) &amp;&amp; (gv_activeCrystalIsTransported[2] == false)))) {
                    lv_mintime = libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 18, 16, 15, 12, 12, 12);
                    lv_maxtime = libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 20, 18, 17, 14, 14, 14);
                }
                Wait(RandomInt(lv_mintime, lv_maxtime), c_timeGame);
                auto6617BC87_val = RandomInt(1, 2);
                if (auto6617BC87_val == 1) {
                    TriggerExecute(gt_HybridStormWave01, true, false);
                }
                else if (auto6617BC87_val == 2) {
                    TriggerExecute(gt_HybridStormWave02, true, false);
                }
                else {
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_InitHybridStromWave_Init () {
                gt_InitHybridStromWave = TriggerCreate(&quot;gt_InitHybridStromWave_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Hybrid Storm Wave 01
            //--------------------------------------------------------------------------------------------------
            bool gt_HybridStormWave01_Func (bool testConds, bool runActions) {
                int auto9EBF688F_val;
                int auto754B2096_val;
                // Variable Declarations
                point lv_attackWaveSpawnLocation;
                point lv_attacktarget;
                // Variable Initialization
                // Actions
                if (!runActions) {
                    return true;
                }
                auto9EBF688F_val = RandomInt(1, 2);
                if (auto9EBF688F_val == 1) {
                    lv_attacktarget = PlayerStartLocation(gv_pLAYER_01_USER);
                }
                else if (auto9EBF688F_val == 2) {
                    lv_attacktarget = PlayerStartLocation(gv_pLAYER_02_USER);
                }
                else {
                }
                AIAttackWaveSetTargetPoint(gv_pLAYER_05_Player03Hybrids, lv_attacktarget);
                auto754B2096_val = RandomInt(1, 2);
                if (auto754B2096_val == 1) {
                    lv_attackWaveSpawnLocation = PointFromId(1010165593);
                }
                else if (auto754B2096_val == 2) {
                    lv_attackWaveSpawnLocation = PointFromId(2146904827);
                }
                else {
                }
                UnitCreate(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 1, 1, 2, 3, 4, 4), gv_hybridMinor, 0, gv_pLAYER_05_Player03Hybrids, lv_attackWaveSpawnLocation, 270.0);
                UnitGroupLoopBegin(UnitLastCreatedGroup());
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    libNtve_gf_AICast(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand(&quot;attack&quot;, 0), lv_attacktarget));
                    AIAttackWaveUseUnit(UnitGetOwner(UnitGroupLoopCurrent()), UnitGroupLoopCurrent());
                }
                UnitGroupLoopEnd();
                UnitCreate(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 0, 1, 1, 1, 1, 1), gv_hybridMajor, 0, gv_pLAYER_05_Player03Hybrids, lv_attackWaveSpawnLocation, 270.0);
                UnitGroupLoopBegin(UnitLastCreatedGroup());
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    libNtve_gf_AICast(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand(&quot;attack&quot;, 0), lv_attacktarget));
                    AIAttackWaveUseUnit(UnitGetOwner(UnitGroupLoopCurrent()), UnitGroupLoopCurrent());
                }
                UnitGroupLoopEnd();
                AIAttackWaveSend(gv_pLAYER_05_Player03Hybrids, 0, true);
                TriggerExecute(gt_Hybriddetected, true, false);
                if ((gv_hybridMinor == &quot;HybridDestroyer&quot;)) {
                    Wait(RandomInt(15, 20), c_timeGame);
                    TriggerExecute(gt_HybridStormWave03, true, false);
                }
                else {
                    Wait(RandomInt(35, 40), c_timeGame);
                    TriggerExecute(gt_HybridStormWave05, true, false);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_HybridStormWave01_Init () {
                gt_HybridStormWave01 = TriggerCreate(&quot;gt_HybridStormWave01_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Hybrid Storm Wave 02
            //--------------------------------------------------------------------------------------------------
            bool gt_HybridStormWave02_Func (bool testConds, bool runActions) {
                int autoA1C8E716_val;
                int autoBBCB54D5_val;
                // Variable Declarations
                point lv_attackWaveSpawnLocation;
                point lv_attacktarget;
                // Variable Initialization
                // Actions
                if (!runActions) {
                    return true;
                }
                autoA1C8E716_val = RandomInt(1, 2);
                if (autoA1C8E716_val == 1) {
                    lv_attacktarget = PlayerStartLocation(gv_pLAYER_01_USER);
                }
                else if (autoA1C8E716_val == 2) {
                    lv_attacktarget = PlayerStartLocation(gv_pLAYER_02_USER);
                }
                else {
                }
                AIAttackWaveSetTargetPoint(gv_pLAYER_05_Player03Hybrids, lv_attacktarget);
                autoBBCB54D5_val = RandomInt(1, 2);
                if (autoBBCB54D5_val == 1) {
                    lv_attackWaveSpawnLocation = PointFromId(748668572);
                }
                else if (autoBBCB54D5_val == 2) {
                    lv_attackWaveSpawnLocation = PointFromId(1632729408);
                }
                else {
                }
                UnitCreate(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 1, 1, 2, 3, 4, 4), gv_hybridMinor, 0, gv_pLAYER_05_Player03Hybrids, lv_attackWaveSpawnLocation, 270.0);
                UnitGroupLoopBegin(UnitLastCreatedGroup());
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    AIAttackWaveUseUnit(UnitGetOwner(UnitGroupLoopCurrent()), UnitGroupLoopCurrent());
                }
                UnitGroupLoopEnd();
                UnitCreate(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 0, 1, 1, 1, 1, 1), gv_hybridMajor, 0, gv_pLAYER_05_Player03Hybrids, lv_attackWaveSpawnLocation, 270.0);
                UnitGroupLoopBegin(UnitLastCreatedGroup());
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    AIAttackWaveUseUnit(UnitGetOwner(UnitGroupLoopCurrent()), UnitGroupLoopCurrent());
                }
                UnitGroupLoopEnd();
                AIAttackWaveSend(gv_pLAYER_05_Player03Hybrids, 0, true);
                TriggerExecute(gt_Hybriddetected, true, false);
                if ((gv_hybridMinor == &quot;HybridDestroyer&quot;)) {
                    Wait(RandomInt(15, 20), c_timeGame);
                    TriggerExecute(gt_HybridStormWave03, true, false);
                }
                else {
                    Wait(RandomInt(35, 40), c_timeGame);
                    TriggerExecute(gt_HybridStormWave04, true, false);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_HybridStormWave02_Init () {
                gt_HybridStormWave02 = TriggerCreate(&quot;gt_HybridStormWave02_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Hybrid Storm Wave 03
            //--------------------------------------------------------------------------------------------------
            bool gt_HybridStormWave03_Func (bool testConds, bool runActions) {
                int autoBB56B55C_val;
                int auto99BB52DE_val;
                // Variable Declarations
                point lv_attackWaveSpawnLocation;
                point lv_attacktarget;
                // Variable Initialization
                // Actions
                if (!runActions) {
                    return true;
                }
                autoBB56B55C_val = RandomInt(1, 2);
                if (autoBB56B55C_val == 1) {
                    lv_attacktarget = PlayerStartLocation(gv_pLAYER_01_USER);
                }
                else if (autoBB56B55C_val == 2) {
                    lv_attacktarget = PlayerStartLocation(gv_pLAYER_02_USER);
                }
                else {
                }
                AIAttackWaveSetTargetPoint(gv_pLAYER_05_Player03Hybrids, lv_attacktarget);
                auto99BB52DE_val = RandomInt(1, 2);
                if (auto99BB52DE_val == 1) {
                    lv_attackWaveSpawnLocation = PointFromId(1010165593);
                }
                else if (auto99BB52DE_val == 2) {
                    lv_attackWaveSpawnLocation = PointFromId(1754625846);
                }
                else {
                }
                UnitCreate(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 2, 2, 2, 3, 3, 4), gv_hybridMinor, 0, gv_pLAYER_05_Player03Hybrids, lv_attackWaveSpawnLocation, 270.0);
                UnitGroupLoopBegin(UnitLastCreatedGroup());
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    AIAttackWaveUseUnit(UnitGetOwner(UnitGroupLoopCurrent()), UnitGroupLoopCurrent());
                }
                UnitGroupLoopEnd();
                UnitCreate(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 0, 0, 1, 1, 1, 1), gv_hybridMajor, 0, gv_pLAYER_05_Player03Hybrids, lv_attackWaveSpawnLocation, 270.0);
                UnitGroupLoopBegin(UnitLastCreatedGroup());
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    AIAttackWaveUseUnit(UnitGetOwner(UnitGroupLoopCurrent()), UnitGroupLoopCurrent());
                }
                UnitGroupLoopEnd();
                AIAttackWaveSend(gv_pLAYER_05_Player03Hybrids, 0, true);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_HybridStormWave03_Init () {
                gt_HybridStormWave03 = TriggerCreate(&quot;gt_HybridStormWave03_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Hybrid Storm Wave 04
            //--------------------------------------------------------------------------------------------------
            bool gt_HybridStormWave04_Func (bool testConds, bool runActions) {
                int auto98FB9664_val;
                // Variable Declarations
                point lv_attackWaveSpawnLocation;
                point lv_attacktarget;
                // Variable Initialization
                lv_attackWaveSpawnLocation = PointFromId(1010165593);
                // Actions
                if (!runActions) {
                    return true;
                }
                auto98FB9664_val = RandomInt(1, 2);
                if (auto98FB9664_val == 1) {
                    lv_attacktarget = PlayerStartLocation(gv_pLAYER_01_USER);
                }
                else if (auto98FB9664_val == 2) {
                    lv_attacktarget = PlayerStartLocation(gv_pLAYER_02_USER);
                }
                else {
                }
                AIAttackWaveSetTargetPoint(gv_pLAYER_05_Player03Hybrids, lv_attacktarget);
                UnitCreate(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 1, 2, 3, 4, 4, 5), gv_hybridMinor, 0, gv_pLAYER_05_Player03Hybrids, lv_attackWaveSpawnLocation, 270.0);
                UnitGroupLoopBegin(UnitLastCreatedGroup());
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    AIAttackWaveUseUnit(UnitGetOwner(UnitGroupLoopCurrent()), UnitGroupLoopCurrent());
                }
                UnitGroupLoopEnd();
                AIAttackWaveSend(gv_pLAYER_05_Player03Hybrids, 0, true);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_HybridStormWave04_Init () {
                gt_HybridStormWave04 = TriggerCreate(&quot;gt_HybridStormWave04_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Hybrid Storm Wave 05
            //--------------------------------------------------------------------------------------------------
            bool gt_HybridStormWave05_Func (bool testConds, bool runActions) {
                int autoECE0A75B_val;
                // Variable Declarations
                point lv_attackWaveSpawnLocation;
                point lv_attacktarget;
                // Variable Initialization
                lv_attackWaveSpawnLocation = PointFromId(1754625846);
                // Actions
                if (!runActions) {
                    return true;
                }
                autoECE0A75B_val = RandomInt(1, 2);
                if (autoECE0A75B_val == 1) {
                    lv_attacktarget = PlayerStartLocation(gv_pLAYER_01_USER);
                }
                else if (autoECE0A75B_val == 2) {
                    lv_attacktarget = PlayerStartLocation(gv_pLAYER_02_USER);
                }
                else {
                }
                AIAttackWaveSetTargetPoint(gv_pLAYER_05_Player03Hybrids, lv_attacktarget);
                UnitCreate(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 1, 2, 3, 4, 4, 5), gv_hybridMinor, 0, gv_pLAYER_05_Player03Hybrids, lv_attackWaveSpawnLocation, 270.0);
                UnitGroupLoopBegin(UnitLastCreatedGroup());
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    AIAttackWaveUseUnit(UnitGetOwner(UnitGroupLoopCurrent()), UnitGroupLoopCurrent());
                }
                UnitGroupLoopEnd();
                AIAttackWaveSend(gv_pLAYER_05_Player03Hybrids, 0, true);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_HybridStormWave05_Init () {
                gt_HybridStormWave05 = TriggerCreate(&quot;gt_HybridStormWave05_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Setup Hybrid Types
            //--------------------------------------------------------------------------------------------------
            bool gt_SetupHybridTypes_Func (bool testConds, bool runActions) {
                int auto3336BE4F_val;
                // Actions
                if (!runActions) {
                    return true;
                }
                auto3336BE4F_val = RandomInt(1, 2);
                if (auto3336BE4F_val == 1) {
                    gv_hybridMajor = &quot;HybridBehemoth&quot;;
                    gv_hybridMinor = &quot;HybridDestroyer&quot;;
                }
                else if (auto3336BE4F_val == 2) {
                    gv_hybridMajor = &quot;HybridDominatorVoid&quot;;
                    gv_hybridMinor = &quot;HybridReaver&quot;;
                }
                else {
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_SetupHybridTypes_Init () {
                gt_SetupHybridTypes = TriggerCreate(&quot;gt_SetupHybridTypes_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Init Second Hybrid Strom Wave
            //--------------------------------------------------------------------------------------------------
            bool gt_InitSecondHybridStromWave_Func (bool testConds, bool runActions) {
                int autoB86D483A_val;
                // Actions
                if (!runActions) {
                    return true;
                }
                Wait(2.0, c_timeGame);
                SoundPlayForPlayer(SoundLink(&quot;HybridF_Roar&quot;, -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
                Wait(3.0, c_timeGame);
                TriggerExecute(gt_Hybriddetected, true, false);
                autoB86D483A_val = RandomInt(1, 2);
                if (autoB86D483A_val == 1) {
                    TriggerExecute(gt_HybridStorm2Wave01, true, false);
                }
                else if (autoB86D483A_val == 2) {
                    TriggerExecute(gt_HybridStorm2Wave02, true, false);
                }
                else {
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_InitSecondHybridStromWave_Init () {
                gt_InitSecondHybridStromWave = TriggerCreate(&quot;gt_InitSecondHybridStromWave_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Hybrid Storm2 Wave 01
            //--------------------------------------------------------------------------------------------------
            bool gt_HybridStorm2Wave01_Func (bool testConds, bool runActions) {
                int auto8D562549_val;
                int autoB4A6CC31_val;
                int auto853B882B_val;
                int auto12AFAC36_val;
                // Variable Declarations
                point lv_attackWaveSpawnLocation;
                point lv_attackWaveWaypoint;
                point lv_attackWaveSpawnLocation2;
                point lv_attacktarget;
                // Variable Initialization
                // Actions
                if (!runActions) {
                    return true;
                }
                auto8D562549_val = RandomInt(1, 2);
                if (auto8D562549_val == 1) {
                    lv_attacktarget = PlayerStartLocation(gv_pLAYER_01_USER);
                }
                else if (auto8D562549_val == 2) {
                    lv_attacktarget = PlayerStartLocation(gv_pLAYER_02_USER);
                }
                else {
                }
                AIAttackWaveSetTargetPoint(gv_pLAYER_05_Player03Hybrids, lv_attacktarget);
                autoB4A6CC31_val = RandomInt(1, 2);
                if (autoB4A6CC31_val == 1) {
                    lv_attackWaveSpawnLocation = PointFromId(1010165593);
                    lv_attackWaveSpawnLocation2 = PointFromId(844693492);
                }
                else if (autoB4A6CC31_val == 2) {
                    lv_attackWaveSpawnLocation = PointFromId(844693492);
                    lv_attackWaveSpawnLocation2 = PointFromId(1010165593);
                }
                else {
                }
                UnitCreate(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 1, 2, 3, 4, 4, 5), gv_hybridMinor, 0, gv_pLAYER_05_Player03Hybrids, lv_attackWaveSpawnLocation, 270.0);
                UnitGroupLoopBegin(UnitLastCreatedGroup());
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    libNtve_gf_AICast(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand(&quot;attack&quot;, 0), lv_attacktarget));
                    AIAttackWaveUseUnit(UnitGetOwner(UnitGroupLoopCurrent()), UnitGroupLoopCurrent());
                }
                UnitGroupLoopEnd();
                UnitCreate(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 0, 1, 1, 1, 1, 1), gv_hybridMajor, 0, gv_pLAYER_05_Player03Hybrids, lv_attackWaveSpawnLocation, 270.0);
                UnitGroupLoopBegin(UnitLastCreatedGroup());
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    libNtve_gf_AICast(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand(&quot;attack&quot;, 0), lv_attacktarget));
                    AIAttackWaveUseUnit(UnitGetOwner(UnitGroupLoopCurrent()), UnitGroupLoopCurrent());
                }
                UnitGroupLoopEnd();
                AIAttackWaveSend(gv_pLAYER_05_Player03Hybrids, 0, true);
                Wait(3.0, c_timeGame);
                UnitCreate(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 1, 2, 3, 4, 4, 5), gv_hybridMinor, 0, gv_pLAYER_05_Player03Hybrids, lv_attackWaveSpawnLocation2, 270.0);
                UnitGroupLoopBegin(UnitLastCreatedGroup());
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    libNtve_gf_AICast(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand(&quot;attack&quot;, 0), lv_attacktarget));
                    AIAttackWaveUseUnit(UnitGetOwner(UnitGroupLoopCurrent()), UnitGroupLoopCurrent());
                }
                UnitGroupLoopEnd();
                UnitCreate(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 0, 1, 1, 1, 1, 1), gv_hybridMajor, 0, gv_pLAYER_05_Player03Hybrids, lv_attackWaveSpawnLocation2, 270.0);
                UnitGroupLoopBegin(UnitLastCreatedGroup());
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    libNtve_gf_AICast(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand(&quot;attack&quot;, 0), lv_attacktarget));
                    AIAttackWaveUseUnit(UnitGetOwner(UnitGroupLoopCurrent()), UnitGroupLoopCurrent());
                }
                UnitGroupLoopEnd();
                AIAttackWaveSend(gv_pLAYER_05_Player03Hybrids, 0, true);
                Wait(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 16, 14, 12, 12, 10, 10), c_timeGame);
                auto853B882B_val = RandomInt(1, 2);
                if (auto853B882B_val == 1) {
                    lv_attackWaveSpawnLocation = PointFromId(970010144);
                    lv_attackWaveWaypoint = PointFromId(1273796551);
                }
                else if (auto853B882B_val == 2) {
                    lv_attackWaveSpawnLocation = PointFromId(417490361);
                    lv_attackWaveWaypoint = PointFromId(247577172);
                }
                else {
                }
                UnitCreate(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 1, 2, 2, 3, 3, 3), &quot;HybridNemesis&quot;, 0, gv_pLAYER_05_Player03Hybrids, lv_attackWaveSpawnLocation, 270.0);
                UnitGroupLoopBegin(UnitLastCreatedGroup());
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    AIAttackWaveUseUnit(UnitGetOwner(UnitGroupLoopCurrent()), UnitGroupLoopCurrent());
                }
                UnitGroupLoopEnd();
                AIAttackWaveSetTargetPoint(gv_pLAYER_05_Player03Hybrids, lv_attackWaveWaypoint);
                AIAttackWaveSend(gv_pLAYER_05_Player03Hybrids, 0, true);
                Wait(RandomInt(22, 24), c_timeGame);
                auto12AFAC36_val = RandomInt(1, 2);
                if (auto12AFAC36_val == 1) {
                    lv_attackWaveSpawnLocation = PointFromId(649981719);
                }
                else if (auto12AFAC36_val == 2) {
                    lv_attackWaveSpawnLocation = PointFromId(150329535);
                }
                else {
                }
                UnitCreate(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 1, 2, 3, 3, 4, 4), gv_hybridMinor, 0, gv_pLAYER_05_Player03Hybrids, lv_attackWaveSpawnLocation, 270.0);
                UnitGroupLoopBegin(UnitLastCreatedGroup());
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    AIAttackWaveUseUnit(UnitGetOwner(UnitGroupLoopCurrent()), UnitGroupLoopCurrent());
                }
                UnitGroupLoopEnd();
                UnitCreate(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 1, 1, 1, 1, 1, 1), gv_hybridMajor, 0, gv_pLAYER_05_Player03Hybrids, lv_attackWaveSpawnLocation, 270.0);
                UnitGroupLoopBegin(UnitLastCreatedGroup());
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    AIAttackWaveUseUnit(UnitGetOwner(UnitGroupLoopCurrent()), UnitGroupLoopCurrent());
                }
                UnitGroupLoopEnd();
                UnitCreate(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 1, 2, 3, 4, 4, 4), &quot;HybridNemesis&quot;, 0, gv_pLAYER_05_Player03Hybrids, lv_attackWaveSpawnLocation, 270.0);
                UnitGroupLoopBegin(UnitLastCreatedGroup());
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    AIAttackWaveUseUnit(UnitGetOwner(UnitGroupLoopCurrent()), UnitGroupLoopCurrent());
                }
                UnitGroupLoopEnd();
                AIAttackWaveSetTargetPoint(gv_pLAYER_05_Player03Hybrids, PointFromId(402087163));
                AIAttackWaveSend(gv_pLAYER_05_Player03Hybrids, 0, true);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_HybridStorm2Wave01_Init () {
                gt_HybridStorm2Wave01 = TriggerCreate(&quot;gt_HybridStorm2Wave01_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Hybrid Storm2 Wave 02
            //--------------------------------------------------------------------------------------------------
            bool gt_HybridStorm2Wave02_Func (bool testConds, bool runActions) {
                int autoD6988C3E_val;
                int autoB2F021DE_val;
                // Variable Declarations
                point lv_attackWaveSpawnLocation;
                point lv_attackWaveWaypoint;
                point lv_attackWaveSpawnLocation2;
                point lv_attacktarget;
                // Variable Initialization
                // Actions
                if (!runActions) {
                    return true;
                }
                autoD6988C3E_val = RandomInt(1, 2);
                if (autoD6988C3E_val == 1) {
                    lv_attacktarget = PlayerStartLocation(gv_pLAYER_01_USER);
                }
                else if (autoD6988C3E_val == 2) {
                    lv_attacktarget = PlayerStartLocation(gv_pLAYER_02_USER);
                }
                else {
                }
                AIAttackWaveSetTargetPoint(gv_pLAYER_05_Player03Hybrids, PointFromId(402087163));
                AIAttackWaveSetTargetPoint(gv_pLAYER_05_Player03Hybrids, lv_attacktarget);
                lv_attackWaveSpawnLocation = PointFromId(649981719);
                UnitCreate(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 1, 2, 3, 4, 4, 5), gv_hybridMinor, 0, gv_pLAYER_05_Player03Hybrids, lv_attackWaveSpawnLocation, 270.0);
                UnitGroupLoopBegin(UnitLastCreatedGroup());
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    AIAttackWaveUseUnit(UnitGetOwner(UnitGroupLoopCurrent()), UnitGroupLoopCurrent());
                }
                UnitGroupLoopEnd();
                UnitCreate(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 0, 1, 1, 1, 1, 1), gv_hybridMajor, 0, gv_pLAYER_05_Player03Hybrids, lv_attackWaveSpawnLocation, 270.0);
                UnitGroupLoopBegin(UnitLastCreatedGroup());
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    AIAttackWaveUseUnit(UnitGetOwner(UnitGroupLoopCurrent()), UnitGroupLoopCurrent());
                }
                UnitGroupLoopEnd();
                AIAttackWaveSend(gv_pLAYER_05_Player03Hybrids, 0, true);
                Wait(5.0, c_timeGame);
                autoB2F021DE_val = RandomInt(1, 2);
                if (autoB2F021DE_val == 1) {
                    lv_attackWaveSpawnLocation2 = PointFromId(316264140);
                    lv_attackWaveWaypoint = PointFromId(697640848);
                }
                else if (autoB2F021DE_val == 2) {
                    lv_attackWaveSpawnLocation2 = PointFromId(463208794);
                    lv_attackWaveWaypoint = PointFromId(402087163);
                }
                else {
                }
                UnitCreate(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 1, 2, 3, 4, 4, 5), gv_hybridMinor, 0, gv_pLAYER_05_Player03Hybrids, lv_attackWaveSpawnLocation2, 270.0);
                UnitGroupLoopBegin(UnitLastCreatedGroup());
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    AIAttackWaveUseUnit(UnitGetOwner(UnitGroupLoopCurrent()), UnitGroupLoopCurrent());
                }
                UnitGroupLoopEnd();
                UnitCreate(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 0, 1, 1, 1, 1, 1), gv_hybridMajor, 0, gv_pLAYER_05_Player03Hybrids, lv_attackWaveSpawnLocation2, 270.0);
                UnitGroupLoopBegin(UnitLastCreatedGroup());
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    AIAttackWaveUseUnit(UnitGetOwner(UnitGroupLoopCurrent()), UnitGroupLoopCurrent());
                }
                UnitGroupLoopEnd();
                AIAttackWaveSetTargetPoint(gv_pLAYER_05_Player03Hybrids, lv_attackWaveWaypoint);
                AIAttackWaveSend(gv_pLAYER_05_Player03Hybrids, 0, true);
                Wait(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 14, 12, 10, 10, 8, 8), c_timeGame);
                if ((lv_attackWaveSpawnLocation2 == PointFromId(316264140))) {
                    lv_attackWaveSpawnLocation = PointFromId(2038215003);
                    lv_attackWaveWaypoint = PointFromId(1273796551);
                }
                else {
                    lv_attackWaveSpawnLocation = PointFromId(200433085);
                    lv_attackWaveWaypoint = PointFromId(247577172);
                }
                UnitCreate(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 1, 2, 2, 3, 3, 3), &quot;HybridNemesis&quot;, 0, gv_pLAYER_05_Player03Hybrids, lv_attackWaveSpawnLocation, 270.0);
                UnitGroupLoopBegin(UnitLastCreatedGroup());
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    AIAttackWaveUseUnit(UnitGetOwner(UnitGroupLoopCurrent()), UnitGroupLoopCurrent());
                }
                UnitGroupLoopEnd();
                AIAttackWaveSetTargetPoint(gv_pLAYER_05_Player03Hybrids, lv_attackWaveWaypoint);
                AIAttackWaveSend(gv_pLAYER_05_Player03Hybrids, 0, true);
                Wait(RandomInt(22, 24), c_timeGame);
                if ((lv_attackWaveSpawnLocation2 == PointFromId(316264140))) {
                    lv_attackWaveSpawnLocation = PointFromId(1010165593);
                    lv_attackWaveSpawnLocation2 = PointFromId(1010165593);
                }
                else {
                    lv_attackWaveSpawnLocation = PointFromId(682142716);
                    lv_attackWaveSpawnLocation2 = PointFromId(1968462501);
                }
                AIAttackWaveSetTargetPoint(gv_pLAYER_05_Player03Hybrids, lv_attacktarget);
                UnitCreate(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 1, 2, 3, 3, 4, 4), gv_hybridMinor, 0, gv_pLAYER_05_Player03Hybrids, lv_attackWaveSpawnLocation, 270.0);
                UnitGroupLoopBegin(UnitLastCreatedGroup());
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    libNtve_gf_AICast(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand(&quot;attack&quot;, 0), lv_attacktarget));
                    AIAttackWaveUseUnit(UnitGetOwner(UnitGroupLoopCurrent()), UnitGroupLoopCurrent());
                }
                UnitGroupLoopEnd();
                UnitCreate(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 1, 1, 1, 1, 1, 1), gv_hybridMajor, 0, gv_pLAYER_05_Player03Hybrids, lv_attackWaveSpawnLocation, 270.0);
                UnitGroupLoopBegin(UnitLastCreatedGroup());
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    libNtve_gf_AICast(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand(&quot;attack&quot;, 0), lv_attacktarget));
                    AIAttackWaveUseUnit(UnitGetOwner(UnitGroupLoopCurrent()), UnitGroupLoopCurrent());
                }
                UnitGroupLoopEnd();
                UnitCreate(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 1, 2, 3, 4, 4, 4), &quot;HybridNemesis&quot;, 0, gv_pLAYER_05_Player03Hybrids, lv_attackWaveSpawnLocation, 270.0);
                UnitGroupLoopBegin(UnitLastCreatedGroup());
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    libNtve_gf_AICast(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand(&quot;attack&quot;, 0), lv_attacktarget));
                    AIAttackWaveUseUnit(UnitGetOwner(UnitGroupLoopCurrent()), UnitGroupLoopCurrent());
                }
                UnitGroupLoopEnd();
                AIAttackWaveSend(gv_pLAYER_05_Player03Hybrids, 0, true);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_HybridStorm2Wave02_Init () {
                gt_HybridStorm2Wave02 = TriggerCreate(&quot;gt_HybridStorm2Wave02_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Start AI
            //--------------------------------------------------------------------------------------------------
            bool gt_StartAI_Func (bool testConds, bool runActions) {
                string autoA560A6C5_val;
                int auto1B6A2DC7_val;
                int autoE181F802_val;
                // Actions
                if (!runActions) {
                    return true;
                }
                libCOMI_gf_StartCoopAI(gv_pLAYER_05_Player03Hybrids, RandomInt(gv_pLAYER_01_USER, gv_pLAYER_02_USER));
                TriggerExecute(gt_SetupHybridTypes, true, false);
              
                gv_transportType = libCOMI_gf_CoopAIUnitCategory(libCOMI_ge_UnitCategory_Transport, gv_pLAYER_03_Player01Enemy);
                AITransportSetPanic(gv_pLAYER_03_Player01Enemy, 0.9);
                AITransportSetPanic(gv_pLAYER_04_Player02Enemy, 0.9);
                if ((libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 0, 0, 1, 1, 1, 1) == 1)) {
                    auto1B6A2DC7_val = RandomInt(1, 3);
                    if (auto1B6A2DC7_val == 1) {
                        gv_baseWaveVariant[1] = 2;
                    }
                    else {
                    }
                }
                autoE181F802_val = RandomInt(1, 2);
                if (autoE181F802_val == 1) {
                    gv_baseWaveVariant[2] = 2;
                }
                else {
                }
                TriggerExecute(gt_StartAttackWaveController, true, false);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_StartAI_Init () {
                gt_StartAI = TriggerCreate(&quot;gt_StartAI_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Start Attack Wave Controller
            //--------------------------------------------------------------------------------------------------
            bool gt_StartAttackWaveController_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((gv_baseWaveVariant[1] == 1)) {
                    Wait(RandomInt(292, 300), c_timeGame);
                    if (((gv_objectiveEscortCrystalsEscorted == 1) || (gv_activeCrystalIsTransported[1] == true))) {
                        TriggerExecute(gt_BaseAttackWave01A, true, false);
                    }
                    else {
                        Wait(RandomInt(80, 88), c_timeGame);
                        TriggerExecute(gt_BaseAttackWave01A2, true, false);
                    }
                }
                else {
                    if (((libCOMI_gf_GetMissionDifficulty() == 1 || libCOMI_gf_GetMissionDifficulty() == 2) == true)) {
                        Wait(RandomInt(165, 175), c_timeGame);
                    }
                    else {
                        Wait(RandomInt(160, 170), c_timeGame);
                    }
                    TriggerExecute(gt_BaseAttackWave01B, true, false);
                    Wait(220.0, c_timeGame);
                    TriggerExecute(gt_BaseAttackWave01C, true, false);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_StartAttackWaveController_Init () {
                gt_StartAttackWaveController = TriggerCreate(&quot;gt_StartAttackWaveController_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: AI Give Resources
            //--------------------------------------------------------------------------------------------------
            bool gt_AIGiveResources_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((libCOMI_gf_GameIsOver() == false))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                PlayerModifyPropertyInt(gv_pLAYER_03_Player01Enemy, c_playerPropMinerals, c_playerPropOperSetTo, 10000);
                PlayerModifyPropertyInt(gv_pLAYER_03_Player01Enemy, c_playerPropVespene, c_playerPropOperSetTo, 10000);
                PlayerModifyPropertyInt(gv_pLAYER_04_Player02Enemy, c_playerPropMinerals, c_playerPropOperSetTo, 10000);
                PlayerModifyPropertyInt(gv_pLAYER_04_Player02Enemy, c_playerPropVespene, c_playerPropOperSetTo, 10000);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_AIGiveResources_Init () {
                gt_AIGiveResources = TriggerCreate(&quot;gt_AIGiveResources_Func&quot;);
                TriggerAddEventTimePeriodic(gt_AIGiveResources, 10.0, c_timeAI);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Call Back Starting Guards
            //--------------------------------------------------------------------------------------------------
            bool gt_CallBackStartingGuards_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                UnitGroupIssueOrder(UnitGroup(null, gv_pLAYER_03_Player01Enemy, RegionFromId(3), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0), OrderTargetingPoint(AbilityCommand(&quot;attack&quot;, 0), PointFromId(43956084)), c_orderQueueReplace);
                UnitGroupIssueOrder(UnitGroup(null, gv_pLAYER_03_Player01Enemy, RegionFromId(5), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0), OrderTargetingPoint(AbilityCommand(&quot;attack&quot;, 0), PointFromId(566592273)), c_orderQueueReplace);
                Wait(30.0, c_timeGame);
                UnitGroupIssueOrder(UnitGroup(null, gv_pLAYER_03_Player01Enemy, RegionFromId(19), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0), OrderTargetingPoint(AbilityCommand(&quot;attack&quot;, 0), PointFromId(1747148709)), c_orderQueueReplace);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_CallBackStartingGuards_Init () {
                gt_CallBackStartingGuards = TriggerCreate(&quot;gt_CallBackStartingGuards_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Objective Escort Crystals Create
            //--------------------------------------------------------------------------------------------------
            bool gt_ObjectiveEscortCrystalsCreate_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                libCOMI_gf_CreateObjectiveCampaign(&quot;TH_Primary01&quot;);
                gv_objectiveDestroyZergBase = ObjectiveLastCreated();
                Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_ObjectiveEscortCrystalsCreate_Init () {
                gt_ObjectiveEscortCrystalsCreate = TriggerCreate(&quot;gt_ObjectiveEscortCrystalsCreate_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Objective Escort Crystals Complete
            //--------------------------------------------------------------------------------------------------
            bool gt_ObjectiveEscortCrystalsComplete_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                while (!((libCOMI_gf_PlayerInCinematicModeCampaign() == false))) {
                    Wait(1.0, c_timeGame);
                }
                TriggerExecute(gt_ObjectiveEscortCrystalsCreate, true, false);
                libCOMI_gf_ZS_SetMissionObjectiveState(&quot;TH_Primary01&quot;, libCOMI_ge_MissionObjectiveState_Completed);
                Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_ObjectiveEscortCrystalsComplete_Init () {
                gt_ObjectiveEscortCrystalsComplete = TriggerCreate(&quot;gt_ObjectiveEscortCrystalsComplete_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Objective Escort Crystals Update
            //--------------------------------------------------------------------------------------------------
            bool gt_ObjectiveEscortCrystalsUpdate_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerExecute(gt_ObjectiveEscortCrystalsCreate, true, false);
                if ((gv_doubleBothCrystalsAreInside == true)) {
                    gv_objectiveEscortCrystalsEscorted += 2;
                    gv_doubleBothCrystalsAreInside = false;
                }
                else {
                    gv_objectiveEscortCrystalsEscorted += 1;
                }
                libCOMI_gf_SetMissionObjectiveProgress(&quot;TH_Primary01&quot;, gv_objectiveEscortCrystalsEscorted);
                if ((gv_objectiveEscortCrystalsEscorted == gv_objectiveEscortCrystalsGoal)) {
                    TriggerExecute(gt_VictoryEscortingCompleted, true, false);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_ObjectiveEscortCrystalsUpdate_Init () {
                gt_ObjectiveEscortCrystalsUpdate = TriggerCreate(&quot;gt_ObjectiveEscortCrystalsUpdate_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Objective Escort Crystals Failed
            //--------------------------------------------------------------------------------------------------
            bool gt_ObjectiveEscortCrystalsFailed_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                while (!((libCOMI_gf_PlayerInCinematicModeCampaign() == false))) {
                    Wait(1.0, c_timeGame);
                }
                TriggerExecute(gt_ObjectiveEscortCrystalsCreate, true, false);
                libCOMI_gf_ZS_SetMissionObjectiveState(&quot;TH_Primary01&quot;, libCOMI_ge_MissionObjectiveState_Failed);
                Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_ObjectiveEscortCrystalsFailed_Init () {
                gt_ObjectiveEscortCrystalsFailed = TriggerCreate(&quot;gt_ObjectiveEscortCrystalsFailed_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Objective Don&apos;t Lose Crystals Create
            //--------------------------------------------------------------------------------------------------
            bool gt_ObjectiveDontLoseCrystalsCreate_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                libCOMI_gf_CreateObjectiveCampaign(&quot;TH_Primary02&quot;);
                gv_objectiveDestroyZergBase2 = ObjectiveLastCreated();
                Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_ObjectiveDontLoseCrystalsCreate_Init () {
                gt_ObjectiveDontLoseCrystalsCreate = TriggerCreate(&quot;gt_ObjectiveDontLoseCrystalsCreate_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Objective Don&apos;t Lose Crystals Complete
            //--------------------------------------------------------------------------------------------------
            bool gt_ObjectiveDontLoseCrystalsComplete_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                while (!((libCOMI_gf_PlayerInCinematicModeCampaign() == false))) {
                    Wait(1.0, c_timeGame);
                }
                TriggerExecute(gt_ObjectiveDontLoseCrystalsCreate, true, false);
                libCOMI_gf_ZS_SetMissionObjectiveState(&quot;TH_Primary01&quot;, libCOMI_ge_MissionObjectiveState_Completed);
                Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_ObjectiveDontLoseCrystalsComplete_Init () {
                gt_ObjectiveDontLoseCrystalsComplete = TriggerCreate(&quot;gt_ObjectiveDontLoseCrystalsComplete_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Objective Don&apos;t Lose Crystals Update
            //--------------------------------------------------------------------------------------------------
            bool gt_ObjectiveDontLoseCrystalsUpdate_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerExecute(gt_ObjectiveDontLoseCrystalsCreate, true, false);
                gv_objectiveDontLoseCrystalsLost += 1;
                libCOMI_gf_SetMissionObjectiveProgress(&quot;TH_Primary02&quot;, gv_objectiveDontLoseCrystalsLost);
                if ((gv_objectiveDontLoseCrystalsLost &gt; gv_objectiveDontLoseCrystalsGoal)) {
                    TriggerExecute(gt_DefeatPrimaryObjectiveFailed, true, false);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_ObjectiveDontLoseCrystalsUpdate_Init () {
                gt_ObjectiveDontLoseCrystalsUpdate = TriggerCreate(&quot;gt_ObjectiveDontLoseCrystalsUpdate_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Objective Don&apos;t Lose Crystals Failed
            //--------------------------------------------------------------------------------------------------
            bool gt_ObjectiveDontLoseCrystalsFailed_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                while (!((libCOMI_gf_PlayerInCinematicModeCampaign() == false))) {
                    Wait(1.0, c_timeGame);
                }
                TriggerExecute(gt_ObjectiveDontLoseCrystalsCreate, true, false);
                libCOMI_gf_ZS_SetMissionObjectiveState(&quot;TH_Primary01&quot;, libCOMI_ge_MissionObjectiveState_Failed);
                Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_ObjectiveDontLoseCrystalsFailed_Init () {
                gt_ObjectiveDontLoseCrystalsFailed = TriggerCreate(&quot;gt_ObjectiveDontLoseCrystalsFailed_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Objective Crystals Before Storm Create
            //--------------------------------------------------------------------------------------------------
            bool gt_ObjectiveCrystalsBeforeStormCreate_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                while (!((libCOMI_gf_PlayerInCinematicModeCampaign() == false))) {
                    Wait(1.0, c_timeGame);
                }
                ObjectiveCreate(StringExternal(&quot;Param/Value/A838682A&quot;), StringExternal(&quot;Param/Value/D41730B0&quot;), c_objectiveStateActive, false);
                gv_objectiveRescueStalkers = ObjectiveLastCreated();
                Wait(4.5, c_timeGame);
                TriggerExecute(gt_StormCountdownController, true, false);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_ObjectiveCrystalsBeforeStormCreate_Init () {
                gt_ObjectiveCrystalsBeforeStormCreate = TriggerCreate(&quot;gt_ObjectiveCrystalsBeforeStormCreate_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Objective Crystals Before Storm Complete
            //--------------------------------------------------------------------------------------------------
            bool gt_ObjectiveCrystalsBeforeStormComplete_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                if ((gv_stormCountdownWaiting == true)) {
                    gv_stormCountdownWaiting = false;
                    TimerPause(gv_stormCountdownTimer, false);
                }
                TriggerExecute(gt_ObjectiveCrystalsBeforeStormCreate, true, false);
                ObjectiveSetName(gv_objectiveRescueStalkers, StringExternal(&quot;Param/Value/9D87731E&quot;));
                ObjectiveSetState(gv_objectiveRescueStalkers, c_objectiveStateCompleted);
                if ((TimerGetRemaining(gv_stormCountdownTimer) &gt; 25.0)) {
                    gv_objectiveCrystalsBeforeStormCompletedsoon = true;
                }
                Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_ObjectiveCrystalsBeforeStormComplete_Init () {
                gt_ObjectiveCrystalsBeforeStormComplete = TriggerCreate(&quot;gt_ObjectiveCrystalsBeforeStormComplete_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Objective Crystals Before Storm Update
            //--------------------------------------------------------------------------------------------------
            bool gt_ObjectiveCrystalsBeforeStormUpdate_Func (bool testConds, bool runActions) {
                // Variable Declarations
                text lv_color;
                // Variable Initialization
                lv_color = StringExternal(&quot;Param/Value/3CAB7188&quot;);
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((gv_stormCountdownWaiting == true)) {
                    ObjectiveSetName(gv_objectiveRescueStalkers, StringExternal(&quot;Param/Value/1DE11972&quot;));
                }
                else {
                    if ((TimerGetRemaining(gv_stormCountdownTimer) &lt; 90.0)) {
                        lv_color = StringExternal(&quot;Param/Value/C3F6AF17&quot;);
                    }
                    TextExpressionSetToken(&quot;Param/Expression/D6BD5E0C&quot;, &quot;color&quot;, lv_color);
                    TextExpressionSetToken(&quot;Param/Expression/D6BD5E0C&quot;, &quot;timer&quot;, TextTimeFormat(StringToText(&quot;&lt;mintotal/&gt;:&lt;sec2/&gt;&quot;), FixedToInt(TimerGetRemaining(gv_stormCountdownTimer))));
                    ObjectiveSetName(gv_objectiveRescueStalkers, TextExpressionAssemble(&quot;Param/Expression/D6BD5E0C&quot;));
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_ObjectiveCrystalsBeforeStormUpdate_Init () {
                gt_ObjectiveCrystalsBeforeStormUpdate = TriggerCreate(&quot;gt_ObjectiveCrystalsBeforeStormUpdate_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Objective Crystals Before Storm Failed
            //--------------------------------------------------------------------------------------------------
            bool gt_ObjectiveCrystalsBeforeStormFailed_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                TriggerEnable(gt_ObjectiveCrystalsBeforeStormUpdate, false);
                while (!((libCOMI_gf_PlayerInCinematicModeCampaign() == false))) {
                    Wait(1.0, c_timeGame);
                }
                TriggerExecute(gt_ObjectiveCrystalsBeforeStormCreate, true, false);
                ObjectiveSetName(gv_objectiveRescueStalkers, StringExternal(&quot;Param/Value/64EA491C&quot;));
                ObjectiveSetState(gv_objectiveRescueStalkers, c_objectiveStateFailed);
                Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_ObjectiveCrystalsBeforeStormFailed_Init () {
                gt_ObjectiveCrystalsBeforeStormFailed = TriggerCreate(&quot;gt_ObjectiveCrystalsBeforeStormFailed_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Objective Kill Hybrids Create
            //--------------------------------------------------------------------------------------------------
            bool gt_ObjectiveKillHybridsCreate_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                while (!((libCOMI_gf_PlayerInCinematicModeCampaign() == false))) {
                    Wait(1.0, c_timeGame);
                }
                ObjectiveCreate(StringExternal(&quot;Param/Value/10EE7B8F&quot;), StringToText(&quot;&quot;), c_objectiveStateActive, false);
                gv_objectiveRescueStalkers2 = ObjectiveLastCreated();
                TriggerExecute(gt_SecondBonusObjective, true, false);
                Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_ObjectiveKillHybridsCreate_Init () {
                gt_ObjectiveKillHybridsCreate = TriggerCreate(&quot;gt_ObjectiveKillHybridsCreate_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Objective Kill Hybrids Complete
            //--------------------------------------------------------------------------------------------------
            bool gt_ObjectiveKillHybridsComplete_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                TriggerExecute(gt_ObjectiveKillHybridsCreate, true, false);
                ObjectiveSetName(gv_objectiveRescueStalkers2, StringExternal(&quot;Param/Value/D92A7AFD&quot;));
                ObjectiveSetState(gv_objectiveRescueStalkers2, c_objectiveStateCompleted);
                TriggerExecute(gt_SecondBonusObjectiveSuccess, true, false);
                Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_ObjectiveKillHybridsComplete_Init () {
                gt_ObjectiveKillHybridsComplete = TriggerCreate(&quot;gt_ObjectiveKillHybridsComplete_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Objective Kill Hybrids Update
            //--------------------------------------------------------------------------------------------------
            bool gt_ObjectiveKillHybridsUpdate_Func (bool testConds, bool runActions) {
                // Variable Declarations
                text lv_color;
                // Variable Initialization
                lv_color = StringExternal(&quot;Param/Value/78A5C2BB&quot;);
                // Actions
                if (!runActions) {
                    return true;
                }
                while (!((libCOMI_gf_PlayerInCinematicModeCampaign() == false))) {
                    Wait(1.0, c_timeGame);
                }
                TriggerExecute(gt_ObjectiveKillHybridsCreate, true, false);
                if ((UnitGetPropertyFixed(EventUnit(), c_unitPropLifePercent, c_unitPropCurrent) &lt; 25.6)) {
                    lv_color = StringExternal(&quot;Param/Value/1A8089DF&quot;);
                }
                TextExpressionSetToken(&quot;Param/Expression/945CD5F2&quot;, &quot;color&quot;, lv_color);
                TextExpressionSetToken(&quot;Param/Expression/945CD5F2&quot;, &quot;HP&quot;, FixedToText(UnitGetPropertyFixed(gv_bonusKillHybridsPCUnit, c_unitPropLifePercent, c_unitPropCurrent), 0));
                ObjectiveSetName(gv_objectiveRescueStalkers2, TextExpressionAssemble(&quot;Param/Expression/945CD5F2&quot;));
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_ObjectiveKillHybridsUpdate_Init () {
                gt_ObjectiveKillHybridsUpdate = TriggerCreate(&quot;gt_ObjectiveKillHybridsUpdate_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Objective Kill Hybrids Failed
            //--------------------------------------------------------------------------------------------------
            bool gt_ObjectiveKillHybridsFailed_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                TriggerEnable(gt_ObjectiveKillHybridsUpdate, false);
                while (!((libCOMI_gf_PlayerInCinematicModeCampaign() == false))) {
                    Wait(1.0, c_timeGame);
                }
                TriggerExecute(gt_ObjectiveKillHybridsCreate, true, false);
                ObjectiveSetName(gv_objectiveRescueStalkers2, StringExternal(&quot;Param/Value/D577B336&quot;));
                ObjectiveSetState(gv_objectiveRescueStalkers2, c_objectiveStateFailed);
                TriggerExecute(gt_SecondBonusObjectiveFail, true, false);
                Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_ObjectiveKillHybridsFailed_Init () {
                gt_ObjectiveKillHybridsFailed = TriggerCreate(&quot;gt_ObjectiveKillHybridsFailed_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger Initialization
            //--------------------------------------------------------------------------------------------------
            void InitTriggers () {
                gt_Init01LoadData_Init();
                gt_Init03LoadingComplete_Init();
                gt_Init05Units_Init();
                gt_Init06MusicSound_Init();
                gt_Init07Environment_Init();
                gt_Init08Difficulties_Init();
                gt_StartGameQ_Init();
                gt_ArraySetup_Init();
                gt_StartCrystalController_Init();
                gt_OBSOLETEdoublesetup_Init();
                gt_IndicatepathWave1_Init();
                gt_IndicatepathWave2_Init();
                gt_CrystalisAttackedWave1_Init();
                gt_CrystalisAttackedWave2_Init();
                gt_CrystalDestroyedWave1_Init();
                gt_CrystalDestroyedWave2_Init();
                gt_TransportisAttackedWave1_Init();
                gt_TransportisAttackedWave2_Init();
                gt_TransportDestroyedWave1_Init();
                gt_TransportDestroyedWave2_Init();
                gt_Preparenextpick_Init();
                gt_Preparepickafterfifth_Init();
                gt_PreparenextpickOBSOLETE_Init();
                gt_StartCrystalTransportWave1_Init();
                gt_StartCrystalTransportWave2_Init();
                gt_TransportReachedDestinationWave1_Init();
                gt_TransportReachedDestinationWave2_Init();
                gt_NoEmemiesatDestinationWave1_Init();
                gt_NoEmemiesatDestinationWave2_Init();
                gt_NoEmemiesatDestinationWave1OBSOLETE_Init();
                gt_NoEmemiesatDestinationWave2OBSOLETE_Init();
                gt_Setuplevel5_Init();
                gt_rev01_Init();
                gt_rev02_Init();
                gt_rev03_Init();
                gt_rev04_Init();
                gt_rev05_Init();
                gt_rev06_Init();
                gt_rev07_Init();
                gt_rev08_Init();
                gt_rev09_Init();
                gt_rev10_Init();
                gt_rev11_Init();
                gt_rev12_Init();
                gt_rev13_Init();
                gt_DestroyStorm1_Init();
                gt_DestroyStorm2_Init();
                gt_DestroyStorm3_Init();
                gt_DestroyStorm4_Init();
                gt_DestroyStorm5_Init();
                gt_DestroyStorm6_Init();
                gt_StormController1_Init();
                gt_StormController2_Init();
                gt_StormController3_Init();
                gt_StormController4_Init();
                gt_StormController5_Init();
                gt_StormController6_Init();
                gt_DPdestroy1_Init();
                gt_DPdestructionpick_Init();
                gt_DPdestroy2_Init();
                gt_DPdestroy3_Init();
                gt_StormCountdownController_Init();
                gt_StormCountdownOBSOLETE_Init();
                gt_Stormin45sec_Init();
                gt_Stormin10sec_Init();
                gt_WaitingTimerExpired_Init();
                gt_StormStarts_Init();
                gt_SpawnStormUnits_Init();
                gt_Stormwarning_Init();
                gt_StormEnds_Init();
                gt_DestroyWeatherShield_Init();
                gt_SecondStormin25sec_Init();
                gt_SecondStormStarts_Init();
                gt_BonusKillHybridsInit_Init();
                gt_BonusKillHybridsInitOBSOLETE_Init();
                gt_BonusKillHybridMajorKilled_Init();
                gt_BonusKillHybridsKilled_Init();
                gt_BonusKillHybridsExpired_Init();
                gt_BonusKillHybridsTimerUpdate_Init();
                gt_BonusKillHybridsOrdersReset_Init();
                gt_IndicateDoublePath_Init();
                gt_StartDoubleTransport_Init();
                gt_OBSOLETEStartDoubleTransport2_Init();
                gt_ReactivateCrystal_Init();
                gt_InterruptDoubleTransport_Init();
                gt_ClearReservationsforDouble_Init();
                gt_PickupSecondCrystalWave1_Init();
                gt_PickupSecondCrystalWave2_Init();
                gt_DoubleProlongHybridDelay_Init();
                gt_Crystalisready_Init();
                gt_FirstCrystalreminder_Init();
                gt_Transportisonitsway_Init();
                gt_TransportComplete_Init();
                gt_Stormreminder_Init();
                gt_Weathershieldturnedon_Init();
                gt_StormClusterdanger_Init();
                gt_Hybriddetected_Init();
                gt_BaseAttack_Init();
                gt_DropWarpindetected_Init();
                gt_Hybridiscomingforcrystal_Init();
                gt_Crystalisattacked_Init();
                gt_Hybridkilledandtransportstarts_Init();
                gt_Crystaldestroyed_Init();
                gt_Transportattacked_Init();
                gt_Transportdestroyed_Init();
                gt_Stormisending_Init();
                gt_SecondBonusObjective_Init();
                gt_SecondBonusObjectiveSuccess_Init();
                gt_SecondBonusObjectiveFail_Init();
                gt_SecondStorm_Init();
                gt_Crystaldouble_Init();
                gt_VictoryTransmission_Init();
                gt_DefeatPrimaryObjectiveFailed_Init();
                gt_VictoryEscortingCompleted_Init();
                gt_VictorySequence_Init();
                gt_Victory_Init();
                gt_VictoryFanfareQ_Init();
                gt_Defeat_Init();
                gt_BaseAttackWave01A_Init();
                gt_BaseAttackWave01A2_Init();
                gt_BaseAttackWave01B_Init();
                gt_BaseAttackWave01C_Init();
                gt_BaseAttackWave02A_Init();
                gt_BaseAttackWave02B_Init();
                gt_BaseAttackWave03_Init();
                gt_BaseAttackWave03OBSOLETE_Init();
                gt_CrystalHybridForcePingController1_Init();
                gt_CrystalHybridForcePingController2_Init();
                gt_InitHybridStromWave_Init();
                gt_HybridStormWave01_Init();
                gt_HybridStormWave02_Init();
                gt_HybridStormWave03_Init();
                gt_HybridStormWave04_Init();
                gt_HybridStormWave05_Init();
                gt_SetupHybridTypes_Init();
                gt_InitSecondHybridStromWave_Init();
                gt_HybridStorm2Wave01_Init();
                gt_HybridStorm2Wave02_Init();
                gt_StartAI_Init();
                gt_StartAttackWaveController_Init();
                gt_AIGiveResources_Init();
                gt_CallBackStartingGuards_Init();
                gt_ObjectiveEscortCrystalsCreate_Init();
                gt_ObjectiveEscortCrystalsComplete_Init();
                gt_ObjectiveEscortCrystalsUpdate_Init();
                gt_ObjectiveEscortCrystalsFailed_Init();
                gt_ObjectiveDontLoseCrystalsCreate_Init();
                gt_ObjectiveDontLoseCrystalsComplete_Init();
                gt_ObjectiveDontLoseCrystalsUpdate_Init();
                gt_ObjectiveDontLoseCrystalsFailed_Init();
                gt_ObjectiveCrystalsBeforeStormCreate_Init();
                gt_ObjectiveCrystalsBeforeStormComplete_Init();
                gt_ObjectiveCrystalsBeforeStormUpdate_Init();
                gt_ObjectiveCrystalsBeforeStormFailed_Init();
                gt_ObjectiveKillHybridsCreate_Init();
                gt_ObjectiveKillHybridsComplete_Init();
                gt_ObjectiveKillHybridsUpdate_Init();
                gt_ObjectiveKillHybridsFailed_Init();
            }
            //--------------------------------------------------------------------------------------------------
            // Map Initialization
            //--------------------------------------------------------------------------------------------------
            void run () {
                InitLibs();
                InitGlobals();
                InitTriggers();
            }
        </ScriptCode>
        <InitFunc>run</InitFunc>
    </Element>
</TriggerData>