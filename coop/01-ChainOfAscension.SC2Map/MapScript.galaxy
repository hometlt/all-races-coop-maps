//==================================================================================================
// 
// Generated Map Script
// 
// Name:   [ARC] Chain of Ascension
// 
//==================================================================================================
include "TriggerLibs/NativeLib"
include "TriggerLibs/SwarmLib"
include "LibCOMI"

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void InitLibs () {
    libNtve_InitLib();
    libHots_InitLib();
    libCOMI_InitLib();
}

//--------------------------------------------------------------------------------------------------
// Constants
//--------------------------------------------------------------------------------------------------
const int gv_pLAYER_03_EnemyP01 = 7;
const int gv_pLAYER_04_EnemyP02 = 11;
const int gv_pLAYER_10_ELEMENTAL = 10;
const int gv_pLAYER_08_JINARA = 8;
const int gv_pLAYER_09_AMONS_CHAMPION = 9;
const int gv_tugOfWar_WaypointMax = 22;
const fixed gv_c_SkipIfNotPlayedIn = 2.0;

//--------------------------------------------------------------------------------------------------
// Global Preset Declarations
//--------------------------------------------------------------------------------------------------
const int ge_HybridAttack_Attack01 = 0;
const int ge_HybridAttack_Attack02 = 1;
const int ge_HybridAttack_Attack03 = 2;
const int ge_HybridAttack_Attack04 = 3;
const int ge_TugOfWarState_Paused = 0;
const int ge_TugOfWarState_Forward = 1;
const int ge_TugOfWarState_Hold = 2;
const int ge_TugOfWarState_Reverse = 3;
const int ge_TugOfWarState_ReverseSuper = 4;
const int ge_TugOfWarState_EventControlled = 5;

//--------------------------------------------------------------------------------------------------
// Global Variables
//--------------------------------------------------------------------------------------------------
timer gv_attackWaveTime;
fixed gv_c_AttackWavePreTime;
playergroup gv_attackWavePlayers;
bool gv_attackWave_Player01First;
int gv_objectiveKillSlaynElementals;
int gv_objectiveElementalsKilledCount;
int gv_objectiveElementalsMax;
bool gv_objectiveElementalWriteOutComplete01;
int gv_objectiveKillSlaynElementals02;
bool gv_objectiveElementalWriteOutComplete02;
fixed gv_elementalMaxDisableCooldown;
unit gv_slaynElemental01;
unit gv_slaynElemental02a;
unit gv_slaynElemental02b;
int gv_pLAYER_05_EnemyP01;
int gv_pLAYER_06_EnemyP02;
playergroup gv_enemyPlayerGroup;
unit gv_jinara;
unit gv_amonsChampion;
unit gv_tugOfWarEscortTargetUnit;
unitgroup gv_tugOfWarEscortTargetUnitGroup;
unit gv_tugOfWarBubbleUnit;
fixed gv_c_EscortWavePreTime;
playergroup gv_escortWavePlayers;
int gv_options_Boss;
int gv_options_Enforcer1;
int gv_options_Enforcer2;
int gv_hybridPusherPlayer;
string gv_hybridPusher_Boss;
string gv_hybridPusher_Enforcer01;
string gv_hybridPusher_Enforcer02;
fixed[5] gv_hybridPushTimeFailure;
fixed[5] gv_hybridPush_DelayAttacks;
fixed gv_hybridReverseSpeed;
timer[5] gv_hybridPushTriggerTemporal;
region[5] gv_hybridPushTriggerSpacial;
string gv_tugOfWarPointName;
int gv_bestForwardPushTime;
fixed gv_totalDistanceJinaraPushedBack;
int gv_tugOfWar_State;
int gv_tugOfWar_ForwardWaypoint;
int gv_tugOfWar_ReverseWaypoint;
int gv_tugOfWar_Waypoint_FarthestForward;
int gv_tugOfWar_Ping;
bool gv_tugOfWar_Presence_EnemyAI;
bool gv_tugOfWar_Presence_SuperPushers;
fixed gv_tugOfWar_Presence_Check_Humans;
fixed gv_tugOfWar_Presence_Check_EnemyAI;
bool gv_finalHybridWaveDefeated;
timer gv_announcerLineCooldown;
fixed gv_c_AnnouncerLineCooldown_Amount;
timer gv_losingGroundTimer01;
timer gv_losingGroundTimer02;
int gv_tugOfWarLosingGround01Count;
int gv_tugOfWarLosingGround02Count;
timer gv_reminderToSupportTimer;
unitgroup gv_hybridSuperPushers;
bool gv_hybridSuperPusherState_Current;
bool gv_hybridSuperPusherState_Previous;
fixed gv_hybridReverseSpeedModifier;
unit gv_hybridSuperPusherFX;
int gv_objectiveKillAmonsChampion;
int gv_objectiveJinaraMustSurvive;

void InitGlobals () {
    int init_i;

    gv_attackWaveTime = TimerCreate();
    gv_c_AttackWavePreTime = 180.0;
    gv_attackWavePlayers = PlayerGroupEmpty();
    gv_objectiveKillSlaynElementals = c_invalidObjectiveId;
    gv_objectiveElementalsMax = 2;
    gv_objectiveKillSlaynElementals02 = c_invalidObjectiveId;
    gv_enemyPlayerGroup = PlayerGroupEmpty();
    gv_jinara = UnitFromId(240);
    gv_amonsChampion = UnitFromId(1198);
    gv_tugOfWarEscortTargetUnit = UnitFromId(949);
    gv_tugOfWarEscortTargetUnitGroup = UnitGroupEmpty();
    gv_tugOfWarBubbleUnit = UnitFromId(1236);
    gv_escortWavePlayers = PlayerGroupEmpty();
    gv_options_Boss = 1;
    gv_options_Enforcer1 = 1;
    gv_options_Enforcer2 = 1;
    for (init_i = 0; init_i <= 4; init_i += 1) {
        gv_hybridPushTriggerTemporal[init_i] = TimerCreate();
    }
    gv_tugOfWarPointName = "PathWaypoint";
    gv_tugOfWar_State = ge_TugOfWarState_Paused;
    gv_tugOfWar_Ping = c_invalidPingId;
    gv_announcerLineCooldown = TimerCreate();
    gv_c_AnnouncerLineCooldown_Amount = 90.0;
    gv_losingGroundTimer01 = TimerCreate();
    gv_losingGroundTimer02 = TimerCreate();
    gv_reminderToSupportTimer = TimerCreate();
    gv_hybridSuperPushers = UnitGroupEmpty();
    gv_hybridSuperPusherState_Current = true;
    gv_hybridSuperPusherState_Previous = true;
    gv_objectiveKillAmonsChampion = c_invalidObjectiveId;
    gv_objectiveJinaraMustSurvive = c_invalidObjectiveId;
}

//--------------------------------------------------------------------------------------------------
// Global Function Declarations
//--------------------------------------------------------------------------------------------------
void gf_DelayAttackandEscortWaves (fixed lp_delayTime);
fixed gf_AttackWaveMissionTime ();
void gf_AttackWaveatTime (fixed lp_time, trigger lp_aIAttackWave);
point gf_AttackWaveDestination (int lp_player);
void gf_SetSingleAttackWavePath (region lp_spawnLocation);
void gf_SetDoubleAttackWavePath (int lp_attackingPlayer, region lp_spawnLocation);
region gf_GetAttackWarpInRegion (region lp_desiredSpawn);
void gf_SendSingleTargetDoubleWave (int lp_waveTechLevel, int lp_waveResourceAmount, region lp_dropInLocation);
void gf_ObjectiveSlaynElementals ();
void gf_SlaynElementalKilled (unit lp_killedElemental);
void gf_RunSlaynElementalAI (unit lp_cHOSEN_UNIT, region lp_cHOSEN_REGION, int lp_wAYPOINT_MAX);
void gf_ObjectiveTugOfWar ();
void gf_EscortWaveatTime (fixed lp_time, trigger lp_aIEscortWave);
void gf_EscortWaveSetup (int lp_player, region lp_regionToWarpIn);
region gf_GetEscortWarpInRegion ();
void gf_EscortWaveSend (int lp_waveTechLevel, int lp_waveResourceAmount, region lp_dropInArea);
point gf_GetPathWaypoint (int lp_pathIndex);
unitgroup gf_CreateHybridPusherGroup (int lp_attackWave, point lp_spawnLocation);
void gf_AssignGuardLocations (unit lp_guardedUnit, unitgroup lp_guards, fixed lp_baseDistance, fixed lp_angularSpacing, fixed lp_guardsPerRow);
void gf_PingHybridSuperPushers (unitgroup lp_attackWave);
void gf_PushersInfluencePings (unitgroup lp_channelingUnits);
fixed gf_DistanceToFailurefromPoint (point lp_testLocation);
int gf_GetAlliedSupportingPlayers ();
bool gf_AllAlliesSupportsJinara ();
string gf_FormatIntegerIntoMultiDigitString (int lp_integer, int lp_digits);
unitgroup gf_GetSupportingUnitsNearJinara (int lp_player, int lp_count);
unitgroup gf_GetPushingUnitsNearAmonsChampion (int lp_count);
fixed gf_TugOfWarGetSpeed (int lp_state);
void gf_HybridSuperPusherFXLogic (unit lp_superPusher);
bool gf_HybridcanSuperPush (unit lp_hybrid);

//--------------------------------------------------------------------------------------------------
// Trigger Variables
//--------------------------------------------------------------------------------------------------
trigger gt_Initialization;
trigger gt_Beetles;
trigger gt_Watchers;
trigger gt_AI;
trigger gt_PickFirstAttackWaveTarget;
trigger gt_RunAIWaves;
trigger gt_AttackWaveTransmissionQ;
trigger gt_AttackWave01SingleWave;
trigger gt_AttackWave02SingleWave;
trigger gt_AttackWave03SingleWave;
trigger gt_AttackWave04SingleWave;
trigger gt_AttackWave05DoubleWave;
trigger gt_AttackWave06DoubleWave;
trigger gt_AttackWave07DoubleWave;
trigger gt_SlaynElementalsDifficulties;
trigger gt_ObjectiveKillSlaynElementalsCreate;
trigger gt_ObjectiveKillSlaynElementalsComplete;
trigger gt_ObjectiveKillSlaynElementalsFailed;
trigger gt_ObjectiveKillSlaynElementalsCreate02;
trigger gt_ObjectiveKillSlaynElementalsComplete02;
trigger gt_ObjectiveKillSlaynElementalsFailed02;
trigger gt_SlaynElemental01Create;
trigger gt_SlaynElemental02aCreate;
trigger gt_SlaynElemental02bCreate;
trigger gt_CritterDies;
trigger gt_SlaynElementalCocoonQ;
trigger gt_SlaynElementalEscapesQ;
trigger gt_SlaynElementalGoingtoEscapeQ;
trigger gt_SlaynElementalKilledFirstQ;
trigger gt_SlaynElementalKilledLastQ;
trigger gt_Difficulties;
trigger gt_StartGameQ;
trigger gt_EscortWaveTransmissionQ;
trigger gt_EscortWave01;
trigger gt_EscortWave02;
trigger gt_EscortWave03;
trigger gt_EscortWave04;
trigger gt_EscortWave05;
trigger gt_EscortWave06;
trigger gt_EscortWave07;
trigger gt_EscortWave08;
trigger gt_EscortWave09;
trigger gt_EscortWave10;
trigger gt_EscortWave11;
trigger gt_EscortWave12;
trigger gt_EscortWave13;
trigger gt_EscortWave14;
trigger gt_EscortWave15;
trigger gt_EscortWave16;
trigger gt_EscortWave17;
trigger gt_EscortWave18;
trigger gt_EscortWave19;
trigger gt_EscortWave20;
trigger gt_EscortWave21;
trigger gt_EscortWave22;
trigger gt_EscortWave23;
trigger gt_SetupHybridPusherHybridTypesRNG;
trigger gt_SetupHybridPusherHybridTypes;
trigger gt_RunHybridPushers;
trigger gt_HybridPushers01;
trigger gt_HybridPushers02;
trigger gt_HybridPushers03;
trigger gt_HybridPushers04;
trigger gt_SetEffortValues;
trigger gt_StatForwardPushTime;
trigger gt_StatPushBackDistance;
trigger gt_TugOfWarInitialize;
trigger gt_TugOfWarController;
trigger gt_TugOfWarStateUpdate;
trigger gt_TugOfWarMoveBossTarget;
trigger gt_TugOfWarJinaraAmonsChampionAttackLogic;
trigger gt_TugOfWarFirstTimePlayerAtTugOfWarQ;
trigger gt_TugOfWarFirstTimeEnemyAtTugOfWarQ;
trigger gt_TugOfWarLosingGround01WarningQ;
trigger gt_TugOfWarLosingGround02WarningQ;
trigger gt_TugOfWarDefeatImminentWarningQ;
trigger gt_TugOfWarVictoryImminentQ;
trigger gt_ForcesDestroyedWatcher;
trigger gt_ForcesDestroyedPlayerTransmissionQ;
trigger gt_ForcesDestroyedEnemyTransmissionQ;
trigger gt_RemindertoSupportTransmissionQ;
trigger gt_TugOfWarHybridSuperPusher;
trigger gt_TugOfWarHybridSappingStrengthQ;
trigger gt_RevealFinalBaseQ;
trigger gt_TugOfWarFailed;
trigger gt_TugOfWarDefeatFanfare;
trigger gt_TugOfWarCompleted;
trigger gt_ObjectiveKillAmonsChampionCreate;
trigger gt_ObjectiveKillAmonsChampionComplete;
trigger gt_ObjectiveKillAmonsChampionFailed;
trigger gt_ObjectiveJinaraMustSurviveCreate;
trigger gt_ObjectiveJinaraMustSurviveComplete;
trigger gt_ObjectiveJinaraMustSurviveFailed;

//--------------------------------------------------------------------------------------------------
// Global Presets
//--------------------------------------------------------------------------------------------------

//--------------------------------------------------------------------------------------------------
// Global Functions
//--------------------------------------------------------------------------------------------------
trigger auto_gf_DelayAttackandEscortWaves_Trigger = null;
fixed auto_gf_DelayAttackandEscortWaves_lp_delayTime;

void gf_DelayAttackandEscortWaves (fixed lp_delayTime) {
    auto_gf_DelayAttackandEscortWaves_lp_delayTime = lp_delayTime;

    if (auto_gf_DelayAttackandEscortWaves_Trigger == null) {
        auto_gf_DelayAttackandEscortWaves_Trigger = TriggerCreate("auto_gf_DelayAttackandEscortWaves_TriggerFunc");
    }

    TriggerExecute(auto_gf_DelayAttackandEscortWaves_Trigger, false, false);
}

bool auto_gf_DelayAttackandEscortWaves_TriggerFunc (bool testConds, bool runActions) {
    fixed lp_delayTime = auto_gf_DelayAttackandEscortWaves_lp_delayTime;

    // Automatic Variable Declarations
    // Implementation
    TimerPause(gv_attackWaveTime, true);
    Wait(lp_delayTime, c_timeAI);
    TimerPause(gv_attackWaveTime, false);
    return true;
}

fixed gf_AttackWaveMissionTime () {
    // Automatic Variable Declarations
    // Implementation
    return TimerGetElapsed(gv_attackWaveTime);
}

trigger auto_gf_AttackWaveatTime_Trigger = null;
fixed auto_gf_AttackWaveatTime_lp_time;
trigger auto_gf_AttackWaveatTime_lp_aIAttackWave;

void gf_AttackWaveatTime (fixed lp_time, trigger lp_aIAttackWave) {
    auto_gf_AttackWaveatTime_lp_time = lp_time;
    auto_gf_AttackWaveatTime_lp_aIAttackWave = lp_aIAttackWave;

    if (auto_gf_AttackWaveatTime_Trigger == null) {
        auto_gf_AttackWaveatTime_Trigger = TriggerCreate("auto_gf_AttackWaveatTime_TriggerFunc");
    }

    TriggerExecute(auto_gf_AttackWaveatTime_Trigger, false, false);
}

bool auto_gf_AttackWaveatTime_TriggerFunc (bool testConds, bool runActions) {
    fixed lp_time = auto_gf_AttackWaveatTime_lp_time;
    trigger lp_aIAttackWave = auto_gf_AttackWaveatTime_lp_aIAttackWave;

    // Automatic Variable Declarations
    // Implementation
    while (!(((lp_time - gv_c_AttackWavePreTime) <= gf_AttackWaveMissionTime()))) {
        Wait(0.3, c_timeAI);
    }
    if ((libCOMI_gf_GameIsOver() == false)) {
        TriggerExecute(lp_aIAttackWave, true, false);
    }

    return true;
}

point gf_AttackWaveDestination (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    return PointFromId(1762365393);
}

void gf_SetSingleAttackWavePath (region lp_spawnLocation) {
    // Automatic Variable Declarations
    region auto9E90962A_val;

    // Implementation
    auto9E90962A_val = lp_spawnLocation;
    if (auto9E90962A_val == RegionFromId(31)) {
        libCOMI_gf_AddAttackForceWaypoint(PointFromId(901), false);
        libCOMI_gf_AddAttackForceWaypoint(PointFromId(902), false);
        libCOMI_gf_AddAttackForceWaypoint(PointFromId(903), false);
        libCOMI_gf_AddAttackForceWaypoint(PointFromId(904), false);
    }
    else if (auto9E90962A_val == RegionFromId(30)) {
        libCOMI_gf_AddAttackForceWaypoint(PointFromId(905), false);
        libCOMI_gf_AddAttackForceWaypoint(PointFromId(906), false);
        libCOMI_gf_AddAttackForceWaypoint(PointFromId(907), false);
        libCOMI_gf_AddAttackForceWaypoint(PointFromId(912), false);
    }
    else {
    }
}

void gf_SetDoubleAttackWavePath (int lp_attackingPlayer, region lp_spawnLocation) {
    // Automatic Variable Declarations
    region autoBE0592D6_val;
    int autoBF05CF52_val;

    // Implementation
    autoBE0592D6_val = lp_spawnLocation;
    if (autoBE0592D6_val == RegionFromId(31)) {
        AIAttackWaveAddWaypoint(lp_attackingPlayer, PointFromId(901), false);
        AIAttackWaveAddWaypoint(lp_attackingPlayer, PointFromId(902), false);
        AIAttackWaveAddWaypoint(lp_attackingPlayer, PointFromId(903), false);
        AIAttackWaveAddWaypoint(lp_attackingPlayer, PointFromId(904), false);
    }
    else if (autoBE0592D6_val == RegionFromId(30)) {
        AIAttackWaveAddWaypoint(lp_attackingPlayer, PointFromId(905), false);
        AIAttackWaveAddWaypoint(lp_attackingPlayer, PointFromId(906), false);
        AIAttackWaveAddWaypoint(lp_attackingPlayer, PointFromId(907), false);
        AIAttackWaveAddWaypoint(lp_attackingPlayer, PointFromId(912), false);
    }
    else {
        autoBF05CF52_val = lp_attackingPlayer;
        if (autoBF05CF52_val == gv_pLAYER_03_EnemyP01) {
            AIAttackWaveAddWaypoint(lp_attackingPlayer, PointFromId(901), false);
            AIAttackWaveAddWaypoint(lp_attackingPlayer, PointFromId(902), false);
            AIAttackWaveAddWaypoint(lp_attackingPlayer, PointFromId(903), false);
            AIAttackWaveAddWaypoint(lp_attackingPlayer, PointFromId(904), false);
        }
        else if (autoBF05CF52_val == gv_pLAYER_04_EnemyP02) {
            AIAttackWaveAddWaypoint(lp_attackingPlayer, PointFromId(905), false);
            AIAttackWaveAddWaypoint(lp_attackingPlayer, PointFromId(906), false);
            AIAttackWaveAddWaypoint(lp_attackingPlayer, PointFromId(907), false);
            AIAttackWaveAddWaypoint(lp_attackingPlayer, PointFromId(912), false);
        }
        else {
        }
    }
}

region gf_GetAttackWarpInRegion (region lp_desiredSpawn) {
    // Variable Declarations
    unitfilter lv_allowSpawnFilter;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_allowSpawnFilter = UnitFilter(0, 0, 0, 0);

    // Implementation
    lv_allowSpawnFilter = UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)));
    if ((lp_desiredSpawn == RegionFromId(25))) {
        return RegionFromId(25);
    }
    else if (((UnitGroupCount(UnitGroup(null, gv_pLAYER_03_EnemyP01, lp_desiredSpawn, lv_allowSpawnFilter, 1), c_unitCountAlive) > 0) || (UnitGroupCount(UnitGroup(null, gv_pLAYER_04_EnemyP02, lp_desiredSpawn, lv_allowSpawnFilter, 1), c_unitCountAlive) > 0) || (UnitGroupCount(UnitGroup(null, gv_pLAYER_05_EnemyP01, lp_desiredSpawn, lv_allowSpawnFilter, 1), c_unitCountAlive) > 0) || (UnitGroupCount(UnitGroup(null, gv_pLAYER_06_EnemyP02, lp_desiredSpawn, lv_allowSpawnFilter, 1), c_unitCountAlive) > 0))) {
        return lp_desiredSpawn;
    }
    return RegionFromId(25);
}

void gf_SendSingleTargetDoubleWave (int lp_waveTechLevel, int lp_waveResourceAmount, region lp_dropInLocation) {
    // Variable Declarations
    int lv_attackWavePlayerIter;
    point lv_attackWaveSpawnLocation;
    unitgroup lv_attackWave;

    // Automatic Variable Declarations
    region autoD7D14329_val;
    playergroup auto483809C1_g;

    // Variable Initialization
    lv_attackWave = UnitGroupEmpty();

    // Implementation
    autoD7D14329_val = lp_dropInLocation;
    if (autoD7D14329_val == RegionFromId(31)) {
        lv_attackWaveSpawnLocation = PointFromId(61);
    }
    else if (autoD7D14329_val == RegionFromId(30)) {
        lv_attackWaveSpawnLocation = PointFromId(64);
    }
    else {
        lv_attackWaveSpawnLocation = PointFromId(65);
    }
    auto483809C1_g = gv_attackWavePlayers;
    lv_attackWavePlayerIter = -1;
    while (true) {
        lv_attackWavePlayerIter = PlayerGroupNextPlayer(auto483809C1_g, lv_attackWavePlayerIter);
        if (lv_attackWavePlayerIter < 0) { break; }
        AIAttackWaveSetTargetPoint(lv_attackWavePlayerIter, gf_AttackWaveDestination(lv_attackWavePlayerIter));
    }
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(PlayerGroupPlayer(gv_attackWavePlayers, 1), PlayerGroupPlayer(gv_attackWavePlayers, 2), lp_waveResourceAmount, lp_waveTechLevel, lv_attackWaveSpawnLocation, true);
    UnitGroupAddUnitGroup(lv_attackWave, libCOMI_gf_LastCreatedCoopAttackForce());
    gf_SetSingleAttackWavePath(lp_dropInLocation);
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(lv_attackWave, 0, true);
}

void gf_ObjectiveSlaynElementals () {
    // Automatic Variable Declarations
    // Implementation
    libCOMI_gf_RunTriggeratMissionTime((10.0 * 60.0), gt_SlaynElemental01Create);
    if ((RandomInt(0, 1) == 1)) {
        libCOMI_gf_RunTriggeratMissionTime((16.0 * 60.0), gt_SlaynElemental02aCreate);
    }
    else {
        libCOMI_gf_RunTriggeratMissionTime((16.0 * 60.0), gt_SlaynElemental02bCreate);
    }
}

void gf_SlaynElementalKilled (unit lp_killedElemental) {
    // Variable Declarations
    unit lv_slaynElementalCoreUnit;
    trigger lv_objectiveComplete;

    // Automatic Variable Declarations
    unit autoCF1C8249_val;
    trigger auto7AEC04E4_val;

    // Variable Initialization

    // Implementation
    autoCF1C8249_val = lp_killedElemental;
    if (autoCF1C8249_val == gv_slaynElemental01) {
        lv_objectiveComplete = gt_ObjectiveKillSlaynElementalsComplete;
    }
    else if (autoCF1C8249_val == gv_slaynElemental02a) {
        lv_objectiveComplete = gt_ObjectiveKillSlaynElementalsComplete02;
    }
    else if (autoCF1C8249_val == gv_slaynElemental02b) {
        lv_objectiveComplete = gt_ObjectiveKillSlaynElementalsComplete02;
    }
    else {
        return ;
    }
    gv_objectiveElementalsKilledCount += 1;
    Wait(2.0, c_timeReal);
    TriggerExecute(lv_objectiveComplete, true, false);
    auto7AEC04E4_val = lv_objectiveComplete;
    if (auto7AEC04E4_val == gt_ObjectiveKillSlaynElementalsComplete) {
        TriggerExecute(gt_SlaynElementalKilledFirstQ, true, false);
    }
    else if (auto7AEC04E4_val == gt_ObjectiveKillSlaynElementalsComplete02) {
        TriggerExecute(gt_SlaynElementalKilledLastQ, true, false);
    }
    else {
    }
}

trigger auto_gf_RunSlaynElementalAI_Trigger = null;
unit auto_gf_RunSlaynElementalAI_lp_cHOSEN_UNIT;
region auto_gf_RunSlaynElementalAI_lp_cHOSEN_REGION;
int auto_gf_RunSlaynElementalAI_lp_wAYPOINT_MAX;

void gf_RunSlaynElementalAI (unit lp_cHOSEN_UNIT, region lp_cHOSEN_REGION, int lp_wAYPOINT_MAX) {
    auto_gf_RunSlaynElementalAI_lp_cHOSEN_UNIT = lp_cHOSEN_UNIT;
    auto_gf_RunSlaynElementalAI_lp_cHOSEN_REGION = lp_cHOSEN_REGION;
    auto_gf_RunSlaynElementalAI_lp_wAYPOINT_MAX = lp_wAYPOINT_MAX;

    if (auto_gf_RunSlaynElementalAI_Trigger == null) {
        auto_gf_RunSlaynElementalAI_Trigger = TriggerCreate("auto_gf_RunSlaynElementalAI_TriggerFunc");
    }

    TriggerExecute(auto_gf_RunSlaynElementalAI_Trigger, false, false);
}

bool auto_gf_RunSlaynElementalAI_TriggerFunc (bool testConds, bool runActions) {
    unit lp_cHOSEN_UNIT = auto_gf_RunSlaynElementalAI_lp_cHOSEN_UNIT;
    region lp_cHOSEN_REGION = auto_gf_RunSlaynElementalAI_lp_cHOSEN_REGION;
    int lp_wAYPOINT_MAX = auto_gf_RunSlaynElementalAI_lp_wAYPOINT_MAX;

    // Variable Declarations
    string lv_pathWaypointString;
    int lv_pathWaypointIndex;
    int lv_faceSuckedUnits;
    unitgroup lv_faceSuckerCandidates;
    unitgroup lv_validTargets;
    timer lv_bonusObjectiveDuration;
    string lv_bonusObjective;
    timer lv_disableAbilityTimer;
    unit lv_disableTarget;
    order lv_elementalOrder;
    order lv_elementalOrder_Debug;
    int lv_elementalOrderIter;
    bool lv_orderAlreadyQueued;
    fixed lv_timeInCombat;
    fixed lv_c_AI_THINK_TIME;
    point lv_disableAoETargetLocation;
    int lv_disableAoEMinHits;
    int lv_disableAoEMinScore;

    // Automatic Variable Declarations
    unit auto01FBA150_val;
    playergroup auto33EA4C3D_g;
    int auto33EA4C3D_var;
    unitgroup auto1AEC9506_g;
    int auto1AEC9506_u;
    unit auto1AEC9506_var;
    unit auto1DE1CC80_val;

    // Variable Initialization
    lv_pathWaypointString = "";
    lv_pathWaypointIndex = 1;
    lv_faceSuckerCandidates = UnitGroupEmpty();
    lv_validTargets = UnitGroupEmpty();
    lv_bonusObjectiveDuration = TimerCreate();
    lv_disableAbilityTimer = TimerCreate();
    lv_c_AI_THINK_TIME = 0.33;

    // Implementation
    auto01FBA150_val = lp_cHOSEN_UNIT;
    if (auto01FBA150_val == gv_slaynElemental01) {
        lv_pathWaypointString = "Zoanthisk01_Path_0";
        lv_bonusObjective = "AC_SlaynHamsterBall_Bonus01";
    }
    else if (auto01FBA150_val == gv_slaynElemental02a) {
        lv_pathWaypointString = "Zoanthisk02a_Path_0";
        lv_bonusObjective = "AC_SlaynHamsterBall_Bonus02";
    }
    else if (auto01FBA150_val == gv_slaynElemental02b) {
        lv_pathWaypointString = "Zoanthisk02b_Path_0";
        lv_bonusObjective = "AC_SlaynHamsterBall_Bonus02";
    }
    else {
        return true;
    }
    if (((lp_cHOSEN_UNIT == gv_slaynElemental02a) || (lp_cHOSEN_UNIT == gv_slaynElemental02b))) {
        UnitSetPropertyFixed(lp_cHOSEN_UNIT, c_unitPropLifeMax, (UnitGetPropertyFixed(lp_cHOSEN_UNIT, c_unitPropLife, c_unitPropCurrent) * 1.75));
        UnitSetPropertyFixed(lp_cHOSEN_UNIT, c_unitPropLifePercent, 100.0);
        gv_elementalMaxDisableCooldown -= 5.0;
    }

    UnitAbilityEnable(lp_cHOSEN_UNIT, "attack", false);
    TimerStart(lv_bonusObjectiveDuration, (6.0 * 60.0), false, c_timeAI);
    TimerStart(lv_disableAbilityTimer, gv_elementalMaxDisableCooldown, false, c_timeAI);
    UnitBehaviorAddPlayer(lp_cHOSEN_UNIT, "PublicTimedLife", UnitGetOwner(lp_cHOSEN_UNIT), 1);
    UnitBehaviorSetDuration(lp_cHOSEN_UNIT, "PublicTimedLife", TimerGetRemaining(lv_bonusObjectiveDuration));
    UnitBehaviorSetDurationRemaining(lp_cHOSEN_UNIT, "PublicTimedLife", TimerGetRemaining(lv_bonusObjectiveDuration));
    lv_disableAoEMinHits = 8;
    Wait(3.0, c_timeAI);
    UnitIssueOrder(lp_cHOSEN_UNIT, OrderTargetingPoint(AbilityCommand("move", 0), PointFromName((lv_pathWaypointString + IntToString(1)))), c_orderQueueReplace);
    while ((libCOMI_gf_GameIsOver() == false) && (UnitIsAlive(lp_cHOSEN_UNIT) == true)) {
        if ((((gv_objectiveElementalWriteOutComplete01 == true) && (lv_bonusObjective == "AC_SlaynHamsterBall_Bonus01")) || ((gv_objectiveElementalWriteOutComplete02 == true) && (lv_bonusObjective == "AC_SlaynHamsterBall_Bonus02")))) {
            if ((TimerGetRemaining(lv_bonusObjectiveDuration) > 0.0)) {
                TextExpressionSetToken("Param/Expression/7E0CAB13", "DepartTimer", libCOMI_gf_FormatTimeCampaign(FixedToInt(TimerGetRemaining(lv_bonusObjectiveDuration))));
                libCOMI_gf_SetMissionObjectiveCustomText(lv_bonusObjective, TextExpressionAssemble("Param/Expression/7E0CAB13"));
            }

        }

        if ((TimerGetRemaining(lv_bonusObjectiveDuration) > 0.0)) {
            if ((DistanceBetweenPoints(UnitGetPosition(lp_cHOSEN_UNIT), PointFromName((lv_pathWaypointString + IntToString(lv_pathWaypointIndex)))) <= 1)) {
                if (lv_pathWaypointIndex >= lp_wAYPOINT_MAX) {
                    lv_pathWaypointIndex = 1;
                }
                else {
                    lv_pathWaypointIndex = lv_pathWaypointIndex + 1;
                }
                UnitIssueOrder(lp_cHOSEN_UNIT, OrderTargetingPoint(AbilityCommand("move", 0), PointFromName((lv_pathWaypointString + IntToString(lv_pathWaypointIndex)))), c_orderQueueAddToEnd);
            }

            if ((UnitOrderCount(lp_cHOSEN_UNIT) == 0)) {
                UnitIssueOrder(lp_cHOSEN_UNIT, OrderTargetingPoint(AbilityCommand("move", 0), PointFromName((lv_pathWaypointString + IntToString(lv_pathWaypointIndex)))), c_orderQueueAddToEnd);
            }

            if ((TimerGetRemaining(lv_bonusObjectiveDuration) <= (TimerGetDuration(lv_bonusObjectiveDuration) * 0.33))) {
                TriggerExecute(gt_SlaynElementalGoingtoEscapeQ, true, false);
            }

        }

        if ((TimerGetRemaining(lv_disableAbilityTimer) <= 0.0)) {
            lv_faceSuckedUnits = 0;
            lv_faceSuckerCandidates = UnitGroupEmpty();
            lv_validTargets = UnitGroupEmpty();
            auto33EA4C3D_g = libCOMI_gf_GetAlliedCommandersPlayers();
            auto33EA4C3D_var = -1;
            while (true) {
                auto33EA4C3D_var = PlayerGroupNextPlayer(auto33EA4C3D_g, auto33EA4C3D_var);
                if (auto33EA4C3D_var < 0) { break; }
                UnitGroupAddUnitGroup(lv_validTargets, UnitGroup(null, auto33EA4C3D_var, RegionCircle(UnitGetPosition(lp_cHOSEN_UNIT), 10.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
                UnitGroupAddUnitGroup(lv_validTargets, UnitGroup(null, auto33EA4C3D_var, RegionCircle(UnitGetPosition(lp_cHOSEN_UNIT), 15.0), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            }
            UnitGroupRemoveUnitGroup(lv_validTargets, UnitGroupFilter(null, c_playerAny, lv_validTargets, UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            auto1AEC9506_g = lv_validTargets;
            auto1AEC9506_u = UnitGroupCount(auto1AEC9506_g, c_unitCountAll);
            for (;; auto1AEC9506_u -= 1) {
                auto1AEC9506_var = UnitGroupUnitFromEnd(auto1AEC9506_g, auto1AEC9506_u);
                if (auto1AEC9506_var == null) { break; }
                if ((UnitHasBehavior2(auto1AEC9506_var, "SlaynElementalGrabAOEStun") == true)) {
                    lv_faceSuckedUnits += 1;
                    TriggerExecute(gt_SlaynElementalCocoonQ, true, false);
                }
                else {
                    UnitGroupAdd(lv_faceSuckerCandidates, auto1AEC9506_var);
                }
            }
            if ((UnitGroupCount(lv_faceSuckerCandidates, c_unitCountAlive) >= lv_disableAoEMinHits)) {
                lv_disableAoETargetLocation = null;
                lv_disableAoETargetLocation = AIBestTargetPoint(lv_faceSuckerCandidates, lv_disableAoEMinHits, 10, 3.5, 3.0, UnitGetPosition(lp_cHOSEN_UNIT), 10.0, c_unitAttributeNone);
                if ((lv_disableAoETargetLocation != null)) {
                    UnitIssueOrder(lp_cHOSEN_UNIT, OrderTargetingPoint(AbilityCommand("SlaynElementalGrabAOE", 0), lv_disableAoETargetLocation), c_orderQueueAddToFront);
                    TimerStart(lv_disableAbilityTimer, gv_elementalMaxDisableCooldown, false, c_timeAI);
                }

            }
            else {
                if ((lv_timeInCombat > 3.0)) {
                    lv_disableTarget = AILastAttacker(lp_cHOSEN_UNIT);
                    if ((UnitIsAlive(lv_disableTarget) == true)) {
                        if ((libNtve_gf_UnitInRegion(lv_disableTarget, RegionCircle(UnitGetPosition(lp_cHOSEN_UNIT), 20.0)) == true)) {
                            TimerStart(lv_disableAbilityTimer, MaxF((gv_elementalMaxDisableCooldown - 8.0), 3.0), false, c_timeAI);
                            UnitIssueOrder(lp_cHOSEN_UNIT, OrderTargetingPoint(AbilityCommand("SlaynElementalGrabAOE", 0), UnitGetPosition(lv_disableTarget)), c_orderQueueAddToFront);
                        }
                        else {
                            lv_disableTarget = UnitGroupRandomUnit(UnitGroupAlliance(UnitGetOwner(lp_cHOSEN_UNIT), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_cHOSEN_UNIT), 10.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
                            if ((UnitIsAlive(lv_disableTarget) == true)) {
                                TimerStart(lv_disableAbilityTimer, MaxF((gv_elementalMaxDisableCooldown - 8.0), 3.0), false, c_timeAI);
                                UnitIssueOrder(lp_cHOSEN_UNIT, OrderTargetingPoint(AbilityCommand("SlaynElementalGrabAOE", 0), UnitGetPosition(lv_disableTarget)), c_orderQueueAddToFront);
                            }

                        }
                    }

                }

            }
        }

        if (((AIGetTime() - AILastAttack(lp_cHOSEN_UNIT)) <= 7.0)) {
            lv_timeInCombat += lv_c_AI_THINK_TIME;
            TimerPause(lv_bonusObjectiveDuration, true);
        }
        else {
            lv_timeInCombat = 0.0;
            TimerPause(lv_bonusObjectiveDuration, false);
        }
        UnitBehaviorSetDurationRemaining(lp_cHOSEN_UNIT, "PublicTimedLife", TimerGetRemaining(lv_bonusObjectiveDuration));
        Wait(lv_c_AI_THINK_TIME, c_timeAI);
    }
    PingDestroy(libHots_gf_PingStoredForUnit(lp_cHOSEN_UNIT, 1));
    libCOMI_gf_SetMissionObjectiveCustomText(lv_bonusObjective, StringToText(""));
    if ((TimerGetRemaining(lv_bonusObjectiveDuration) > 0.0)) {
        gf_SlaynElementalKilled(lp_cHOSEN_UNIT);
    }
    else {
        TriggerExecute(gt_SlaynElementalEscapesQ, true, false);
        auto1DE1CC80_val = lp_cHOSEN_UNIT;
        if (auto1DE1CC80_val == gv_slaynElemental01) {
            TriggerExecute(gt_ObjectiveKillSlaynElementalsFailed, true, false);
        }
        else if (auto1DE1CC80_val == gv_slaynElemental02a) {
            TriggerExecute(gt_ObjectiveKillSlaynElementalsFailed02, true, false);
        }
        else if (auto1DE1CC80_val == gv_slaynElemental02b) {
            TriggerExecute(gt_ObjectiveKillSlaynElementalsFailed02, true, false);
        }
        else {
        }
    }
    return true;
}

void gf_ObjectiveTugOfWar () {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    playergroup auto1BF660BC_g;
    playergroup auto677A4723_g;
    int auto677A4723_var;

    // Variable Initialization

    // Implementation
    libNtve_gf_AddPlayerGroupToPlayerGroup(libCOMI_gf_GetEnemyPlayers(), gv_enemyPlayerGroup);
    auto1BF660BC_g = gv_enemyPlayerGroup;
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(auto1BF660BC_g, lv_player);
        if (lv_player < 0) { break; }
        libNtve_gf_SetAlliance(lv_player, gv_pLAYER_09_AMONS_CHAMPION, libNtve_ge_AllianceSetting_AllyWithSharedVision);
    }
    auto677A4723_g = libCOMI_gf_GetAlliedCommandersPlayers();
    auto677A4723_var = -1;
    while (true) {
        auto677A4723_var = PlayerGroupNextPlayer(auto677A4723_g, auto677A4723_var);
        if (auto677A4723_var < 0) { break; }
        PlayerScoreValueSetFromFixed(auto677A4723_var, "SlaynPush", 0.0);
    }
    UnitSetPropertyFixed(gv_jinara, c_unitPropMovementSpeed, 0.5);
    libNtve_gf_ChangeUnitDamage(gv_jinara, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
    UnitSetState(gv_jinara, c_unitStateTargetable, false);
    UnitSetState(gv_jinara, c_unitStateStatusBar, false);
    UnitSetState(gv_jinara, c_unitStateTurnSuppressed, false);
    libCOMI_gf_SetUnitInfoTextCampaign(gv_jinara, null, StringExternal("Param/Value/97C5B9D5"), null);
    UnitSetPropertyFixed(gv_amonsChampion, c_unitPropMovementSpeed, 0.75);
    libNtve_gf_ChangeUnitDamage(gv_amonsChampion, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
    UnitSetState(gv_amonsChampion, c_unitStateTargetable, false);
    UnitSetState(gv_amonsChampion, c_unitStateStatusBar, false);
    UnitSetState(gv_amonsChampion, c_unitStateTurnSuppressed, false);
    libCOMI_gf_SetUnitInfoTextCampaign(gv_amonsChampion, null, StringExternal("Param/Value/5C296AF0"), null);
    UnitSetFacing(gv_tugOfWarEscortTargetUnit, 315.0, 0.0);
    UnitSetState(gv_tugOfWarEscortTargetUnit, c_unitStateTurnSuppressed, false);
    TriggerExecute(gt_Difficulties, true, false);
    TriggerExecute(gt_StartGameQ, true, false);
}

trigger auto_gf_EscortWaveatTime_Trigger = null;
fixed auto_gf_EscortWaveatTime_lp_time;
trigger auto_gf_EscortWaveatTime_lp_aIEscortWave;

void gf_EscortWaveatTime (fixed lp_time, trigger lp_aIEscortWave) {
    auto_gf_EscortWaveatTime_lp_time = lp_time;
    auto_gf_EscortWaveatTime_lp_aIEscortWave = lp_aIEscortWave;

    if (auto_gf_EscortWaveatTime_Trigger == null) {
        auto_gf_EscortWaveatTime_Trigger = TriggerCreate("auto_gf_EscortWaveatTime_TriggerFunc");
    }

    TriggerExecute(auto_gf_EscortWaveatTime_Trigger, false, false);
}

bool auto_gf_EscortWaveatTime_TriggerFunc (bool testConds, bool runActions) {
    fixed lp_time = auto_gf_EscortWaveatTime_lp_time;
    trigger lp_aIEscortWave = auto_gf_EscortWaveatTime_lp_aIEscortWave;

    // Automatic Variable Declarations
    // Implementation
    while (!(((lp_time - gv_c_EscortWavePreTime) <= gf_AttackWaveMissionTime()))) {
        Wait(0.25, c_timeAI);
    }
    if ((libCOMI_gf_GameIsOver() == false)) {
        TriggerExecute(lp_aIEscortWave, true, false);
    }

    return true;
}

void gf_EscortWaveSetup (int lp_player, region lp_regionToWarpIn) {
    // Automatic Variable Declarations
    // Implementation
    AIAttackWaveSetTargetEscortNL(lp_player, libNtve_gf_ConvertUnitToUnitGroup(gv_tugOfWarEscortTargetUnit), 0);
    AIAttackWaveSetGatherPoint(lp_player, RegionGetCenter(lp_regionToWarpIn));
    if ((lp_regionToWarpIn == RegionFromId(30))) {
        AIAttackWaveAddWaypoint(lp_player, PointFromId(900), false);
    }

    if (((lp_regionToWarpIn == RegionFromId(31)) || (lp_regionToWarpIn == RegionFromId(30)))) {
        AIAttackWaveAddWaypoint(lp_player, PointFromId(2545), false);
    }

}

region gf_GetEscortWarpInRegion () {
    // Automatic Variable Declarations
    // Implementation
    if ((gv_tugOfWar_Waypoint_FarthestForward <= 9)) {
        return RegionFromId(31);
    }
    else if ((gv_tugOfWar_Waypoint_FarthestForward <= 18)) {
        return RegionFromId(30);
    }
    return RegionFromId(25);
}

void gf_EscortWaveSend (int lp_waveTechLevel, int lp_waveResourceAmount, region lp_dropInArea) {
    // Variable Declarations
    int lv_escortPlayerIter;
    point lv_spawnLocation;

    // Automatic Variable Declarations
    region auto245895C1_val;
    playergroup auto0D00FB44_g;

    // Variable Initialization

    // Implementation
    if ((libCOMI_gf_GameIsOver() == true)) {
        return ;
    }

    auto245895C1_val = lp_dropInArea;
    if (auto245895C1_val == RegionFromId(31)) {
        lv_spawnLocation = PointFromId(2538);
    }
    else if (auto245895C1_val == RegionFromId(30)) {
        lv_spawnLocation = PointFromId(2543);
    }
    else {
        lv_spawnLocation = PointFromId(2544);
    }
    auto0D00FB44_g = gv_escortWavePlayers;
    lv_escortPlayerIter = -1;
    while (true) {
        lv_escortPlayerIter = PlayerGroupNextPlayer(auto0D00FB44_g, lv_escortPlayerIter);
        if (lv_escortPlayerIter < 0) { break; }
        libCOMI_gf_SetCoopAIAttackGroupSpawnPoint(lv_escortPlayerIter, lv_spawnLocation);
        gf_EscortWaveSetup(lv_escortPlayerIter, lp_dropInArea);
    }
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(PlayerGroupPlayer(gv_escortWavePlayers, 1), PlayerGroupPlayer(gv_escortWavePlayers, 2), lp_waveResourceAmount, lp_waveTechLevel, lv_spawnLocation, true);
    libCOMI_gf_SendAttackWaveusingCoopAttackForceWaveAttackTargetType(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true, libCOMI_ge_CM_CoopAI_WaveAttackTargetType_Objective);
}

point gf_GetPathWaypoint (int lp_pathIndex) {
    // Automatic Variable Declarations
    // Implementation
    return PointFromName((gv_tugOfWarPointName + gf_FormatIntegerIntoMultiDigitString(lp_pathIndex, 1)));
}

unitgroup gf_CreateHybridPusherGroup (int lp_attackWave, point lp_spawnLocation) {
    // Variable Declarations
    unitgroup lv_returnGroup;

    // Automatic Variable Declarations
    int auto91FA9855_val;
    int autoC9FFA05F_n;
    int autoC9FFA05F_i;
    int auto6132B8DA_n;
    int auto6132B8DA_i;
    int auto50C060AF_n;
    int auto50C060AF_i;
    int autoC371450E_n;
    int autoC371450E_i;

    // Variable Initialization
    lv_returnGroup = UnitGroupEmpty();

    // Implementation
    auto91FA9855_val = lp_attackWave;
    if (auto91FA9855_val == ge_HybridAttack_Attack01) {
        UnitCreate(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 1, 1, 1, 1, 0, 0), gv_hybridPusher_Boss, 0, gv_hybridPusherPlayer, lp_spawnLocation, AngleBetweenPoints(lp_spawnLocation, UnitGetPosition(gv_amonsChampion)));
        UnitGroupAddUnitGroup(lv_returnGroup, UnitLastCreatedGroup());
        UnitCreate(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 0, 0, 2, 2, 0, 0), gv_hybridPusher_Enforcer01, 0, gv_hybridPusherPlayer, lp_spawnLocation, AngleBetweenPoints(lp_spawnLocation, UnitGetPosition(gv_amonsChampion)));
        UnitGroupAddUnitGroup(lv_returnGroup, UnitLastCreatedGroup());
    }
    else if (auto91FA9855_val == ge_HybridAttack_Attack02) {
        UnitCreate(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 1, 1, 2, 2, 0, 0), gv_hybridPusher_Enforcer01, 0, gv_hybridPusherPlayer, lp_spawnLocation, AngleBetweenPoints(lp_spawnLocation, UnitGetPosition(gv_amonsChampion)));
        UnitGroupAddUnitGroup(lv_returnGroup, UnitLastCreatedGroup());
        UnitCreate(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 0, 0, 1, 1, 0, 0), gv_hybridPusher_Enforcer02, 0, gv_hybridPusherPlayer, lp_spawnLocation, AngleBetweenPoints(lp_spawnLocation, UnitGetPosition(gv_amonsChampion)));
        UnitGroupAddUnitGroup(lv_returnGroup, UnitLastCreatedGroup());
        UnitCreate(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 1, 1, 1, 1, 0, 0), gv_hybridPusher_Boss, 0, gv_hybridPusherPlayer, lp_spawnLocation, AngleBetweenPoints(lp_spawnLocation, UnitGetPosition(gv_amonsChampion)));
        UnitGroupAddUnitGroup(lv_returnGroup, UnitLastCreatedGroup());
    }
    else if (auto91FA9855_val == ge_HybridAttack_Attack03) {
        autoC9FFA05F_n = libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 2, 2, 4, 5, 0, 0);
        for (autoC9FFA05F_i = 1; autoC9FFA05F_i <= autoC9FFA05F_n; autoC9FFA05F_i += 1) {
            if ((RandomInt(0, 2) != 0)) {
                UnitCreate(1, gv_hybridPusher_Enforcer01, 0, gv_hybridPusherPlayer, lp_spawnLocation, AngleBetweenPoints(lp_spawnLocation, UnitGetPosition(gv_amonsChampion)));
                UnitGroupAddUnitGroup(lv_returnGroup, UnitLastCreatedGroup());
            }
            else {
                UnitCreate(1, gv_hybridPusher_Enforcer02, 0, gv_hybridPusherPlayer, lp_spawnLocation, AngleBetweenPoints(lp_spawnLocation, UnitGetPosition(gv_amonsChampion)));
                UnitGroupAddUnitGroup(lv_returnGroup, UnitLastCreatedGroup());
            }
        }
        auto6132B8DA_n = libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 1, 1, 2, 2, 0, 0);
        for (auto6132B8DA_i = 1; auto6132B8DA_i <= auto6132B8DA_n; auto6132B8DA_i += 1) {
            UnitCreate(1, gv_hybridPusher_Boss, 0, gv_hybridPusherPlayer, lp_spawnLocation, AngleBetweenPoints(lp_spawnLocation, UnitGetPosition(gv_amonsChampion)));
            UnitGroupAddUnitGroup(lv_returnGroup, UnitLastCreatedGroup());
        }
    }
    else if (auto91FA9855_val == ge_HybridAttack_Attack04) {
        UnitCreate(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 1, 1, 2, 2, 0, 0), gv_hybridPusher_Enforcer01, 0, gv_hybridPusherPlayer, lp_spawnLocation, AngleBetweenPoints(lp_spawnLocation, UnitGetPosition(gv_amonsChampion)));
        UnitGroupAddUnitGroup(lv_returnGroup, UnitLastCreatedGroup());
        UnitCreate(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 0, 0, 1, 1, 0, 0), gv_hybridPusher_Enforcer02, 0, gv_hybridPusherPlayer, lp_spawnLocation, AngleBetweenPoints(lp_spawnLocation, UnitGetPosition(gv_amonsChampion)));
        UnitGroupAddUnitGroup(lv_returnGroup, UnitLastCreatedGroup());
        auto50C060AF_n = libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 2, 2, 3, 4, 0, 0);
        for (auto50C060AF_i = 1; auto50C060AF_i <= auto50C060AF_n; auto50C060AF_i += 1) {
            if ((RandomInt(0, 2) != 0)) {
                UnitCreate(1, gv_hybridPusher_Enforcer01, 0, gv_hybridPusherPlayer, lp_spawnLocation, AngleBetweenPoints(lp_spawnLocation, UnitGetPosition(gv_amonsChampion)));
                UnitGroupAddUnitGroup(lv_returnGroup, UnitLastCreatedGroup());
            }
            else {
                UnitCreate(1, gv_hybridPusher_Enforcer02, 0, gv_hybridPusherPlayer, lp_spawnLocation, AngleBetweenPoints(lp_spawnLocation, UnitGetPosition(gv_amonsChampion)));
                UnitGroupAddUnitGroup(lv_returnGroup, UnitLastCreatedGroup());
            }
        }
        autoC371450E_n = libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 1, 1, 2, 3, 0, 0);
        for (autoC371450E_i = 1; autoC371450E_i <= autoC371450E_n; autoC371450E_i += 1) {
            UnitCreate(1, gv_hybridPusher_Boss, 0, gv_hybridPusherPlayer, lp_spawnLocation, AngleBetweenPoints(lp_spawnLocation, UnitGetPosition(gv_amonsChampion)));
            UnitGroupAddUnitGroup(lv_returnGroup, UnitLastCreatedGroup());
        }
    }
    else {
    }
    UnitGroupAddUnitGroup(gv_hybridSuperPushers, lv_returnGroup);
    return lv_returnGroup;
}

void gf_AssignGuardLocations (unit lp_guardedUnit, unitgroup lp_guards, fixed lp_baseDistance, fixed lp_angularSpacing, fixed lp_guardsPerRow) {
    // Variable Declarations
    int lv_bodyGuardIter;
    fixed lv_bodyguardPos_Distance;
    fixed lv_bodyguardPos_AngleOffset;

    // Automatic Variable Declarations
    int auto0A0E1EA3_ae;
    const int auto0A0E1EA3_ai = 1;

    // Variable Initialization

    // Implementation
    auto0A0E1EA3_ae = UnitGroupCount(lp_guards, c_unitCountAlive);
    lv_bodyGuardIter = 1;
    for ( ; ( (auto0A0E1EA3_ai >= 0 && lv_bodyGuardIter <= auto0A0E1EA3_ae) || (auto0A0E1EA3_ai < 0 && lv_bodyGuardIter >= auto0A0E1EA3_ae) ) ; lv_bodyGuardIter += auto0A0E1EA3_ai ) {
        lv_bodyguardPos_Distance = (lp_baseDistance + Ceiling((lv_bodyGuardIter / lp_guardsPerRow)));
        lv_bodyguardPos_AngleOffset = (Ceiling(ModF(lv_bodyGuardIter, lp_guardsPerRow)) * lp_angularSpacing * ((ModF(lv_bodyGuardIter, 2.0) * 2.0) - 1.0));
        AIAttackWaveAddEscortUnit(UnitGetOwner(UnitGroupUnit(lp_guards, lv_bodyGuardIter)), UnitGroupUnit(lp_guards, lv_bodyGuardIter), lp_guardedUnit, lv_bodyguardPos_Distance, lv_bodyguardPos_AngleOffset);
    }
}

trigger auto_gf_PingHybridSuperPushers_Trigger = null;
unitgroup auto_gf_PingHybridSuperPushers_lp_attackWave;

void gf_PingHybridSuperPushers (unitgroup lp_attackWave) {
    auto_gf_PingHybridSuperPushers_lp_attackWave = lp_attackWave;

    if (auto_gf_PingHybridSuperPushers_Trigger == null) {
        auto_gf_PingHybridSuperPushers_Trigger = TriggerCreate("auto_gf_PingHybridSuperPushers_TriggerFunc");
    }

    TriggerExecute(auto_gf_PingHybridSuperPushers_Trigger, false, false);
}

bool auto_gf_PingHybridSuperPushers_TriggerFunc (bool testConds, bool runActions) {
    unitgroup lp_attackWave = auto_gf_PingHybridSuperPushers_lp_attackWave;

    // Automatic Variable Declarations
    // Implementation
    libCOMI_gf_CreatePingFacingAngleCoop(PlayerGroupAll(), UnitGroupCenterOfGroup(lp_attackWave), 270.0, "PingBoss", ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0);
    PingSetScale(PingLastCreated(), 1.25);
    while ((libCOMI_gf_GameIsOver() != true) && (UnitGroupCount(lp_attackWave, c_unitCountAlive) > 0)) {
        PingSetPosition(PingLastCreated(), UnitGroupCenterOfGroup(lp_attackWave));
        Wait(0.25, c_timeAI);
    }
    PingDestroy(PingLastCreated());
    return true;
}

trigger auto_gf_PushersInfluencePings_Trigger = null;
unitgroup auto_gf_PushersInfluencePings_lp_channelingUnits;

void gf_PushersInfluencePings (unitgroup lp_channelingUnits) {
    auto_gf_PushersInfluencePings_lp_channelingUnits = lp_channelingUnits;

    if (auto_gf_PushersInfluencePings_Trigger == null) {
        auto_gf_PushersInfluencePings_Trigger = TriggerCreate("auto_gf_PushersInfluencePings_TriggerFunc");
    }

    TriggerExecute(auto_gf_PushersInfluencePings_Trigger, false, false);
}

bool auto_gf_PushersInfluencePings_TriggerFunc (bool testConds, bool runActions) {
    unitgroup lp_channelingUnits = auto_gf_PushersInfluencePings_lp_channelingUnits;

    int init_i;

    // Variable Declarations
    const int lv_c_ChannelPings_MaxCount = 30;
    int[lv_c_ChannelPings_MaxCount + 1] lv_channelPings;
    fixed[lv_c_ChannelPings_MaxCount + 1] lv_channelPingsLife;
    int lv_channelPingIter;
    fixed lv_pingLength;
    fixed lv_radiusOfDuelPing;
    fixed lv_pingLineDistance;
    int lv_numberOfPings;
    fixed lv_pingScale;
    int lv_offPing;
    fixed lv_pingScaleMin;
    fixed lv_pingScaleMax;
    fixed lv_pingRefreshRate;

    // Automatic Variable Declarations
    int auto226C8F2B_ae;
    const int auto226C8F2B_ai = 1;
    const int auto7CC33C12_ae = lv_c_ChannelPings_MaxCount;
    const int auto7CC33C12_ai = 1;
    const int auto3FBC66E5_ae = lv_c_ChannelPings_MaxCount;
    const int auto3FBC66E5_ai = 1;

    // Variable Initialization
    for (init_i = 0; init_i <= lv_c_ChannelPings_MaxCount; init_i += 1) {
        lv_channelPings[init_i] = c_invalidPingId;
    }

    // Implementation
    lv_pingRefreshRate = 0.33;
    lv_pingScaleMin = 0.2;
    lv_pingScaleMax = 0.5;
    lv_pingLength = 8.0;
    lv_radiusOfDuelPing = 13.0;
    while ((libCOMI_gf_GameIsOver() == false) && (libNtve_gf_UnitGroupIsDead(lp_channelingUnits) == false) && (UnitIsAlive(gv_jinara) == true)) {
        lv_pingLineDistance = DistanceBetweenPoints(UnitGroupCenterOfGroup(lp_channelingUnits), UnitGetPosition(gv_jinara));
        lv_pingLineDistance -= lv_radiusOfDuelPing;
        if ((lv_pingLineDistance > 0.0)) {
            lv_numberOfPings = FixedToInt((lv_pingLineDistance / lv_pingLength));
            lv_numberOfPings = MinI(lv_numberOfPings, lv_c_ChannelPings_MaxCount);
        }

        if (((lv_pingLineDistance < 0.0) || (lv_numberOfPings < 2))) {
            Wait(0.1, c_timeGame);
            continue;
        }

        auto226C8F2B_ae = lv_numberOfPings;
        lv_channelPingIter = 2;
        for ( ; ( (auto226C8F2B_ai >= 0 && lv_channelPingIter <= auto226C8F2B_ae) || (auto226C8F2B_ai < 0 && lv_channelPingIter >= auto226C8F2B_ae) ) ; lv_channelPingIter += auto226C8F2B_ai ) {
            if ((libCOMI_gf_GameIsOver() == false) && (libNtve_gf_UnitGroupIsDead(lp_channelingUnits) == false) && (UnitIsAlive(gv_jinara) == true)) {
                if ((lv_channelPings[lv_channelPingIter] == c_invalidPingId)) {
                    libCOMI_gf_CreatePingFacingAngleCoop(PlayerGroupAll(), libNtve_gf_PointOffsetTowardsPoint(UnitGroupCenterOfGroup(lp_channelingUnits), (lv_channelPingIter * lv_pingLength), UnitGetPosition(gv_jinara)), AngleBetweenPoints(UnitGroupCenterOfGroup(lp_channelingUnits), UnitGetPosition(gv_jinara)), "PingTriangle", ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0);
                    PingSetScale(PingLastCreated(), 0.0);
                    lv_channelPings[lv_channelPingIter] = PingLastCreated();
                }
                else {
                    lv_pingScale = (lv_pingScaleMin + (lv_pingScaleMax - lv_pingScaleMin) * (MaxF(lv_numberOfPings, 1.0) - lv_channelPingIter) / MaxF(lv_numberOfPings, 1.0));
                    PingSetScale(lv_channelPings[lv_channelPingIter], lv_pingScale);
                    PingSetPosition(lv_channelPings[lv_channelPingIter], libNtve_gf_PointOffsetTowardsPoint(UnitGroupCenterOfGroup(lp_channelingUnits), (lv_channelPingIter * lv_pingLength), UnitGetPosition(gv_jinara)));
                    PingSetRotation(lv_channelPings[lv_channelPingIter], AngleBetweenPoints(UnitGroupCenterOfGroup(lp_channelingUnits), UnitGetPosition(gv_jinara)));
                }
                Wait(lv_pingRefreshRate, c_timeGame);
            }

        }
        lv_channelPingIter = (lv_numberOfPings + 1);
        for ( ; ( (auto7CC33C12_ai >= 0 && lv_channelPingIter <= auto7CC33C12_ae) || (auto7CC33C12_ai < 0 && lv_channelPingIter >= auto7CC33C12_ae) ) ; lv_channelPingIter += auto7CC33C12_ai ) {
            PingDestroy(lv_channelPings[lv_channelPingIter]);
            lv_channelPings[lv_channelPingIter] = c_invalidPingId;
        }
    }
    lv_channelPingIter = 0;
    for ( ; ( (auto3FBC66E5_ai >= 0 && lv_channelPingIter <= auto3FBC66E5_ae) || (auto3FBC66E5_ai < 0 && lv_channelPingIter >= auto3FBC66E5_ae) ) ; lv_channelPingIter += auto3FBC66E5_ai ) {
        PingDestroy(lv_channelPings[lv_channelPingIter]);
    }
    return true;
}

fixed gf_DistanceToFailurefromPoint (point lp_testLocation) {
    // Variable Declarations
    int lv_pathIter;
    int lv_closestWaypoint;
    fixed lv_returnDistance;

    // Automatic Variable Declarations
    const int autoFC406671_ae = gv_tugOfWar_WaypointMax;
    const int autoFC406671_ai = 1;
    int autoCE93BADB_ae;
    const int autoCE93BADB_ai = 1;

    // Variable Initialization

    // Implementation
    lv_pathIter = 0;
    for ( ; ( (autoFC406671_ai >= 0 && lv_pathIter <= autoFC406671_ae) || (autoFC406671_ai < 0 && lv_pathIter >= autoFC406671_ae) ) ; lv_pathIter += autoFC406671_ai ) {
        if ((DistanceBetweenPoints(gf_GetPathWaypoint(0), gf_GetPathWaypoint(lv_pathIter)) >= DistanceBetweenPoints(gf_GetPathWaypoint(0), lp_testLocation))) {
            lv_closestWaypoint = (lv_pathIter - 1);
            break;
        }

    }
    autoCE93BADB_ae = lv_closestWaypoint;
    lv_pathIter = 1;
    for ( ; ( (autoCE93BADB_ai >= 0 && lv_pathIter <= autoCE93BADB_ae) || (autoCE93BADB_ai < 0 && lv_pathIter >= autoCE93BADB_ae) ) ; lv_pathIter += autoCE93BADB_ai ) {
        lv_returnDistance += DistanceBetweenPoints(gf_GetPathWaypoint((lv_pathIter - 1)), gf_GetPathWaypoint(lv_pathIter));
    }
    lv_returnDistance += DistanceBetweenPoints(gf_GetPathWaypoint(lv_closestWaypoint), lp_testLocation);
    return lv_returnDistance;
}

int gf_GetAlliedSupportingPlayers () {
    // Variable Declarations
    int lv_player;
    int lv_presenceCount;

    // Automatic Variable Declarations
    playergroup auto9554F132_g;

    // Variable Initialization

    // Implementation
    auto9554F132_g = libCOMI_gf_GetAlliedCommandersPlayers();
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(auto9554F132_g, lv_player);
        if (lv_player < 0) { break; }
        if ((!(libNtve_gf_UnitGroupIsDead(gf_GetSupportingUnitsNearJinara(lv_player, 1))) == true)) {
            lv_presenceCount += 1;
        }

    }
    return lv_presenceCount;
}

bool gf_AllAlliesSupportsJinara () {
    // Variable Declarations
    int lv_player;
    int lv_presenceCount;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((gf_GetAlliedSupportingPlayers() == PlayerGroupCount(libCOMI_gf_GetAlliedCommandersPlayers()))) {
        return true;
    }
    else {
        return false;
    }
}

string gf_FormatIntegerIntoMultiDigitString (int lp_integer, int lp_digits) {
    // Variable Declarations
    int lv_i;
    string lv_intString;

    // Automatic Variable Declarations
    int autoE7A604C4_ae;
    const int autoE7A604C4_ai = 1;

    // Variable Initialization
    lv_intString = IntToString(lp_integer);

    // Implementation
    autoE7A604C4_ae = lp_digits;
    lv_i = StringLength(lv_intString);
    for ( ; ( (autoE7A604C4_ai >= 0 && lv_i <= autoE7A604C4_ae) || (autoE7A604C4_ai < 0 && lv_i >= autoE7A604C4_ae) ) ; lv_i += autoE7A604C4_ai ) {
        lv_intString = ("0" + lv_intString);
    }
    return lv_intString;
}

unitgroup gf_GetSupportingUnitsNearJinara (int lp_player, int lp_count) {
    // Variable Declarations
    unit lv_pushingIter;
    unitgroup lv_returnGroup;
    region lv_areaToCheckForBehavior;

    // Automatic Variable Declarations
    unitgroup auto5E3BA678_g;
    int auto5E3BA678_u;

    // Variable Initialization
    lv_returnGroup = UnitGroupEmpty();

    // Implementation
    lv_areaToCheckForBehavior = RegionCircle(UnitGetPosition(gv_tugOfWarBubbleUnit), (gv_tugOfWar_Presence_Check_Humans + 2.0));
    auto5E3BA678_g = UnitGroup(null, lp_player, lv_areaToCheckForBehavior, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto5E3BA678_u = UnitGroupCount(auto5E3BA678_g, c_unitCountAll);
    for (;; auto5E3BA678_u -= 1) {
        lv_pushingIter = UnitGroupUnitFromEnd(auto5E3BA678_g, auto5E3BA678_u);
        if (lv_pushingIter == null) { break; }
        if ((UnitHasBehavior2(lv_pushingIter, "PitAlarakShieldRegen") == true)) {
            UnitGroupAdd(lv_returnGroup, lv_pushingIter);
            if ((lp_count != 0) && (UnitGroupCount(lv_returnGroup, c_unitCountAlive) >= lp_count)) {
                break;
            }

        }

    }
    return lv_returnGroup;
}

unitgroup gf_GetPushingUnitsNearAmonsChampion (int lp_count) {
    // Variable Declarations
    unit lv_pushingIter;
    int lv_enemyPlayerIter;
    unitgroup lv_returnGroup;

    // Automatic Variable Declarations
    playergroup auto4A3675F7_g;
    unitgroup auto06659D9D_g;
    int auto06659D9D_u;

    // Variable Initialization
    lv_returnGroup = UnitGroupEmpty();

    // Implementation
    auto4A3675F7_g = gv_enemyPlayerGroup;
    lv_enemyPlayerIter = -1;
    while (true) {
        lv_enemyPlayerIter = PlayerGroupNextPlayer(auto4A3675F7_g, lv_enemyPlayerIter);
        if (lv_enemyPlayerIter < 0) { break; }
        auto06659D9D_g = UnitGroup(null, lv_enemyPlayerIter, RegionCircle(UnitGetPosition(gv_tugOfWarBubbleUnit), (gv_tugOfWar_Presence_Check_EnemyAI * 1.25)), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto06659D9D_u = UnitGroupCount(auto06659D9D_g, c_unitCountAll);
        for (;; auto06659D9D_u -= 1) {
            lv_pushingIter = UnitGroupUnitFromEnd(auto06659D9D_g, auto06659D9D_u);
            if (lv_pushingIter == null) { break; }
            if ((UnitHasBehavior2(lv_pushingIter, "PitMalashShieldRegen") == true) && (UnitFilterMatch(lv_pushingIter, lv_enemyPlayerIter, UnitFilter((1 << c_targetFilterStructure) | (1 << c_targetFilterCloaked), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == false)) {
                UnitGroupAdd(lv_returnGroup, lv_pushingIter);
                if ((UnitGroupCount(lv_returnGroup, c_unitCountAlive) >= lp_count)) {
                    break;
                }

            }

        }
    }
    return lv_returnGroup;
}

fixed gf_TugOfWarGetSpeed (int lp_state) {
    // Variable Declarations
    fixed lv_speedReturn;
    fixed lv_speedBaseForward;
    fixed lv_speedBaseReverse;

    // Automatic Variable Declarations
    int auto6A182D28_val;

    // Variable Initialization

    // Implementation
    if ((GameGetMissionTime() >= (20.0 * 60.0))) {
        lv_speedBaseForward = 1.0;
        lv_speedBaseReverse = 0.5;
    }
    else if ((GameGetMissionTime() >= (16.0 * 60.0))) {
        lv_speedBaseForward = 0.9;
        lv_speedBaseReverse = 0.45;
    }
    else if ((GameGetMissionTime() >= (12.0 * 60.0))) {
        lv_speedBaseForward = 0.75;
        lv_speedBaseReverse = 0.375;
    }
    else if ((GameGetMissionTime() >= (8.0 * 60.0))) {
        lv_speedBaseForward = 0.6;
        lv_speedBaseReverse = 0.3;
    }
    else if ((GameGetMissionTime() >= (4.0 * 60.0))) {
        lv_speedBaseForward = 0.5;
        lv_speedBaseReverse = 0.25;
    }
    else if (true) {
        lv_speedBaseForward = 0.35;
        lv_speedBaseReverse = 0.175;
    }
    auto6A182D28_val = lp_state;
    if (auto6A182D28_val == ge_TugOfWarState_Forward) {
        if ((gv_finalHybridWaveDefeated == false)) {
            lv_speedReturn = lv_speedBaseForward;
        }
        else {
            lv_speedReturn = 1.5;
        }
    }
    else if (auto6A182D28_val == ge_TugOfWarState_Reverse) {
        lv_speedReturn = lv_speedBaseReverse;
    }
    else if (auto6A182D28_val == ge_TugOfWarState_ReverseSuper) {
        lv_speedReturn = gv_hybridReverseSpeed;
    }
    else {
        lv_speedReturn = lv_speedBaseReverse;
    }
    return lv_speedReturn;
}

trigger auto_gf_HybridSuperPusherFXLogic_Trigger = null;
unit auto_gf_HybridSuperPusherFXLogic_lp_superPusher;

void gf_HybridSuperPusherFXLogic (unit lp_superPusher) {
    auto_gf_HybridSuperPusherFXLogic_lp_superPusher = lp_superPusher;

    if (auto_gf_HybridSuperPusherFXLogic_Trigger == null) {
        auto_gf_HybridSuperPusherFXLogic_Trigger = TriggerCreate("auto_gf_HybridSuperPusherFXLogic_TriggerFunc");
    }

    TriggerExecute(auto_gf_HybridSuperPusherFXLogic_Trigger, false, false);
}

bool auto_gf_HybridSuperPusherFXLogic_TriggerFunc (bool testConds, bool runActions) {
    unit lp_superPusher = auto_gf_HybridSuperPusherFXLogic_lp_superPusher;

    // Automatic Variable Declarations
    // Implementation
    UnitSetScale(lp_superPusher, 125.0, 125.0, 100.0);
    ActorSend(libNtve_gf_MainActorofUnit(lp_superPusher), libNtve_gf_SetTintColor(Color(100.00, 0.00, 0.00), 3.0, 0.0));
    while ((UnitIsAlive(lp_superPusher) == true)) {
        UnitSetPosition(lp_superPusher, UnitGetPosition(gv_tugOfWarBubbleUnit), true);
        Wait(0.1, c_timeReal);
    }
    return true;
}

bool gf_HybridcanSuperPush (unit lp_hybrid) {
    // Automatic Variable Declarations
    // Implementation
    if ((UnitAbilityCheck(lp_hybrid, "move", true) == true)) {
        return true;
    }
    else {
        return false;
    }
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialization
//--------------------------------------------------------------------------------------------------
bool gt_Initialization_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_ObjectiveTugOfWar();
    gf_ObjectiveSlaynElementals();
    TriggerExecute(gt_Beetles, true, false);
    TriggerExecute(gt_Watchers, true, false);
    TriggerExecute(gt_AI, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Initialization_Init () {
    gt_Initialization = TriggerCreate("gt_Initialization_Func");
    TriggerAddEventGeneric(gt_Initialization, libCOMI_gv_COOP_MISSION_STARTED_EVENT);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Beetles
//--------------------------------------------------------------------------------------------------
bool gt_Beetles_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoEB7E5006_g;
    int autoEB7E5006_u;
    unit autoEB7E5006_var;

    // Actions
    if (!runActions) {
        return true;
    }

    autoEB7E5006_g = UnitGroup("SlaynSwarmHostSpawnFlyer", c_playerAny, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoEB7E5006_u = UnitGroupCount(autoEB7E5006_g, c_unitCountAll);
    for (;; autoEB7E5006_u -= 1) {
        autoEB7E5006_var = UnitGroupUnitFromEnd(autoEB7E5006_g, autoEB7E5006_u);
        if (autoEB7E5006_var == null) { break; }
        UnitBehaviorAdd(autoEB7E5006_var, "CritterWanderLeash", autoEB7E5006_var, 1);
        UnitBehaviorAdd(autoEB7E5006_var, "Harmless", autoEB7E5006_var, 1);
        UnitBehaviorAdd(autoEB7E5006_var, "NoBiomassDrop", autoEB7E5006_var, 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Beetles_Init () {
    gt_Beetles = TriggerCreate("gt_Beetles_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Watchers
//--------------------------------------------------------------------------------------------------
bool gt_Watchers_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoFC5FDD59_g;
    int autoFC5FDD59_u;
    unit autoFC5FDD59_var;

    // Actions
    if (!runActions) {
        return true;
    }

    autoFC5FDD59_g = UnitGroupFromId(7);
    autoFC5FDD59_u = UnitGroupCount(autoFC5FDD59_g, c_unitCountAll);
    for (;; autoFC5FDD59_u -= 1) {
        autoFC5FDD59_var = UnitGroupUnitFromEnd(autoFC5FDD59_g, autoFC5FDD59_u);
        if (autoFC5FDD59_var == null) { break; }
        UnitBehaviorAdd(autoFC5FDD59_var, "CritterWanderLeash", autoFC5FDD59_var, 1);
        UnitBehaviorAdd(autoFC5FDD59_var, "Harmless", autoFC5FDD59_var, 1);
        UnitBehaviorAdd(autoFC5FDD59_var, "NoBiomassDrop", autoFC5FDD59_var, 1);
        libNtve_gf_MakeUnitInvulnerable(autoFC5FDD59_var, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Watchers_Init () {
    gt_Watchers = TriggerCreate("gt_Watchers_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI
//--------------------------------------------------------------------------------------------------
bool gt_AI_Func (bool testConds, bool runActions) {
    // Variable Declarations
    playergroup lv_tacticalAIUsers;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_tacticalAIUsers = PlayerGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    if ((RandomInt(0, 1) == 1)) {
        gv_attackWave_Player01First = false;
    }
    else {
        gv_attackWave_Player01First = true;
    }
    TimerStart(gv_attackWaveTime, 86400.0, false, c_timeAI);
    gv_pLAYER_05_EnemyP01 = PlayerGroupPlayer(libCOMI_gf_GetEnemyAIPlayers(), 1);
    gv_pLAYER_06_EnemyP02 = PlayerGroupPlayer(libCOMI_gf_GetEnemyAIPlayers(), 2);
    PlayerGroupAdd(gv_attackWavePlayers, gv_pLAYER_03_EnemyP01);
    PlayerGroupAdd(gv_attackWavePlayers, gv_pLAYER_04_EnemyP02);
    PlayerGroupAdd(gv_escortWavePlayers, gv_pLAYER_05_EnemyP01);
    PlayerGroupAdd(gv_escortWavePlayers, gv_pLAYER_06_EnemyP02);
    TriggerExecute(gt_SetupHybridPusherHybridTypesRNG, true, false);
    TriggerExecute(gt_RunAIWaves, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AI_Init () {
    gt_AI = TriggerCreate("gt_AI_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Pick First Attack Wave Target
//--------------------------------------------------------------------------------------------------
bool gt_PickFirstAttackWaveTarget_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((RandomInt(0, 1) == 1)) {
        gv_attackWave_Player01First = false;
    }
    else {
        gv_attackWave_Player01First = true;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PickFirstAttackWaveTarget_Init () {
    gt_PickFirstAttackWaveTarget = TriggerCreate("gt_PickFirstAttackWaveTarget_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Run AI Waves
//--------------------------------------------------------------------------------------------------
bool gt_RunAIWaves_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_EscortWaveatTime((3.5 * 60.0), gt_EscortWave01);
    gf_EscortWaveatTime((5.0 * 60.0), gt_EscortWave02);
    gf_AttackWaveatTime((6.5 * 60.0), gt_AttackWave01SingleWave);
    gf_EscortWaveatTime((7.0 * 60.0), gt_EscortWave03);
    gf_EscortWaveatTime((9.0 * 60.0), gt_EscortWave04);
    gf_AttackWaveatTime((10.0 * 60.0), gt_AttackWave02SingleWave);
    gf_EscortWaveatTime((11.0 * 60.0), gt_EscortWave05);
    gf_EscortWaveatTime((12.0 * 60.0), gt_EscortWave06);
    gf_EscortWaveatTime((13.0 * 60.0), gt_EscortWave07);
    gf_AttackWaveatTime((14.0 * 60.0), gt_AttackWave03SingleWave);
    gf_EscortWaveatTime((15.0 * 60.0), gt_EscortWave08);
    gf_EscortWaveatTime((16.0 * 60.0), gt_EscortWave09);
    gf_EscortWaveatTime((16.5 * 60.0), gt_EscortWave10);
    gf_AttackWaveatTime((17.0 * 60.0), gt_AttackWave04SingleWave);
    gf_EscortWaveatTime((17.5 * 60.0), gt_EscortWave11);
    gf_EscortWaveatTime((18.5 * 60.0), gt_EscortWave12);
    gf_EscortWaveatTime((19.0 * 60.0), gt_EscortWave13);
    gf_EscortWaveatTime((20.0 * 60.0), gt_EscortWave14);
    gf_EscortWaveatTime((20.5 * 60.0), gt_EscortWave15);
    gf_AttackWaveatTime((21.0 * 60.0), gt_AttackWave05DoubleWave);
    gf_EscortWaveatTime((21.5 * 60.0), gt_EscortWave16);
    gf_EscortWaveatTime((22.0 * 60.0), gt_EscortWave17);
    gf_EscortWaveatTime((23.0 * 60.0), gt_EscortWave18);
    gf_EscortWaveatTime((24.0 * 60.0), gt_EscortWave19);
    gf_AttackWaveatTime((24.5 * 60.0), gt_AttackWave06DoubleWave);
    gf_EscortWaveatTime((25.0 * 60.0), gt_EscortWave20);
    gf_EscortWaveatTime((25.5 * 60.0), gt_EscortWave21);
    gf_EscortWaveatTime((26.0 * 60.0), gt_EscortWave22);
    gf_EscortWaveatTime((27.0 * 60.0), gt_EscortWave23);
    gf_AttackWaveatTime((28.5 * 60.0), gt_AttackWave07DoubleWave);
    while (!(((28.5 * 60.0) < gf_AttackWaveMissionTime()))) {
        Wait(5.0, c_timeGame);
    }
    while ((libCOMI_gf_GameIsOver() == false)) {
        TriggerExecute(gt_EscortWave20, true, false);
        Wait(60.0, c_timeAI);
        TriggerExecute(gt_EscortWave21, true, false);
        Wait(60.0, c_timeAI);
        TriggerExecute(gt_HybridPushers04, true, false);
        Wait(60.0, c_timeAI);
        TriggerExecute(gt_EscortWave22, true, false);
        Wait(60.0, c_timeAI);
        TriggerExecute(gt_EscortWave23, true, false);
        Wait(60.0, c_timeAI);
        TriggerExecute(gt_AttackWave07DoubleWave, true, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RunAIWaves_Init () {
    gt_RunAIWaves = TriggerCreate("gt_RunAIWaves_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave Transmission Q
//--------------------------------------------------------------------------------------------------
bool gt_AttackWaveTransmissionQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("AttackWave", true, PlayerGroupPlayer(libCOMI_gf_GetAlliedCommandersPlayers(), RandomInt(1, PlayerGroupCount(libCOMI_gf_GetAlliedCommandersPlayers()))));
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    Wait(45.0, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWaveTransmissionQ_Init () {
    gt_AttackWaveTransmissionQ = TriggerCreate("gt_AttackWaveTransmissionQ_Func");
    TriggerAddEventPlayerAIWave(gt_AttackWaveTransmissionQ, gv_pLAYER_03_EnemyP01);
    TriggerAddEventPlayerAIWave(gt_AttackWaveTransmissionQ, gv_pLAYER_04_EnemyP02);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave 01 - Single Wave
//--------------------------------------------------------------------------------------------------
bool gt_AttackWave01SingleWave_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_waveTechLevel;
    int lv_waveResourceAmount;
    region lv_warpInRegion;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_waveTechLevel = libCOMI_ge_CoopAITechLevelBuckets__1Early;
    lv_waveResourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_waveTechLevel = libCOMI_ge_CoopAITechLevelBuckets__2EarlyMid;
    lv_waveResourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__2Smaller;
    if ((gv_attackWave_Player01First == true)) {
        lv_warpInRegion = gf_GetAttackWarpInRegion(RegionFromId(31));
    }
    else {
        lv_warpInRegion = gf_GetAttackWarpInRegion(RegionFromId(30));
    }
    gf_SendSingleTargetDoubleWave(lv_waveTechLevel, lv_waveResourceAmount, lv_warpInRegion);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWave01SingleWave_Init () {
    gt_AttackWave01SingleWave = TriggerCreate("gt_AttackWave01SingleWave_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave 02 - Single Wave
//--------------------------------------------------------------------------------------------------
bool gt_AttackWave02SingleWave_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_waveTechLevel;
    int lv_waveResourceAmount;
    region lv_warpInRegion;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_waveTechLevel = libCOMI_ge_CoopAITechLevelBuckets__1Early;
    lv_waveResourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_waveTechLevel = libCOMI_ge_CoopAITechLevelBuckets__5Late;
    lv_waveResourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__5Large;
    if ((gv_attackWave_Player01First == false)) {
        lv_warpInRegion = gf_GetAttackWarpInRegion(RegionFromId(31));
    }
    else {
        lv_warpInRegion = gf_GetAttackWarpInRegion(RegionFromId(30));
    }
    gf_SendSingleTargetDoubleWave(lv_waveTechLevel, lv_waveResourceAmount, lv_warpInRegion);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWave02SingleWave_Init () {
    gt_AttackWave02SingleWave = TriggerCreate("gt_AttackWave02SingleWave_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave 03 - Single Wave
//--------------------------------------------------------------------------------------------------
bool gt_AttackWave03SingleWave_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_waveTechLevel;
    int lv_waveResourceAmount;
    region lv_warpInRegion;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_waveTechLevel = libCOMI_ge_CoopAITechLevelBuckets__1Early;
    lv_waveResourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_waveTechLevel = libCOMI_ge_CoopAITechLevelBuckets__4LateMid;
    lv_waveResourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__4Medium;
    if ((gv_attackWave_Player01First == true)) {
        lv_warpInRegion = gf_GetAttackWarpInRegion(RegionFromId(31));
    }
    else {
        lv_warpInRegion = gf_GetAttackWarpInRegion(RegionFromId(30));
    }
    gf_SendSingleTargetDoubleWave(lv_waveTechLevel, lv_waveResourceAmount, lv_warpInRegion);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWave03SingleWave_Init () {
    gt_AttackWave03SingleWave = TriggerCreate("gt_AttackWave03SingleWave_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave 04 - Single Wave
//--------------------------------------------------------------------------------------------------
bool gt_AttackWave04SingleWave_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_waveTechLevel;
    int lv_waveResourceAmount;
    region lv_warpInRegion;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_waveTechLevel = libCOMI_ge_CoopAITechLevelBuckets__1Early;
    lv_waveResourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_waveTechLevel = libCOMI_ge_CoopAITechLevelBuckets__5Late;
    lv_waveResourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__5Large;
    if ((gv_attackWave_Player01First == false)) {
        lv_warpInRegion = gf_GetAttackWarpInRegion(RegionFromId(31));
    }
    else {
        lv_warpInRegion = gf_GetAttackWarpInRegion(RegionFromId(30));
    }
    gf_SendSingleTargetDoubleWave(lv_waveTechLevel, lv_waveResourceAmount, lv_warpInRegion);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWave04SingleWave_Init () {
    gt_AttackWave04SingleWave = TriggerCreate("gt_AttackWave04SingleWave_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave 05 - Double Wave
//--------------------------------------------------------------------------------------------------
bool gt_AttackWave05DoubleWave_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_waveTechLevel;
    int lv_waveResourceAmount;
    region lv_warpInRegion;
    bool lv_west;
    int lv_playerGroupIter;
    int lv_playerIter;
    unitgroup lv_attackGroup;

    // Automatic Variable Declarations
    const int auto7831139D_ae = 2;
    const int auto7831139D_ai = 1;

    // Variable Initialization
    lv_waveTechLevel = libCOMI_ge_CoopAITechLevelBuckets__1Early;
    lv_waveResourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
    lv_attackGroup = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_waveTechLevel = libCOMI_ge_CoopAITechLevelBuckets__4LateMid;
    lv_waveResourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__4Medium;
    lv_playerGroupIter = 1;
    for ( ; ( (auto7831139D_ai >= 0 && lv_playerGroupIter <= auto7831139D_ae) || (auto7831139D_ai < 0 && lv_playerGroupIter >= auto7831139D_ae) ) ; lv_playerGroupIter += auto7831139D_ai ) {
        if ((lv_west == true)) {
            lv_warpInRegion = gf_GetAttackWarpInRegion(RegionFromId(31));
        }
        else {
            lv_warpInRegion = gf_GetAttackWarpInRegion(RegionFromId(30));
        }
        lv_west = !(lv_west);
        lv_playerIter = PlayerGroupPlayer(gv_attackWavePlayers, lv_playerGroupIter);
        AIAttackWaveSetTargetPoint(lv_playerIter, gf_AttackWaveDestination(lv_playerIter));
        libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(lv_playerIter, c_playerAny, lv_waveResourceAmount, lv_waveTechLevel, RegionGetCenter(lv_warpInRegion), true);
        gf_SetDoubleAttackWavePath(lv_playerIter, lv_warpInRegion);
        UnitGroupAddUnitGroup(lv_attackGroup, libCOMI_gf_LastCreatedCoopAttackForce());
    }
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(lv_attackGroup, 0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWave05DoubleWave_Init () {
    gt_AttackWave05DoubleWave = TriggerCreate("gt_AttackWave05DoubleWave_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave 06 - Double Wave
//--------------------------------------------------------------------------------------------------
bool gt_AttackWave06DoubleWave_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_waveTechLevel;
    int lv_waveResourceAmount;
    region lv_warpInRegion;
    bool lv_west;
    int lv_playerGroupIter;
    int lv_playerIter;
    unitgroup lv_attackGroup;

    // Automatic Variable Declarations
    const int auto5801965B_ae = 2;
    const int auto5801965B_ai = 1;

    // Variable Initialization
    lv_waveTechLevel = libCOMI_ge_CoopAITechLevelBuckets__1Early;
    lv_waveResourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
    lv_attackGroup = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_waveTechLevel = libCOMI_ge_CoopAITechLevelBuckets_TechLevel07;
    lv_waveResourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__5Large;
    lv_playerGroupIter = 1;
    for ( ; ( (auto5801965B_ai >= 0 && lv_playerGroupIter <= auto5801965B_ae) || (auto5801965B_ai < 0 && lv_playerGroupIter >= auto5801965B_ae) ) ; lv_playerGroupIter += auto5801965B_ai ) {
        if ((lv_west == true)) {
            lv_warpInRegion = gf_GetAttackWarpInRegion(RegionFromId(31));
        }
        else {
            lv_warpInRegion = gf_GetAttackWarpInRegion(RegionFromId(30));
        }
        lv_west = !(lv_west);
        lv_playerIter = PlayerGroupPlayer(gv_attackWavePlayers, lv_playerGroupIter);
        AIAttackWaveSetTargetPoint(lv_playerIter, gf_AttackWaveDestination(lv_playerIter));
        libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(lv_playerIter, c_playerAny, lv_waveResourceAmount, lv_waveTechLevel, RegionGetCenter(lv_warpInRegion), true);
        gf_SetDoubleAttackWavePath(lv_playerIter, lv_warpInRegion);
        UnitGroupAddUnitGroup(lv_attackGroup, libCOMI_gf_LastCreatedCoopAttackForce());
    }
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(lv_attackGroup, 0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWave06DoubleWave_Init () {
    gt_AttackWave06DoubleWave = TriggerCreate("gt_AttackWave06DoubleWave_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave 07 - Double Wave
//--------------------------------------------------------------------------------------------------
bool gt_AttackWave07DoubleWave_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_waveTechLevel;
    int lv_waveResourceAmount;
    region lv_warpInRegion;
    bool lv_west;
    int lv_playerGroupIter;
    int lv_playerIter;
    unitgroup lv_attackGroup;

    // Automatic Variable Declarations
    const int auto5BA57EE2_ae = 2;
    const int auto5BA57EE2_ai = 1;

    // Variable Initialization
    lv_waveTechLevel = libCOMI_ge_CoopAITechLevelBuckets__1Early;
    lv_waveResourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
    lv_attackGroup = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_waveTechLevel = libCOMI_ge_CoopAITechLevelBuckets_TechLevel07;
    lv_waveResourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__6Larger;
    lv_playerGroupIter = 1;
    for ( ; ( (auto5BA57EE2_ai >= 0 && lv_playerGroupIter <= auto5BA57EE2_ae) || (auto5BA57EE2_ai < 0 && lv_playerGroupIter >= auto5BA57EE2_ae) ) ; lv_playerGroupIter += auto5BA57EE2_ai ) {
        if ((lv_west == true)) {
            lv_warpInRegion = gf_GetAttackWarpInRegion(RegionFromId(31));
        }
        else {
            lv_warpInRegion = gf_GetAttackWarpInRegion(RegionFromId(30));
        }
        lv_west = !(lv_west);
        lv_playerIter = PlayerGroupPlayer(gv_attackWavePlayers, lv_playerGroupIter);
        AIAttackWaveSetTargetPoint(lv_playerIter, gf_AttackWaveDestination(lv_playerIter));
        libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(lv_playerIter, c_playerAny, lv_waveResourceAmount, lv_waveTechLevel, RegionGetCenter(lv_warpInRegion), true);
        gf_SetDoubleAttackWavePath(lv_playerIter, lv_warpInRegion);
        UnitGroupAddUnitGroup(lv_attackGroup, libCOMI_gf_LastCreatedCoopAttackForce());
    }
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(lv_attackGroup, 0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWave07DoubleWave_Init () {
    gt_AttackWave07DoubleWave = TriggerCreate("gt_AttackWave07DoubleWave_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Slayn Elementals Difficulties
//--------------------------------------------------------------------------------------------------
bool gt_SlaynElementalsDifficulties_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_soloriteCocoonLife;
    fixed lv_elementalLife;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    gv_elementalMaxDisableCooldown = libCOMI_gf_DifficultyValueFixed2(libCOMI_gf_GetMissionDifficulty(), 60.0, 60.0, 30.0, 15.0, 1.0, 1.0);
    lv_elementalLife = libCOMI_gf_DifficultyValueFixed2(libCOMI_gf_GetMissionDifficulty(), 1500.0, 1500.0, 2500.0, 3500.0, 5000.0, 6000.0);
    CatalogFieldValueModify(c_gameCatalogUnit, "SlaynElemental", "LifeMax", gv_pLAYER_10_ELEMENTAL, FixedToString(lv_elementalLife, c_fixedPrecisionAny), c_upgradeOperationSet);
    CatalogFieldValueModify(c_gameCatalogUnit, "SlaynElemental", "LifeStart", gv_pLAYER_10_ELEMENTAL, FixedToString(lv_elementalLife, c_fixedPrecisionAny), c_upgradeOperationSet);
    lv_soloriteCocoonLife = libCOMI_gf_DifficultyValueFixed2(libCOMI_gf_GetMissionDifficulty(), 25.0, 25.0, 50.0, 50.0, 200.0, 300.0);
    CatalogFieldValueModify(c_gameCatalogUnit, "SlaynElementalGrabGroundUnit", "LifeMax", gv_pLAYER_10_ELEMENTAL, FixedToString(lv_soloriteCocoonLife, c_fixedPrecisionAny), c_upgradeOperationSet);
    CatalogFieldValueModify(c_gameCatalogUnit, "SlaynElementalGrabGroundUnit", "LifeStart", gv_pLAYER_10_ELEMENTAL, FixedToString(lv_soloriteCocoonLife, c_fixedPrecisionAny), c_upgradeOperationSet);
    CatalogFieldValueModify(c_gameCatalogUnit, "SlaynElementalGrabAirUnit", "LifeMax", gv_pLAYER_10_ELEMENTAL, FixedToString(lv_soloriteCocoonLife, c_fixedPrecisionAny), c_upgradeOperationSet);
    CatalogFieldValueModify(c_gameCatalogUnit, "SlaynElementalGrabAirUnit", "LifeStart", gv_pLAYER_10_ELEMENTAL, FixedToString(lv_soloriteCocoonLife, c_fixedPrecisionAny), c_upgradeOperationSet);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SlaynElementalsDifficulties_Init () {
    gt_SlaynElementalsDifficulties = TriggerCreate("gt_SlaynElementalsDifficulties_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Kill Slayn Elementals Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveKillSlaynElementalsCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_CreateObjectiveCampaign("AC_SlaynHamsterBall_Bonus01");
    gv_objectiveKillSlaynElementals = ObjectiveLastCreated();
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    Wait(2.0, c_timeReal);
    gv_objectiveElementalWriteOutComplete01 = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveKillSlaynElementalsCreate_Init () {
    gt_ObjectiveKillSlaynElementalsCreate = TriggerCreate("gt_ObjectiveKillSlaynElementalsCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Kill Slayn Elementals Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveKillSlaynElementalsComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveKillSlaynElementalsCreate, true, false);
    libCOMI_gf_ZS_SetMissionObjectiveState("AC_SlaynHamsterBall_Bonus01", libCOMI_ge_MissionObjectiveState_Completed);
    libCOMI_gf_SetMissionObjectiveProgress("AC_SlaynHamsterBall_Bonus01", 1);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveKillSlaynElementalsComplete_Init () {
    gt_ObjectiveKillSlaynElementalsComplete = TriggerCreate("gt_ObjectiveKillSlaynElementalsComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Kill Slayn Elementals Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveKillSlaynElementalsFailed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveKillSlaynElementalsCreate, true, false);
    libCOMI_gf_ZS_SetMissionObjectiveState("AC_SlaynHamsterBall_Bonus01", libCOMI_ge_MissionObjectiveState_Failed);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveKillSlaynElementalsFailed_Init () {
    gt_ObjectiveKillSlaynElementalsFailed = TriggerCreate("gt_ObjectiveKillSlaynElementalsFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Kill Slayn Elementals Create 02
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveKillSlaynElementalsCreate02_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_CreateObjectiveCampaign("AC_SlaynHamsterBall_Bonus02");
    gv_objectiveKillSlaynElementals02 = ObjectiveLastCreated();
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    Wait(2.0, c_timeReal);
    gv_objectiveElementalWriteOutComplete02 = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveKillSlaynElementalsCreate02_Init () {
    gt_ObjectiveKillSlaynElementalsCreate02 = TriggerCreate("gt_ObjectiveKillSlaynElementalsCreate02_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Kill Slayn Elementals Complete 02
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveKillSlaynElementalsComplete02_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveKillSlaynElementalsCreate02, true, false);
    libCOMI_gf_ZS_SetMissionObjectiveState("AC_SlaynHamsterBall_Bonus02", libCOMI_ge_MissionObjectiveState_Completed);
    libCOMI_gf_SetMissionObjectiveProgress("AC_SlaynHamsterBall_Bonus02", 1);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveKillSlaynElementalsComplete02_Init () {
    gt_ObjectiveKillSlaynElementalsComplete02 = TriggerCreate("gt_ObjectiveKillSlaynElementalsComplete02_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Kill Slayn Elementals Failed 02
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveKillSlaynElementalsFailed02_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveKillSlaynElementalsCreate02, true, false);
    libCOMI_gf_ZS_SetMissionObjectiveState("AC_SlaynHamsterBall_Bonus02", libCOMI_ge_MissionObjectiveState_Failed);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveKillSlaynElementalsFailed02_Init () {
    gt_ObjectiveKillSlaynElementalsFailed02 = TriggerCreate("gt_ObjectiveKillSlaynElementalsFailed02_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Slayn Elemental 01 Create
//--------------------------------------------------------------------------------------------------
bool gt_SlaynElemental01Create_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    PointSetFacing(PointFromId(43), AngleBetweenPoints(PointFromId(43), PointFromId(935)));
    libNtve_gf_CreateUnitsAtPoint2(1, "SlaynElemental", 0, gv_pLAYER_10_ELEMENTAL, PointFromId(43));
    gv_slaynElemental01 = UnitLastCreated();
    gf_RunSlaynElementalAI(gv_slaynElemental01, RegionFromId(5), 9);
    TriggerQueueEnter();
    libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_Secondary, UnitGetPosition(gv_slaynElemental01), StringExternal("Param/Value/C1AED07B"));
    PingSetUnit(PingLastCreated(), gv_slaynElemental01);
    libHots_gf_StorePingForUnit(gv_slaynElemental01, 1, PingLastCreated());
    TriggerExecute(gt_ObjectiveKillSlaynElementalsCreate, true, false);
    Wait(2.0, c_timeGame);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("BonusObjectiveCoA", true, -1);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SlaynElemental01Create_Init () {
    gt_SlaynElemental01Create = TriggerCreate("gt_SlaynElemental01Create_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Slayn Elemental 02a Create
//--------------------------------------------------------------------------------------------------
bool gt_SlaynElemental02aCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    PointSetFacing(PointFromId(60), AngleBetweenPoints(PointFromId(60), PointFromId(71)));
    libNtve_gf_CreateUnitsAtPoint2(1, "SlaynElemental", 0, gv_pLAYER_10_ELEMENTAL, PointFromId(60));
    gv_slaynElemental02a = UnitLastCreated();
    gf_RunSlaynElementalAI(gv_slaynElemental02a, RegionFromId(16), 9);
    TriggerQueueEnter();
    libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_Secondary, UnitGetPosition(gv_slaynElemental02a), StringExternal("Param/Value/12974173"));
    PingSetUnit(PingLastCreated(), gv_slaynElemental02a);
    libHots_gf_StorePingForUnit(gv_slaynElemental02a, 1, PingLastCreated());
    TriggerExecute(gt_ObjectiveKillSlaynElementalsCreate02, true, false);
    Wait(2.0, c_timeGame);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("BonusNewCoA", true, -1);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SlaynElemental02aCreate_Init () {
    gt_SlaynElemental02aCreate = TriggerCreate("gt_SlaynElemental02aCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Slayn Elemental 02b Create
//--------------------------------------------------------------------------------------------------
bool gt_SlaynElemental02bCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    PointSetFacing(PointFromId(46), AngleBetweenPoints(PointFromId(46), PointFromId(937)));
    libNtve_gf_CreateUnitsAtPoint2(1, "SlaynElemental", 0, gv_pLAYER_10_ELEMENTAL, PointFromId(46));
    gv_slaynElemental02b = UnitLastCreated();
    gf_RunSlaynElementalAI(gv_slaynElemental02b, RegionFromId(33), 9);
    TriggerQueueEnter();
    libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_Secondary, UnitGetPosition(gv_slaynElemental02b), StringExternal("Param/Value/EF069200"));
    PingSetUnit(PingLastCreated(), gv_slaynElemental02b);
    libHots_gf_StorePingForUnit(gv_slaynElemental02b, 1, PingLastCreated());
    TriggerExecute(gt_ObjectiveKillSlaynElementalsCreate02, true, false);
    Wait(2.0, c_timeGame);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("BonusNewCoA", true, -1);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SlaynElemental02bCreate_Init () {
    gt_SlaynElemental02bCreate = TriggerCreate("gt_SlaynElemental02bCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Critter Dies
//--------------------------------------------------------------------------------------------------
bool gt_CritterDies_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_triggeringUnitPoint;
    point lv_spawnLocation;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "SlaynSwarmHostSpawnFlyer"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_triggeringUnitPoint = UnitGetPosition(EventUnit());
    Wait(RandomFixed(5.0, 20.0), c_timeGame);
    if ((RegionContainsPoint(RegionFromId(5), lv_triggeringUnitPoint) == true)) {
        lv_spawnLocation = RegionRandomPoint(RegionFromId(8));
    }
    else if ((RegionContainsPoint(RegionFromId(16), lv_triggeringUnitPoint) == true)) {
        lv_spawnLocation = RegionRandomPoint(RegionFromId(6));
    }
    else if ((RegionContainsPoint(RegionFromId(33), lv_triggeringUnitPoint) == true)) {
        lv_spawnLocation = RegionRandomPoint(RegionFromId(11));
    }
    else if (true) {
        return true;
    }
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "SlaynSwarmHostSpawnFlyer", 0, 0, lv_spawnLocation);
    UnitBehaviorAdd(UnitLastCreated(), "CritterWanderLeash", UnitLastCreated(), 1);
    UnitBehaviorAdd(UnitLastCreated(), "NoBiomassDrop", UnitLastCreated(), 1);
    UnitBehaviorAdd(UnitLastCreated(), "Harmless", UnitLastCreated(), 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CritterDies_Init () {
    gt_CritterDies = TriggerCreate("gt_CritterDies_Func");
    TriggerAddEventUnitDied(gt_CritterDies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Slayn Elemental Cocoon Q
//--------------------------------------------------------------------------------------------------
bool gt_SlaynElementalCocoonQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_currentMissionTime;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((TimerGetRemaining(gv_announcerLineCooldown) <= 0.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    lv_currentMissionTime = GameGetMissionTime();
    TriggerQueueEnter();
    if (((GameGetMissionTime() - lv_currentMissionTime) > gv_c_SkipIfNotPlayedIn)) {
        TriggerEnable(TriggerGetCurrent(), true);
        return true;
    }

    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("BonusWarningCoA", true, -1);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TimerStart(gv_announcerLineCooldown, gv_c_AnnouncerLineCooldown_Amount, false, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SlaynElementalCocoonQ_Init () {
    gt_SlaynElementalCocoonQ = TriggerCreate("gt_SlaynElementalCocoonQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Slayn Elemental Escapes Q
//--------------------------------------------------------------------------------------------------
bool gt_SlaynElementalEscapesQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_currentMissionTime;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((TimerGetRemaining(gv_announcerLineCooldown) <= 0.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_currentMissionTime = GameGetMissionTime();
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if (((GameGetMissionTime() - lv_currentMissionTime) > gv_c_SkipIfNotPlayedIn)) {
        return true;
    }

    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("BonusExpiredCoA", true, -1);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TimerStart(gv_announcerLineCooldown, gv_c_AnnouncerLineCooldown_Amount, false, c_timeReal);
    TriggerQueueExit();
    Wait(90.0, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SlaynElementalEscapesQ_Init () {
    gt_SlaynElementalEscapesQ = TriggerCreate("gt_SlaynElementalEscapesQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Slayn Elemental Going to Escape Q
//--------------------------------------------------------------------------------------------------
bool gt_SlaynElementalGoingtoEscapeQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_currentMissionTime;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((TimerGetRemaining(gv_announcerLineCooldown) <= 0.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_currentMissionTime = GameGetMissionTime();
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if (((GameGetMissionTime() - lv_currentMissionTime) > gv_c_SkipIfNotPlayedIn)) {
        return true;
    }

    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("BonusReminderCoA", true, -1);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TimerStart(gv_announcerLineCooldown, gv_c_AnnouncerLineCooldown_Amount, false, c_timeReal);
    TriggerQueueExit();
    Wait(180.0, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SlaynElementalGoingtoEscapeQ_Init () {
    gt_SlaynElementalGoingtoEscapeQ = TriggerCreate("gt_SlaynElementalGoingtoEscapeQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Slayn Elemental Killed First Q
//--------------------------------------------------------------------------------------------------
bool gt_SlaynElementalKilledFirstQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_currentMissionTime;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_currentMissionTime = GameGetMissionTime();
    TriggerQueueEnter();
    if (((libCOMI_gf_GameIsOver() == true) || ((GameGetMissionTime() - lv_currentMissionTime) > gv_c_SkipIfNotPlayedIn))) {
        return true;
    }

    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("BonusTwoDownCoA", true, -1);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SlaynElementalKilledFirstQ_Init () {
    gt_SlaynElementalKilledFirstQ = TriggerCreate("gt_SlaynElementalKilledFirstQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Slayn Elemental Killed Last Q
//--------------------------------------------------------------------------------------------------
bool gt_SlaynElementalKilledLastQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_currentMissionTime;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_currentMissionTime = GameGetMissionTime();
    TriggerQueueEnter();
    if (((libCOMI_gf_GameIsOver() == true) || ((GameGetMissionTime() - lv_currentMissionTime) > gv_c_SkipIfNotPlayedIn))) {
        return true;
    }

    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("BonusCompleteCoA", true, -1);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SlaynElementalKilledLastQ_Init () {
    gt_SlaynElementalKilledLastQ = TriggerCreate("gt_SlaynElementalKilledLastQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Difficulties
//--------------------------------------------------------------------------------------------------
bool gt_Difficulties_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_stage;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    gv_tugOfWar_Presence_Check_Humans = CatalogFieldValueGetAsInt(c_gameCatalogEffect, "PitAlarakShieldRegenAuraSearch", "AreaArray[" + IntToString(0) + "].Radius", c_playerAny);
    gv_tugOfWar_Presence_Check_EnemyAI = CatalogFieldValueGetAsInt(c_gameCatalogEffect, "PitMalashShieldRegenAuraSearch", "AreaArray[" + IntToString(0) + "].Radius", c_playerAny);
    lv_stage = ge_HybridAttack_Attack01;
    gv_hybridPushTriggerSpacial[lv_stage] = RegionFromId(13);
    TimerStart(gv_hybridPushTriggerTemporal[lv_stage], (9.0 * 60.0), false, c_timeAI);
    gv_hybridPushTimeFailure[lv_stage] = (libCOMI_gf_DifficultyValueFixed2(libCOMI_gf_GetMissionDifficulty(), 5.0, 5.0, 4.0, 4.0, 2.0, 2.0) * 60.0);
    gv_hybridPush_DelayAttacks[lv_stage] = (libCOMI_gf_DifficultyValueFixed2(libCOMI_gf_GetMissionDifficulty(), 3.0, 3.0, 2.0, 2.0, 2.0, 2.0) * 60.0);
    lv_stage = ge_HybridAttack_Attack02;
    gv_hybridPushTriggerSpacial[lv_stage] = RegionFromId(15);
    TimerStart(gv_hybridPushTriggerTemporal[lv_stage], (15.0 * 60.0), false, c_timeAI);
    gv_hybridPushTimeFailure[lv_stage] = (libCOMI_gf_DifficultyValueFixed2(libCOMI_gf_GetMissionDifficulty(), 5.0, 5.0, 4.0, 4.0, 2.0, 2.0) * 60.0);
    gv_hybridPush_DelayAttacks[lv_stage] = (libCOMI_gf_DifficultyValueFixed2(libCOMI_gf_GetMissionDifficulty(), 2.5, 2.5, 1.5, 1.5, 1.5, 1.5) * 60.0);
    lv_stage = ge_HybridAttack_Attack03;
    gv_hybridPushTriggerSpacial[lv_stage] = RegionFromId(20);
    TimerStart(gv_hybridPushTriggerTemporal[lv_stage], (23.0 * 60.0), false, c_timeAI);
    gv_hybridPushTimeFailure[lv_stage] = (libCOMI_gf_DifficultyValueFixed2(libCOMI_gf_GetMissionDifficulty(), 7.0, 7.0, 5.0, 5.0, 2.0, 2.0) * 60.0);
    gv_hybridPush_DelayAttacks[lv_stage] = (libCOMI_gf_DifficultyValueFixed2(libCOMI_gf_GetMissionDifficulty(), 2.0, 2.0, 1.0, 1.0, 1.0, 1.0) * 60.0);
    lv_stage = ge_HybridAttack_Attack04;
    gv_hybridPushTriggerSpacial[lv_stage] = RegionFromId(21);
    TimerStart(gv_hybridPushTriggerTemporal[lv_stage], (30.0 * 60.0), false, c_timeAI);
    gv_hybridPushTimeFailure[lv_stage] = (libCOMI_gf_DifficultyValueFixed2(libCOMI_gf_GetMissionDifficulty(), 6.0, 6.0, 4.0, 4.0, 2.0, 2.0) * 60.0);
    gv_hybridPush_DelayAttacks[lv_stage] = (libCOMI_gf_DifficultyValueFixed2(libCOMI_gf_GetMissionDifficulty(), 2.0, 2.0, 1.0, 1.0, 1.0, 1.0) * 60.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Difficulties_Init () {
    gt_Difficulties = TriggerCreate("gt_Difficulties_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Game Q
//--------------------------------------------------------------------------------------------------
bool gt_StartGameQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int autoB56D340D_val;

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_SetEffortValues, true, false);
    Wait(7.0, c_timeReal);
    TriggerQueueEnter();
    TriggerExecute(gt_ObjectiveKillAmonsChampionCreate, true, true);
    Wait(2.0, c_timeReal);
    libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_Primary, PointFromId(882), StringExternal("Param/Value/03B914C3"));
    Wait(1.0, c_timeReal);
    TriggerExecute(gt_ObjectiveJinaraMustSurviveCreate, true, true);
    TriggerExecute(gt_TugOfWarInitialize, true, false);
    Wait(2.0, c_timeReal);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    autoB56D340D_val = RandomInt(0, 2);
    if (autoB56D340D_val == 0) {
        libCOMI_gf_SendMissionTransmission("Intro1CoA", true, -1);
        libCOMI_gf_SendMissionTransmission("Intro1CoAP2", true, -1);
    }
    else if (autoB56D340D_val == 1) {
        libCOMI_gf_SendMissionTransmission("Intro2CoA", true, -1);
        libCOMI_gf_SendMissionTransmission("Intro2CoAP2", true, -1);
    }
    else {
        libCOMI_gf_SendMissionTransmission("Intro3CoA", true, -1);
        libCOMI_gf_SendMissionTransmission("Intro3CoAP2", true, -1);
    }
    TimerStart(gv_announcerLineCooldown, gv_c_AnnouncerLineCooldown_Amount, false, c_timeReal);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartGameQ_Init () {
    gt_StartGameQ = TriggerCreate("gt_StartGameQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Escort Wave Transmission Q
//--------------------------------------------------------------------------------------------------
bool gt_EscortWaveTransmissionQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!(((gv_tugOfWar_State == ge_TugOfWarState_Hold) || (gv_tugOfWar_State == ge_TugOfWarState_Forward)))) {
            return false;
        }

        if (!((TimerGetRemaining(gv_announcerLineCooldown) <= 0.0))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroupAlliance(PlayerGroupPlayer(libCOMI_gf_GetAlliedCommandersPlayers(), 1), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(gv_tugOfWarBubbleUnit), 13.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("EnemySupportIncCoA", true, -1);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TimerStart(gv_announcerLineCooldown, gv_c_AnnouncerLineCooldown_Amount, false, c_timeReal);
    TriggerQueueExit();
    Wait(120.0, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EscortWaveTransmissionQ_Init () {
    gt_EscortWaveTransmissionQ = TriggerCreate("gt_EscortWaveTransmissionQ_Func");
    TriggerAddEventPlayerAIWave(gt_EscortWaveTransmissionQ, gv_pLAYER_05_EnemyP01);
    TriggerAddEventPlayerAIWave(gt_EscortWaveTransmissionQ, gv_pLAYER_06_EnemyP02);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Escort Wave 01
//--------------------------------------------------------------------------------------------------
bool gt_EscortWave01_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_waveTechLevel;
    int lv_waveResourceAmount;
    region lv_warpInRegion;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_waveTechLevel = libCOMI_ge_CoopAITechLevelBuckets__1Early;
    lv_waveResourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_MinimumDifficultyValueCoopInteger(1, 1, 0, 0, 0, 0) != 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_waveTechLevel = libCOMI_ge_CoopAITechLevelBuckets__1Early;
    lv_waveResourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
    lv_warpInRegion = gf_GetEscortWarpInRegion();
    gf_EscortWaveSend(lv_waveTechLevel, lv_waveResourceAmount, lv_warpInRegion);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EscortWave01_Init () {
    gt_EscortWave01 = TriggerCreate("gt_EscortWave01_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Escort Wave 02
//--------------------------------------------------------------------------------------------------
bool gt_EscortWave02_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_waveTechLevel;
    int lv_waveResourceAmount;
    region lv_warpInRegion;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_waveTechLevel = libCOMI_ge_CoopAITechLevelBuckets__1Early;
    lv_waveResourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_waveTechLevel = libCOMI_ge_CoopAITechLevelBuckets__1Early;
    lv_waveResourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
    lv_warpInRegion = gf_GetEscortWarpInRegion();
    gf_EscortWaveSend(lv_waveTechLevel, lv_waveResourceAmount, lv_warpInRegion);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EscortWave02_Init () {
    gt_EscortWave02 = TriggerCreate("gt_EscortWave02_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Escort Wave 03
//--------------------------------------------------------------------------------------------------
bool gt_EscortWave03_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_waveTechLevel;
    int lv_waveResourceAmount;
    region lv_warpInRegion;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_waveTechLevel = libCOMI_ge_CoopAITechLevelBuckets__1Early;
    lv_waveResourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_waveTechLevel = libCOMI_ge_CoopAITechLevelBuckets__1Early;
    lv_waveResourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
    lv_warpInRegion = gf_GetEscortWarpInRegion();
    gf_EscortWaveSend(lv_waveTechLevel, lv_waveResourceAmount, lv_warpInRegion);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EscortWave03_Init () {
    gt_EscortWave03 = TriggerCreate("gt_EscortWave03_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Escort Wave 04
//--------------------------------------------------------------------------------------------------
bool gt_EscortWave04_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_waveTechLevel;
    int lv_waveResourceAmount;
    region lv_warpInRegion;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_waveTechLevel = libCOMI_ge_CoopAITechLevelBuckets__1Early;
    lv_waveResourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_waveTechLevel = libCOMI_ge_CoopAITechLevelBuckets__1Early;
    lv_waveResourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
    lv_warpInRegion = gf_GetEscortWarpInRegion();
    gf_EscortWaveSend(lv_waveTechLevel, lv_waveResourceAmount, lv_warpInRegion);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EscortWave04_Init () {
    gt_EscortWave04 = TriggerCreate("gt_EscortWave04_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Escort Wave 05
//--------------------------------------------------------------------------------------------------
bool gt_EscortWave05_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_waveTechLevel;
    int lv_waveResourceAmount;
    region lv_warpInRegion;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_waveTechLevel = libCOMI_ge_CoopAITechLevelBuckets__1Early;
    lv_waveResourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_waveTechLevel = libCOMI_ge_CoopAITechLevelBuckets__2EarlyMid;
    lv_waveResourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__2Smaller;
    lv_warpInRegion = gf_GetEscortWarpInRegion();
    gf_EscortWaveSend(lv_waveTechLevel, lv_waveResourceAmount, lv_warpInRegion);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EscortWave05_Init () {
    gt_EscortWave05 = TriggerCreate("gt_EscortWave05_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Escort Wave 06
//--------------------------------------------------------------------------------------------------
bool gt_EscortWave06_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_waveTechLevel;
    int lv_waveResourceAmount;
    region lv_warpInRegion;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_waveTechLevel = libCOMI_ge_CoopAITechLevelBuckets__1Early;
    lv_waveResourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_waveTechLevel = libCOMI_ge_CoopAITechLevelBuckets__2EarlyMid;
    lv_waveResourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__2Smaller;
    lv_warpInRegion = gf_GetEscortWarpInRegion();
    gf_EscortWaveSend(lv_waveTechLevel, lv_waveResourceAmount, lv_warpInRegion);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EscortWave06_Init () {
    gt_EscortWave06 = TriggerCreate("gt_EscortWave06_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Escort Wave 07
//--------------------------------------------------------------------------------------------------
bool gt_EscortWave07_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_waveTechLevel;
    int lv_waveResourceAmount;
    region lv_warpInRegion;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_waveTechLevel = libCOMI_ge_CoopAITechLevelBuckets__1Early;
    lv_waveResourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_waveTechLevel = libCOMI_ge_CoopAITechLevelBuckets__3Mid;
    lv_waveResourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__3Small;
    lv_warpInRegion = gf_GetEscortWarpInRegion();
    gf_EscortWaveSend(lv_waveTechLevel, lv_waveResourceAmount, lv_warpInRegion);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EscortWave07_Init () {
    gt_EscortWave07 = TriggerCreate("gt_EscortWave07_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Escort Wave 08
//--------------------------------------------------------------------------------------------------
bool gt_EscortWave08_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_waveTechLevel;
    int lv_waveResourceAmount;
    region lv_warpInRegion;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_waveTechLevel = libCOMI_ge_CoopAITechLevelBuckets__1Early;
    lv_waveResourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_waveTechLevel = libCOMI_ge_CoopAITechLevelBuckets__2EarlyMid;
    lv_waveResourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__2Smaller;
    lv_warpInRegion = gf_GetEscortWarpInRegion();
    gf_EscortWaveSend(lv_waveTechLevel, lv_waveResourceAmount, lv_warpInRegion);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EscortWave08_Init () {
    gt_EscortWave08 = TriggerCreate("gt_EscortWave08_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Escort Wave 09
//--------------------------------------------------------------------------------------------------
bool gt_EscortWave09_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_waveTechLevel;
    int lv_waveResourceAmount;
    region lv_warpInRegion;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_waveTechLevel = libCOMI_ge_CoopAITechLevelBuckets__1Early;
    lv_waveResourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_waveTechLevel = libCOMI_ge_CoopAITechLevelBuckets__3Mid;
    lv_waveResourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__3Small;
    lv_warpInRegion = gf_GetEscortWarpInRegion();
    gf_EscortWaveSend(lv_waveTechLevel, lv_waveResourceAmount, lv_warpInRegion);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EscortWave09_Init () {
    gt_EscortWave09 = TriggerCreate("gt_EscortWave09_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Escort Wave 10
//--------------------------------------------------------------------------------------------------
bool gt_EscortWave10_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_waveTechLevel;
    int lv_waveResourceAmount;
    region lv_warpInRegion;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_waveTechLevel = libCOMI_ge_CoopAITechLevelBuckets__1Early;
    lv_waveResourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_waveTechLevel = libCOMI_ge_CoopAITechLevelBuckets__3Mid;
    lv_waveResourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__3Small;
    lv_warpInRegion = gf_GetEscortWarpInRegion();
    gf_EscortWaveSend(lv_waveTechLevel, lv_waveResourceAmount, lv_warpInRegion);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EscortWave10_Init () {
    gt_EscortWave10 = TriggerCreate("gt_EscortWave10_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Escort Wave 11
//--------------------------------------------------------------------------------------------------
bool gt_EscortWave11_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_waveTechLevel;
    int lv_waveResourceAmount;
    region lv_warpInRegion;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_waveTechLevel = libCOMI_ge_CoopAITechLevelBuckets__1Early;
    lv_waveResourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_waveTechLevel = libCOMI_ge_CoopAITechLevelBuckets__4LateMid;
    lv_waveResourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__4Medium;
    lv_warpInRegion = gf_GetEscortWarpInRegion();
    gf_EscortWaveSend(lv_waveTechLevel, lv_waveResourceAmount, lv_warpInRegion);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EscortWave11_Init () {
    gt_EscortWave11 = TriggerCreate("gt_EscortWave11_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Escort Wave 12
//--------------------------------------------------------------------------------------------------
bool gt_EscortWave12_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_waveTechLevel;
    int lv_waveResourceAmount;
    region lv_warpInRegion;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_waveTechLevel = libCOMI_ge_CoopAITechLevelBuckets__1Early;
    lv_waveResourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_waveTechLevel = libCOMI_ge_CoopAITechLevelBuckets__4LateMid;
    lv_waveResourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__4Medium;
    lv_warpInRegion = gf_GetEscortWarpInRegion();
    gf_EscortWaveSend(lv_waveTechLevel, lv_waveResourceAmount, lv_warpInRegion);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EscortWave12_Init () {
    gt_EscortWave12 = TriggerCreate("gt_EscortWave12_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Escort Wave 13
//--------------------------------------------------------------------------------------------------
bool gt_EscortWave13_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_waveTechLevel;
    int lv_waveResourceAmount;
    region lv_warpInRegion;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_waveTechLevel = libCOMI_ge_CoopAITechLevelBuckets__1Early;
    lv_waveResourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_waveTechLevel = libCOMI_ge_CoopAITechLevelBuckets__5Late;
    lv_waveResourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__5Large;
    lv_warpInRegion = gf_GetEscortWarpInRegion();
    gf_EscortWaveSend(lv_waveTechLevel, lv_waveResourceAmount, lv_warpInRegion);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EscortWave13_Init () {
    gt_EscortWave13 = TriggerCreate("gt_EscortWave13_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Escort Wave 14
//--------------------------------------------------------------------------------------------------
bool gt_EscortWave14_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_waveTechLevel;
    int lv_waveResourceAmount;
    region lv_warpInRegion;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_waveTechLevel = libCOMI_ge_CoopAITechLevelBuckets__1Early;
    lv_waveResourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_waveTechLevel = libCOMI_ge_CoopAITechLevelBuckets__5Late;
    lv_waveResourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__5Large;
    lv_warpInRegion = gf_GetEscortWarpInRegion();
    gf_EscortWaveSend(lv_waveTechLevel, lv_waveResourceAmount, lv_warpInRegion);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EscortWave14_Init () {
    gt_EscortWave14 = TriggerCreate("gt_EscortWave14_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Escort Wave 15
//--------------------------------------------------------------------------------------------------
bool gt_EscortWave15_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_waveTechLevel;
    int lv_waveResourceAmount;
    region lv_warpInRegion;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_waveTechLevel = libCOMI_ge_CoopAITechLevelBuckets__1Early;
    lv_waveResourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_waveTechLevel = libCOMI_ge_CoopAITechLevelBuckets__4LateMid;
    lv_waveResourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__4Medium;
    lv_warpInRegion = gf_GetEscortWarpInRegion();
    gf_EscortWaveSend(lv_waveTechLevel, lv_waveResourceAmount, lv_warpInRegion);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EscortWave15_Init () {
    gt_EscortWave15 = TriggerCreate("gt_EscortWave15_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Escort Wave 16
//--------------------------------------------------------------------------------------------------
bool gt_EscortWave16_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_waveTechLevel;
    int lv_waveResourceAmount;
    region lv_warpInRegion;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_waveTechLevel = libCOMI_ge_CoopAITechLevelBuckets__1Early;
    lv_waveResourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_waveTechLevel = libCOMI_ge_CoopAITechLevelBuckets__3Mid;
    lv_waveResourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__3Small;
    lv_warpInRegion = gf_GetEscortWarpInRegion();
    gf_EscortWaveSend(lv_waveTechLevel, lv_waveResourceAmount, lv_warpInRegion);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EscortWave16_Init () {
    gt_EscortWave16 = TriggerCreate("gt_EscortWave16_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Escort Wave 17
//--------------------------------------------------------------------------------------------------
bool gt_EscortWave17_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_waveTechLevel;
    int lv_waveResourceAmount;
    region lv_warpInRegion;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_waveTechLevel = libCOMI_ge_CoopAITechLevelBuckets__1Early;
    lv_waveResourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_waveTechLevel = libCOMI_ge_CoopAITechLevelBuckets__3Mid;
    lv_waveResourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__3Small;
    lv_warpInRegion = gf_GetEscortWarpInRegion();
    gf_EscortWaveSend(lv_waveTechLevel, lv_waveResourceAmount, lv_warpInRegion);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EscortWave17_Init () {
    gt_EscortWave17 = TriggerCreate("gt_EscortWave17_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Escort Wave 18
//--------------------------------------------------------------------------------------------------
bool gt_EscortWave18_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_waveTechLevel;
    int lv_waveResourceAmount;
    region lv_warpInRegion;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_waveTechLevel = libCOMI_ge_CoopAITechLevelBuckets__1Early;
    lv_waveResourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_waveTechLevel = libCOMI_ge_CoopAITechLevelBuckets__4LateMid;
    lv_waveResourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__4Medium;
    lv_warpInRegion = gf_GetEscortWarpInRegion();
    gf_EscortWaveSend(lv_waveTechLevel, lv_waveResourceAmount, lv_warpInRegion);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EscortWave18_Init () {
    gt_EscortWave18 = TriggerCreate("gt_EscortWave18_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Escort Wave 19
//--------------------------------------------------------------------------------------------------
bool gt_EscortWave19_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_waveTechLevel;
    int lv_waveResourceAmount;
    region lv_warpInRegion;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_waveTechLevel = libCOMI_ge_CoopAITechLevelBuckets__1Early;
    lv_waveResourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_waveTechLevel = libCOMI_ge_CoopAITechLevelBuckets__4LateMid;
    lv_waveResourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__4Medium;
    lv_warpInRegion = gf_GetEscortWarpInRegion();
    gf_EscortWaveSend(lv_waveTechLevel, lv_waveResourceAmount, lv_warpInRegion);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EscortWave19_Init () {
    gt_EscortWave19 = TriggerCreate("gt_EscortWave19_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Escort Wave 20
//--------------------------------------------------------------------------------------------------
bool gt_EscortWave20_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_waveTechLevel;
    int lv_waveResourceAmount;
    region lv_warpInRegion;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_waveTechLevel = libCOMI_ge_CoopAITechLevelBuckets__1Early;
    lv_waveResourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_waveTechLevel = libCOMI_ge_CoopAITechLevelBuckets__4LateMid;
    lv_waveResourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__4Medium;
    lv_warpInRegion = gf_GetEscortWarpInRegion();
    gf_EscortWaveSend(lv_waveTechLevel, lv_waveResourceAmount, lv_warpInRegion);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EscortWave20_Init () {
    gt_EscortWave20 = TriggerCreate("gt_EscortWave20_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Escort Wave 21
//--------------------------------------------------------------------------------------------------
bool gt_EscortWave21_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_waveTechLevel;
    int lv_waveResourceAmount;
    region lv_warpInRegion;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_waveTechLevel = libCOMI_ge_CoopAITechLevelBuckets__1Early;
    lv_waveResourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_waveTechLevel = libCOMI_ge_CoopAITechLevelBuckets__4LateMid;
    lv_waveResourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__4Medium;
    lv_warpInRegion = gf_GetEscortWarpInRegion();
    gf_EscortWaveSend(lv_waveTechLevel, lv_waveResourceAmount, lv_warpInRegion);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EscortWave21_Init () {
    gt_EscortWave21 = TriggerCreate("gt_EscortWave21_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Escort Wave 22
//--------------------------------------------------------------------------------------------------
bool gt_EscortWave22_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_waveTechLevel;
    int lv_waveResourceAmount;
    region lv_warpInRegion;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_waveTechLevel = libCOMI_ge_CoopAITechLevelBuckets__1Early;
    lv_waveResourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_waveTechLevel = libCOMI_ge_CoopAITechLevelBuckets__5Late;
    lv_waveResourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__5Large;
    lv_warpInRegion = gf_GetEscortWarpInRegion();
    gf_EscortWaveSend(lv_waveTechLevel, lv_waveResourceAmount, lv_warpInRegion);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EscortWave22_Init () {
    gt_EscortWave22 = TriggerCreate("gt_EscortWave22_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Escort Wave 23
//--------------------------------------------------------------------------------------------------
bool gt_EscortWave23_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_waveTechLevel;
    int lv_waveResourceAmount;
    region lv_warpInRegion;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_waveTechLevel = libCOMI_ge_CoopAITechLevelBuckets__1Early;
    lv_waveResourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_waveTechLevel = libCOMI_ge_CoopAITechLevelBuckets__5Late;
    lv_waveResourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__5Large;
    lv_warpInRegion = gf_GetEscortWarpInRegion();
    gf_EscortWaveSend(lv_waveTechLevel, lv_waveResourceAmount, lv_warpInRegion);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EscortWave23_Init () {
    gt_EscortWave23 = TriggerCreate("gt_EscortWave23_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Setup Hybrid Pusher Hybrid Types RNG
//--------------------------------------------------------------------------------------------------
bool gt_SetupHybridPusherHybridTypesRNG_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_stage;

    // Automatic Variable Declarations
    int autoC576E292_val;
    int autoB5BE236A_val;
    int auto29AF96BD_val;
    int autoEAC4A6B7_val;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libCOMI_gf_DifficultyValueInt2(libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_05_EnemyP01), 0, 1, 2, 3, 4, 5) > libCOMI_gf_DifficultyValueInt2(libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_06_EnemyP02), 0, 1, 2, 3, 4, 5))) {
        gv_hybridPusherPlayer = gv_pLAYER_05_EnemyP01;
    }
    else {
        gv_hybridPusherPlayer = gv_pLAYER_06_EnemyP02;
    }
    if ((RandomFixed(0.0, 1.0) <= 0.33)) {
        if ((gv_options_Boss == 1)) {
            gv_hybridPusher_Boss = "HybridDominatorVoid";
        }

        if ((gv_options_Enforcer1 == 1)) {
            gv_hybridPusher_Enforcer01 = "HybridReaver";
        }

    }
    else {
        if ((gv_options_Boss == 1)) {
            gv_hybridPusher_Boss = "HybridBehemoth";
        }

        if ((gv_options_Enforcer1 == 1)) {
            gv_hybridPusher_Enforcer01 = "HybridDestroyer";
        }

    }
    if ((gv_options_Boss != 1)) {
        autoC576E292_val = gv_options_Boss;
        if (autoC576E292_val == 2) {
            gv_hybridPusher_Boss = "HybridBehemoth";
        }
        else {
            gv_hybridPusher_Boss = "HybridDominatorVoid";
        }
    }

    if ((gv_options_Enforcer1 != 1)) {
        autoB5BE236A_val = gv_options_Enforcer1;
        if (autoB5BE236A_val == 2) {
            gv_hybridPusher_Enforcer01 = "HybridReaver";
        }
        else if (autoB5BE236A_val == 3) {
            gv_hybridPusher_Enforcer01 = "HybridDestroyer";
        }
        else {
            gv_hybridPusher_Enforcer01 = "HybridNemesis";
        }
    }

    auto29AF96BD_val = RandomInt(0, 2);
    if (auto29AF96BD_val == 0) {
        if ((gv_options_Enforcer2 == 1)) {
            gv_hybridPusher_Enforcer02 = gv_hybridPusher_Enforcer01;
        }

    }
    else if (auto29AF96BD_val == 1) {
        if ((gv_options_Enforcer2 == 1)) {
            gv_hybridPusher_Enforcer02 = "HybridNemesis";
        }

    }
    else {
        if ((gv_options_Enforcer2 == 1)) {
            gv_hybridPusher_Enforcer01 = "HybridNemesis";
            gv_hybridPusher_Enforcer02 = "HybridNemesis";
        }

    }
    if ((gv_options_Enforcer2 != 1)) {
        autoEAC4A6B7_val = gv_options_Enforcer2;
        if (autoEAC4A6B7_val == 2) {
            gv_hybridPusher_Enforcer02 = "HybridReaver";
        }
        else if (autoEAC4A6B7_val == 3) {
            gv_hybridPusher_Enforcer02 = "HybridDestroyer";
        }
        else {
            gv_hybridPusher_Enforcer02 = "HybridNemesis";
        }
    }

    TriggerExecute(gt_RunHybridPushers, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SetupHybridPusherHybridTypesRNG_Init () {
    gt_SetupHybridPusherHybridTypesRNG = TriggerCreate("gt_SetupHybridPusherHybridTypesRNG_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Setup Hybrid Pusher Hybrid Types
//--------------------------------------------------------------------------------------------------
bool gt_SetupHybridPusherHybridTypes_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_stage;

    // Automatic Variable Declarations
    int autoB329551F_val;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libCOMI_gf_DifficultyValueInt2(libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_05_EnemyP01), 0, 1, 2, 3, 4, 5) > libCOMI_gf_DifficultyValueInt2(libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_06_EnemyP02), 0, 1, 2, 3, 4, 5))) {
        gv_hybridPusherPlayer = gv_pLAYER_05_EnemyP01;
    }
    else {
        gv_hybridPusherPlayer = gv_pLAYER_06_EnemyP02;
    }
    if ((RandomFixed(0.0, 1.0) <= 0.33)) {
        gv_hybridPusher_Boss = "HybridDominatorVoid";
        gv_hybridPusher_Enforcer01 = "HybridReaver";
    }
    else {
        gv_hybridPusher_Boss = "HybridBehemoth";
        gv_hybridPusher_Enforcer01 = "HybridDestroyer";
    }
    autoB329551F_val = RandomInt(0, 2);
    if (autoB329551F_val == 0) {
        gv_hybridPusher_Enforcer02 = gv_hybridPusher_Enforcer01;
    }
    else if (autoB329551F_val == 1) {
        gv_hybridPusher_Enforcer02 = "HybridNemesis";
    }
    else {
        gv_hybridPusher_Enforcer01 = "HybridNemesis";
        gv_hybridPusher_Enforcer02 = "HybridNemesis";
    }
    TriggerExecute(gt_RunHybridPushers, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SetupHybridPusherHybridTypes_Init () {
    gt_SetupHybridPusherHybridTypes = TriggerCreate("gt_SetupHybridPusherHybridTypes_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Run Hybrid Pushers
//--------------------------------------------------------------------------------------------------
bool gt_RunHybridPushers_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    while (!(((TimerGetRemaining(gv_hybridPushTriggerTemporal[ge_HybridAttack_Attack01]) <= 0.0) || (libNtve_gf_UnitInRegion(gv_tugOfWarBubbleUnit, gv_hybridPushTriggerSpacial[ge_HybridAttack_Attack01]) == true)))) {
        Wait(0.1, c_timeAI);
    }
    TriggerExecute(gt_HybridPushers01, true, true);
    while (!(((TimerGetRemaining(gv_hybridPushTriggerTemporal[ge_HybridAttack_Attack02]) <= 0.0) || (libNtve_gf_UnitInRegion(gv_tugOfWarBubbleUnit, gv_hybridPushTriggerSpacial[ge_HybridAttack_Attack02]) == true)))) {
        Wait(0.1, c_timeAI);
    }
    TriggerExecute(gt_HybridPushers02, true, true);
    while (!(((TimerGetRemaining(gv_hybridPushTriggerTemporal[ge_HybridAttack_Attack03]) <= 0.0) || (libNtve_gf_UnitInRegion(gv_tugOfWarBubbleUnit, gv_hybridPushTriggerSpacial[ge_HybridAttack_Attack03]) == true)))) {
        Wait(0.1, c_timeAI);
    }
    TriggerExecute(gt_HybridPushers03, true, true);
    while (!(((TimerGetRemaining(gv_hybridPushTriggerTemporal[ge_HybridAttack_Attack04]) <= 0.0) || (libNtve_gf_UnitInRegion(gv_tugOfWarBubbleUnit, gv_hybridPushTriggerSpacial[ge_HybridAttack_Attack04]) == true)))) {
        Wait(0.1, c_timeAI);
    }
    TriggerExecute(gt_HybridPushers04, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RunHybridPushers_Init () {
    gt_RunHybridPushers = TriggerCreate("gt_RunHybridPushers_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hybrid Pushers 01
//--------------------------------------------------------------------------------------------------
bool gt_HybridPushers01_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_channelWave;
    point lv_spawnLocation;
    int lv_stage;
    unitgroup lv_hybridBodyGuards;
    unit lv_bossHybrid;
    fixed lv_bodyguardPos_BaseDistance;
    fixed lv_bodyguardPos_AngleSpacing;
    fixed lv_bodyguardPos_GuardsPerRow;
    unitgroup lv_hybridFrontRow;
    unitgroup lv_hybridBackRow;
    unitgroup lv_hybridBossRow;
    unitgroup lv_enemyTargets;
    int lv_enemyTargetsCount_Prev;
    unit lv_pusherBlockCenter;

    // Automatic Variable Declarations
    unitgroup auto0C48B6A8_g;
    int auto0C48B6A8_u;
    unit auto0C48B6A8_var;

    // Variable Initialization
    lv_channelWave = UnitGroupEmpty();
    lv_hybridBodyGuards = UnitGroupEmpty();
    lv_hybridFrontRow = UnitGroupEmpty();
    lv_hybridBackRow = UnitGroupEmpty();
    lv_hybridBossRow = UnitGroupEmpty();
    lv_enemyTargets = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    gf_DelayAttackandEscortWaves(gv_hybridPush_DelayAttacks[lv_stage]);
    lv_stage = ge_HybridAttack_Attack01;
    gv_hybridReverseSpeed = ((gf_DistanceToFailurefromPoint(RegionGetCenter(gv_hybridPushTriggerSpacial[lv_stage]))-(libNtve_gf_WidthOfRegion(gv_hybridPushTriggerSpacial[lv_stage]) * 0.5)) / gv_hybridPushTimeFailure[lv_stage]);
    lv_spawnLocation = PointFromId(496);
    lv_channelWave = gf_CreateHybridPusherGroup(lv_stage, lv_spawnLocation);
    auto0C48B6A8_g = lv_channelWave;
    auto0C48B6A8_u = UnitGroupCount(auto0C48B6A8_g, c_unitCountAll);
    for (;; auto0C48B6A8_u -= 1) {
        auto0C48B6A8_var = UnitGroupUnitFromEnd(auto0C48B6A8_g, auto0C48B6A8_u);
        if (auto0C48B6A8_var == null) { break; }
        libCOMI_gf_CreateWarpInEffect(auto0C48B6A8_var);
    }
    gf_PingHybridSuperPushers(lv_channelWave);
    gf_PushersInfluencePings(lv_channelWave);
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_hybridPusherPlayer, gv_hybridPusherPlayer, libCOMI_ge_CoopAIAttackWaveBuckets__3Small, libCOMI_ge_CoopAITechLevelBuckets__3Mid, PointFromId(229), true);
    lv_hybridBodyGuards = libCOMI_gf_LastCreatedCoopAttackForce();
    Wait(10.0, c_timeAI);
    UnitCreate(1, "InvisibleEscortFlying", c_unitCreateIgnorePlacement, gv_hybridPusherPlayer, lv_spawnLocation, PointGetFacing(lv_spawnLocation));
    lv_pusherBlockCenter = UnitLastCreated();
    UnitSetState(lv_pusherBlockCenter, c_unitStateTurnSuppressed, false);
    Wait(4.0, c_timeAI);
    if ((UnitGroupCount(lv_channelWave, c_unitCountAlive) == 0)) {
        return true;
    }

    AIAttackWaveSetTargetEscort(gv_hybridPusherPlayer, libNtve_gf_ConvertUnitToUnitGroup(lv_pusherBlockCenter), 0);
    if ((gv_hybridPusher_Boss == "HybridBehemoth")) {
        UnitGroupAddUnitGroup(lv_hybridFrontRow, UnitGroupFilter("HybridReaver", gv_hybridPusherPlayer, lv_channelWave, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        UnitGroupAddUnitGroup(lv_hybridBackRow, UnitGroupFilter("HybridDestroyer", gv_hybridPusherPlayer, lv_channelWave, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        UnitGroupAddUnitGroup(lv_hybridBackRow, UnitGroupFilter("HybridNemesis", gv_hybridPusherPlayer, lv_channelWave, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    }
    else {
        UnitGroupAddUnitGroup(lv_hybridFrontRow, UnitGroupFilter("HybridReaver", gv_hybridPusherPlayer, lv_channelWave, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        UnitGroupAddUnitGroup(lv_hybridFrontRow, UnitGroupFilter("HybridDestroyer", gv_hybridPusherPlayer, lv_channelWave, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        UnitGroupAddUnitGroup(lv_hybridFrontRow, UnitGroupFilter("HybridNemesis", gv_hybridPusherPlayer, lv_channelWave, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    }
    lv_hybridBossRow = UnitGroupFilter(gv_hybridPusher_Boss, gv_hybridPusherPlayer, lv_channelWave, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    if ((UnitGroupCount(lv_hybridBossRow, c_unitCountAlive) > 0)) {
        gf_AssignGuardLocations(lv_pusherBlockCenter, UnitGroupFilter(gv_hybridPusher_Boss, gv_hybridPusherPlayer, lv_channelWave, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 2.0, (360 / UnitGroupCount(lv_hybridBossRow, c_unitCountAlive)), UnitGroupCount(lv_hybridBossRow, c_unitCountAlive));
    }

    lv_bodyguardPos_BaseDistance = 4.0;
    lv_bodyguardPos_AngleSpacing = 15.0;
    lv_bodyguardPos_GuardsPerRow = UnitGroupCount(lv_hybridFrontRow, c_unitCountAlive);
    gf_AssignGuardLocations(lv_pusherBlockCenter, lv_hybridFrontRow, lv_bodyguardPos_BaseDistance, lv_bodyguardPos_AngleSpacing, lv_bodyguardPos_GuardsPerRow);
    lv_bodyguardPos_BaseDistance = -5.0;
    lv_bodyguardPos_AngleSpacing = 15.0;
    lv_bodyguardPos_GuardsPerRow = UnitGroupCount(lv_hybridBackRow, c_unitCountAlive);
    gf_AssignGuardLocations(lv_pusherBlockCenter, lv_hybridBackRow, lv_bodyguardPos_BaseDistance, lv_bodyguardPos_AngleSpacing, lv_bodyguardPos_GuardsPerRow);
    if ((UnitGroupCount(lv_hybridFrontRow, c_unitCountAlive) == 0)) {
        lv_bodyguardPos_BaseDistance = 2.0;
    }
    else {
        lv_bodyguardPos_BaseDistance = 4.0;
    }
    if ((UnitGroupCount(lv_hybridBodyGuards, c_unitCountAlive) != 0)) {
        lv_bodyguardPos_GuardsPerRow = SquareRoot(UnitGroupCount(lv_hybridBodyGuards, c_unitCountAlive));
        lv_bodyguardPos_AngleSpacing = (60.0 / lv_bodyguardPos_GuardsPerRow);
    }

    gf_AssignGuardLocations(lv_pusherBlockCenter, lv_hybridBodyGuards, lv_bodyguardPos_BaseDistance, lv_bodyguardPos_AngleSpacing, lv_bodyguardPos_GuardsPerRow);
    AIAttackWaveSend(gv_hybridPusherPlayer, 0, false);
    while ((libCOMI_gf_GameIsOver() == false) && (UnitGroupCount(lv_channelWave, c_unitCountAlive) > 0)) {
        lv_enemyTargets = UnitGroupAlliance(gv_hybridPusherPlayer, c_unitAllianceEnemy, RegionFromId(12), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        if ((UnitGroupCount(lv_enemyTargets, c_unitCountAlive) > 0)) {
            UnitIssueOrder(lv_pusherBlockCenter, OrderTargetingPoint(AbilityCommand("move", 0), UnitGetPosition(UnitGroupClosestToPoint(lv_enemyTargets, lv_spawnLocation))), c_orderQueueReplace);
        }
        else {
            if ((UnitGroupCount(lv_enemyTargets, c_unitCountAlive) != lv_enemyTargetsCount_Prev)) {
                UnitIssueOrder(lv_pusherBlockCenter, OrderTargetingPoint(AbilityCommand("move", 0), lv_spawnLocation), c_orderQueueReplace);
            }

        }
        lv_enemyTargetsCount_Prev = UnitGroupCount(lv_enemyTargets, c_unitCountAlive);
        Wait(1.0, c_timeAI);
    }
    UnitRemove(lv_pusherBlockCenter);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HybridPushers01_Init () {
    gt_HybridPushers01 = TriggerCreate("gt_HybridPushers01_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hybrid Pushers 02
//--------------------------------------------------------------------------------------------------
bool gt_HybridPushers02_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_stage;
    unitgroup lv_channelWave;
    point lv_spawnLocation;
    unitgroup lv_hybridBodyGuards;
    fixed lv_bodyguardPos_BaseDistance;
    fixed lv_bodyguardPos_AngleSpacing;
    fixed lv_bodyguardPos_GuardsPerRow;
    unitgroup lv_hybridFrontRow;
    unitgroup lv_hybridBackRow;
    unitgroup lv_hybridBossRow;
    unitgroup lv_enemyTargets;
    int lv_enemyTargetsCount_Prev;
    unit lv_pusherBlockCenter;

    // Automatic Variable Declarations
    unitgroup auto00EA946C_g;
    int auto00EA946C_u;
    unit auto00EA946C_var;

    // Variable Initialization
    lv_channelWave = UnitGroupEmpty();
    lv_hybridBodyGuards = UnitGroupEmpty();
    lv_hybridFrontRow = UnitGroupEmpty();
    lv_hybridBackRow = UnitGroupEmpty();
    lv_hybridBossRow = UnitGroupEmpty();
    lv_enemyTargets = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    gf_DelayAttackandEscortWaves(gv_hybridPush_DelayAttacks[lv_stage]);
    lv_stage = ge_HybridAttack_Attack02;
    gv_hybridReverseSpeed = ((gf_DistanceToFailurefromPoint(RegionGetCenter(gv_hybridPushTriggerSpacial[lv_stage]))-(libNtve_gf_WidthOfRegion(gv_hybridPushTriggerSpacial[lv_stage]) * 0.5)) / gv_hybridPushTimeFailure[lv_stage]);
    lv_spawnLocation = PointFromId(498);
    lv_channelWave = gf_CreateHybridPusherGroup(lv_stage, lv_spawnLocation);
    auto00EA946C_g = lv_channelWave;
    auto00EA946C_u = UnitGroupCount(auto00EA946C_g, c_unitCountAll);
    for (;; auto00EA946C_u -= 1) {
        auto00EA946C_var = UnitGroupUnitFromEnd(auto00EA946C_g, auto00EA946C_u);
        if (auto00EA946C_var == null) { break; }
        libCOMI_gf_CreateWarpInEffect(auto00EA946C_var);
    }
    gf_PingHybridSuperPushers(lv_channelWave);
    gf_PushersInfluencePings(lv_channelWave);
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_hybridPusherPlayer, gv_hybridPusherPlayer, libCOMI_ge_CoopAIAttackWaveBuckets__4Medium, libCOMI_ge_CoopAITechLevelBuckets__4LateMid, lv_spawnLocation, true);
    lv_hybridBodyGuards = libCOMI_gf_LastCreatedCoopAttackForce();
    Wait(10.0, c_timeAI);
    UnitCreate(1, "InvisibleEscortFlying", c_unitCreateIgnorePlacement, gv_hybridPusherPlayer, lv_spawnLocation, PointGetFacing(lv_spawnLocation));
    lv_pusherBlockCenter = UnitLastCreated();
    UnitSetState(lv_pusherBlockCenter, c_unitStateTurnSuppressed, false);
    Wait(4.0, c_timeAI);
    if ((UnitGroupCount(lv_channelWave, c_unitCountAlive) == 0)) {
        return true;
    }

    AIAttackWaveSetTargetEscort(gv_hybridPusherPlayer, libNtve_gf_ConvertUnitToUnitGroup(lv_pusherBlockCenter), 0);
    if ((gv_hybridPusher_Boss == "HybridBehemoth")) {
        UnitGroupAddUnitGroup(lv_hybridFrontRow, UnitGroupFilter("HybridReaver", gv_hybridPusherPlayer, lv_channelWave, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        UnitGroupAddUnitGroup(lv_hybridBackRow, UnitGroupFilter("HybridDestroyer", gv_hybridPusherPlayer, lv_channelWave, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        UnitGroupAddUnitGroup(lv_hybridBackRow, UnitGroupFilter("HybridNemesis", gv_hybridPusherPlayer, lv_channelWave, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    }
    else {
        UnitGroupAddUnitGroup(lv_hybridFrontRow, UnitGroupFilter("HybridReaver", gv_hybridPusherPlayer, lv_channelWave, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        UnitGroupAddUnitGroup(lv_hybridFrontRow, UnitGroupFilter("HybridDestroyer", gv_hybridPusherPlayer, lv_channelWave, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        UnitGroupAddUnitGroup(lv_hybridFrontRow, UnitGroupFilter("HybridNemesis", gv_hybridPusherPlayer, lv_channelWave, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    }
    lv_hybridBossRow = UnitGroupFilter(gv_hybridPusher_Boss, gv_hybridPusherPlayer, lv_channelWave, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    if ((UnitGroupCount(lv_hybridBossRow, c_unitCountAlive) > 0)) {
        gf_AssignGuardLocations(lv_pusherBlockCenter, UnitGroupFilter(gv_hybridPusher_Boss, gv_hybridPusherPlayer, lv_channelWave, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 2.0, (360 / UnitGroupCount(lv_hybridBossRow, c_unitCountAlive)), UnitGroupCount(lv_hybridBossRow, c_unitCountAlive));
    }

    lv_bodyguardPos_BaseDistance = 4.0;
    lv_bodyguardPos_AngleSpacing = 15.0;
    lv_bodyguardPos_GuardsPerRow = UnitGroupCount(lv_hybridFrontRow, c_unitCountAlive);
    gf_AssignGuardLocations(lv_pusherBlockCenter, lv_hybridFrontRow, lv_bodyguardPos_BaseDistance, lv_bodyguardPos_AngleSpacing, lv_bodyguardPos_GuardsPerRow);
    lv_bodyguardPos_BaseDistance = -5.0;
    lv_bodyguardPos_AngleSpacing = 15.0;
    lv_bodyguardPos_GuardsPerRow = UnitGroupCount(lv_hybridBackRow, c_unitCountAlive);
    gf_AssignGuardLocations(lv_pusherBlockCenter, lv_hybridBackRow, lv_bodyguardPos_BaseDistance, lv_bodyguardPos_AngleSpacing, lv_bodyguardPos_GuardsPerRow);
    if ((UnitGroupCount(lv_hybridFrontRow, c_unitCountAlive) == 0)) {
        lv_bodyguardPos_BaseDistance = 3.0;
    }
    else {
        lv_bodyguardPos_BaseDistance = 5.0;
    }
    if ((UnitGroupCount(lv_hybridBodyGuards, c_unitCountAlive) != 0)) {
        lv_bodyguardPos_GuardsPerRow = SquareRoot(UnitGroupCount(lv_hybridBodyGuards, c_unitCountAlive));
        lv_bodyguardPos_AngleSpacing = (75.0 / lv_bodyguardPos_GuardsPerRow);
    }

    gf_AssignGuardLocations(lv_pusherBlockCenter, lv_hybridBodyGuards, lv_bodyguardPos_BaseDistance, lv_bodyguardPos_AngleSpacing, lv_bodyguardPos_GuardsPerRow);
    AIAttackWaveSend(gv_hybridPusherPlayer, 0, false);
    while ((libCOMI_gf_GameIsOver() == false) && (UnitGroupCount(lv_channelWave, c_unitCountAlive) > 0)) {
        lv_enemyTargets = UnitGroupAlliance(gv_hybridPusherPlayer, c_unitAllianceEnemy, RegionFromId(10), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        if ((UnitGroupCount(lv_enemyTargets, c_unitCountAlive) > 0)) {
            UnitIssueOrder(lv_pusherBlockCenter, OrderTargetingPoint(AbilityCommand("move", 0), UnitGetPosition(UnitGroupClosestToPoint(lv_enemyTargets, lv_spawnLocation))), c_orderQueueReplace);
        }
        else {
            if ((UnitGroupCount(lv_enemyTargets, c_unitCountAlive) != lv_enemyTargetsCount_Prev)) {
                UnitIssueOrder(lv_pusherBlockCenter, OrderTargetingPoint(AbilityCommand("move", 0), lv_spawnLocation), c_orderQueueReplace);
            }

        }
        lv_enemyTargetsCount_Prev = UnitGroupCount(lv_enemyTargets, c_unitCountAlive);
        Wait(1.0, c_timeAI);
    }
    UnitRemove(lv_pusherBlockCenter);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HybridPushers02_Init () {
    gt_HybridPushers02 = TriggerCreate("gt_HybridPushers02_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hybrid Pushers 03
//--------------------------------------------------------------------------------------------------
bool gt_HybridPushers03_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_channelWave;
    point lv_spawnLocation;
    int lv_stage;
    unitgroup lv_hybridBodyGuards;
    unit lv_pusherBlockCenter;
    int lv_bodyGuardIter;
    fixed lv_bodyguardPos_Distance;
    fixed lv_bodyguardPos_AngleOffset;
    fixed lv_bodyguardPos_BaseDistance;
    fixed lv_bodyguardPos_AngleSpacing;
    fixed lv_bodyguardPos_GuardsPerRow;
    unitgroup lv_hybridFrontRow;
    unitgroup lv_hybridBackRow;
    unitgroup lv_hybridBossRow;
    unitgroup lv_enemyTargets;
    int lv_enemyTargetsCount_Prev;
    wave lv_escortWave;

    // Automatic Variable Declarations
    unitgroup auto5D3B1015_g;
    int auto5D3B1015_u;
    unit auto5D3B1015_var;

    // Variable Initialization
    lv_channelWave = UnitGroupEmpty();
    lv_hybridBodyGuards = UnitGroupEmpty();
    lv_hybridFrontRow = UnitGroupEmpty();
    lv_hybridBackRow = UnitGroupEmpty();
    lv_hybridBossRow = UnitGroupEmpty();
    lv_enemyTargets = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    gf_DelayAttackandEscortWaves(gv_hybridPush_DelayAttacks[lv_stage]);
    lv_stage = ge_HybridAttack_Attack03;
    gv_hybridReverseSpeed = ((gf_DistanceToFailurefromPoint(RegionGetCenter(gv_hybridPushTriggerSpacial[lv_stage]))-(libNtve_gf_WidthOfRegion(gv_hybridPushTriggerSpacial[lv_stage]) * 0.5)) / gv_hybridPushTimeFailure[lv_stage]);
    lv_spawnLocation = PointFromId(500);
    lv_channelWave = gf_CreateHybridPusherGroup(lv_stage, lv_spawnLocation);
    auto5D3B1015_g = lv_channelWave;
    auto5D3B1015_u = UnitGroupCount(auto5D3B1015_g, c_unitCountAll);
    for (;; auto5D3B1015_u -= 1) {
        auto5D3B1015_var = UnitGroupUnitFromEnd(auto5D3B1015_g, auto5D3B1015_u);
        if (auto5D3B1015_var == null) { break; }
        libCOMI_gf_CreateWarpInEffect(auto5D3B1015_var);
    }
    gf_PingHybridSuperPushers(lv_channelWave);
    gf_PushersInfluencePings(lv_channelWave);
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_hybridPusherPlayer, gv_hybridPusherPlayer, libCOMI_ge_CoopAIAttackWaveBuckets__6Larger, libCOMI_ge_CoopAITechLevelBuckets_TechLevel06, lv_spawnLocation, true);
    lv_hybridBodyGuards = libCOMI_gf_LastCreatedCoopAttackForce();
    UnitCreate(1, "InvisibleEscortFlying", c_unitCreateIgnorePlacement, gv_hybridPusherPlayer, PointFromId(500), PointGetFacing(PointFromId(500)));
    lv_pusherBlockCenter = UnitLastCreated();
    UnitSetState(lv_pusherBlockCenter, c_unitStateTurnSuppressed, false);
    Wait(4.0, c_timeAI);
    if ((UnitGroupCount(lv_channelWave, c_unitCountAlive) == 0)) {
        return true;
    }

    AIAttackWaveSetTargetEscort(gv_hybridPusherPlayer, libNtve_gf_ConvertUnitToUnitGroup(lv_pusherBlockCenter), 0);
    if ((gv_hybridPusher_Boss == "HybridBehemoth")) {
        UnitGroupAddUnitGroup(lv_hybridFrontRow, UnitGroupFilter("HybridReaver", gv_hybridPusherPlayer, lv_channelWave, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        UnitGroupAddUnitGroup(lv_hybridBackRow, UnitGroupFilter("HybridDestroyer", gv_hybridPusherPlayer, lv_channelWave, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        UnitGroupAddUnitGroup(lv_hybridBackRow, UnitGroupFilter("HybridNemesis", gv_hybridPusherPlayer, lv_channelWave, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    }
    else {
        UnitGroupAddUnitGroup(lv_hybridFrontRow, UnitGroupFilter("HybridReaver", gv_hybridPusherPlayer, lv_channelWave, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        UnitGroupAddUnitGroup(lv_hybridFrontRow, UnitGroupFilter("HybridDestroyer", gv_hybridPusherPlayer, lv_channelWave, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        UnitGroupAddUnitGroup(lv_hybridFrontRow, UnitGroupFilter("HybridNemesis", gv_hybridPusherPlayer, lv_channelWave, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    }
    lv_hybridBossRow = UnitGroupFilter(gv_hybridPusher_Boss, gv_hybridPusherPlayer, lv_channelWave, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    if ((UnitGroupCount(lv_hybridBossRow, c_unitCountAlive) > 0)) {
        gf_AssignGuardLocations(lv_pusherBlockCenter, UnitGroupFilter(gv_hybridPusher_Boss, gv_hybridPusherPlayer, lv_channelWave, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 2.0, (360 / UnitGroupCount(lv_hybridBossRow, c_unitCountAlive)), UnitGroupCount(lv_hybridBossRow, c_unitCountAlive));
    }

    lv_bodyguardPos_BaseDistance = 4.0;
    lv_bodyguardPos_AngleSpacing = 15.0;
    lv_bodyguardPos_GuardsPerRow = UnitGroupCount(lv_hybridFrontRow, c_unitCountAlive);
    gf_AssignGuardLocations(lv_pusherBlockCenter, lv_hybridFrontRow, lv_bodyguardPos_BaseDistance, lv_bodyguardPos_AngleSpacing, lv_bodyguardPos_GuardsPerRow);
    lv_bodyguardPos_BaseDistance = -5.0;
    lv_bodyguardPos_AngleSpacing = 15.0;
    lv_bodyguardPos_GuardsPerRow = UnitGroupCount(lv_hybridBackRow, c_unitCountAlive);
    gf_AssignGuardLocations(lv_pusherBlockCenter, lv_hybridBackRow, lv_bodyguardPos_BaseDistance, lv_bodyguardPos_AngleSpacing, lv_bodyguardPos_GuardsPerRow);
    if ((UnitGroupCount(lv_hybridFrontRow, c_unitCountAlive) == 0)) {
        lv_bodyguardPos_BaseDistance = 3.0;
    }
    else {
        lv_bodyguardPos_BaseDistance = 5.0;
    }
    if ((UnitGroupCount(lv_hybridBodyGuards, c_unitCountAlive) != 0)) {
        lv_bodyguardPos_GuardsPerRow = SquareRoot(UnitGroupCount(lv_hybridBodyGuards, c_unitCountAlive));
        lv_bodyguardPos_AngleSpacing = (75.0 / lv_bodyguardPos_GuardsPerRow);
    }

    gf_AssignGuardLocations(lv_pusherBlockCenter, lv_hybridBodyGuards, lv_bodyguardPos_BaseDistance, lv_bodyguardPos_AngleSpacing, lv_bodyguardPos_GuardsPerRow);
    AIAttackWaveSend(gv_hybridPusherPlayer, 0, false);
    lv_escortWave = WaveLastCreated();
    while ((libCOMI_gf_GameIsOver() == false) && (UnitGroupCount(lv_channelWave, c_unitCountAlive) > 0)) {
        lv_enemyTargets = UnitGroupAlliance(gv_hybridPusherPlayer, c_unitAllianceEnemy, RegionFromId(2), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        if ((UnitGroupCount(lv_enemyTargets, c_unitCountAlive) > 0)) {
            UnitIssueOrder(lv_pusherBlockCenter, OrderTargetingPoint(AbilityCommand("move", 0), UnitGetPosition(UnitGroupClosestToPoint(lv_enemyTargets, lv_spawnLocation))), c_orderQueueReplace);
        }
        else {
            if ((UnitGroupCount(lv_enemyTargets, c_unitCountAlive) != lv_enemyTargetsCount_Prev)) {
                UnitIssueOrder(lv_pusherBlockCenter, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(500)), c_orderQueueReplace);
            }

        }
        lv_enemyTargetsCount_Prev = UnitGroupCount(lv_enemyTargets, c_unitCountAlive);
        Wait(1.0, c_timeAI);
    }
    UnitRemove(lv_pusherBlockCenter);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HybridPushers03_Init () {
    gt_HybridPushers03 = TriggerCreate("gt_HybridPushers03_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hybrid Pushers 04
//--------------------------------------------------------------------------------------------------
bool gt_HybridPushers04_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_channelWave;
    point lv_spawnLocation;
    int lv_stage;
    unitgroup lv_hybridBodyGuards_Left;
    unitgroup lv_hybridBodyGuards_Right;
    int lv_tugOfWarPathIter;

    // Automatic Variable Declarations
    unitgroup autoD047C030_g;
    int autoD047C030_u;
    unit autoD047C030_var;
    int auto6FF03B61_ae;
    const int auto6FF03B61_ai = -3;

    // Variable Initialization
    lv_channelWave = UnitGroupEmpty();
    lv_hybridBodyGuards_Left = UnitGroupEmpty();
    lv_hybridBodyGuards_Right = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    gf_DelayAttackandEscortWaves(gv_hybridPush_DelayAttacks[lv_stage]);
    lv_stage = ge_HybridAttack_Attack04;
    gv_hybridReverseSpeed = ((gf_DistanceToFailurefromPoint(RegionGetCenter(gv_hybridPushTriggerSpacial[lv_stage]))-(libNtve_gf_WidthOfRegion(gv_hybridPushTriggerSpacial[lv_stage]) * 0.5)) / gv_hybridPushTimeFailure[lv_stage]);
    lv_spawnLocation = PointFromId(510);
    lv_channelWave = gf_CreateHybridPusherGroup(lv_stage, lv_spawnLocation);
    autoD047C030_g = lv_channelWave;
    autoD047C030_u = UnitGroupCount(autoD047C030_g, c_unitCountAll);
    for (;; autoD047C030_u -= 1) {
        autoD047C030_var = UnitGroupUnitFromEnd(autoD047C030_g, autoD047C030_u);
        if (autoD047C030_var == null) { break; }
        libCOMI_gf_CreateWarpInEffect(autoD047C030_var);
    }
    gf_PingHybridSuperPushers(lv_channelWave);
    gf_PushersInfluencePings(lv_channelWave);
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_hybridPusherPlayer, gv_hybridPusherPlayer, libCOMI_ge_CoopAIAttackWaveBuckets__6Larger, libCOMI_ge_CoopAITechLevelBuckets_TechLevel06, PointFromId(518), true);
    lv_hybridBodyGuards_Left = libCOMI_gf_LastCreatedCoopAttackForce();
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_hybridPusherPlayer, gv_hybridPusherPlayer, libCOMI_ge_CoopAIAttackWaveBuckets__6Larger, libCOMI_ge_CoopAITechLevelBuckets_TechLevel06, PointFromId(519), true);
    lv_hybridBodyGuards_Right = libCOMI_gf_LastCreatedCoopAttackForce();
    while (!((libNtve_gf_UnitGroupIsDead(lv_channelWave) == true))) {
        Wait(1.0, c_timeGame);
    }
    UnitGroupAddUnitGroup(lv_hybridBodyGuards_Right, lv_hybridBodyGuards_Left);
    AIAttackWaveSetTargetEscortNL(gv_hybridPusherPlayer, libNtve_gf_ConvertUnitToUnitGroup(gv_tugOfWarBubbleUnit), 1);
    auto6FF03B61_ae = gv_tugOfWar_ForwardWaypoint;
    lv_tugOfWarPathIter = gv_tugOfWar_WaypointMax;
    for ( ; ( (auto6FF03B61_ai >= 0 && lv_tugOfWarPathIter <= auto6FF03B61_ae) || (auto6FF03B61_ai < 0 && lv_tugOfWarPathIter >= auto6FF03B61_ae) ) ; lv_tugOfWarPathIter += auto6FF03B61_ai ) {
        AIAttackWaveAddWaypoint(gv_hybridPusherPlayer, gf_GetPathWaypoint(lv_tugOfWarPathIter), false);
    }
    gf_AssignGuardLocations(gv_tugOfWarBubbleUnit, lv_hybridBodyGuards_Right, 4.0, 10.0, 10.0);
    AIAttackWaveSend(gv_hybridPusherPlayer, 0, false);
    gv_finalHybridWaveDefeated = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HybridPushers04_Init () {
    gt_HybridPushers04 = TriggerCreate("gt_HybridPushers04_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Set Effort Values
//--------------------------------------------------------------------------------------------------
bool gt_SetEffortValues_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    while (!((libNtve_gf_UnitInRegion(gv_tugOfWarBubbleUnit, gv_hybridPushTriggerSpacial[ge_HybridAttack_Attack01]) == true))) {
        Wait(1.0, c_timeAI);
    }
    libCOMI_gf_SetMissionEffort(15.0);
    while (!((libNtve_gf_UnitInRegion(gv_tugOfWarBubbleUnit, gv_hybridPushTriggerSpacial[ge_HybridAttack_Attack02]) == true))) {
        Wait(1.0, c_timeAI);
    }
    libCOMI_gf_SetMissionEffort(33.0);
    while (!((libNtve_gf_UnitInRegion(gv_tugOfWarBubbleUnit, gv_hybridPushTriggerSpacial[ge_HybridAttack_Attack03]) == true))) {
        Wait(1.0, c_timeAI);
    }
    libCOMI_gf_SetMissionEffort(66.0);
    while (!((libNtve_gf_UnitInRegion(gv_tugOfWarBubbleUnit, gv_hybridPushTriggerSpacial[ge_HybridAttack_Attack04]) == true))) {
        Wait(1.0, c_timeAI);
    }
    libCOMI_gf_SetMissionEffort(100.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SetEffortValues_Init () {
    gt_SetEffortValues = TriggerCreate("gt_SetEffortValues_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Stat - Forward Push Time
//--------------------------------------------------------------------------------------------------
bool gt_StatForwardPushTime_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_localVictoryStatPushTime;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    while ((gv_tugOfWar_State == ge_TugOfWarState_Forward) && (libCOMI_gf_GameIsOver() == false)) {
        Wait(1.0, c_timeAI);
        lv_localVictoryStatPushTime += 1;
        if ((lv_localVictoryStatPushTime > gv_bestForwardPushTime)) {
            gv_bestForwardPushTime = lv_localVictoryStatPushTime;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StatForwardPushTime_Init () {
    gt_StatForwardPushTime = TriggerCreate("gt_StatForwardPushTime_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Stat - Push Back Distance
//--------------------------------------------------------------------------------------------------
bool gt_StatPushBackDistance_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_previousLocation;

    // Automatic Variable Declarations
    playergroup auto4831FFC9_g;
    int auto4831FFC9_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    while (((gv_tugOfWar_State == ge_TugOfWarState_Reverse) || (gv_tugOfWar_State == ge_TugOfWarState_ReverseSuper)) && (libCOMI_gf_GameIsOver() == false)) {
        if ((lv_previousLocation != null)) {
            gv_totalDistanceJinaraPushedBack += DistanceBetweenPoints(UnitGetPosition(gv_jinara), lv_previousLocation);
        }

        lv_previousLocation = UnitGetPosition(gv_jinara);
        auto4831FFC9_g = libCOMI_gf_GetAlliedCommandersPlayers();
        auto4831FFC9_var = -1;
        while (true) {
            auto4831FFC9_var = PlayerGroupNextPlayer(auto4831FFC9_g, auto4831FFC9_var);
            if (auto4831FFC9_var < 0) { break; }
            PlayerScoreValueSetFromFixed(auto4831FFC9_var, "SlaynPush", gv_totalDistanceJinaraPushedBack);
        }
        Wait(0.25, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StatPushBackDistance_Init () {
    gt_StatPushBackDistance = TriggerCreate("gt_StatPushBackDistance_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tug Of War Initialize
//--------------------------------------------------------------------------------------------------
bool gt_TugOfWarInitialize_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto74A1F8EB_g;
    int auto74A1F8EB_var;
    playergroup autoC753C263_g;
    int autoC753C263_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto74A1F8EB_g = libCOMI_gv_vU_AlliedCommanders;
    auto74A1F8EB_var = -1;
    while (true) {
        auto74A1F8EB_var = PlayerGroupNextPlayer(auto74A1F8EB_g, auto74A1F8EB_var);
        if (auto74A1F8EB_var < 0) { break; }
        VisExploreArea(auto74A1F8EB_var, RegionFromId(3), true, false);
        libCOMI_gf_SetAllianceCoop(auto74A1F8EB_var, gv_pLAYER_08_JINARA, libNtve_ge_AllianceSetting_AllyWithSharedVision);
        libCOMI_gf_SetAllianceCoop(auto74A1F8EB_var, gv_pLAYER_09_AMONS_CHAMPION, libNtve_ge_AllianceSetting_NeutralWithSharedVision);
        libCOMI_gf_ShareVisionofUnitCoop(gv_jinara, true, auto74A1F8EB_var);
    }
    autoC753C263_g = libCOMI_gv_vU_Enemies;
    autoC753C263_var = -1;
    while (true) {
        autoC753C263_var = PlayerGroupNextPlayer(autoC753C263_g, autoC753C263_var);
        if (autoC753C263_var < 0) { break; }
        libCOMI_gf_ShareVisionofUnitCoop(gv_jinara, true, autoC753C263_var);
    }
    gv_tugOfWar_ForwardWaypoint = 4;
    gv_tugOfWar_ReverseWaypoint = 2;
    UnitSetState(gv_tugOfWarBubbleUnit, c_unitStateTurnSuppressed, false);
    libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_Primary, UnitGetPosition(gv_jinara), StringExternal("Param/Value/64995A61"));
    gv_tugOfWar_Ping = PingLastCreated();
    PingSetUnit(PingLastCreated(), gv_jinara);
    gv_tugOfWar_State = ge_TugOfWarState_Hold;
    TriggerExecute(gt_TugOfWarController, true, false);
    TriggerExecute(gt_TugOfWarJinaraAmonsChampionAttackLogic, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TugOfWarInitialize_Init () {
    gt_TugOfWarInitialize = TriggerCreate("gt_TugOfWarInitialize_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tug Of War Controller
//--------------------------------------------------------------------------------------------------
bool gt_TugOfWarController_Func (bool testConds, bool runActions) {
    int init_i;

    // Variable Declarations
    string lv_tugOfWarPointName;
    int[2] lv_superPusherPings;

    // Automatic Variable Declarations
    int autoD6090633_val;

    // Variable Initialization
    lv_tugOfWarPointName = "PathWaypoint";
    for (init_i = 0; init_i <= 1; init_i += 1) {
        lv_superPusherPings[init_i] = c_invalidPingId;
    }

    // Actions
    if (!runActions) {
        return true;
    }

    while ((libCOMI_gf_GameIsOver() == false)) {
        TriggerExecute(gt_TugOfWarStateUpdate, true, true);
        if ((gv_tugOfWar_ForwardWaypoint < gv_tugOfWar_WaypointMax) && (DistanceBetweenPoints(UnitGetPosition(gv_tugOfWarBubbleUnit), PointFromName((lv_tugOfWarPointName + gf_FormatIntegerIntoMultiDigitString(gv_tugOfWar_ForwardWaypoint, 1)))) <= 1.0)) {
            gv_tugOfWar_ForwardWaypoint += 1;
            gv_tugOfWar_ReverseWaypoint += 1;
        }
        else {
            if ((gv_tugOfWar_ReverseWaypoint > 0) && (DistanceBetweenPoints(UnitGetPosition(gv_tugOfWarBubbleUnit), PointFromName((lv_tugOfWarPointName + gf_FormatIntegerIntoMultiDigitString(gv_tugOfWar_ReverseWaypoint, 1)))) <= 1.0)) {
                gv_tugOfWar_ForwardWaypoint -= 1;
                gv_tugOfWar_ReverseWaypoint -= 1;
            }

        }
        if ((gv_tugOfWar_ForwardWaypoint >= gv_tugOfWar_Waypoint_FarthestForward)) {
            gv_tugOfWar_Waypoint_FarthestForward = gv_tugOfWar_ForwardWaypoint;
        }

        autoD6090633_val = gv_tugOfWar_State;
        if (autoD6090633_val == ge_TugOfWarState_Paused) {
            UnitIssueOrder(gv_tugOfWarBubbleUnit, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
        }
        else if (autoD6090633_val == ge_TugOfWarState_Hold) {
            UnitIssueOrder(gv_tugOfWarBubbleUnit, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
        }
        else if (autoD6090633_val == ge_TugOfWarState_Forward) {
            UnitIssueOrder(gv_tugOfWarBubbleUnit, OrderTargetingPoint(AbilityCommand("move", 0), PointFromName((lv_tugOfWarPointName + gf_FormatIntegerIntoMultiDigitString(gv_tugOfWar_ForwardWaypoint, 1)))), c_orderQueueReplace);
        }
        else if (autoD6090633_val == ge_TugOfWarState_Reverse) {
            UnitIssueOrder(gv_tugOfWarBubbleUnit, OrderTargetingPoint(AbilityCommand("move", 0), PointFromName((lv_tugOfWarPointName + gf_FormatIntegerIntoMultiDigitString(gv_tugOfWar_ReverseWaypoint, 1)))), c_orderQueueReplace);
        }
        else if (autoD6090633_val == ge_TugOfWarState_ReverseSuper) {
            UnitIssueOrder(gv_tugOfWarBubbleUnit, OrderTargetingPoint(AbilityCommand("move", 0), PointFromName((lv_tugOfWarPointName + gf_FormatIntegerIntoMultiDigitString(gv_tugOfWar_ReverseWaypoint, 1)))), c_orderQueueReplace);
        }
        else {
        }
        UnitIssueOrder(gv_jinara, OrderTargetingPoint(AbilityCommand("move", 0), libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(gv_tugOfWarBubbleUnit), 1.5, PointFromName(("PathWaypoint" + gf_FormatIntegerIntoMultiDigitString(gv_tugOfWar_ReverseWaypoint, 1))))), c_orderQueueReplace);
        UnitIssueOrder(gv_amonsChampion, OrderTargetingPoint(AbilityCommand("move", 0), libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(gv_tugOfWarBubbleUnit), 1.5, PointFromName(("PathWaypoint" + gf_FormatIntegerIntoMultiDigitString(gv_tugOfWar_ForwardWaypoint, 1))))), c_orderQueueReplace);
        libNtve_gf_MakeUnitFacePoint(gv_jinara, UnitGetPosition(gv_amonsChampion), 0.0);
        libNtve_gf_MakeUnitFacePoint(gv_amonsChampion, UnitGetPosition(gv_jinara), 0.0);
        TriggerExecute(gt_TugOfWarMoveBossTarget, true, false);
        if ((gv_tugOfWar_State == ge_TugOfWarState_Reverse)) {
            PingSetRotation(gv_tugOfWar_Ping, (UnitGetFacing(gv_jinara) + 180.0));
        }
        else {
            if ((gv_tugOfWar_State == ge_TugOfWarState_Forward)) {
                PingSetRotation(gv_tugOfWar_Ping, UnitGetFacing(gv_jinara));
            }
            else {
                PingSetRotation(gv_tugOfWar_Ping, 270.0);
            }
        }
        Wait(0.1, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TugOfWarController_Init () {
    gt_TugOfWarController = TriggerCreate("gt_TugOfWarController_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tug Of War State Update
//--------------------------------------------------------------------------------------------------
bool gt_TugOfWarStateUpdate_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_friendlyUnitsNearTugOfWar;
    unitgroup lv_enemyUnitsNearTugOfWar;
    int lv_presenceCount;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_friendlyUnitsNearTugOfWar = UnitGroupEmpty();
    lv_enemyUnitsNearTugOfWar = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_tugOfWar_State != ge_TugOfWarState_Paused) && (gv_tugOfWar_State != ge_TugOfWarState_EventControlled)) {
        TriggerExecute(gt_TugOfWarHybridSuperPusher, true, true);
        if ((gv_hybridSuperPusherState_Current == false)) {
            gv_tugOfWar_Presence_EnemyAI = !(libNtve_gf_UnitGroupIsDead(gf_GetPushingUnitsNearAmonsChampion(1)));
            gv_tugOfWar_Presence_SuperPushers = false;
        }
        else {
            gv_tugOfWar_Presence_EnemyAI = false;
            gv_tugOfWar_Presence_SuperPushers = true;
        }
        if ((gv_tugOfWar_Presence_EnemyAI == false) && (gv_tugOfWar_Presence_SuperPushers == false) && (gf_AllAlliesSupportsJinara() == true)) {
            if ((gv_tugOfWar_State != ge_TugOfWarState_Forward)) {
                gv_tugOfWar_State = ge_TugOfWarState_Forward;
                PingSetModel(gv_tugOfWar_Ping, "PingArrow");
                PingSetColor(gv_tugOfWar_Ping, Color(0.00, 100.00, 0.00));
                PingSetTooltip(gv_tugOfWar_Ping, StringExternal("Param/Value/F1FA574E"));
                PingSetScale(gv_tugOfWar_Ping, 1.0);
                UnitSetPropertyFixed(gv_tugOfWarBubbleUnit, c_unitPropMovementSpeed, gf_TugOfWarGetSpeed(gv_tugOfWar_State));
                UnitSetPropertyFixed(gv_jinara, c_unitPropMovementSpeed, (UnitGetPropertyFixed(gv_tugOfWarBubbleUnit, c_unitPropMovementSpeed, c_unitPropCurrent) * 1.5));
                UnitSetPropertyFixed(gv_amonsChampion, c_unitPropMovementSpeed, (UnitGetPropertyFixed(gv_tugOfWarBubbleUnit, c_unitPropMovementSpeed, c_unitPropCurrent) * 1.5));
                TimerPause(gv_losingGroundTimer01, true);
                TimerPause(gv_losingGroundTimer02, true);
                TriggerExecute(gt_StatForwardPushTime, true, false);
            }

        }
        else if ((gv_tugOfWar_Presence_EnemyAI == true) && (gv_tugOfWar_Presence_SuperPushers == false) && (gf_GetAlliedSupportingPlayers() == 0)) {
            if ((gv_tugOfWar_State != ge_TugOfWarState_Reverse)) {
                gv_tugOfWar_State = ge_TugOfWarState_Reverse;
                PingSetModel(gv_tugOfWar_Ping, "PingArrow");
                PingSetColor(gv_tugOfWar_Ping, Color(100.00, 0.00, 0.00));
                PingSetTooltip(gv_tugOfWar_Ping, StringExternal("Param/Value/7110633D"));
                PingSetScale(gv_tugOfWar_Ping, 1.0);
                UnitSetPropertyFixed(gv_tugOfWarBubbleUnit, c_unitPropMovementSpeed, gf_TugOfWarGetSpeed(gv_tugOfWar_State));
                UnitSetPropertyFixed(gv_jinara, c_unitPropMovementSpeed, (UnitGetPropertyFixed(gv_tugOfWarBubbleUnit, c_unitPropMovementSpeed, c_unitPropCurrent) * 1.5));
                UnitSetPropertyFixed(gv_amonsChampion, c_unitPropMovementSpeed, (UnitGetPropertyFixed(gv_tugOfWarBubbleUnit, c_unitPropMovementSpeed, c_unitPropCurrent) * 1.5));
                TimerStart(gv_losingGroundTimer01, 30.0, false, c_timeGame);
                TimerStart(gv_losingGroundTimer02, 60.0, false, c_timeGame);
                TriggerExecute(gt_StatPushBackDistance, true, false);
            }

        }
        else if ((gv_tugOfWar_Presence_SuperPushers == true)) {
            if ((gv_tugOfWar_State != ge_TugOfWarState_ReverseSuper)) {
                gv_tugOfWar_State = ge_TugOfWarState_ReverseSuper;
                PingSetModel(gv_tugOfWar_Ping, "PingWarning");
                PingSetColor(gv_tugOfWar_Ping, Color(100.00, 0.00, 0.00));
                PingSetTooltip(gv_tugOfWar_Ping, StringExternal("Param/Value/65756038"));
                PingSetScale(gv_tugOfWar_Ping, 1.0);
                UnitSetPropertyFixed(gv_tugOfWarBubbleUnit, c_unitPropMovementSpeed, gf_TugOfWarGetSpeed(gv_tugOfWar_State));
                UnitSetPropertyFixed(gv_jinara, c_unitPropMovementSpeed, (UnitGetPropertyFixed(gv_tugOfWarBubbleUnit, c_unitPropMovementSpeed, c_unitPropCurrent) * 1.5));
                UnitSetPropertyFixed(gv_amonsChampion, c_unitPropMovementSpeed, (UnitGetPropertyFixed(gv_tugOfWarBubbleUnit, c_unitPropMovementSpeed, c_unitPropCurrent) * 1.5));
                TimerStart(gv_losingGroundTimer01, 30.0, false, c_timeGame);
                TimerStart(gv_losingGroundTimer02, 60.0, false, c_timeGame);
                TriggerExecute(gt_StatPushBackDistance, true, false);
            }

        }
        else if (true) {
            if ((gv_tugOfWar_State != ge_TugOfWarState_Hold)) {
                gv_tugOfWar_State = ge_TugOfWarState_Hold;
                PingSetModel(gv_tugOfWar_Ping, "PingCircleImportant");
                PingSetColor(gv_tugOfWar_Ping, Color(100.00, 100.00, 100.00));
                PingSetTooltip(gv_tugOfWar_Ping, StringExternal("Param/Value/4493EF8F"));
                PingSetScale(gv_tugOfWar_Ping, 0.33);
                UnitSetPropertyFixed(gv_tugOfWarBubbleUnit, c_unitPropMovementSpeed, gf_TugOfWarGetSpeed(gv_tugOfWar_State));
                UnitSetPropertyFixed(gv_jinara, c_unitPropMovementSpeed, (UnitGetPropertyFixed(gv_tugOfWarBubbleUnit, c_unitPropMovementSpeed, c_unitPropCurrent) * 1.5));
                UnitSetPropertyFixed(gv_amonsChampion, c_unitPropMovementSpeed, (UnitGetPropertyFixed(gv_tugOfWarBubbleUnit, c_unitPropMovementSpeed, c_unitPropCurrent) * 1.5));
                TimerPause(gv_losingGroundTimer01, true);
                TimerPause(gv_losingGroundTimer02, true);
                TriggerExecute(gt_RemindertoSupportTransmissionQ, true, false);
            }

        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TugOfWarStateUpdate_Init () {
    gt_TugOfWarStateUpdate = TriggerCreate("gt_TugOfWarStateUpdate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tug Of War Move Boss Target
//--------------------------------------------------------------------------------------------------
bool gt_TugOfWarMoveBossTarget_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_friendlyUnitsNearTugOfWar;
    point lv_escortTargetRestingLocation;

    // Automatic Variable Declarations
    playergroup auto216E8532_g;
    int auto216E8532_var;

    // Variable Initialization
    lv_friendlyUnitsNearTugOfWar = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto216E8532_g = libCOMI_gv_vU_AlliedCommanders;
    auto216E8532_var = -1;
    while (true) {
        auto216E8532_var = PlayerGroupNextPlayer(auto216E8532_g, auto216E8532_var);
        if (auto216E8532_var < 0) { break; }
        UnitGroupAddUnitGroup(lv_friendlyUnitsNearTugOfWar, gf_GetSupportingUnitsNearJinara(auto216E8532_var, 0));
    }
    if ((UnitGroupCount(lv_friendlyUnitsNearTugOfWar, c_unitCountAlive) > 0)) {
        UnitIssueOrder(gv_tugOfWarEscortTargetUnit, OrderTargetingPoint(AbilityCommand("move", 0), UnitGroupCenterOfGroup(lv_friendlyUnitsNearTugOfWar)), c_orderQueueReplace);
    }
    else if (true) {
        lv_escortTargetRestingLocation = libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(gv_amonsChampion), 6.0, PointFromName(("PathWaypoint" + gf_FormatIntegerIntoMultiDigitString(gv_tugOfWar_ForwardWaypoint, 1))));
        UnitIssueOrder(gv_tugOfWarEscortTargetUnit, OrderTargetingPoint(AbilityCommand("move", 0), lv_escortTargetRestingLocation), c_orderQueueReplace);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TugOfWarMoveBossTarget_Init () {
    gt_TugOfWarMoveBossTarget = TriggerCreate("gt_TugOfWarMoveBossTarget_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tug Of War Ji'nara/Amon's Champion Attack Logic
//--------------------------------------------------------------------------------------------------
bool gt_TugOfWarJinaraAmonsChampionAttackLogic_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int autoFCAF62D2_val;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while ((libCOMI_gf_GameIsOver() == false)) {
        if ((gv_tugOfWar_State != ge_TugOfWarState_ReverseSuper)) {
            autoFCAF62D2_val = RandomInt(1, 3);
            if (autoFCAF62D2_val == 1) {
                UnitIssueOrder(gv_jinara, Order(AbilityCommand("PitAlarakFightDummyAbilityCancel", 0)), c_orderQueueReplace);
                UnitIssueOrder(gv_amonsChampion, Order(AbilityCommand("PitMalashFightDummyAbilityCancel", 0)), c_orderQueueReplace);
                Wait(0.5, c_timeGame);
                UnitIssueOrder(gv_jinara, OrderTargetingUnit(AbilityCommand("PitAlarakFightDummyAbility", 0), gv_amonsChampion), c_orderQueueReplace);
                Wait(RandomFixed(1.5, 3.0), c_timeGame);
            }
            else if (autoFCAF62D2_val == 2) {
                UnitIssueOrder(gv_jinara, Order(AbilityCommand("PitAlarakFightDummyAbilityCancel", 0)), c_orderQueueReplace);
                UnitIssueOrder(gv_amonsChampion, Order(AbilityCommand("PitMalashFightDummyAbilityCancel", 0)), c_orderQueueReplace);
                Wait(0.5, c_timeGame);
                UnitIssueOrder(gv_amonsChampion, OrderTargetingUnit(AbilityCommand("PitMalashFightDummyAbility", 0), gv_jinara), c_orderQueueReplace);
                Wait(RandomFixed(1.5, 3.0), c_timeGame);
            }
            else if (autoFCAF62D2_val == 3) {
                UnitIssueOrder(gv_jinara, Order(AbilityCommand("PitAlarakFightDummyAbilityCancel", 0)), c_orderQueueReplace);
                UnitIssueOrder(gv_amonsChampion, Order(AbilityCommand("PitMalashFightDummyAbilityCancel", 0)), c_orderQueueReplace);
                Wait(0.5, c_timeGame);
                if ((gv_tugOfWar_State == ge_TugOfWarState_Forward)) {
                    UnitIssueOrder(gv_jinara, OrderTargetingUnit(AbilityCommand("PitAlarakFightDummyAbility", 0), gv_amonsChampion), c_orderQueueReplace);
                }
                else {
                    UnitIssueOrder(gv_amonsChampion, OrderTargetingUnit(AbilityCommand("PitMalashFightDummyAbility", 0), gv_jinara), c_orderQueueReplace);
                }
                Wait(RandomFixed(1.5, 3.0), c_timeGame);
            }
            else {
            }
        }
        else {
            UnitIssueOrder(gv_jinara, Order(AbilityCommand("PitAlarakFightDummyAbilityCancel", 0)), c_orderQueueReplace);
            UnitIssueOrder(gv_amonsChampion, Order(AbilityCommand("PitMalashFightDummyAbilityCancel", 0)), c_orderQueueReplace);
            Wait(0.5, c_timeGame);
            UnitIssueOrder(gv_amonsChampion, OrderTargetingUnit(AbilityCommand("PitMalashFightDummyAbility", 0), gv_jinara), c_orderQueueReplace);
            Wait(RandomFixed(1.5, 3.0), c_timeGame);
        }
        Wait(0.5, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TugOfWarJinaraAmonsChampionAttackLogic_Init () {
    gt_TugOfWarJinaraAmonsChampionAttackLogic = TriggerCreate("gt_TugOfWarJinaraAmonsChampionAttackLogic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tug Of War First Time Player At Tug Of War Q
//--------------------------------------------------------------------------------------------------
bool gt_TugOfWarFirstTimePlayerAtTugOfWarQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player01Assists;
    int lv_player02Assists;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gf_AllAlliesSupportsJinara() == true)) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((PlayerGroupCount(libCOMI_gf_GetAlliedCommandersPlayers()) != 2)) {
        return true;
    }

    TriggerQueueEnter();
    libCOMI_gf_PingMinimapCampaign(PlayerGroupAll(), UnitGetPosition(gv_jinara), 6.0, Color(100.00, 0.00, 0.00));
    Wait(2.0, c_timeGame);
    lv_player01Assists = UnitGroupCount(gf_GetSupportingUnitsNearJinara(PlayerGroupPlayer(libCOMI_gf_GetAlliedCommandersPlayers(), 1), 0), c_unitCountAlive);
    lv_player02Assists = UnitGroupCount(gf_GetSupportingUnitsNearJinara(PlayerGroupPlayer(libCOMI_gf_GetAlliedCommandersPlayers(), 2), 0), c_unitCountAlive);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    if (((lv_player01Assists == 0) || (lv_player02Assists == 0))) {
        libCOMI_gf_SendMissionTransmission("OneSupportCoA", false, -1);
        libCOMI_gf_WaitForMissionTransmission();
    }
    else {
        libCOMI_gf_SendMissionTransmission("BothSupportCoA", true, -1);
    }
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TugOfWarFirstTimePlayerAtTugOfWarQ_Init () {
    gt_TugOfWarFirstTimePlayerAtTugOfWarQ = TriggerCreate("gt_TugOfWarFirstTimePlayerAtTugOfWarQ_Func");
    TriggerAddEventTimePeriodic(gt_TugOfWarFirstTimePlayerAtTugOfWarQ, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tug Of War First Time Enemy At Tug Of War Q
//--------------------------------------------------------------------------------------------------
bool gt_TugOfWarFirstTimeEnemyAtTugOfWarQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto828A062B_g;
    int auto828A062B_var;

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((TimerGetRemaining(gv_announcerLineCooldown) <= 0.0))) {
            return false;
        }

        if (!((UnitGroupCount(gf_GetPushingUnitsNearAmonsChampion(1), c_unitCountAlive) > 0))) {
            return false;
        }

        if (!((gf_GetAlliedSupportingPlayers() == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    auto828A062B_g = libCOMI_gf_GetAlliedCommandersPlayers();
    auto828A062B_var = -1;
    while (true) {
        auto828A062B_var = PlayerGroupNextPlayer(auto828A062B_g, auto828A062B_var);
        if (auto828A062B_var < 0) { break; }
        UIAlertPoint("Trigger", auto828A062B_var, StringExternal("Param/Value/F751B7D8"), null, UnitGetPosition(gv_jinara));
    }
    libCOMI_gf_PingMinimapCampaign(PlayerGroupAll(), UnitGetPosition(gv_jinara), 6.0, Color(100.00, 0.00, 0.00));
    Wait(2.0, c_timeGame);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("EnemySupportCoA", true, -1);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TimerStart(gv_announcerLineCooldown, gv_c_AnnouncerLineCooldown_Amount, false, c_timeReal);
    TriggerQueueExit();
    Wait(90.0, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TugOfWarFirstTimeEnemyAtTugOfWarQ_Init () {
    gt_TugOfWarFirstTimeEnemyAtTugOfWarQ = TriggerCreate("gt_TugOfWarFirstTimeEnemyAtTugOfWarQ_Func");
    TriggerAddEventTimePeriodic(gt_TugOfWarFirstTimeEnemyAtTugOfWarQ, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tug Of War Losing Ground 01 Warning Q
//--------------------------------------------------------------------------------------------------
bool gt_TugOfWarLosingGround01WarningQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto13A0C25E_g;
    int auto13A0C25E_var;

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_tugOfWar_ReverseWaypoint > 1))) {
            return false;
        }

        if (!((gv_tugOfWar_State == ge_TugOfWarState_Reverse))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    auto13A0C25E_g = libCOMI_gf_GetAlliedCommandersPlayers();
    auto13A0C25E_var = -1;
    while (true) {
        auto13A0C25E_var = PlayerGroupNextPlayer(auto13A0C25E_g, auto13A0C25E_var);
        if (auto13A0C25E_var < 0) { break; }
        UIAlertPoint("Trigger", auto13A0C25E_var, StringExternal("Param/Value/62C4A983"), null, UnitGetPosition(gv_jinara));
    }
    libCOMI_gf_PingMinimapCampaign(PlayerGroupAll(), UnitGetPosition(gv_jinara), 6.0, Color(100.00, 0.00, 0.00));
    Wait(2.0, c_timeGame);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("HalfDefeatCoA", true, -1);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TimerStart(gv_announcerLineCooldown, gv_c_AnnouncerLineCooldown_Amount, false, c_timeReal);
    TriggerQueueExit();
    if ((gv_tugOfWarLosingGround01Count == 4)) {
        gv_tugOfWarLosingGround01Count = 1;
    }
    else {
        gv_tugOfWarLosingGround01Count += 1;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TugOfWarLosingGround01WarningQ_Init () {
    gt_TugOfWarLosingGround01WarningQ = TriggerCreate("gt_TugOfWarLosingGround01WarningQ_Func");
    TriggerAddEventTimer(gt_TugOfWarLosingGround01WarningQ, gv_losingGroundTimer01);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tug Of War Losing Ground 02 Warning Q
//--------------------------------------------------------------------------------------------------
bool gt_TugOfWarLosingGround02WarningQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoC6ACE757_g;
    int autoC6ACE757_var;

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_tugOfWar_ReverseWaypoint > 1))) {
            return false;
        }

        if (!((gv_tugOfWar_State == ge_TugOfWarState_Reverse))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    autoC6ACE757_g = libCOMI_gf_GetAlliedCommandersPlayers();
    autoC6ACE757_var = -1;
    while (true) {
        autoC6ACE757_var = PlayerGroupNextPlayer(autoC6ACE757_g, autoC6ACE757_var);
        if (autoC6ACE757_var < 0) { break; }
        UIAlertPoint("Trigger", autoC6ACE757_var, StringExternal("Param/Value/8A7C289C"), null, UnitGetPosition(gv_jinara));
    }
    libCOMI_gf_PingMinimapCampaign(PlayerGroupAll(), UnitGetPosition(gv_jinara), 6.0, Color(100.00, 0.00, 0.00));
    Wait(2.0, c_timeGame);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    if ((gv_tugOfWar_ReverseWaypoint <= 5)) {
        libCOMI_gf_SendMissionTransmission("NearDefeatCoA", true, -1);
    }
    else {
        libCOMI_gf_SendMissionTransmission("HalfDefeatCoA", true, -1);
    }
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TimerStart(gv_announcerLineCooldown, gv_c_AnnouncerLineCooldown_Amount, false, c_timeReal);
    TriggerQueueExit();
    if ((gv_tugOfWarLosingGround02Count == 3)) {
        gv_tugOfWarLosingGround02Count = 1;
    }
    else {
        gv_tugOfWarLosingGround02Count += 1;
    }
    TimerStart(gv_losingGroundTimer02, 60.0, false, c_timeGame);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TugOfWarLosingGround02WarningQ_Init () {
    gt_TugOfWarLosingGround02WarningQ = TriggerCreate("gt_TugOfWarLosingGround02WarningQ_Func");
    TriggerAddEventTimer(gt_TugOfWarLosingGround02WarningQ, gv_losingGroundTimer02);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tug Of War Defeat Imminent Warning Q
//--------------------------------------------------------------------------------------------------
bool gt_TugOfWarDefeatImminentWarningQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto8C11F04D_g;
    int auto8C11F04D_var;

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_tugOfWar_State == ge_TugOfWarState_Reverse))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    auto8C11F04D_g = libCOMI_gf_GetAlliedCommandersPlayers();
    auto8C11F04D_var = -1;
    while (true) {
        auto8C11F04D_var = PlayerGroupNextPlayer(auto8C11F04D_g, auto8C11F04D_var);
        if (auto8C11F04D_var < 0) { break; }
        UIAlertPoint("Trigger", auto8C11F04D_var, StringExternal("Param/Value/23913464"), null, UnitGetPosition(gv_jinara));
    }
    libCOMI_gf_PingMinimapCampaign(PlayerGroupAll(), UnitGetPosition(gv_jinara), 6.0, Color(100.00, 0.00, 0.00));
    Wait(2.0, c_timeGame);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("FinalDefeatCoA", true, -1);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TimerStart(gv_announcerLineCooldown, gv_c_AnnouncerLineCooldown_Amount, false, c_timeReal);
    TriggerQueueExit();
    Wait(50.0, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TugOfWarDefeatImminentWarningQ_Init () {
    gt_TugOfWarDefeatImminentWarningQ = TriggerCreate("gt_TugOfWarDefeatImminentWarningQ_Func");
    TriggerAddEventUnitRegion(gt_TugOfWarDefeatImminentWarningQ, UnitRefFromVariable("gv_jinara"), RegionFromId(34), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tug Of War Victory Imminent Q
//--------------------------------------------------------------------------------------------------
bool gt_TugOfWarVictoryImminentQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_tugOfWar_State == ge_TugOfWarState_Forward))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("FinalVictoryCoA", true, -1);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TugOfWarVictoryImminentQ_Init () {
    gt_TugOfWarVictoryImminentQ = TriggerCreate("gt_TugOfWarVictoryImminentQ_Func");
    TriggerAddEventUnitRegion(gt_TugOfWarVictoryImminentQ, UnitRefFromVariable("gv_amonsChampion"), RegionFromId(4), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Forces Destroyed Watcher
//--------------------------------------------------------------------------------------------------
bool gt_ForcesDestroyedWatcher_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNtve_gf_UnitInRegion(EventUnit(), RegionCircle(UnitGetPosition(gv_tugOfWarBubbleUnit), gv_tugOfWar_Presence_Check_Humans)) == true))) {
            return false;
        }

        if (!((libNtve_gf_KillingUnit() != null))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnit()) >= 0) && (UnitGetOwner(EventUnit()) <= 15)))) {
            return false;
        }

        if (!(((UnitGetOwner(libNtve_gf_KillingUnit()) >= 0) && (UnitGetOwner(libNtve_gf_KillingUnit()) <= 15)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGroupHasPlayer(libCOMI_gf_HumanPlayers(), UnitGetOwner(EventUnit())) == true) && (PlayerGroupHasPlayer(gv_enemyPlayerGroup, UnitGetOwner(libNtve_gf_KillingUnit())) == true) && (gf_GetAlliedSupportingPlayers() == 0)) {
        TriggerExecute(gt_ForcesDestroyedPlayerTransmissionQ, true, false);
    }
    else if ((PlayerGroupHasPlayer(libCOMI_gf_HumanPlayers(), UnitGetOwner(libNtve_gf_KillingUnit())) == true) && (PlayerGroupHasPlayer(gv_enemyPlayerGroup, UnitGetOwner(EventUnit())) == true) && (UnitGroupCount(gf_GetPushingUnitsNearAmonsChampion(0), c_unitCountAlive) == 0)) {
        TriggerExecute(gt_ForcesDestroyedEnemyTransmissionQ, true, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ForcesDestroyedWatcher_Init () {
    gt_ForcesDestroyedWatcher = TriggerCreate("gt_ForcesDestroyedWatcher_Func");
    TriggerAddEventUnitDied(gt_ForcesDestroyedWatcher, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Forces Destroyed Player Transmission Q
//--------------------------------------------------------------------------------------------------
bool gt_ForcesDestroyedPlayerTransmissionQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_currentMissionTime;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == false))) {
            return false;
        }

        if (!((TimerGetRemaining(gv_announcerLineCooldown) <= 0.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    lv_currentMissionTime = GameGetMissionTime();
    TriggerQueueEnter();
    if (((GameGetMissionTime() - lv_currentMissionTime) > gv_c_SkipIfNotPlayedIn)) {
        return true;
    }

    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("SupportDeadCoA", true, -1);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TimerStart(gv_announcerLineCooldown, gv_c_AnnouncerLineCooldown_Amount, false, c_timeReal);
    TriggerQueueExit();
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ForcesDestroyedPlayerTransmissionQ_Init () {
    gt_ForcesDestroyedPlayerTransmissionQ = TriggerCreate("gt_ForcesDestroyedPlayerTransmissionQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Forces Destroyed Enemy Transmission Q
//--------------------------------------------------------------------------------------------------
bool gt_ForcesDestroyedEnemyTransmissionQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_currentMissionTime;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == false))) {
            return false;
        }

        if (!((TimerGetRemaining(gv_announcerLineCooldown) <= 0.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    lv_currentMissionTime = GameGetMissionTime();
    TriggerQueueEnter();
    if (((GameGetMissionTime() - lv_currentMissionTime) > gv_c_SkipIfNotPlayedIn)) {
        return true;
    }

    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("EnemySupportDeadCoA", true, -1);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TimerStart(gv_announcerLineCooldown, gv_c_AnnouncerLineCooldown_Amount, false, c_timeReal);
    TriggerQueueExit();
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ForcesDestroyedEnemyTransmissionQ_Init () {
    gt_ForcesDestroyedEnemyTransmissionQ = TriggerCreate("gt_ForcesDestroyedEnemyTransmissionQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Reminder to Support Transmission Q
//--------------------------------------------------------------------------------------------------
bool gt_RemindertoSupportTransmissionQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TimerStart(gv_reminderToSupportTimer, 90.0, false, c_timeGame);
    while ((TimerGetRemaining(gv_reminderToSupportTimer) > 0.0)) {
        if ((gv_tugOfWar_State != ge_TugOfWarState_Hold)) {
            TriggerEnable(TriggerGetCurrent(), true);
            return true;
        }
        else {
            Wait(0.5, c_timeGame);
        }
    }
    if ((TimerGetRemaining(gv_announcerLineCooldown) <= 0.0)) {
        TriggerQueueEnter();
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
        libCOMI_gf_SendMissionTransmission("NoSupportCoA", true, -1);
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
        TimerStart(gv_announcerLineCooldown, gv_c_AnnouncerLineCooldown_Amount, false, c_timeReal);
        TriggerQueueExit();
    }

    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RemindertoSupportTransmissionQ_Init () {
    gt_RemindertoSupportTransmissionQ = TriggerCreate("gt_RemindertoSupportTransmissionQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tug Of War Hybrid Super Pusher
//--------------------------------------------------------------------------------------------------
bool gt_TugOfWarHybridSuperPusher_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_hybridBullyingJinara;
    unitgroup lv_hybridInPlay;

    // Automatic Variable Declarations
    unitgroup auto73BCC87A_g;
    int auto73BCC87A_u;
    unit auto73BCC87A_var;

    // Variable Initialization
    lv_hybridBullyingJinara = UnitGroupEmpty();
    lv_hybridInPlay = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_hybridSuperPusherState_Current = false;
    lv_hybridInPlay = gv_hybridSuperPushers;
    auto73BCC87A_g = lv_hybridInPlay;
    auto73BCC87A_u = UnitGroupCount(auto73BCC87A_g, c_unitCountAll);
    for (;; auto73BCC87A_u -= 1) {
        auto73BCC87A_var = UnitGroupUnitFromEnd(auto73BCC87A_g, auto73BCC87A_u);
        if (auto73BCC87A_var == null) { break; }
        if ((PlayerGroupHasPlayer(libCOMI_gf_HumanPlayers(), UnitGetOwner(auto73BCC87A_var)) == false)) {
            if ((gf_HybridcanSuperPush(auto73BCC87A_var) == true)) {
                gv_hybridSuperPusherState_Current = true;
                UnitGroupAdd(lv_hybridBullyingJinara, auto73BCC87A_var);
                UnitBehaviorAdd(auto73BCC87A_var, "PitMalashShieldRegen", gv_amonsChampion, 1);
            }

        }
        else {
            UnitGroupRemove(lv_hybridInPlay, auto73BCC87A_var);
        }
    }
    if ((gv_hybridSuperPusherState_Current != gv_hybridSuperPusherState_Previous)) {
        if ((gv_hybridSuperPusherState_Current == false)) {
            UnitAbilityEnable(gv_jinara, "PitAlarakFightDummyAbility", true);
            UnitBehaviorAddPlayer(gv_jinara, "PitAlarakShieldRegenAura", UnitGetOwner(gv_jinara), 1);
            UnitKill(gv_hybridSuperPusherFX);
        }
        else {
            UnitBehaviorRemovePlayer(gv_jinara, "PitAlarakShieldRegenAura", UnitGetOwner(gv_jinara), 1);
            UnitAbilityEnable(gv_jinara, "PitAlarakFightDummyAbility", false);
            TriggerExecute(gt_TugOfWarHybridSappingStrengthQ, true, false);
            if ((UnitIsAlive(gv_hybridSuperPusherFX) == false)) {
                UnitCreate(1, "DuelBubbleUnit", 0, 0, UnitGetPosition(gv_tugOfWarBubbleUnit), 270.0);
                gv_hybridSuperPusherFX = UnitLastCreated();
                gf_HybridSuperPusherFXLogic(gv_hybridSuperPusherFX);
            }

        }
    }

    if ((gv_hybridSuperPusherState_Current == false)) {
        UnitBehaviorRemove(gv_amonsChampion, "Angry", 1);
    }
    else {
        UnitBehaviorAdd(gv_amonsChampion, "Angry", gv_amonsChampion, 1);
    }
    gv_hybridSuperPusherState_Previous = gv_hybridSuperPusherState_Current;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TugOfWarHybridSuperPusher_Init () {
    gt_TugOfWarHybridSuperPusher = TriggerCreate("gt_TugOfWarHybridSuperPusher_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tug Of War Hybrid Sapping Strength Q
//--------------------------------------------------------------------------------------------------
bool gt_TugOfWarHybridSappingStrengthQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TransmissionClearAll();
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("HybridSupportCoA", true, -1);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TimerStart(gv_announcerLineCooldown, gv_c_AnnouncerLineCooldown_Amount, false, c_timeReal);
    TriggerQueueExit();
    Wait(45.0, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TugOfWarHybridSappingStrengthQ_Init () {
    gt_TugOfWarHybridSappingStrengthQ = TriggerCreate("gt_TugOfWarHybridSappingStrengthQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Reveal Final Base Q
//--------------------------------------------------------------------------------------------------
bool gt_RevealFinalBaseQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto9D023A1A_g;
    int auto9D023A1A_var;

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    auto9D023A1A_g = libCOMI_gf_GetAlliedCommandersPlayers();
    auto9D023A1A_var = -1;
    while (true) {
        auto9D023A1A_var = PlayerGroupNextPlayer(auto9D023A1A_g, auto9D023A1A_var);
        if (auto9D023A1A_var < 0) { break; }
        UIAlertPoint("Trigger", auto9D023A1A_var, StringExternal("Param/Value/4380B61E"), null, RegionGetCenter(RegionFromId(17)));
    }
    libCOMI_gf_CreatePingFacingAngleCoop(PlayerGroupAll(), RegionGetCenter(RegionFromId(17)), 270.0, "PingAlert", ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 10.0);
    PingSetScale(PingLastCreated(), 0.75);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/404AFC41"));
    SoundPlayForPlayer(SoundLink("Ping", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    Wait(2.0, c_timeGame);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("NearVictoryCoA", true, -1);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RevealFinalBaseQ_Init () {
    gt_RevealFinalBaseQ = TriggerCreate("gt_RevealFinalBaseQ_Func");
    TriggerAddEventUnitRegion(gt_RevealFinalBaseQ, UnitRefFromVariable("gv_jinara"), RegionFromId(27), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tug Of War - Failed
//--------------------------------------------------------------------------------------------------
bool gt_TugOfWarFailed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_cinematicRemoveUnits;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_cinematicRemoveUnits = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveKillAmonsChampionFailed, true, false);
    gv_tugOfWar_State = ge_TugOfWarState_Paused;
    UnitKill(gv_tugOfWarBubbleUnit);
    UnitKill(gv_hybridSuperPusherFX);
    TriggerStop(gt_TugOfWarJinaraAmonsChampionAttackLogic);
    TriggerStop(gt_TugOfWarController);
    UnitIssueOrder(gv_jinara, Order(AbilityCommand("PitAlarakFightDummyAbilityCancel", 0)), c_orderQueueReplace);
    UnitIssueOrder(gv_amonsChampion, Order(AbilityCommand("PitMalashFightDummyAbilityCancel", 0)), c_orderQueueReplace);
    libCOMI_gf_BeforeFanfare(c_gameOverDefeat);
    libCOMI_gf_MoveCameraForAllPlayers(PointFromId(860), 1.5);
    libCOMI_gf_SendMissionTransmission("DefeatCoA", false, -1);
    SoundPlayForPlayer(SoundLink("Event_Taldarim02_PitDeath_Explosion", 0), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    Wait(1.75, c_timeGame);
    UnitIssueOrder(gv_amonsChampion, OrderTargetingUnit(AbilityCommand("PitMalashKillAlarak", 0), gv_jinara), c_orderQueueReplace);
    TriggerExecute(gt_ObjectiveJinaraMustSurviveFailed, true, false);
    libCOMI_gf_DisplayCampaignMessage(PlayerGroupAll(), libCOMI_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/F46A1648"), libCOMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
    Wait(1.5, c_timeGame);
    ;
    libCOMI_gf_AfterFanfare(c_gameOverDefeat);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TugOfWarFailed_Init () {
    gt_TugOfWarFailed = TriggerCreate("gt_TugOfWarFailed_Func");
    TriggerAddEventUnitRegion(gt_TugOfWarFailed, UnitRefFromVariable("gv_jinara"), RegionFromId(18), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tug Of War - Defeat Fanfare
//--------------------------------------------------------------------------------------------------
bool gt_TugOfWarDefeatFanfare_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TugOfWarDefeatFanfare_Init () {
    gt_TugOfWarDefeatFanfare = TriggerCreate("gt_TugOfWarDefeatFanfare_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tug Of War - Completed
//--------------------------------------------------------------------------------------------------
bool gt_TugOfWarCompleted_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerStop(gt_TugOfWarJinaraAmonsChampionAttackLogic);
    gv_tugOfWar_State = ge_TugOfWarState_Paused;
    UnitKill(gv_tugOfWarBubbleUnit);
    UnitIssueOrder(gv_jinara, Order(AbilityCommand("PitAlarakFightDummyAbilityCancel", 0)), c_orderQueueReplace);
    UnitIssueOrder(gv_amonsChampion, Order(AbilityCommand("PitMalashFightDummyAbilityCancel", 0)), c_orderQueueReplace);
    TriggerExecute(gt_ObjectiveJinaraMustSurviveComplete, true, true);
    libCOMI_gf_BeforeFanfare(c_gameOverDefeat);
    libCOMI_gf_SendVictoryTransmission("VictoryCoA");
    libCOMI_gf_MoveCameraForAllPlayers(PointFromId(882), 1.5);
    libCOMI_gf_DisplayCampaignMessage(libCOMI_gf_HumanPlayers(), libCOMI_ge_CampaignMessageType_MissionVictory, StringExternal("Param/Value/3223D936"), libCOMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
    SoundPlayForPlayer(SoundLink("Event_Taldarim02_EndCine_A", 0), c_maxPlayers, PlayerGroupAll(), 50.0, 0.0);
    SoundPlayForPlayer(SoundLink("Event_Taldarim02_PitDeath_Explosion", 0), c_maxPlayers, PlayerGroupAll(), 80.0, 0.0);
    Wait(1.5, c_timeGame);
    UnitIssueOrder(gv_jinara, OrderTargetingUnit(AbilityCommand("PitAlarakKillMalash", 0), gv_amonsChampion), c_orderQueueReplace);
    TriggerExecute(gt_ObjectiveKillAmonsChampionComplete, true, true);
    Wait(5.0, c_timeGame);
    ;
    libCOMI_gf_AfterFanfare(c_gameOverDefeat);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TugOfWarCompleted_Init () {
    gt_TugOfWarCompleted = TriggerCreate("gt_TugOfWarCompleted_Func");
    TriggerAddEventUnitRegion(gt_TugOfWarCompleted, UnitRefFromVariable("gv_amonsChampion"), RegionFromId(19), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Kill Amon's Champion Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveKillAmonsChampionCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_CreateObjectiveCampaign("AC_SlaynHamsterBall_Primary01");
    gv_objectiveKillAmonsChampion = ObjectiveLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveKillAmonsChampionCreate_Init () {
    gt_ObjectiveKillAmonsChampionCreate = TriggerCreate("gt_ObjectiveKillAmonsChampionCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Kill Amon's Champion Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveKillAmonsChampionComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveKillAmonsChampionCreate, true, false);
    libCOMI_gf_ZS_SetMissionObjectiveState("AC_SlaynHamsterBall_Primary01", libCOMI_ge_MissionObjectiveState_Completed);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveKillAmonsChampionComplete_Init () {
    gt_ObjectiveKillAmonsChampionComplete = TriggerCreate("gt_ObjectiveKillAmonsChampionComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Kill Amon's Champion Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveKillAmonsChampionFailed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveKillAmonsChampionCreate, true, false);
    libCOMI_gf_ZS_SetMissionObjectiveState("AC_SlaynHamsterBall_Primary01", libCOMI_ge_MissionObjectiveState_Failed);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveKillAmonsChampionFailed_Init () {
    gt_ObjectiveKillAmonsChampionFailed = TriggerCreate("gt_ObjectiveKillAmonsChampionFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Ji'nara Must Survive Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveJinaraMustSurviveCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_CreateObjectiveCampaign("AC_SlaynHamsterBall_Primary02");
    gv_objectiveJinaraMustSurvive = ObjectiveLastCreated();
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveJinaraMustSurviveCreate_Init () {
    gt_ObjectiveJinaraMustSurviveCreate = TriggerCreate("gt_ObjectiveJinaraMustSurviveCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Ji'nara Must Survive Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveJinaraMustSurviveComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveJinaraMustSurviveCreate, true, false);
    libCOMI_gf_ZS_SetMissionObjectiveState("AC_SlaynHamsterBall_Primary02", libCOMI_ge_MissionObjectiveState_Completed);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveJinaraMustSurviveComplete_Init () {
    gt_ObjectiveJinaraMustSurviveComplete = TriggerCreate("gt_ObjectiveJinaraMustSurviveComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Ji'nara Must Survive Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveJinaraMustSurviveFailed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveJinaraMustSurviveCreate, true, false);
    libCOMI_gf_ZS_SetMissionObjectiveState("AC_SlaynHamsterBall_Primary02", libCOMI_ge_MissionObjectiveState_Failed);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveJinaraMustSurviveFailed_Init () {
    gt_ObjectiveJinaraMustSurviveFailed = TriggerCreate("gt_ObjectiveJinaraMustSurviveFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger Initialization
//--------------------------------------------------------------------------------------------------
void InitTriggers () {
    gt_Initialization_Init();
    gt_Beetles_Init();
    gt_Watchers_Init();
    gt_AI_Init();
    gt_PickFirstAttackWaveTarget_Init();
    gt_RunAIWaves_Init();
    gt_AttackWaveTransmissionQ_Init();
    gt_AttackWave01SingleWave_Init();
    gt_AttackWave02SingleWave_Init();
    gt_AttackWave03SingleWave_Init();
    gt_AttackWave04SingleWave_Init();
    gt_AttackWave05DoubleWave_Init();
    gt_AttackWave06DoubleWave_Init();
    gt_AttackWave07DoubleWave_Init();
    gt_SlaynElementalsDifficulties_Init();
    gt_ObjectiveKillSlaynElementalsCreate_Init();
    gt_ObjectiveKillSlaynElementalsComplete_Init();
    gt_ObjectiveKillSlaynElementalsFailed_Init();
    gt_ObjectiveKillSlaynElementalsCreate02_Init();
    gt_ObjectiveKillSlaynElementalsComplete02_Init();
    gt_ObjectiveKillSlaynElementalsFailed02_Init();
    gt_SlaynElemental01Create_Init();
    gt_SlaynElemental02aCreate_Init();
    gt_SlaynElemental02bCreate_Init();
    gt_CritterDies_Init();
    gt_SlaynElementalCocoonQ_Init();
    gt_SlaynElementalEscapesQ_Init();
    gt_SlaynElementalGoingtoEscapeQ_Init();
    gt_SlaynElementalKilledFirstQ_Init();
    gt_SlaynElementalKilledLastQ_Init();
    gt_Difficulties_Init();
    gt_StartGameQ_Init();
    gt_EscortWaveTransmissionQ_Init();
    gt_EscortWave01_Init();
    gt_EscortWave02_Init();
    gt_EscortWave03_Init();
    gt_EscortWave04_Init();
    gt_EscortWave05_Init();
    gt_EscortWave06_Init();
    gt_EscortWave07_Init();
    gt_EscortWave08_Init();
    gt_EscortWave09_Init();
    gt_EscortWave10_Init();
    gt_EscortWave11_Init();
    gt_EscortWave12_Init();
    gt_EscortWave13_Init();
    gt_EscortWave14_Init();
    gt_EscortWave15_Init();
    gt_EscortWave16_Init();
    gt_EscortWave17_Init();
    gt_EscortWave18_Init();
    gt_EscortWave19_Init();
    gt_EscortWave20_Init();
    gt_EscortWave21_Init();
    gt_EscortWave22_Init();
    gt_EscortWave23_Init();
    gt_SetupHybridPusherHybridTypesRNG_Init();
    gt_SetupHybridPusherHybridTypes_Init();
    gt_RunHybridPushers_Init();
    gt_HybridPushers01_Init();
    gt_HybridPushers02_Init();
    gt_HybridPushers03_Init();
    gt_HybridPushers04_Init();
    gt_SetEffortValues_Init();
    gt_StatForwardPushTime_Init();
    gt_StatPushBackDistance_Init();
    gt_TugOfWarInitialize_Init();
    gt_TugOfWarController_Init();
    gt_TugOfWarStateUpdate_Init();
    gt_TugOfWarMoveBossTarget_Init();
    gt_TugOfWarJinaraAmonsChampionAttackLogic_Init();
    gt_TugOfWarFirstTimePlayerAtTugOfWarQ_Init();
    gt_TugOfWarFirstTimeEnemyAtTugOfWarQ_Init();
    gt_TugOfWarLosingGround01WarningQ_Init();
    gt_TugOfWarLosingGround02WarningQ_Init();
    gt_TugOfWarDefeatImminentWarningQ_Init();
    gt_TugOfWarVictoryImminentQ_Init();
    gt_ForcesDestroyedWatcher_Init();
    gt_ForcesDestroyedPlayerTransmissionQ_Init();
    gt_ForcesDestroyedEnemyTransmissionQ_Init();
    gt_RemindertoSupportTransmissionQ_Init();
    gt_TugOfWarHybridSuperPusher_Init();
    gt_TugOfWarHybridSappingStrengthQ_Init();
    gt_RevealFinalBaseQ_Init();
    gt_TugOfWarFailed_Init();
    gt_TugOfWarDefeatFanfare_Init();
    gt_TugOfWarCompleted_Init();
    gt_ObjectiveKillAmonsChampionCreate_Init();
    gt_ObjectiveKillAmonsChampionComplete_Init();
    gt_ObjectiveKillAmonsChampionFailed_Init();
    gt_ObjectiveJinaraMustSurviveCreate_Init();
    gt_ObjectiveJinaraMustSurviveComplete_Init();
    gt_ObjectiveJinaraMustSurviveFailed_Init();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void InitMap () {
    InitLibs();
    InitGlobals();
    InitTriggers();
}
