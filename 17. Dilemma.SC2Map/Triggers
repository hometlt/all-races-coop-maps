<?xml version="1.0" encoding="utf-8"?>
<TriggerData>
    <Root>
        <Item Type="CustomScript" Id="90E79CC0"/>
        <Item Type="Trigger" Id="47DDF0A2"/>
    </Root>
    <Element Type="CustomScript" Id="90E79CC0">
        <Identifier>Triggers</Identifier>
        <ScriptCode>
            //==================================================================================================
            // 
            // Generated AI Script
            // 
            // AI Name: Amon reinforcement
            // 
            //==================================================================================================
            include &quot;TriggerLibs/natives&quot;
            include &quot;TriggerLibs/AI&quot;
            include &quot;TriggerLibs/Computer&quot;
            //--------------------------------------------------------------------------------------------------
            // Globals
            //--------------------------------------------------------------------------------------------------
            point[17] aiDA87AEBD_defGather;
            string[17] aiDA87AEBD_customData;
            wave[17] aiDA87AEBD_lastWave;
            //--------------------------------------------------------------------------------------------------
            // Attack Wave: 
            //--------------------------------------------------------------------------------------------------
            bool[17] aiDA87AEBD_wave1_enabled;
            wave[17] aiDA87AEBD_wave1_lastWave;
            trigger aiDA87AEBD_wave1_trigger = null;
            int aiDA87AEBD_wave1_runPlayer;
            playergroup aiDA87AEBD_wave1_runTarget;
            //--------------------------------------------------------------------------------------------------
            void aiDA87AEBD_wave1_init () {
                int init_i;
                for (init_i = 0; init_i &lt;= 16; init_i += 1) {
                    aiDA87AEBD_wave1_enabled[init_i] = true;
                    aiDA87AEBD_wave1_lastWave[init_i] = null;
                }
                aiDA87AEBD_wave1_trigger = TriggerCreate(&quot;aiDA87AEBD_wave1_runFunc&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            void aiDA87AEBD_wave1_enable (int p, bool val) {
                if (p &lt; 0 || p &gt;= 16) {
                    return;
                }
                aiDA87AEBD_wave1_enabled[p] = val;
            }
            //--------------------------------------------------------------------------------------------------
            bool aiDA87AEBD_wave1_isEnabled (int p) {
                if (p &lt; 0 || p &gt;= 16) {
                    return false;
                }
                return aiDA87AEBD_wave1_enabled[p];
            }
            //--------------------------------------------------------------------------------------------------
            wave aiDA87AEBD_wave1_createdWave (int p) {
                if (p &lt; 0 || p &gt;= 16) {
                    return null;
                }
                return aiDA87AEBD_wave1_lastWave[p];
            }
            //--------------------------------------------------------------------------------------------------
            bool aiDA87AEBD_wave1_runFunc (bool c, bool a) {
                int p = aiDA87AEBD_wave1_runPlayer;
                playergroup target = aiDA87AEBD_wave1_runTarget;
                int d;
                point gatherPoint = null;
                int ta = 0;
                int tg = 0;
                int ts = 0;
                int tf = 0;
                int td = 0;
                if (p &lt; 0 || p &gt;= 16) {
                    return false;
                }
                d = PlayerDifficulty(p);
                if (!aiDA87AEBD_wave1_enabled[p]) {
                    td = 0;
                    if (td &gt; 0) {
                        Wait(td, c_timeAI);
                    }
                    return true;
                }
                aiDA87AEBD_customData[p] = &quot;&quot;;
                ta = 0;
                if (d == 1) { ta = 320; }
                if (d == 2) { ta = 260; }
                if (d == 3) { ta = 200; }
                if (d == 4) { ta = 200; }
                if (d == 5) { ta = 200; }
                if (d == 6) { ta = 200; }
                tg = 0;
                ts = ta;
                if (tg &gt; 0 &amp;&amp; tg &lt; ta) {
                    Wait(ta - tg, c_timeAI);
                    ts = tg;
                }
                AIAttackWaveSetTargetPlayer(p, target);
                AIAttackWaveSetTargetPoint(p, PointFromId(1465535020));
                gatherPoint = aiDA87AEBD_defGather[p];
                AIAttackWaveSetGatherPoint(p, gatherPoint);
                gatherPoint = PointFromId(1429415567);
                AIAttackWaveSetGatherPoint(p, gatherPoint);
                AIAttackWaveClearWaypoints(p);
                AIAttackWaveAddWaypoint(p, PointFromId(295102286), false);
                Wait(ts, c_timeAI);
                TriggerExecute(TriggerFind(&quot;gt_Wave1_Func&quot;), true, false);
                tf = 0;
                if (tf &gt; 0) {
                    Wait(tf, c_timeAI);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void aiDA87AEBD_wave1_run (int p, playergroup target, bool wait) {
                aiDA87AEBD_wave1_runPlayer = p;
                aiDA87AEBD_wave1_runTarget = PlayerGroupCopy(target);
                TriggerExecute(aiDA87AEBD_wave1_trigger, false, wait);
            }
            //--------------------------------------------------------------------------------------------------
            // Attack Wave: 
            //--------------------------------------------------------------------------------------------------
            bool[17] aiDA87AEBD_wave2_enabled;
            wave[17] aiDA87AEBD_wave2_lastWave;
            trigger aiDA87AEBD_wave2_trigger = null;
            int aiDA87AEBD_wave2_runPlayer;
            playergroup aiDA87AEBD_wave2_runTarget;
            //--------------------------------------------------------------------------------------------------
            void aiDA87AEBD_wave2_init () {
                int init_i;
                for (init_i = 0; init_i &lt;= 16; init_i += 1) {
                    aiDA87AEBD_wave2_enabled[init_i] = true;
                    aiDA87AEBD_wave2_lastWave[init_i] = null;
                }
                aiDA87AEBD_wave2_trigger = TriggerCreate(&quot;aiDA87AEBD_wave2_runFunc&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            void aiDA87AEBD_wave2_enable (int p, bool val) {
                if (p &lt; 0 || p &gt;= 16) {
                    return;
                }
                aiDA87AEBD_wave2_enabled[p] = val;
            }
            //--------------------------------------------------------------------------------------------------
            bool aiDA87AEBD_wave2_isEnabled (int p) {
                if (p &lt; 0 || p &gt;= 16) {
                    return false;
                }
                return aiDA87AEBD_wave2_enabled[p];
            }
            //--------------------------------------------------------------------------------------------------
            wave aiDA87AEBD_wave2_createdWave (int p) {
                if (p &lt; 0 || p &gt;= 16) {
                    return null;
                }
                return aiDA87AEBD_wave2_lastWave[p];
            }
            //--------------------------------------------------------------------------------------------------
            bool aiDA87AEBD_wave2_runFunc (bool c, bool a) {
                int p = aiDA87AEBD_wave2_runPlayer;
                playergroup target = aiDA87AEBD_wave2_runTarget;
                int d;
                point gatherPoint = null;
                int ta = 0;
                int tg = 0;
                int ts = 0;
                int tf = 0;
                int td = 0;
                if (p &lt; 0 || p &gt;= 16) {
                    return false;
                }
                d = PlayerDifficulty(p);
                if (!aiDA87AEBD_wave2_enabled[p]) {
                    td = 0;
                    if (td &gt; 0) {
                        Wait(td, c_timeAI);
                    }
                    return true;
                }
                aiDA87AEBD_customData[p] = &quot;&quot;;
                ta = 0;
                if (d == 1) { ta = 300; }
                if (d == 2) { ta = 240; }
                if (d == 3) { ta = 180; }
                if (d == 4) { ta = 180; }
                if (d == 5) { ta = 180; }
                if (d == 6) { ta = 180; }
                tg = 0;
                ts = ta;
                if (tg &gt; 0 &amp;&amp; tg &lt; ta) {
                    Wait(ta - tg, c_timeAI);
                    ts = tg;
                }
                AIAttackWaveSetTargetPlayer(p, target);
                AIAttackWaveSetTargetPoint(p, PointFromId(1465535020));
                gatherPoint = aiDA87AEBD_defGather[p];
                AIAttackWaveSetGatherPoint(p, gatherPoint);
                gatherPoint = PointFromId(1429415567);
                AIAttackWaveSetGatherPoint(p, gatherPoint);
                AIAttackWaveClearWaypoints(p);
                AIAttackWaveAddWaypoint(p, PointFromId(295102286), false);
                Wait(ts, c_timeAI);
                TriggerExecute(TriggerFind(&quot;gt_Wave2_Func&quot;), true, false);
                tf = 0;
                if (tf &gt; 0) {
                    Wait(tf, c_timeAI);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void aiDA87AEBD_wave2_run (int p, playergroup target, bool wait) {
                aiDA87AEBD_wave2_runPlayer = p;
                aiDA87AEBD_wave2_runTarget = PlayerGroupCopy(target);
                TriggerExecute(aiDA87AEBD_wave2_trigger, false, wait);
            }
            //--------------------------------------------------------------------------------------------------
            // Attack Wave: 
            //--------------------------------------------------------------------------------------------------
            bool[17] aiDA87AEBD_wave3_enabled;
            wave[17] aiDA87AEBD_wave3_lastWave;
            trigger aiDA87AEBD_wave3_trigger = null;
            int aiDA87AEBD_wave3_runPlayer;
            playergroup aiDA87AEBD_wave3_runTarget;
            //--------------------------------------------------------------------------------------------------
            void aiDA87AEBD_wave3_init () {
                int init_i;
                for (init_i = 0; init_i &lt;= 16; init_i += 1) {
                    aiDA87AEBD_wave3_enabled[init_i] = true;
                    aiDA87AEBD_wave3_lastWave[init_i] = null;
                }
                aiDA87AEBD_wave3_trigger = TriggerCreate(&quot;aiDA87AEBD_wave3_runFunc&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            void aiDA87AEBD_wave3_enable (int p, bool val) {
                if (p &lt; 0 || p &gt;= 16) {
                    return;
                }
                aiDA87AEBD_wave3_enabled[p] = val;
            }
            //--------------------------------------------------------------------------------------------------
            bool aiDA87AEBD_wave3_isEnabled (int p) {
                if (p &lt; 0 || p &gt;= 16) {
                    return false;
                }
                return aiDA87AEBD_wave3_enabled[p];
            }
            //--------------------------------------------------------------------------------------------------
            wave aiDA87AEBD_wave3_createdWave (int p) {
                if (p &lt; 0 || p &gt;= 16) {
                    return null;
                }
                return aiDA87AEBD_wave3_lastWave[p];
            }
            //--------------------------------------------------------------------------------------------------
            bool aiDA87AEBD_wave3_runFunc (bool c, bool a) {
                int p = aiDA87AEBD_wave3_runPlayer;
                playergroup target = aiDA87AEBD_wave3_runTarget;
                int d;
                point gatherPoint = null;
                int ta = 0;
                int tg = 0;
                int ts = 0;
                int tf = 0;
                int td = 0;
                if (p &lt; 0 || p &gt;= 16) {
                    return false;
                }
                d = PlayerDifficulty(p);
                if (!aiDA87AEBD_wave3_enabled[p]) {
                    td = 0;
                    if (td &gt; 0) {
                        Wait(td, c_timeAI);
                    }
                    return true;
                }
                aiDA87AEBD_customData[p] = &quot;&quot;;
                ta = 0;
                if (d == 1) { ta = 300; }
                if (d == 2) { ta = 240; }
                if (d == 3) { ta = 180; }
                if (d == 4) { ta = 180; }
                if (d == 5) { ta = 180; }
                if (d == 6) { ta = 180; }
                tg = 0;
                ts = ta;
                if (tg &gt; 0 &amp;&amp; tg &lt; ta) {
                    Wait(ta - tg, c_timeAI);
                    ts = tg;
                }
                AIAttackWaveSetTargetPlayer(p, target);
                AIAttackWaveSetTargetPoint(p, PointFromId(1465535020));
                gatherPoint = aiDA87AEBD_defGather[p];
                AIAttackWaveSetGatherPoint(p, gatherPoint);
                gatherPoint = PointFromId(1429415567);
                AIAttackWaveSetGatherPoint(p, gatherPoint);
                AIAttackWaveClearWaypoints(p);
                AIAttackWaveAddWaypoint(p, PointFromId(295102286), false);
                Wait(ts, c_timeAI);
                TriggerExecute(TriggerFind(&quot;gt_Wave3_Func&quot;), true, false);
                tf = 0;
                if (tf &gt; 0) {
                    Wait(tf, c_timeAI);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void aiDA87AEBD_wave3_run (int p, playergroup target, bool wait) {
                aiDA87AEBD_wave3_runPlayer = p;
                aiDA87AEBD_wave3_runTarget = PlayerGroupCopy(target);
                TriggerExecute(aiDA87AEBD_wave3_trigger, false, wait);
            }
            //--------------------------------------------------------------------------------------------------
            // Attack Wave: 
            //--------------------------------------------------------------------------------------------------
            bool[17] aiDA87AEBD_wave4_enabled;
            wave[17] aiDA87AEBD_wave4_lastWave;
            trigger aiDA87AEBD_wave4_trigger = null;
            int aiDA87AEBD_wave4_runPlayer;
            playergroup aiDA87AEBD_wave4_runTarget;
            //--------------------------------------------------------------------------------------------------
            void aiDA87AEBD_wave4_init () {
                int init_i;
                for (init_i = 0; init_i &lt;= 16; init_i += 1) {
                    aiDA87AEBD_wave4_enabled[init_i] = true;
                    aiDA87AEBD_wave4_lastWave[init_i] = null;
                }
                aiDA87AEBD_wave4_trigger = TriggerCreate(&quot;aiDA87AEBD_wave4_runFunc&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            void aiDA87AEBD_wave4_enable (int p, bool val) {
                if (p &lt; 0 || p &gt;= 16) {
                    return;
                }
                aiDA87AEBD_wave4_enabled[p] = val;
            }
            //--------------------------------------------------------------------------------------------------
            bool aiDA87AEBD_wave4_isEnabled (int p) {
                if (p &lt; 0 || p &gt;= 16) {
                    return false;
                }
                return aiDA87AEBD_wave4_enabled[p];
            }
            //--------------------------------------------------------------------------------------------------
            wave aiDA87AEBD_wave4_createdWave (int p) {
                if (p &lt; 0 || p &gt;= 16) {
                    return null;
                }
                return aiDA87AEBD_wave4_lastWave[p];
            }
            //--------------------------------------------------------------------------------------------------
            bool aiDA87AEBD_wave4_runFunc (bool c, bool a) {
                int p = aiDA87AEBD_wave4_runPlayer;
                playergroup target = aiDA87AEBD_wave4_runTarget;
                int d;
                point gatherPoint = null;
                int ta = 0;
                int tg = 0;
                int ts = 0;
                int tf = 0;
                int td = 0;
                if (p &lt; 0 || p &gt;= 16) {
                    return false;
                }
                d = PlayerDifficulty(p);
                if (!aiDA87AEBD_wave4_enabled[p]) {
                    td = 0;
                    if (td &gt; 0) {
                        Wait(td, c_timeAI);
                    }
                    return true;
                }
                aiDA87AEBD_customData[p] = &quot;&quot;;
                ta = 0;
                if (d == 1) { ta = 300; }
                if (d == 2) { ta = 240; }
                if (d == 3) { ta = 180; }
                if (d == 4) { ta = 180; }
                if (d == 5) { ta = 180; }
                if (d == 6) { ta = 180; }
                tg = 0;
                ts = ta;
                if (tg &gt; 0 &amp;&amp; tg &lt; ta) {
                    Wait(ta - tg, c_timeAI);
                    ts = tg;
                }
                AIAttackWaveSetTargetPlayer(p, target);
                AIAttackWaveSetTargetPoint(p, PointFromId(1465535020));
                gatherPoint = aiDA87AEBD_defGather[p];
                AIAttackWaveSetGatherPoint(p, gatherPoint);
                gatherPoint = PointFromId(1429415567);
                AIAttackWaveSetGatherPoint(p, gatherPoint);
                AIAttackWaveClearWaypoints(p);
                AIAttackWaveAddWaypoint(p, PointFromId(295102286), false);
                Wait(ts, c_timeAI);
                TriggerExecute(TriggerFind(&quot;gt_Wave4_Func&quot;), true, false);
                tf = 0;
                if (tf &gt; 0) {
                    Wait(tf, c_timeAI);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void aiDA87AEBD_wave4_run (int p, playergroup target, bool wait) {
                aiDA87AEBD_wave4_runPlayer = p;
                aiDA87AEBD_wave4_runTarget = PlayerGroupCopy(target);
                TriggerExecute(aiDA87AEBD_wave4_trigger, false, wait);
            }
            //--------------------------------------------------------------------------------------------------
            // Attack Wave: 
            //--------------------------------------------------------------------------------------------------
            bool[17] aiDA87AEBD_wave5_enabled;
            wave[17] aiDA87AEBD_wave5_lastWave;
            trigger aiDA87AEBD_wave5_trigger = null;
            int aiDA87AEBD_wave5_runPlayer;
            playergroup aiDA87AEBD_wave5_runTarget;
            //--------------------------------------------------------------------------------------------------
            void aiDA87AEBD_wave5_init () {
                int init_i;
                for (init_i = 0; init_i &lt;= 16; init_i += 1) {
                    aiDA87AEBD_wave5_enabled[init_i] = true;
                    aiDA87AEBD_wave5_lastWave[init_i] = null;
                }
                aiDA87AEBD_wave5_trigger = TriggerCreate(&quot;aiDA87AEBD_wave5_runFunc&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            void aiDA87AEBD_wave5_enable (int p, bool val) {
                if (p &lt; 0 || p &gt;= 16) {
                    return;
                }
                aiDA87AEBD_wave5_enabled[p] = val;
            }
            //--------------------------------------------------------------------------------------------------
            bool aiDA87AEBD_wave5_isEnabled (int p) {
                if (p &lt; 0 || p &gt;= 16) {
                    return false;
                }
                return aiDA87AEBD_wave5_enabled[p];
            }
            //--------------------------------------------------------------------------------------------------
            wave aiDA87AEBD_wave5_createdWave (int p) {
                if (p &lt; 0 || p &gt;= 16) {
                    return null;
                }
                return aiDA87AEBD_wave5_lastWave[p];
            }
            //--------------------------------------------------------------------------------------------------
            bool aiDA87AEBD_wave5_runFunc (bool c, bool a) {
                int p = aiDA87AEBD_wave5_runPlayer;
                playergroup target = aiDA87AEBD_wave5_runTarget;
                int d;
                point gatherPoint = null;
                int ta = 0;
                int tg = 0;
                int ts = 0;
                int tf = 0;
                int td = 0;
                if (p &lt; 0 || p &gt;= 16) {
                    return false;
                }
                d = PlayerDifficulty(p);
                if (!aiDA87AEBD_wave5_enabled[p]) {
                    td = 0;
                    if (td &gt; 0) {
                        Wait(td, c_timeAI);
                    }
                    return true;
                }
                aiDA87AEBD_customData[p] = &quot;&quot;;
                ta = 0;
                if (d == 1) { ta = 300; }
                if (d == 2) { ta = 240; }
                if (d == 3) { ta = 180; }
                if (d == 4) { ta = 180; }
                if (d == 5) { ta = 180; }
                if (d == 6) { ta = 180; }
                tg = 0;
                ts = ta;
                if (tg &gt; 0 &amp;&amp; tg &lt; ta) {
                    Wait(ta - tg, c_timeAI);
                    ts = tg;
                }
                AIAttackWaveSetTargetPlayer(p, target);
                AIAttackWaveSetTargetPoint(p, PointFromId(1465535020));
                gatherPoint = aiDA87AEBD_defGather[p];
                AIAttackWaveSetGatherPoint(p, gatherPoint);
                gatherPoint = PointFromId(1429415567);
                AIAttackWaveSetGatherPoint(p, gatherPoint);
                AIAttackWaveClearWaypoints(p);
                AIAttackWaveAddWaypoint(p, PointFromId(295102286), false);
                Wait(ts, c_timeAI);
                TriggerExecute(TriggerFind(&quot;gt_Wave5_Func&quot;), true, false);
                tf = 0;
                if (tf &gt; 0) {
                    Wait(tf, c_timeAI);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void aiDA87AEBD_wave5_run (int p, playergroup target, bool wait) {
                aiDA87AEBD_wave5_runPlayer = p;
                aiDA87AEBD_wave5_runTarget = PlayerGroupCopy(target);
                TriggerExecute(aiDA87AEBD_wave5_trigger, false, wait);
            }
            //--------------------------------------------------------------------------------------------------
            // Attack Wave: 
            //--------------------------------------------------------------------------------------------------
            bool[17] aiDA87AEBD_wave6_enabled;
            wave[17] aiDA87AEBD_wave6_lastWave;
            trigger aiDA87AEBD_wave6_trigger = null;
            int aiDA87AEBD_wave6_runPlayer;
            playergroup aiDA87AEBD_wave6_runTarget;
            //--------------------------------------------------------------------------------------------------
            void aiDA87AEBD_wave6_init () {
                int init_i;
                for (init_i = 0; init_i &lt;= 16; init_i += 1) {
                    aiDA87AEBD_wave6_enabled[init_i] = true;
                    aiDA87AEBD_wave6_lastWave[init_i] = null;
                }
                aiDA87AEBD_wave6_trigger = TriggerCreate(&quot;aiDA87AEBD_wave6_runFunc&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            void aiDA87AEBD_wave6_enable (int p, bool val) {
                if (p &lt; 0 || p &gt;= 16) {
                    return;
                }
                aiDA87AEBD_wave6_enabled[p] = val;
            }
            //--------------------------------------------------------------------------------------------------
            bool aiDA87AEBD_wave6_isEnabled (int p) {
                if (p &lt; 0 || p &gt;= 16) {
                    return false;
                }
                return aiDA87AEBD_wave6_enabled[p];
            }
            //--------------------------------------------------------------------------------------------------
            wave aiDA87AEBD_wave6_createdWave (int p) {
                if (p &lt; 0 || p &gt;= 16) {
                    return null;
                }
                return aiDA87AEBD_wave6_lastWave[p];
            }
            //--------------------------------------------------------------------------------------------------
            bool aiDA87AEBD_wave6_runFunc (bool c, bool a) {
                int p = aiDA87AEBD_wave6_runPlayer;
                playergroup target = aiDA87AEBD_wave6_runTarget;
                int d;
                point gatherPoint = null;
                int ta = 0;
                int tg = 0;
                int ts = 0;
                int tf = 0;
                int td = 0;
                if (p &lt; 0 || p &gt;= 16) {
                    return false;
                }
                d = PlayerDifficulty(p);
                if (!aiDA87AEBD_wave6_enabled[p]) {
                    td = 0;
                    if (td &gt; 0) {
                        Wait(td, c_timeAI);
                    }
                    return true;
                }
                aiDA87AEBD_customData[p] = &quot;&quot;;
                ta = 0;
                if (d == 1) { ta = 240; }
                if (d == 2) { ta = 240; }
                if (d == 3) { ta = 180; }
                if (d == 4) { ta = 180; }
                if (d == 5) { ta = 180; }
                if (d == 6) { ta = 180; }
                tg = 0;
                ts = ta;
                if (tg &gt; 0 &amp;&amp; tg &lt; ta) {
                    Wait(ta - tg, c_timeAI);
                    ts = tg;
                }
                AIAttackWaveSetTargetPlayer(p, target);
                AIAttackWaveSetTargetPoint(p, PointFromId(1465535020));
                gatherPoint = aiDA87AEBD_defGather[p];
                AIAttackWaveSetGatherPoint(p, gatherPoint);
                gatherPoint = PointFromId(1429415567);
                AIAttackWaveSetGatherPoint(p, gatherPoint);
                AIAttackWaveClearWaypoints(p);
                AIAttackWaveAddWaypoint(p, PointFromId(295102286), false);
                Wait(ts, c_timeAI);
                TriggerExecute(TriggerFind(&quot;gt_Wave6_Func&quot;), true, false);
                tf = 0;
                if (tf &gt; 0) {
                    Wait(tf, c_timeAI);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void aiDA87AEBD_wave6_run (int p, playergroup target, bool wait) {
                aiDA87AEBD_wave6_runPlayer = p;
                aiDA87AEBD_wave6_runTarget = PlayerGroupCopy(target);
                TriggerExecute(aiDA87AEBD_wave6_trigger, false, wait);
            }
            //--------------------------------------------------------------------------------------------------
            // Attack Wave: 
            //--------------------------------------------------------------------------------------------------
            bool[17] aiDA87AEBD_wave7_enabled;
            wave[17] aiDA87AEBD_wave7_lastWave;
            trigger aiDA87AEBD_wave7_trigger = null;
            int aiDA87AEBD_wave7_runPlayer;
            playergroup aiDA87AEBD_wave7_runTarget;
            //--------------------------------------------------------------------------------------------------
            void aiDA87AEBD_wave7_init () {
                int init_i;
                for (init_i = 0; init_i &lt;= 16; init_i += 1) {
                    aiDA87AEBD_wave7_enabled[init_i] = true;
                    aiDA87AEBD_wave7_lastWave[init_i] = null;
                }
                aiDA87AEBD_wave7_trigger = TriggerCreate(&quot;aiDA87AEBD_wave7_runFunc&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            void aiDA87AEBD_wave7_enable (int p, bool val) {
                if (p &lt; 0 || p &gt;= 16) {
                    return;
                }
                aiDA87AEBD_wave7_enabled[p] = val;
            }
            //--------------------------------------------------------------------------------------------------
            bool aiDA87AEBD_wave7_isEnabled (int p) {
                if (p &lt; 0 || p &gt;= 16) {
                    return false;
                }
                return aiDA87AEBD_wave7_enabled[p];
            }
            //--------------------------------------------------------------------------------------------------
            wave aiDA87AEBD_wave7_createdWave (int p) {
                if (p &lt; 0 || p &gt;= 16) {
                    return null;
                }
                return aiDA87AEBD_wave7_lastWave[p];
            }
            //--------------------------------------------------------------------------------------------------
            bool aiDA87AEBD_wave7_runFunc (bool c, bool a) {
                int p = aiDA87AEBD_wave7_runPlayer;
                playergroup target = aiDA87AEBD_wave7_runTarget;
                int d;
                point gatherPoint = null;
                int ta = 0;
                int tg = 0;
                int ts = 0;
                int tf = 0;
                int td = 0;
                if (p &lt; 0 || p &gt;= 16) {
                    return false;
                }
                d = PlayerDifficulty(p);
                if (!aiDA87AEBD_wave7_enabled[p]) {
                    td = 0;
                    if (td &gt; 0) {
                        Wait(td, c_timeAI);
                    }
                    return true;
                }
                aiDA87AEBD_customData[p] = &quot;&quot;;
                ta = 0;
                if (d == 1) { ta = 240; }
                if (d == 2) { ta = 240; }
                if (d == 3) { ta = 180; }
                if (d == 4) { ta = 180; }
                if (d == 5) { ta = 180; }
                if (d == 6) { ta = 180; }
                tg = 0;
                ts = ta;
                if (tg &gt; 0 &amp;&amp; tg &lt; ta) {
                    Wait(ta - tg, c_timeAI);
                    ts = tg;
                }
                AIAttackWaveSetTargetPlayer(p, target);
                AIAttackWaveSetTargetPoint(p, PointFromId(1465535020));
                gatherPoint = aiDA87AEBD_defGather[p];
                AIAttackWaveSetGatherPoint(p, gatherPoint);
                gatherPoint = PointFromId(1429415567);
                AIAttackWaveSetGatherPoint(p, gatherPoint);
                AIAttackWaveClearWaypoints(p);
                AIAttackWaveAddWaypoint(p, PointFromId(295102286), false);
                Wait(ts, c_timeAI);
                TriggerExecute(TriggerFind(&quot;gt_Wave7_Func&quot;), true, false);
                tf = 0;
                if (tf &gt; 0) {
                    Wait(tf, c_timeAI);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void aiDA87AEBD_wave7_run (int p, playergroup target, bool wait) {
                aiDA87AEBD_wave7_runPlayer = p;
                aiDA87AEBD_wave7_runTarget = PlayerGroupCopy(target);
                TriggerExecute(aiDA87AEBD_wave7_trigger, false, wait);
            }
            //--------------------------------------------------------------------------------------------------
            // Attack Wave: 
            //--------------------------------------------------------------------------------------------------
            bool[17] aiDA87AEBD_wave8_enabled;
            wave[17] aiDA87AEBD_wave8_lastWave;
            trigger aiDA87AEBD_wave8_trigger = null;
            int aiDA87AEBD_wave8_runPlayer;
            playergroup aiDA87AEBD_wave8_runTarget;
            //--------------------------------------------------------------------------------------------------
            void aiDA87AEBD_wave8_init () {
                int init_i;
                for (init_i = 0; init_i &lt;= 16; init_i += 1) {
                    aiDA87AEBD_wave8_enabled[init_i] = true;
                    aiDA87AEBD_wave8_lastWave[init_i] = null;
                }
                aiDA87AEBD_wave8_trigger = TriggerCreate(&quot;aiDA87AEBD_wave8_runFunc&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            void aiDA87AEBD_wave8_enable (int p, bool val) {
                if (p &lt; 0 || p &gt;= 16) {
                    return;
                }
                aiDA87AEBD_wave8_enabled[p] = val;
            }
            //--------------------------------------------------------------------------------------------------
            bool aiDA87AEBD_wave8_isEnabled (int p) {
                if (p &lt; 0 || p &gt;= 16) {
                    return false;
                }
                return aiDA87AEBD_wave8_enabled[p];
            }
            //--------------------------------------------------------------------------------------------------
            wave aiDA87AEBD_wave8_createdWave (int p) {
                if (p &lt; 0 || p &gt;= 16) {
                    return null;
                }
                return aiDA87AEBD_wave8_lastWave[p];
            }
            //--------------------------------------------------------------------------------------------------
            bool aiDA87AEBD_wave8_runFunc (bool c, bool a) {
                int p = aiDA87AEBD_wave8_runPlayer;
                playergroup target = aiDA87AEBD_wave8_runTarget;
                int d;
                point gatherPoint = null;
                int ta = 0;
                int tg = 0;
                int ts = 0;
                int tf = 0;
                int td = 0;
                if (p &lt; 0 || p &gt;= 16) {
                    return false;
                }
                d = PlayerDifficulty(p);
                if (!aiDA87AEBD_wave8_enabled[p]) {
                    td = 0;
                    if (td &gt; 0) {
                        Wait(td, c_timeAI);
                    }
                    return true;
                }
                aiDA87AEBD_customData[p] = &quot;&quot;;
                ta = 0;
                if (d == 1) { ta = 240; }
                if (d == 2) { ta = 240; }
                if (d == 3) { ta = 180; }
                if (d == 4) { ta = 180; }
                if (d == 5) { ta = 180; }
                if (d == 6) { ta = 180; }
                tg = 0;
                ts = ta;
                if (tg &gt; 0 &amp;&amp; tg &lt; ta) {
                    Wait(ta - tg, c_timeAI);
                    ts = tg;
                }
                AIAttackWaveSetTargetPlayer(p, target);
                AIAttackWaveSetTargetPoint(p, PointFromId(1465535020));
                gatherPoint = aiDA87AEBD_defGather[p];
                AIAttackWaveSetGatherPoint(p, gatherPoint);
                gatherPoint = PointFromId(1429415567);
                AIAttackWaveSetGatherPoint(p, gatherPoint);
                AIAttackWaveClearWaypoints(p);
                AIAttackWaveAddWaypoint(p, PointFromId(295102286), false);
                Wait(ts, c_timeAI);
                TriggerExecute(TriggerFind(&quot;gt_Wave8_Func&quot;), true, false);
                tf = 0;
                if (tf &gt; 0) {
                    Wait(tf, c_timeAI);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void aiDA87AEBD_wave8_run (int p, playergroup target, bool wait) {
                aiDA87AEBD_wave8_runPlayer = p;
                aiDA87AEBD_wave8_runTarget = PlayerGroupCopy(target);
                TriggerExecute(aiDA87AEBD_wave8_trigger, false, wait);
            }
            //--------------------------------------------------------------------------------------------------
            // Attack Wave: 
            //--------------------------------------------------------------------------------------------------
            bool[17] aiDA87AEBD_wave9_enabled;
            wave[17] aiDA87AEBD_wave9_lastWave;
            trigger aiDA87AEBD_wave9_trigger = null;
            int aiDA87AEBD_wave9_runPlayer;
            playergroup aiDA87AEBD_wave9_runTarget;
            //--------------------------------------------------------------------------------------------------
            void aiDA87AEBD_wave9_init () {
                int init_i;
                for (init_i = 0; init_i &lt;= 16; init_i += 1) {
                    aiDA87AEBD_wave9_enabled[init_i] = true;
                    aiDA87AEBD_wave9_lastWave[init_i] = null;
                }
                aiDA87AEBD_wave9_trigger = TriggerCreate(&quot;aiDA87AEBD_wave9_runFunc&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            void aiDA87AEBD_wave9_enable (int p, bool val) {
                if (p &lt; 0 || p &gt;= 16) {
                    return;
                }
                aiDA87AEBD_wave9_enabled[p] = val;
            }
            //--------------------------------------------------------------------------------------------------
            bool aiDA87AEBD_wave9_isEnabled (int p) {
                if (p &lt; 0 || p &gt;= 16) {
                    return false;
                }
                return aiDA87AEBD_wave9_enabled[p];
            }
            //--------------------------------------------------------------------------------------------------
            wave aiDA87AEBD_wave9_createdWave (int p) {
                if (p &lt; 0 || p &gt;= 16) {
                    return null;
                }
                return aiDA87AEBD_wave9_lastWave[p];
            }
            //--------------------------------------------------------------------------------------------------
            bool aiDA87AEBD_wave9_runFunc (bool c, bool a) {
                int p = aiDA87AEBD_wave9_runPlayer;
                playergroup target = aiDA87AEBD_wave9_runTarget;
                int d;
                point gatherPoint = null;
                int ta = 0;
                int tg = 0;
                int ts = 0;
                int tf = 0;
                int td = 0;
                if (p &lt; 0 || p &gt;= 16) {
                    return false;
                }
                d = PlayerDifficulty(p);
                if (!aiDA87AEBD_wave9_enabled[p]) {
                    td = 0;
                    if (td &gt; 0) {
                        Wait(td, c_timeAI);
                    }
                    return true;
                }
                aiDA87AEBD_customData[p] = &quot;&quot;;
                ta = 0;
                if (d == 1) { ta = 240; }
                if (d == 2) { ta = 240; }
                if (d == 3) { ta = 180; }
                if (d == 4) { ta = 180; }
                if (d == 5) { ta = 180; }
                if (d == 6) { ta = 180; }
                tg = 0;
                ts = ta;
                if (tg &gt; 0 &amp;&amp; tg &lt; ta) {
                    Wait(ta - tg, c_timeAI);
                    ts = tg;
                }
                AIAttackWaveSetTargetPlayer(p, target);
                AIAttackWaveSetTargetPoint(p, PointFromId(1465535020));
                gatherPoint = aiDA87AEBD_defGather[p];
                AIAttackWaveSetGatherPoint(p, gatherPoint);
                gatherPoint = PointFromId(1429415567);
                AIAttackWaveSetGatherPoint(p, gatherPoint);
                AIAttackWaveClearWaypoints(p);
                AIAttackWaveAddWaypoint(p, PointFromId(295102286), false);
                Wait(ts, c_timeAI);
                TriggerExecute(TriggerFind(&quot;gt_Wave9_Func&quot;), true, false);
                tf = 0;
                if (tf &gt; 0) {
                    Wait(tf, c_timeAI);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void aiDA87AEBD_wave9_run (int p, playergroup target, bool wait) {
                aiDA87AEBD_wave9_runPlayer = p;
                aiDA87AEBD_wave9_runTarget = PlayerGroupCopy(target);
                TriggerExecute(aiDA87AEBD_wave9_trigger, false, wait);
            }
            //--------------------------------------------------------------------------------------------------
            // Attack Wave: 
            //--------------------------------------------------------------------------------------------------
            bool[17] aiDA87AEBD_wave10_enabled;
            wave[17] aiDA87AEBD_wave10_lastWave;
            trigger aiDA87AEBD_wave10_trigger = null;
            int aiDA87AEBD_wave10_runPlayer;
            playergroup aiDA87AEBD_wave10_runTarget;
            //--------------------------------------------------------------------------------------------------
            void aiDA87AEBD_wave10_init () {
                int init_i;
                for (init_i = 0; init_i &lt;= 16; init_i += 1) {
                    aiDA87AEBD_wave10_enabled[init_i] = true;
                    aiDA87AEBD_wave10_lastWave[init_i] = null;
                }
                aiDA87AEBD_wave10_trigger = TriggerCreate(&quot;aiDA87AEBD_wave10_runFunc&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            void aiDA87AEBD_wave10_enable (int p, bool val) {
                if (p &lt; 0 || p &gt;= 16) {
                    return;
                }
                aiDA87AEBD_wave10_enabled[p] = val;
            }
            //--------------------------------------------------------------------------------------------------
            bool aiDA87AEBD_wave10_isEnabled (int p) {
                if (p &lt; 0 || p &gt;= 16) {
                    return false;
                }
                return aiDA87AEBD_wave10_enabled[p];
            }
            //--------------------------------------------------------------------------------------------------
            wave aiDA87AEBD_wave10_createdWave (int p) {
                if (p &lt; 0 || p &gt;= 16) {
                    return null;
                }
                return aiDA87AEBD_wave10_lastWave[p];
            }
            //--------------------------------------------------------------------------------------------------
            bool aiDA87AEBD_wave10_runFunc (bool c, bool a) {
                int p = aiDA87AEBD_wave10_runPlayer;
                playergroup target = aiDA87AEBD_wave10_runTarget;
                int d;
                point gatherPoint = null;
                int ta = 0;
                int tg = 0;
                int ts = 0;
                int tf = 0;
                int td = 0;
                if (p &lt; 0 || p &gt;= 16) {
                    return false;
                }
                d = PlayerDifficulty(p);
                if (!aiDA87AEBD_wave10_enabled[p]) {
                    td = 0;
                    if (td &gt; 0) {
                        Wait(td, c_timeAI);
                    }
                    return true;
                }
                aiDA87AEBD_customData[p] = &quot;&quot;;
                ta = 0;
                if (d == 1) { ta = 240; }
                if (d == 2) { ta = 240; }
                if (d == 3) { ta = 180; }
                if (d == 4) { ta = 180; }
                if (d == 5) { ta = 180; }
                if (d == 6) { ta = 180; }
                tg = 0;
                ts = ta;
                if (tg &gt; 0 &amp;&amp; tg &lt; ta) {
                    Wait(ta - tg, c_timeAI);
                    ts = tg;
                }
                AIAttackWaveSetTargetPlayer(p, target);
                AIAttackWaveSetTargetPoint(p, PointFromId(1465535020));
                gatherPoint = aiDA87AEBD_defGather[p];
                AIAttackWaveSetGatherPoint(p, gatherPoint);
                gatherPoint = PointFromId(1429415567);
                AIAttackWaveSetGatherPoint(p, gatherPoint);
                AIAttackWaveClearWaypoints(p);
                AIAttackWaveAddWaypoint(p, PointFromId(295102286), false);
                Wait(ts, c_timeAI);
                TriggerExecute(TriggerFind(&quot;gt_Wave10_Func&quot;), true, false);
                tf = 0;
                if (tf &gt; 0) {
                    Wait(tf, c_timeAI);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void aiDA87AEBD_wave10_run (int p, playergroup target, bool wait) {
                aiDA87AEBD_wave10_runPlayer = p;
                aiDA87AEBD_wave10_runTarget = PlayerGroupCopy(target);
                TriggerExecute(aiDA87AEBD_wave10_trigger, false, wait);
            }
            //--------------------------------------------------------------------------------------------------
            // Attack Wave Wrappers
            //--------------------------------------------------------------------------------------------------
            void aiDA87AEBD_wave_enable (int w, int p, bool val) {
                if (w == 1) { aiDA87AEBD_wave1_enable(p, val); }
                if (w == 2) { aiDA87AEBD_wave2_enable(p, val); }
                if (w == 3) { aiDA87AEBD_wave3_enable(p, val); }
                if (w == 4) { aiDA87AEBD_wave4_enable(p, val); }
                if (w == 5) { aiDA87AEBD_wave5_enable(p, val); }
                if (w == 6) { aiDA87AEBD_wave6_enable(p, val); }
                if (w == 7) { aiDA87AEBD_wave7_enable(p, val); }
                if (w == 8) { aiDA87AEBD_wave8_enable(p, val); }
                if (w == 9) { aiDA87AEBD_wave9_enable(p, val); }
                if (w == 10) { aiDA87AEBD_wave10_enable(p, val); }
            }
            //--------------------------------------------------------------------------------------------------
            bool aiDA87AEBD_wave_isEnabled (int w, int p) {
                if (w == 1) { return aiDA87AEBD_wave1_isEnabled(p); }
                if (w == 2) { return aiDA87AEBD_wave2_isEnabled(p); }
                if (w == 3) { return aiDA87AEBD_wave3_isEnabled(p); }
                if (w == 4) { return aiDA87AEBD_wave4_isEnabled(p); }
                if (w == 5) { return aiDA87AEBD_wave5_isEnabled(p); }
                if (w == 6) { return aiDA87AEBD_wave6_isEnabled(p); }
                if (w == 7) { return aiDA87AEBD_wave7_isEnabled(p); }
                if (w == 8) { return aiDA87AEBD_wave8_isEnabled(p); }
                if (w == 9) { return aiDA87AEBD_wave9_isEnabled(p); }
                if (w == 10) { return aiDA87AEBD_wave10_isEnabled(p); }
                return false;
            }
            //--------------------------------------------------------------------------------------------------
            unitgroup aiDA87AEBD_wave_createdUnits (int w, int p) {
                return null;
            }
            //--------------------------------------------------------------------------------------------------
            wave aiDA87AEBD_wave_createdWave (int w, int p) {
                if (w == 1) { return aiDA87AEBD_wave1_createdWave(p); }
                if (w == 2) { return aiDA87AEBD_wave2_createdWave(p); }
                if (w == 3) { return aiDA87AEBD_wave3_createdWave(p); }
                if (w == 4) { return aiDA87AEBD_wave4_createdWave(p); }
                if (w == 5) { return aiDA87AEBD_wave5_createdWave(p); }
                if (w == 6) { return aiDA87AEBD_wave6_createdWave(p); }
                if (w == 7) { return aiDA87AEBD_wave7_createdWave(p); }
                if (w == 8) { return aiDA87AEBD_wave8_createdWave(p); }
                if (w == 9) { return aiDA87AEBD_wave9_createdWave(p); }
                if (w == 10) { return aiDA87AEBD_wave10_createdWave(p); }
                return null;
            }
            //--------------------------------------------------------------------------------------------------
            void aiDA87AEBD_wave_run (int w, int p, playergroup target, bool wait) {
                if (w == 1) { aiDA87AEBD_wave1_run(p, target, wait); }
                if (w == 2) { aiDA87AEBD_wave2_run(p, target, wait); }
                if (w == 3) { aiDA87AEBD_wave3_run(p, target, wait); }
                if (w == 4) { aiDA87AEBD_wave4_run(p, target, wait); }
                if (w == 5) { aiDA87AEBD_wave5_run(p, target, wait); }
                if (w == 6) { aiDA87AEBD_wave6_run(p, target, wait); }
                if (w == 7) { aiDA87AEBD_wave7_run(p, target, wait); }
                if (w == 8) { aiDA87AEBD_wave8_run(p, target, wait); }
                if (w == 9) { aiDA87AEBD_wave9_run(p, target, wait); }
                if (w == 10) { aiDA87AEBD_wave10_run(p, target, wait); }
            }
            //--------------------------------------------------------------------------------------------------
            // Attack Wave Sequence
            //--------------------------------------------------------------------------------------------------
            trigger aiDA87AEBD_waves_trigger = null;
            int aiDA87AEBD_waves_runPlayer;
            playergroup aiDA87AEBD_waves_runTarget;
            //--------------------------------------------------------------------------------------------------
            void aiDA87AEBD_waves_init () {
                aiDA87AEBD_waves_trigger = TriggerCreate(&quot;aiDA87AEBD_waves_runFunc&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            bool aiDA87AEBD_waves_runFunc (bool c, bool a) {
                int p = aiDA87AEBD_waves_runPlayer;
                playergroup target = aiDA87AEBD_waves_runTarget;
                if (p &lt; 0 || p &gt;= 16) {
                    return false;
                }
                aiDA87AEBD_wave1_run(p, target, true);
                aiDA87AEBD_wave2_run(p, target, true);
                aiDA87AEBD_wave3_run(p, target, true);
                aiDA87AEBD_wave4_run(p, target, true);
                aiDA87AEBD_wave5_run(p, target, true);
                aiDA87AEBD_wave6_run(p, target, true);
                aiDA87AEBD_wave7_run(p, target, true);
                aiDA87AEBD_wave8_run(p, target, true);
                aiDA87AEBD_wave9_run(p, target, true);
                aiDA87AEBD_wave10_run(p, target, true);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void aiDA87AEBD_waves_run (int p, playergroup target) {
                aiDA87AEBD_waves_runPlayer = p;
                aiDA87AEBD_waves_runTarget = PlayerGroupCopy(target);
                TriggerExecute(aiDA87AEBD_waves_trigger, false, false);
            }
            //--------------------------------------------------------------------------------------------------
            void aiDA87AEBD_waves_enable (int p, bool val) {
                if (p &lt; 0 || p &gt;= 16) {
                    return;
                }
                aiDA87AEBD_wave1_enable(p, val);
                aiDA87AEBD_wave2_enable(p, val);
                aiDA87AEBD_wave3_enable(p, val);
                aiDA87AEBD_wave4_enable(p, val);
                aiDA87AEBD_wave5_enable(p, val);
                aiDA87AEBD_wave6_enable(p, val);
                aiDA87AEBD_wave7_enable(p, val);
                aiDA87AEBD_wave8_enable(p, val);
                aiDA87AEBD_wave9_enable(p, val);
                aiDA87AEBD_wave10_enable(p, val);
            }
            //--------------------------------------------------------------------------------------------------
            void aiDA87AEBD_waves_stop () {
                TriggerStop(aiDA87AEBD_waves_trigger);
                TriggerStop(aiDA87AEBD_wave1_trigger);
                TriggerStop(aiDA87AEBD_wave2_trigger);
                TriggerStop(aiDA87AEBD_wave3_trigger);
                TriggerStop(aiDA87AEBD_wave4_trigger);
                TriggerStop(aiDA87AEBD_wave5_trigger);
                TriggerStop(aiDA87AEBD_wave6_trigger);
                TriggerStop(aiDA87AEBD_wave7_trigger);
                TriggerStop(aiDA87AEBD_wave8_trigger);
                TriggerStop(aiDA87AEBD_wave9_trigger);
                TriggerStop(aiDA87AEBD_wave10_trigger);
            }
            //--------------------------------------------------------------------------------------------------
            // Configuration
            //--------------------------------------------------------------------------------------------------
            void aiDA87AEBD_setDefGather (int p, point val) {
                if (p &lt; 0 || p &gt;= 16) {
                    return;
                }
                aiDA87AEBD_defGather[p] = val;
            }
            //--------------------------------------------------------------------------------------------------
            string aiDA87AEBD_getCustomData (int p) {
                if (p &lt; 0 || p &gt;= 16) {
                    return null;
                }
                return aiDA87AEBD_customData[p];
            }
            //--------------------------------------------------------------------------------------------------
            wave aiDA87AEBD_getLastWave (int p) {
                if (p &lt; 0 || p &gt;= 16) {
                    return null;
                }
                return aiDA87AEBD_lastWave[p];
            }
            //--------------------------------------------------------------------------------------------------
            // Start
            //--------------------------------------------------------------------------------------------------
            bool aiDA87AEBD_initialized = false;
            //--------------------------------------------------------------------------------------------------
            void aiDA87AEBD_start (int p) {
                int init_i;
                if (p &lt; 0 || p &gt;= 16) {
                    return;
                }
                if (!aiDA87AEBD_initialized) {
                    aiDA87AEBD_wave1_init();
                    aiDA87AEBD_wave2_init();
                    aiDA87AEBD_wave3_init();
                    aiDA87AEBD_wave4_init();
                    aiDA87AEBD_wave5_init();
                    aiDA87AEBD_wave6_init();
                    aiDA87AEBD_wave7_init();
                    aiDA87AEBD_wave8_init();
                    aiDA87AEBD_wave9_init();
                    aiDA87AEBD_wave10_init();
                    aiDA87AEBD_waves_init();
                    for (init_i = 0; init_i &lt;= 16; init_i += 1) {
                        aiDA87AEBD_defGather[init_i] = PointFromId(1429415567);
                    }
                    aiDA87AEBD_initialized = true;
                }
                AICampaignStart(p);
            }
            //==================================================================================================
            // 
            // Generated Map Script
            // 
            // Name:   RTC 2017: Dilemma
            // 
            //==================================================================================================
            include &quot;TriggerLibs/NativeLib&quot;
            include &quot;TriggerLibs/SwarmLib&quot;
            include &quot;TriggerLibs/VoidLib&quot;
            include &quot;LibCOMI&quot;
            //--------------------------------------------------------------------------------------------------
            // Library Initialization
            //--------------------------------------------------------------------------------------------------
            void InitLibs2 () {
                libNtve_InitLib();
                libHots_InitLib();
                libLotv_InitLib();
                libCOMI_InitLib();
            }
            //--------------------------------------------------------------------------------------------------
            // Constants
            //--------------------------------------------------------------------------------------------------
            const int gv_pLAYER1 = 1;
            const int gv_pLAYER2 = 2;
            const int gv_moebiusForces = 3;
            const int gv_amonReinforcements1 = 4;
            const int gv_amonReinforcements2 = 5;
            const int gv_superHybrids = 6;
            const int gv_pLAYER_01_USER = 1;
            const int gv_pLAYER_02_USER = 2;
            const int gv_pLAYER_03_ENEMY = 3;
            const int gv_pLAYER_04_ENEMY = 4;
            //--------------------------------------------------------------------------------------------------
            // Global Variables
            //--------------------------------------------------------------------------------------------------
            bool gv_GameOver;
            int gv_level;
            bool gv_pRUsed;
            playergroup gv_hostilePG;
            playergroup gv_humanPG;
            string gv_bossType1;
            string gv_bossType2;
            string gv_bossType3;
            unit gv_boss1;
            unit gv_boss2;
            unit gv_boss3;
            unit gv_psiInhibitor;
            int gv_pingCell1;
            int gv_pingCell2;
            int gv_pingCell3;
            int gv_bonusPing;
            string gv_amonReinforcementsRace;
            timer gv_awakeningTimer;
            timer gv_bonusTimer;
            int gv_awakeningTimerWindow;
            unit gv_infoZoneBeacon;
            unit gv_eventBoss1Beacon;
            timer gv_eventBoss1Timer;
            unit gv_eventBoss1Agent;
            unit gv_eventBoss2Beacon;
            timer gv_eventBoss2Timer;
            unit gv_eventBoss2Agent;
            unit gv_eventBoss3Beacon;
            timer gv_eventBoss3Timer;
            unit gv_eventBoss3Agent;
            soundlink gv_enteringBossRoomTransmission;
            int gv_objectivePsiInhibitorMustSurvive;
            int gv_objectiveKillTheBoss01;
            int gv_objectiveDestroyTheComSat;
            void InitGlobals () {
                gv_hostilePG = PlayerGroupEmpty();
                gv_humanPG = PlayerGroupEmpty();
                gv_boss1 = UnitFromId(81150670);
                gv_boss2 = UnitFromId(81150670);
                gv_boss3 = UnitFromId(81150670);
                gv_psiInhibitor = UnitFromId(81150670);
                gv_pingCell1 = c_invalidPingId;
                gv_pingCell2 = c_invalidPingId;
                gv_pingCell3 = c_invalidPingId;
                gv_bonusPing = c_invalidPingId;
                gv_amonReinforcementsRace = &quot;Terr&quot;;
                gv_awakeningTimer = TimerCreate();
                gv_bonusTimer = TimerCreate();
                gv_awakeningTimerWindow = c_timerWindowNone;
                gv_infoZoneBeacon = UnitFromId(442934973);
                gv_eventBoss1Beacon = UnitFromId(440802583);
                gv_eventBoss1Timer = TimerCreate();
                gv_eventBoss2Beacon = UnitFromId(2059247995);
                gv_eventBoss2Timer = TimerCreate();
                gv_eventBoss3Beacon = UnitFromId(36053617);
                gv_eventBoss3Timer = TimerCreate();
                gv_enteringBossRoomTransmission = SoundLink(&quot;Ac_Dilemma_Enter1&quot;, -1);
                gv_objectivePsiInhibitorMustSurvive = c_invalidObjectiveId;
                gv_objectiveKillTheBoss01 = c_invalidObjectiveId;
                gv_objectiveDestroyTheComSat = c_invalidObjectiveId;
            }
            //--------------------------------------------------------------------------------------------------
            // Global Function Declarations
            //--------------------------------------------------------------------------------------------------
            void gf_CreateAICommanderPodAttack (int lp_player, int lp_resourceSize, int lp_techLevel, point lp_dropPoint, point lp_attackPoint);
            void gf_CreateAICommanderDropAttack (int lp_player, int lp_resourceSize, int lp_techLevel, point lp_dropPoint, point lp_droppingPoint, point lp_attackPoint);
            void gf_TrackUnitGroupWithPing (unitgroup lp_unitGroup);
            void gf_TrackBossWithPing (unit lp_bossUnit);
            //--------------------------------------------------------------------------------------------------
            // Trigger Variables
            //--------------------------------------------------------------------------------------------------
            trigger gt_Init01LoadData;
            trigger gt_Init02Players;
            trigger gt_Init03LoadingComplete;
            trigger gt_Init04Technology;
            trigger gt_Init05Units;
            trigger gt_Init06MusicSound;
            trigger gt_Init07Environment;
            trigger gt_Init08Difficulties;
            trigger gt_Init09BossPick;
            trigger gt_Init10DevMode;
            trigger gt_StartGameQ;
            trigger gt_LevelUp1;
            trigger gt_LevelUp2;
            trigger gt_LevelUp3;
            trigger gt_BossPowerUp1;
            trigger gt_BossPowerUp2;
            trigger gt_BossPowerUp3;
            trigger gt_RiftReticle;
            trigger gt_InfoZoneEvent;
            trigger gt_IntroEvent;
            trigger gt_LeftsideEvent;
            trigger gt_LeftsideReinforcement;
            trigger gt_AirlockEvent;
            trigger gt_MainBaseEvent;
            trigger gt_SASEvent;
            trigger gt_BonusDiscovering;
            trigger gt_EntranceEvent;
            trigger gt_EventBoss1;
            trigger gt_EventBoss1AgentPRVanish;
            trigger gt_EventBoss1MarinesReinforcement;
            trigger gt_EventBoss1DropReinforcement;
            trigger gt_EventBoss1DefSystem;
            trigger gt_Pingobjective1;
            trigger gt_EnteringBoss1room;
            trigger gt_Boss1Pop;
            trigger gt_Boss1Wave;
            trigger gt_Boss1Die;
            trigger gt_EventBoss2;
            trigger gt_EventBoss2AgentPRVanish;
            trigger gt_EventBoss2MarinesReinforcement;
            trigger gt_EventBoss2DropReinforcement;
            trigger gt_EventBoss2DefSystem;
            trigger gt_Pingobjective2;
            trigger gt_EnteringBoss2room;
            trigger gt_Boss2Pop;
            trigger gt_Boss2Wave;
            trigger gt_Boss2Die;
            trigger gt_EventBoss3;
            trigger gt_EventBoss3AgentPRVanish;
            trigger gt_EventBoss3MarinesReinforcement;
            trigger gt_EventBoss3DropReinforcement;
            trigger gt_EventBoss3DefSystem;
            trigger gt_Pingobjective3;
            trigger gt_EnteringBoss3room;
            trigger gt_Boss3Pop;
            trigger gt_Boss3Wave;
            trigger gt_Boss3Die;
            trigger gt_FinalBossPop;
            trigger gt_FinalBossWave;
            trigger gt_FinalBC;
            trigger gt_FinalSiege;
            trigger gt_FinalSupportwave;
            trigger gt_MagRespawn;
            trigger gt_EnteringBossRoomTransmission;
            trigger gt_EnemyAttackingQ;
            trigger gt_StartAI;
            trigger gt_UpgradeAI;
            trigger gt_Wave1;
            trigger gt_Wave2;
            trigger gt_Wave3;
            trigger gt_Wave4;
            trigger gt_Wave5;
            trigger gt_Wave6;
            trigger gt_Wave7;
            trigger gt_Wave8;
            trigger gt_Wave9;
            trigger gt_Wave10;
            trigger gt_Checkvictory;
            trigger gt_CheckCells;
            trigger gt_DefeatBaseDead;
            trigger gt_Victory;
            trigger gt_Defeat;
            trigger gt_ObjectivePsiInhibitorMustSurviveCreate;
            trigger gt_ObjectivePsiInhibitorMustSurviveFailed;
            trigger gt_ObjectiveKillTheBoss01Create;
            trigger gt_ObjectiveKillTheBoss01Complete;
            trigger gt_ObjectiveKillTheBoss02Complete;
            trigger gt_ObjectiveKillTheBoss03Complete;
            trigger gt_ObjectiveDestroyTheComSatCreate;
            trigger gt_ObjectiveDestroyTheComSatComplete;
            trigger gt_ObjectiveDestroyTheComSatFailed;
            //--------------------------------------------------------------------------------------------------
            // Custom AI Functions
            //--------------------------------------------------------------------------------------------------
            string[17] cai_playerAI;
            //--------------------------------------------------------------------------------------------------
            void InitCustomAI () {
                int init_i;
                for (init_i = 0; init_i &lt;= 16; init_i += 1) {
                    cai_playerAI[init_i] = null;
                }
            }
            //--------------------------------------------------------------------------------------------------
            void cai_start (string ai, int p) {
                if (p &lt; 0 || p &gt;= 16) {
                    return;
                }
                cai_playerAI[p] = ai;
                if (cai_playerAI[p] == &quot;aiDA87AEBD&quot;) { aiDA87AEBD_start(p); }
            }
            //--------------------------------------------------------------------------------------------------
            void cai_setDefGather (int p, point val) {
                if (p &lt; 0 || p &gt;= 16) {
                    return;
                }
                if (cai_playerAI[p] == &quot;aiDA87AEBD&quot;) { aiDA87AEBD_setDefGather(p, val); }
            }
            //--------------------------------------------------------------------------------------------------
            string cai_getCustomData (int p) {
                if (p &lt; 0 || p &gt;= 16) {
                    return null;
                }
                if (cai_playerAI[p] == &quot;aiDA87AEBD&quot;) { return aiDA87AEBD_getCustomData(p); }
                return null;
            }
            //--------------------------------------------------------------------------------------------------
            wave cai_getLastWave (int p) {
                if (p &lt; 0 || p &gt;= 16) {
                    return null;
                }
                if (cai_playerAI[p] == &quot;aiDA87AEBD&quot;) { return aiDA87AEBD_getLastWave(p); }
                return null;
            }
            //--------------------------------------------------------------------------------------------------
            void cai_waves_run (int p, playergroup target) {
                if (p &lt; 0 || p &gt;= 16) {
                    return;
                }
                if (cai_playerAI[p] == &quot;aiDA87AEBD&quot;) { aiDA87AEBD_waves_run(p, target); }
            }
            //--------------------------------------------------------------------------------------------------
            void cai_waves_enable (int p, bool val) {
                if (p &lt; 0 || p &gt;= 16) {
                    return;
                }
                if (cai_playerAI[p] == &quot;aiDA87AEBD&quot;) { aiDA87AEBD_waves_enable(p, val); }
            }
            //--------------------------------------------------------------------------------------------------
            void cai_waves_stop (string ai) {
                if (ai == &quot;aiDA87AEBD&quot;) { aiDA87AEBD_waves_stop(); }
            }
            //--------------------------------------------------------------------------------------------------
            void cai_wave_run (int w, int p, playergroup target, bool wait) {
                if (p &lt; 0 || p &gt;= 16) {
                    return;
                }
                if (cai_playerAI[p] == &quot;aiDA87AEBD&quot;) { aiDA87AEBD_wave_run(w, p, target, wait); }
            }
            //--------------------------------------------------------------------------------------------------
            void cai_wave_enable (int w, int p, bool val) {
                if (p &lt; 0 || p &gt;= 16) {
                    return;
                }
                if (cai_playerAI[p] == &quot;aiDA87AEBD&quot;) { aiDA87AEBD_wave_enable(w, p, val); }
            }
            //--------------------------------------------------------------------------------------------------
            bool cai_wave_isEnabled (int w, int p) {
                if (p &lt; 0 || p &gt;= 16) {
                    return false;
                }
                if (cai_playerAI[p] == &quot;aiDA87AEBD&quot;) { return aiDA87AEBD_wave_isEnabled(w, p); }
                return false;
            }
            //--------------------------------------------------------------------------------------------------
            unitgroup cai_wave_createdUnits (int w, int p) {
                if (p &lt; 0 || p &gt;= 16) {
                    return null;
                }
                if (cai_playerAI[p] == &quot;aiDA87AEBD&quot;) { return aiDA87AEBD_wave_createdUnits(w, p); }
                return null;
            }
            //--------------------------------------------------------------------------------------------------
            wave cai_wave_createdWave (int w, int p) {
                if (p &lt; 0 || p &gt;= 16) {
                    return null;
                }
                if (cai_playerAI[p] == &quot;aiDA87AEBD&quot;) { return aiDA87AEBD_wave_createdWave(w, p); }
                return null;
            }
            //--------------------------------------------------------------------------------------------------
            void cai_startall () {
                cai_start(&quot;aiDA87AEBD&quot;, 3);
                AICampaignStart(4);
                AICampaignStart(5);
                AICampaignStart(6);
            }
            //--------------------------------------------------------------------------------------------------
            void cai_runall () {
                playergroup target = PlayerGroupEmpty();
            }
            //--------------------------------------------------------------------------------------------------
            // Global Functions
            //--------------------------------------------------------------------------------------------------
            void gf_CreateAICommanderPodAttack (int lp_player, int lp_resourceSize, int lp_techLevel, point lp_dropPoint, point lp_attackPoint) {
                // Implementation
                AIAttackWaveSetTargetPoint(lp_player, lp_attackPoint);
                AIAttackWaveUseGroup(lp_player, libCOMI_gf_CreateCommanderAttackGroupatPoint(lp_player, lp_resourceSize, lp_techLevel, lp_dropPoint));
                AIAttackWaveSend(lp_player, 0, false);
            }
            void gf_CreateAICommanderDropAttack (int lp_player, int lp_resourceSize, int lp_techLevel, point lp_dropPoint, point lp_droppingPoint, point lp_attackPoint) {
                // Variable Declarations
                string lv_dropUnit;
                // Variable Initialization
                lv_dropUnit = &quot;Overlord&quot;;
                // Implementation
                if ((PlayerRace(gv_amonReinforcements1) == &quot;Prot&quot;)) {
                    lv_dropUnit = &quot;WarpPrism&quot;;
                }
                else {
                    if ((PlayerRace(gv_amonReinforcements1) == &quot;Terr&quot;)) {
                        lv_dropUnit = &quot;Medivac&quot;;
                    }
                    else {
                        lv_dropUnit = &quot;Overlord&quot;;
                    }
                }
                libNtve_gf_CreateUnitsWithDefaultFacing(2, lv_dropUnit, 0, lp_player, lp_dropPoint);
                AIAttackWaveSetTargetPoint(lp_player, lp_attackPoint);
                AIAttackWaveUseGroup(lp_player, UnitLastCreatedGroup());
                AIAttackWaveUseGroup(lp_player, libCOMI_gf_CreateCommanderAttackGroupatPoint(lp_player, lp_resourceSize, lp_techLevel, lp_dropPoint));
                AIAttackWaveSend(lp_player, 2, false);
                AIWaveTargetAddWaypoint(AIWaveGetTarget(WaveLastCreated()), lp_droppingPoint, true, 0);
            }
            trigger auto_gf_TrackUnitGroupWithPing_Trigger = null;
            unitgroup auto_gf_TrackUnitGroupWithPing_lp_unitGroup;
            void gf_TrackUnitGroupWithPing (unitgroup lp_unitGroup) {
                auto_gf_TrackUnitGroupWithPing_lp_unitGroup = lp_unitGroup;
                if (auto_gf_TrackUnitGroupWithPing_Trigger == null) {
                    auto_gf_TrackUnitGroupWithPing_Trigger = TriggerCreate(&quot;auto_gf_TrackUnitGroupWithPing_TriggerFunc&quot;);
                }
                TriggerExecute(auto_gf_TrackUnitGroupWithPing_Trigger, false, false);
            }
            bool auto_gf_TrackUnitGroupWithPing_TriggerFunc (bool testConds, bool runActions) {
                unitgroup lp_unitGroup = auto_gf_TrackUnitGroupWithPing_lp_unitGroup;
                // Variable Declarations
                int lv_groupPing;
                // Variable Initialization
                lv_groupPing = c_invalidPingId;
                // Implementation
                libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), &quot;PingAlert&quot;, UnitGroupCenterOfGroup(lp_unitGroup), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0, 270.0);
                lv_groupPing = PingLastCreated();
                PingSetScale(PingLastCreated(), 0.75);
                PingSetTooltip(PingLastCreated(), StringExternal(&quot;Param/Value/60CAF6FA&quot;));
                while ((gv_GameOver == false)) {
                    if ((UnitGroupCount(lp_unitGroup, c_unitCountAlive) &gt; 0)) {
                        PingSetPosition(lv_groupPing, UnitGroupCenterOfGroup(lp_unitGroup));
                    }
                    else {
                        PingDestroy(lv_groupPing);
                        return true;
                    }
                    Wait(0.0625, c_timeGame);
                }
                return true;
            }
            trigger auto_gf_TrackBossWithPing_Trigger = null;
            unit auto_gf_TrackBossWithPing_lp_bossUnit;
            void gf_TrackBossWithPing (unit lp_bossUnit) {
                auto_gf_TrackBossWithPing_lp_bossUnit = lp_bossUnit;
                if (auto_gf_TrackBossWithPing_Trigger == null) {
                    auto_gf_TrackBossWithPing_Trigger = TriggerCreate(&quot;auto_gf_TrackBossWithPing_TriggerFunc&quot;);
                }
                TriggerExecute(auto_gf_TrackBossWithPing_Trigger, false, false);
            }
            bool auto_gf_TrackBossWithPing_TriggerFunc (bool testConds, bool runActions) {
                unit lp_bossUnit = auto_gf_TrackBossWithPing_lp_bossUnit;
                // Variable Declarations
                int lv_bossPing;
                // Variable Initialization
                lv_bossPing = c_invalidPingId;
                // Implementation
                libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), &quot;PingBoss&quot;, UnitGetPosition(lp_bossUnit), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0, 270.0);
                lv_bossPing = PingLastCreated();
                PingSetScale(PingLastCreated(), 0.75);
                PingSetTooltip(PingLastCreated(), StringExternal(&quot;Param/Value/B342C205&quot;));
                while ((gv_GameOver == false)) {
                    if ((UnitIsAlive(lp_bossUnit) == true)) {
                        PingSetPosition(lv_bossPing, UnitGetPosition(lp_bossUnit));
                    }
                    else {
                        PingDestroy(lv_bossPing);
                        return true;
                    }
                    Wait(0.0625, c_timeGame);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Init 01 Load Data
            //--------------------------------------------------------------------------------------------------
            bool gt_Init01LoadData_Func (bool testConds, bool runActions) {
                playergroup auto87955BB6_g;
                int auto87955BB6_p;
                string autoBB5CF5E2_val;
                // Variable Declarations
                int lv_indexPlayer;
                // Variable Initialization
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerExecute(gt_Init02Players, true, false);
                libCOMI_gf_LoadCoopMission(&quot;COOP_Placeholder&quot;, gt_Init03LoadingComplete);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_Init01LoadData_Init () {
                gt_Init01LoadData = TriggerCreate(&quot;gt_Init01LoadData_Func&quot;);
                TriggerAddEventMapInit(gt_Init01LoadData);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Init 02 Players
            //--------------------------------------------------------------------------------------------------
            bool gt_Init02Players_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_playerIterEnemy;
                int lv_playerIterAlly;
                // Variable Initialization
                // Actions
                if (!runActions) {
                    return true;
                }
                PlayerGroupAdd(gv_humanPG, gv_pLAYER1);
                PlayerGroupAdd(gv_humanPG, gv_pLAYER2);
                PlayerGroupAdd(gv_humanPG, 7);
                libNtve_gf_SetPlayerGroupAlliance(gv_humanPG, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
                PlayerGroupAdd(gv_hostilePG, gv_amonReinforcements1);
                PlayerGroupAdd(gv_hostilePG, gv_amonReinforcements2);
                PlayerGroupAdd(gv_hostilePG, gv_superHybrids);
                PlayerGroupLoopBegin(gv_hostilePG);
                for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                    PlayerSetState(PlayerGroupLoopCurrent(), c_playerStateMineralCostIgnored, true);
                    PlayerSetState(PlayerGroupLoopCurrent(), c_playerStateVespeneCostIgnored, true);
                    PlayerSetState(PlayerGroupLoopCurrent(), c_playerStateFoodIgnored, true);
                }
                PlayerGroupLoopEnd();
                PlayerGroupAdd(gv_hostilePG, gv_moebiusForces);
                PlayerGroupLoopBegin(gv_hostilePG);
                for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                    PlayerSetColorIndex(PlayerGroupLoopCurrent(), libCOMI_gf_EnemyPlayerColor(), true);
                }
                PlayerGroupLoopEnd();
                libNtve_gf_SetPlayerGroupAlliance(gv_hostilePG, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
                PlayerGroupLoopBegin(gv_hostilePG);
                for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                    libNtve_gf_SetAlliance(PlayerGroupLoopCurrent(), gv_pLAYER1, libNtve_ge_AllianceSetting_Enemy);
                    libNtve_gf_SetAlliance(PlayerGroupLoopCurrent(), gv_pLAYER2, libNtve_ge_AllianceSetting_Enemy);
                    libNtve_gf_SetAlliance(PlayerGroupLoopCurrent(), 7, libNtve_ge_AllianceSetting_Enemy);
                }
                PlayerGroupLoopEnd();
                PlayerSetAlliance(gv_amonReinforcements1, c_allianceIdPower, gv_amonReinforcements2, true);
                PlayerSetAlliance(gv_amonReinforcements2, c_allianceIdPower, gv_amonReinforcements1, true);
                libCOMI_gf_SetAlliedCommandersstartingResources();
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_Init02Players_Init () {
                gt_Init02Players = TriggerCreate(&quot;gt_Init02Players_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Init 03 Loading Complete
            //--------------------------------------------------------------------------------------------------
            bool gt_Init03LoadingComplete_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerExecute(gt_Init04Technology, true, false);
                libCOMI_gf_PurchaseStorymodeTech();
                TriggerExecute(gt_Init05Units, true, false);
                TriggerExecute(gt_Init07Environment, true, false);
                TriggerExecute(gt_Init08Difficulties, true, false);
                TriggerExecute(gt_Init09BossPick, true, true);
                libCOMI_gf_PlayMapIntroZoom(true);
                TriggerExecute(gt_StartAI, true, false);
                TriggerExecute(gt_StartGameQ, true, false);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_Init03LoadingComplete_Init () {
                gt_Init03LoadingComplete = TriggerCreate(&quot;gt_Init03LoadingComplete_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Init 04 Technology
            //--------------------------------------------------------------------------------------------------
            bool gt_Init04Technology_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                libCOMI_gf_SetTechRestrictionsCallback(TriggerGetCurrent());
                TechTreeUpgradeAddLevel(gv_amonReinforcements1, &quot;overlordspeed&quot;, 1);
                TechTreeUpgradeAddLevel(gv_amonReinforcements1, &quot;overlordtransport&quot;, 1);
                TechTreeUpgradeAddLevel(gv_amonReinforcements1, &quot;GraviticDrive&quot;, 1);
                TechTreeUpgradeAddLevel(gv_amonReinforcements2, &quot;overlordspeed&quot;, 1);
                TechTreeUpgradeAddLevel(gv_amonReinforcements2, &quot;overlordtransport&quot;, 1);
                TechTreeUpgradeAddLevel(gv_amonReinforcements2, &quot;GraviticDrive&quot;, 1);
                if (((PlayerDifficulty(1) &gt;= 3) == true)) {
                    TechTreeUpgradeAddLevel(gv_moebiusForces, &quot;PunisherGrenades&quot;, 1);
                    TechTreeUpgradeAddLevel(gv_moebiusForces, &quot;ShieldWall&quot;, 1);
                    TechTreeUpgradeAddLevel(gv_moebiusForces, &quot;NeoSteelFrame&quot;, 1);
                    TechTreeUpgradeAddLevel(gv_moebiusForces, &quot;TerranBuildingArmor&quot;, 1);
                    UnitGroupLoopBegin(UnitGroup(&quot;Bunker&quot;, gv_moebiusForces, RegionEntireMap(), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0));
                    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                        UnitCargoCreate(UnitGroupLoopCurrent(), &quot;Marauder&quot;, 1);
                    }
                    UnitGroupLoopEnd();
                }
                if (((PlayerDifficulty(1) &gt;= 4) == true)) {
                    TechTreeUpgradeAddLevel(gv_moebiusForces, &quot;Stimpack&quot;, 1);
                    TechTreeUpgradeAddLevel(gv_moebiusForces, &quot;BansheeCloak&quot;, 1);
                    TechTreeUpgradeAddLevel(gv_moebiusForces, &quot;BattlecruiserEnableSpecializations&quot;, 1);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_Init04Technology_Init () {
                gt_Init04Technology = TriggerCreate(&quot;gt_Init04Technology_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Init 05 Units
            //--------------------------------------------------------------------------------------------------
            bool gt_Init05Units_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                libCOMI_gf_SetWorkerRallyPointsPlayersNexuses(gv_pLAYER_01_USER);
                libCOMI_gf_SetWorkerRallyPointsPlayersNexuses(gv_pLAYER_02_USER);
                UnitGroupLoopBegin(UnitGroup(&quot;Bunker&quot;, gv_moebiusForces, RegionEntireMap(), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0));
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    UnitCargoCreate(UnitGroupLoopCurrent(), &quot;Marine&quot;, 4);
                }
                UnitGroupLoopEnd();
                if (((PlayerDifficulty(0) &lt;= 3) == true)) {
                    UnitGroupLoopBegin(UnitGroup(&quot;Raven&quot;, gv_moebiusForces, RegionEntireMap(), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0));
                    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                        UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand(&quot;move&quot;, 2)), c_orderQueueReplace);
                    }
                    UnitGroupLoopEnd();
                }
                UnitGroupLoopBegin(UnitGroup(&quot;Scientist&quot;, 0, RegionEntireMap(), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0));
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    libNtve_gf_SendActorMessageToUnit(UnitGroupLoopCurrent(), &quot;SetMinimapVisibility&quot;);
                    libNtve_gf_SendActorMessageToUnit(UnitGroupLoopCurrent(), &quot;AnimGroupApply Scared&quot;);
                    UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropMovementSpeed, 2.0);
                }
                UnitGroupLoopEnd();
                UnitGroupLoopBegin(UnitGroup(&quot;CollapsibleTerranTower&quot;, 0, RegionEntireMap(), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0));
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    libNtve_gf_SendActorMessageToUnit(UnitGroupLoopCurrent(), &quot;SetMinimapVisibility&quot;);
                    UnitSetState(UnitGroupLoopCurrent(), c_unitStateCursorable, false);
                    UnitSetState(UnitGroupLoopCurrent(), c_unitStateSelectable, false);
                    UnitSetState(UnitGroupLoopCurrent(), c_unitStateTargetable, false);
                    UnitSetState(UnitGroupLoopCurrent(), c_unitStateTooltipable, false);
                    UnitSetState(UnitGroupLoopCurrent(), c_unitStateStatusBar, false);
                    UnitSetState(UnitGroupLoopCurrent(), c_unitStateHighlightable, false);
                    UnitSetState(UnitGroupLoopCurrent(), c_unitStateInvulnerable, true);
                }
                UnitGroupLoopEnd();
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_Init05Units_Init () {
                gt_Init05Units = TriggerCreate(&quot;gt_Init05Units_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Init 06 Music/Sound
            //--------------------------------------------------------------------------------------------------
            bool gt_Init06MusicSound_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, &quot;ACDilemma_Music_Intro&quot;, c_soundtrackCueAny, c_soundtrackIndexAny, false);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_Init06MusicSound_Init () {
                gt_Init06MusicSound = TriggerCreate(&quot;gt_Init06MusicSound_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Init 07 Environment
            //--------------------------------------------------------------------------------------------------
            bool gt_Init07Environment_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                GameTimeOfDaySet(&quot;08:00:00&quot;);
                libCOMI_gf_AutoRevealRegionCoop(RegionFromId(13), RegionFromId(13), 1);
                libCOMI_gf_AutoRevealRegionCoop(RegionFromId(14), RegionFromId(14), 1);
                libCOMI_gf_AutoRevealRegionCoop(RegionFromId(15), RegionFromId(15), 1);
                libCOMI_gf_AutoRevealRegionCoop(RegionFromId(16), RegionFromId(16), 1);
                libCOMI_gf_AutoRevealRegionCoop(RegionFromId(17), RegionFromId(17), 1);
                libCOMI_gf_AutoRevealRegionCoop(RegionFromId(18), RegionFromId(18), 1);
                libCOMI_gf_AutoRevealRegionCoop(RegionFromId(19), RegionFromId(19), 1);
                libCOMI_gf_AutoRevealRegionCoop(RegionFromId(20), RegionFromId(20), 1);
                libCOMI_gf_AutoRevealRegionCoop(RegionFromId(21), RegionFromId(21), 1);
                libCOMI_gf_AutoRevealRegionCoop(RegionFromId(22), RegionFromId(22), 1);
                libCOMI_gf_AutoRevealRegionCoop(RegionFromId(13), RegionFromId(13), 2);
                libCOMI_gf_AutoRevealRegionCoop(RegionFromId(14), RegionFromId(14), 2);
                libCOMI_gf_AutoRevealRegionCoop(RegionFromId(15), RegionFromId(15), 2);
                libCOMI_gf_AutoRevealRegionCoop(RegionFromId(16), RegionFromId(16), 2);
                libCOMI_gf_AutoRevealRegionCoop(RegionFromId(17), RegionFromId(17), 2);
                libCOMI_gf_AutoRevealRegionCoop(RegionFromId(18), RegionFromId(18), 2);
                libCOMI_gf_AutoRevealRegionCoop(RegionFromId(19), RegionFromId(19), 2);
                libCOMI_gf_AutoRevealRegionCoop(RegionFromId(20), RegionFromId(20), 2);
                libCOMI_gf_AutoRevealRegionCoop(RegionFromId(21), RegionFromId(21), 2);
                libCOMI_gf_AutoRevealRegionCoop(RegionFromId(22), RegionFromId(22), 2);
                libCOMI_gf_AutoRevealRegionCoop(RegionFromId(43), RegionFromId(43), 1);
                libCOMI_gf_AutoRevealRegionCoop(RegionFromId(43), RegionFromId(43), 2);
                VisExploreArea(gv_pLAYER1, RegionFromId(23), true, false);
                VisExploreArea(gv_pLAYER2, RegionFromId(23), true, false);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_Init07Environment_Init () {
                gt_Init07Environment = TriggerCreate(&quot;gt_Init07Environment_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Init 08 Difficulties
            //--------------------------------------------------------------------------------------------------
            bool gt_Init08Difficulties_Func (bool testConds, bool runActions) {
                // Variable Declarations
                fixed lv_bonusObjectiveLife;
                fixed lv_mainObjectiveLife;
                // Variable Initialization
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_01_USER) == 4)) {
                    UnitRemove(UnitFromId(182164288));
                }
                if ((libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_02_USER) == 4)) {
                    UnitRemove(UnitFromId(179385224));
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_Init08Difficulties_Init () {
                gt_Init08Difficulties = TriggerCreate(&quot;gt_Init08Difficulties_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Init 09 BossPick
            //--------------------------------------------------------------------------------------------------
            bool gt_Init09BossPick_Func (bool testConds, bool runActions) {
                int autoACD06CEF_val;
                // Variable Declarations
                int lv_randomInteger;
                int lv_randomRace;
                // Variable Initialization
                lv_randomInteger = RandomInt(1, 6);
                lv_randomRace = RandomInt(1, 3);
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((lv_randomRace == 1)) {
                    UnitRemove(UnitFromId(1679135317));
                    UnitRemove(UnitFromId(267922718));
                    gv_amonReinforcementsRace = &quot;Terr&quot;;
                }
                else {
                    if ((lv_randomRace == 2)) {
                        UnitRemove(UnitFromId(267922718));
                        UnitRemove(UnitFromId(148075706));
                        gv_amonReinforcementsRace = &quot;Zerg&quot;;
                    }
                    else {
                        UnitRemove(UnitFromId(1679135317));
                        UnitRemove(UnitFromId(148075706));
                        gv_amonReinforcementsRace = &quot;Prot&quot;;
                    }
                }
                autoACD06CEF_val = lv_randomInteger;
                if (autoACD06CEF_val == 1) {
                    gv_bossType1 = &quot;Garg&quot;;
                    gv_bossType2 = &quot;Fuul&quot;;
                    gv_bossType3 = &quot;Cort&quot;;
                }
                else if (autoACD06CEF_val == 2) {
                    gv_bossType1 = &quot;Fuul&quot;;
                    gv_bossType2 = &quot;Cort&quot;;
                    gv_bossType3 = &quot;Garg&quot;;
                }
                else if (autoACD06CEF_val == 3) {
                    gv_bossType1 = &quot;Cort&quot;;
                    gv_bossType2 = &quot;Garg&quot;;
                    gv_bossType3 = &quot;Fuul&quot;;
                }
                else if (autoACD06CEF_val == 4) {
                    gv_bossType1 = &quot;Garg&quot;;
                    gv_bossType2 = &quot;Cort&quot;;
                    gv_bossType3 = &quot;Fuul&quot;;
                }
                else if (autoACD06CEF_val == 5) {
                    gv_bossType1 = &quot;Fuul&quot;;
                    gv_bossType2 = &quot;Garg&quot;;
                    gv_bossType3 = &quot;Cort&quot;;
                }
                else if (autoACD06CEF_val == 6) {
                    gv_bossType1 = &quot;Cort&quot;;
                    gv_bossType2 = &quot;Fuul&quot;;
                    gv_bossType3 = &quot;Garg&quot;;
                }
                else {
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_Init09BossPick_Init () {
                gt_Init09BossPick = TriggerCreate(&quot;gt_Init09BossPick_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Init 10 DevMode
            //--------------------------------------------------------------------------------------------------
            bool gt_Init10DevMode_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;Garg&quot;, 0, 1, PointFromId(1465535020));
                libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;Fuul&quot;, 0, 1, PointFromId(1465535020));
                libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;Cort&quot;, 0, 1, PointFromId(1465535020));
                VisRevealArea(1, RegionEntireMap(), 0.0, false);
                Wait(10.0, c_timeGame);
                TechTreeUpgradeAddLevel(1, &quot;BossPowerUp1&quot;, 1);
                Wait(10.0, c_timeGame);
                TechTreeUpgradeAddLevel(1, &quot;BossPowerUp2&quot;, 1);
                UnitGroupLoopBegin(UnitGroup(null, gv_moebiusForces, RegionEntireMap(), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0));
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    UnitKill(UnitGroupLoopCurrent());
                }
                UnitGroupLoopEnd();
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_Init10DevMode_Init () {
                gt_Init10DevMode = TriggerCreate(&quot;gt_Init10DevMode_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Start Game Q
            //--------------------------------------------------------------------------------------------------
            bool gt_StartGameQ_Func (bool testConds, bool runActions) {
                // Variable Declarations
                region lv_enemyBase;
                // Variable Initialization
                // Actions
                if (!runActions) {
                    return true;
                }
                SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryAmbience, &quot;Ambience_Moebius01_Quad&quot;, c_soundtrackCueAny, c_soundtrackIndexAny, false);
                SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, &quot;ACDilemma_Music_Intro&quot;, c_soundtrackCueAny, c_soundtrackIndexAny, false);
                UIAlertPoint(&quot;Trigger&quot;, gv_pLAYER_01_USER, StringExternal(&quot;Param/Value/99CE4761&quot;), null, PlayerStartLocation(gv_pLAYER_01_USER));
                UIAlertPoint(&quot;Trigger&quot;, gv_pLAYER_02_USER, StringExternal(&quot;Param/Value/CECF9C0A&quot;), null, PlayerStartLocation(gv_pLAYER_02_USER));
                TimerStart(gv_awakeningTimer, libNtve_gf_DifficultyValueFixed(1800.0, 1800.0, 1800.0, 1500.0), false, c_timeGame);
                TimerStart(gv_bonusTimer, libNtve_gf_DifficultyValueFixed(1200.0, 1200.0, 1200.0, 1000.0), false, c_timeGame);
                TriggerExecute(gt_StartAI, true, false);
                Wait(0.5, c_timeGame);
                TriggerExecute(gt_UpgradeAI, true, false);
                TriggerExecute(gt_IntroEvent, true, false);
                Wait(5.0, c_timeGame);
                TriggerExecute(gt_ObjectiveKillTheBoss01Create, true, false);
                libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
                libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(&quot;GhostAlternatePortrait&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), SoundLink(&quot;Ac_Dilemma_Intro1&quot;, -1), 0.0, c_transmissionDurationAdd, true);
                Wait(0.5, c_timeGame);
                libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(&quot;GhostAlternatePortrait&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), SoundLink(&quot;Ac_Dilemma_Intro2a&quot;, -1), 0.0, c_transmissionDurationAdd, true);
                libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(&quot;GhostAlternatePortrait&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), SoundLink(&quot;Ac_Dilemma_Intro2b&quot;, -1), 0.0, c_transmissionDurationAdd, true);
                libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
                Wait(1.0, c_timeGame);
                TriggerExecute(gt_ObjectivePsiInhibitorMustSurviveCreate, true, false);
                libCOMI_gf_PingMinimapCampaign(PlayerGroupAll(), PointFromId(2139145783), 2.0, Color(0.00, 100.00, 0.00));
                libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(&quot;GhostAlternatePortrait&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), SoundLink(&quot;Ac_Dilemma_Intro3&quot;, -1), 0.0, c_transmissionDurationAdd, true);
                Wait(15.0, c_timeGame);
                TriggerExecute(gt_Pingobjective1, true, false);
                SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 0.0, 5.0);
                Wait(5.0, c_timeGame);
                SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, &quot;ACDilemma_Music_Main&quot;, c_soundtrackCueAny, c_soundtrackIndexAny, true);
                SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 100.0, 5.0);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_StartGameQ_Init () {
                gt_StartGameQ = TriggerCreate(&quot;gt_StartGameQ_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Level Up1
            //--------------------------------------------------------------------------------------------------
            bool gt_LevelUp1_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                gv_level = 1;
                TriggerExecute(gt_ObjectiveDestroyTheComSatCreate, true, false);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_LevelUp1_Init () {
                gt_LevelUp1 = TriggerCreate(&quot;gt_LevelUp1_Func&quot;);
                TriggerAddEventTimeElapsed(gt_LevelUp1, 600.0, c_timeGame);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Level Up2
            //--------------------------------------------------------------------------------------------------
            bool gt_LevelUp2_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                gv_level = 2;
                GameSetLighting(&quot;MoebiusLabSpace2&quot;, 2.0);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_LevelUp2_Init () {
                gt_LevelUp2 = TriggerCreate(&quot;gt_LevelUp2_Func&quot;);
                TriggerAddEventTimeElapsed(gt_LevelUp2, 1200.0, c_timeGame);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Level Up3
            //--------------------------------------------------------------------------------------------------
            bool gt_LevelUp3_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                gv_level = 3;
                GameSetLighting(&quot;MoebiusLabSpace3&quot;, 2.0);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_LevelUp3_Init () {
                gt_LevelUp3 = TriggerCreate(&quot;gt_LevelUp3_Func&quot;);
                TriggerAddEventTimeElapsed(gt_LevelUp3, 1800.0, c_timeGame);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Boss Power Up1
            //--------------------------------------------------------------------------------------------------
            bool gt_BossPowerUp1_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((GameGetMissionTime() &gt; 300.0))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TechTreeUpgradeAddLevel(gv_superHybrids, &quot;BossTimeHP&quot;, 1);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_BossPowerUp1_Init () {
                gt_BossPowerUp1 = TriggerCreate(&quot;gt_BossPowerUp1_Func&quot;);
                TriggerAddEventTimePeriodic(gt_BossPowerUp1, libNtve_gf_DifficultyValueInt(60, 60, 45, 45), c_timeGame);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Boss Power Up2
            //--------------------------------------------------------------------------------------------------
            bool gt_BossPowerUp2_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((GameGetMissionTime() &gt; 600.0))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TechTreeUpgradeAddLevel(gv_superHybrids, &quot;BossTimeHP&quot;, 1);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_BossPowerUp2_Init () {
                gt_BossPowerUp2 = TriggerCreate(&quot;gt_BossPowerUp2_Func&quot;);
                TriggerAddEventTimePeriodic(gt_BossPowerUp2, libNtve_gf_DifficultyValueInt(60, 60, 60, 45), c_timeGame);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Boss Power Up3
            //--------------------------------------------------------------------------------------------------
            bool gt_BossPowerUp3_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((GameGetMissionTime() &gt; 1200.0))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TechTreeUpgradeAddLevel(gv_superHybrids, &quot;BossTimeHP&quot;, 1);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_BossPowerUp3_Init () {
                gt_BossPowerUp3 = TriggerCreate(&quot;gt_BossPowerUp3_Func&quot;);
                TriggerAddEventTimePeriodic(gt_BossPowerUp3, libNtve_gf_DifficultyValueInt(40, 40, 40, 40), c_timeGame);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Rift Reticle
            //--------------------------------------------------------------------------------------------------
            bool gt_RiftReticle_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                Wait(2.0, c_timeGame);
                UnitGroupLoopBegin(UnitGroup(&quot;CortVoidRift&quot;, gv_superHybrids, RegionEntireMap(), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0));
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    libCOMI_gf_AttachReticleEffectAndTextTagOnUnit(libCOMI_ge_CampaginReticleType_TerranEnemy, libCOMI_ge_CampaginReticleSize_Medium, null, UnitGroupLoopCurrent(), &quot;Ref_Center&quot;);
                }
                UnitGroupLoopEnd();
                TriggerEnable(TriggerGetCurrent(), true);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_RiftReticle_Init () {
                gt_RiftReticle = TriggerCreate(&quot;gt_RiftReticle_Func&quot;);
                TriggerAddEventPlayerEffectUsed(gt_RiftReticle, gv_superHybrids, &quot;CortVoidRiftUnit&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: InfoZone Event
            //--------------------------------------------------------------------------------------------------
            bool gt_InfoZoneEvent_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((UnitFilterMatch(EventUnit(), 1, UnitFilter((1 &lt;&lt; c_targetFilterGround), 0, (1 &lt;&lt; c_targetFilterAir) | (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32)))) == true))) {
                        return false;
                    }
                    if (!(((UnitGetOwner(EventUnit()) == gv_pLAYER1) || (UnitGetOwner(EventUnit()) == gv_pLAYER2)))) {
                        return false;
                    }
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                UnitKill(gv_infoZoneBeacon);
                Wait(2.0, c_timeGame);
                if ((UnitIsAlive(UnitFromId(919745099)) == true)) {
                    libNtve_gf_CreatePingFacingAngle(gv_humanPG, &quot;PingArrow&quot;, PointFromId(1668128169), ColorWithAlpha(0.00, 100.00, 25.10, 0.00), 5.0, AngleBetweenPoints(PointFromId(1668128169), PointFromId(63955249)));
                    PingSetScale(PingLastCreated(), 0.65);
                    Wait(0.125, c_timeGame);
                    libNtve_gf_CreatePingFacingAngle(gv_humanPG, &quot;PingArrow&quot;, PointFromId(63955249), ColorWithAlpha(0.00, 100.00, 25.10, 0.00), 5.0, AngleBetweenPoints(PointFromId(63955249), PointFromId(597922582)));
                    PingSetScale(PingLastCreated(), 0.65);
                    Wait(0.125, c_timeGame);
                    libNtve_gf_CreatePingFacingAngle(gv_humanPG, &quot;PingArrow&quot;, PointFromId(597922582), ColorWithAlpha(0.00, 100.00, 25.10, 0.00), 5.0, AngleBetweenPoints(PointFromId(597922582), PointFromId(679723310)));
                    PingSetScale(PingLastCreated(), 0.65);
                    Wait(0.125, c_timeGame);
                    libNtve_gf_CreatePingFacingAngle(gv_humanPG, &quot;PingArrow&quot;, PointFromId(679723310), ColorWithAlpha(0.00, 100.00, 25.10, 0.00), 5.0, AngleBetweenPoints(PointFromId(679723310), PointFromId(177081562)));
                    PingSetScale(PingLastCreated(), 0.65);
                    Wait(0.125, c_timeGame);
                    libNtve_gf_CreatePingFacingAngle(gv_humanPG, &quot;PingArrow&quot;, PointFromId(177081562), ColorWithAlpha(0.00, 100.00, 25.10, 0.00), 5.0, AngleBetweenPoints(PointFromId(177081562), PointFromId(1767984600)));
                    PingSetScale(PingLastCreated(), 0.65);
                    Wait(0.125, c_timeGame);
                    libNtve_gf_CreatePingFacingAngle(gv_humanPG, &quot;PingArrow&quot;, PointFromId(1767984600), ColorWithAlpha(0.00, 100.00, 25.10, 0.00), 5.0, AngleBetweenPoints(PointFromId(1767984600), PointFromId(1147506545)));
                    PingSetScale(PingLastCreated(), 0.65);
                    Wait(0.125, c_timeGame);
                    libNtve_gf_CreatePingFacingAngle(gv_humanPG, &quot;PingArrow&quot;, PointFromId(1147506545), ColorWithAlpha(0.00, 100.00, 25.10, 0.00), 5.0, AngleBetweenPoints(PointFromId(1147506545), PointFromId(1805941658)));
                    PingSetScale(PingLastCreated(), 0.65);
                    Wait(0.125, c_timeGame);
                    libNtve_gf_CreatePingFacingAngle(gv_humanPG, &quot;PingArrow&quot;, PointFromId(1805941658), ColorWithAlpha(0.00, 100.00, 25.10, 0.00), 5.0, AngleBetweenPoints(PointFromId(1805941658), PointFromId(2133759712)));
                    PingSetScale(PingLastCreated(), 0.65);
                    Wait(0.125, c_timeGame);
                }
                if ((UnitIsAlive(UnitFromId(111658737)) == true)) {
                    libNtve_gf_CreatePingFacingAngle(gv_humanPG, &quot;PingArrow&quot;, PointFromId(1481162267), ColorWithAlpha(0.00, 100.00, 25.10, 0.00), 5.0, AngleBetweenPoints(PointFromId(1481162267), PointFromId(999722168)));
                    PingSetScale(PingLastCreated(), 0.65);
                    Wait(0.125, c_timeGame);
                    libNtve_gf_CreatePingFacingAngle(gv_humanPG, &quot;PingArrow&quot;, PointFromId(999722168), ColorWithAlpha(0.00, 100.00, 25.10, 0.00), 5.0, AngleBetweenPoints(PointFromId(999722168), PointFromId(599806649)));
                    PingSetScale(PingLastCreated(), 0.65);
                    Wait(0.125, c_timeGame);
                    libNtve_gf_CreatePingFacingAngle(gv_humanPG, &quot;PingArrow&quot;, PointFromId(599806649), ColorWithAlpha(0.00, 100.00, 25.10, 0.00), 5.0, AngleBetweenPoints(PointFromId(599806649), PointFromId(518639002)));
                    PingSetScale(PingLastCreated(), 0.65);
                    Wait(0.125, c_timeGame);
                    libNtve_gf_CreatePingFacingAngle(gv_humanPG, &quot;PingArrow&quot;, PointFromId(518639002), ColorWithAlpha(0.00, 100.00, 25.10, 0.00), 5.0, AngleBetweenPoints(PointFromId(518639002), PointFromId(1506782866)));
                    PingSetScale(PingLastCreated(), 0.65);
                    Wait(0.125, c_timeGame);
                    libNtve_gf_CreatePingFacingAngle(gv_humanPG, &quot;PingArrow&quot;, PointFromId(1506782866), ColorWithAlpha(0.00, 100.00, 25.10, 0.00), 5.0, AngleBetweenPoints(PointFromId(1506782866), PointFromId(505439817)));
                    PingSetScale(PingLastCreated(), 0.65);
                    Wait(0.125, c_timeGame);
                    libNtve_gf_CreatePingFacingAngle(gv_humanPG, &quot;PingArrow&quot;, PointFromId(505439817), ColorWithAlpha(0.00, 100.00, 25.10, 0.00), 5.0, AngleBetweenPoints(PointFromId(505439817), PointFromId(1405728618)));
                    PingSetScale(PingLastCreated(), 0.65);
                    Wait(0.125, c_timeGame);
                }
                if ((UnitIsAlive(UnitFromId(1608419654)) == true)) {
                    libNtve_gf_CreatePingFacingAngle(gv_humanPG, &quot;PingArrow&quot;, PointFromId(61301209), ColorWithAlpha(0.00, 100.00, 25.10, 0.00), 5.0, AngleBetweenPoints(PointFromId(61301209), PointFromId(157400549)));
                    PingSetScale(PingLastCreated(), 0.65);
                    Wait(0.125, c_timeGame);
                    libNtve_gf_CreatePingFacingAngle(gv_humanPG, &quot;PingArrow&quot;, PointFromId(157400549), ColorWithAlpha(0.00, 100.00, 25.10, 0.00), 5.0, AngleBetweenPoints(PointFromId(157400549), PointFromId(408143133)));
                    PingSetScale(PingLastCreated(), 0.65);
                    Wait(0.125, c_timeGame);
                    libNtve_gf_CreatePingFacingAngle(gv_humanPG, &quot;PingArrow&quot;, PointFromId(408143133), ColorWithAlpha(0.00, 100.00, 25.10, 0.00), 5.0, AngleBetweenPoints(PointFromId(408143133), PointFromId(1753909576)));
                    PingSetScale(PingLastCreated(), 0.65);
                    Wait(0.125, c_timeGame);
                    libNtve_gf_CreatePingFacingAngle(gv_humanPG, &quot;PingArrow&quot;, PointFromId(1753909576), ColorWithAlpha(0.00, 100.00, 25.10, 0.00), 5.0, AngleBetweenPoints(PointFromId(1753909576), PointFromId(1308418527)));
                    PingSetScale(PingLastCreated(), 0.65);
                    Wait(0.125, c_timeGame);
                    libNtve_gf_CreatePingFacingAngle(gv_humanPG, &quot;PingArrow&quot;, PointFromId(1308418527), ColorWithAlpha(0.00, 100.00, 25.10, 0.00), 5.0, AngleBetweenPoints(PointFromId(1308418527), PointFromId(1513888903)));
                    PingSetScale(PingLastCreated(), 0.65);
                    Wait(0.125, c_timeGame);
                    libNtve_gf_CreatePingFacingAngle(gv_humanPG, &quot;PingArrow&quot;, PointFromId(1513888903), ColorWithAlpha(0.00, 100.00, 25.10, 0.00), 5.0, AngleBetweenPoints(PointFromId(1513888903), PointFromId(1977494183)));
                    PingSetScale(PingLastCreated(), 0.65);
                    Wait(0.125, c_timeGame);
                    libNtve_gf_CreatePingFacingAngle(gv_humanPG, &quot;PingArrow&quot;, PointFromId(1977494183), ColorWithAlpha(0.00, 100.00, 25.10, 0.00), 5.0, AngleBetweenPoints(PointFromId(1977494183), PointFromId(2127389898)));
                    PingSetScale(PingLastCreated(), 0.65);
                    Wait(0.125, c_timeGame);
                    libNtve_gf_CreatePingFacingAngle(gv_humanPG, &quot;PingArrow&quot;, PointFromId(2127389898), ColorWithAlpha(0.00, 100.00, 25.10, 0.00), 5.0, AngleBetweenPoints(PointFromId(2127389898), PointFromId(1549981796)));
                    PingSetScale(PingLastCreated(), 0.65);
                    Wait(0.125, c_timeGame);
                }
                libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;Beacon_NovaSmall&quot;, 0, 0, RegionGetCenter(RegionFromId(35)));
                gv_infoZoneBeacon = UnitLastCreated();
                TriggerEnable(TriggerGetCurrent(), true);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_InfoZoneEvent_Init () {
                gt_InfoZoneEvent = TriggerCreate(&quot;gt_InfoZoneEvent_Func&quot;);
                TriggerAddEventUnitRegion(gt_InfoZoneEvent, null, RegionFromId(35), true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Intro Event
            //--------------------------------------------------------------------------------------------------
            bool gt_IntroEvent_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;PsiInhibitor&quot;, 0, 7, PointFromId(2139145783));
                gv_psiInhibitor = UnitLastCreated();
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_IntroEvent_Init () {
                gt_IntroEvent = TriggerCreate(&quot;gt_IntroEvent_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Leftside Event
            //--------------------------------------------------------------------------------------------------
            bool gt_LeftsideEvent_Func (bool testConds, bool runActions) {
                // Variable Declarations
                unitgroup lv_wraithGRP;
                point[4] lv_randomPointDD;
                // Variable Initialization
                lv_wraithGRP = UnitGroupEmpty();
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                    if (!(((UnitGetOwner(EventUnit()) == gv_pLAYER1) || (UnitGetOwner(EventUnit()) == gv_pLAYER2)))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                lv_randomPointDD[1] = PointFromId(654392706);
                lv_randomPointDD[2] = PointFromId(1558449985);
                lv_randomPointDD[3] = PointFromId(152275960);
                TriggerExecute(gt_LeftsideReinforcement, true, false);
                Wait(2.0, c_timeGame);
                UnitCreateEffectUnit(UnitFromId(1975765177), &quot;Snipe_BlackOpsSet&quot;, UnitFromId(2029237786));
                Wait(0.5, c_timeGame);
                UnitCreateEffectUnit(UnitFromId(1975765177), &quot;Snipe_BlackOpsSet&quot;, UnitFromId(1813874323));
                Wait(0.5, c_timeGame);
                UnitCreateEffectUnit(UnitFromId(1975765177), &quot;Snipe_BlackOpsSet&quot;, UnitFromId(1960829743));
                Wait(0.5, c_timeGame);
                UnitCreateEffectUnit(UnitFromId(1975765177), &quot;Snipe_BlackOpsSet&quot;, UnitFromId(363002347));
                Wait(1.0, c_timeGame);
                UnitCreateEffectUnit(UnitFromId(1975765177), &quot;Snipe_BlackOpsSet&quot;, UnitFromId(607229670));
                UnitKill(UnitFromId(607229670));
                CameraShakeStart(1, c_cameraPositionTarget, c_cameraDirectionZ, 1.0, 2.0, 100.0, 2.5);
                libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Small, libNtve_ge_ExplosionType_Terran, PointFromId(1112916853));
                Wait(0.5, c_timeGame);
                libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Small, libNtve_ge_ExplosionType_Terran, PointFromId(1018725341));
                Wait(0.5, c_timeGame);
                libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Small, libNtve_ge_ExplosionType_Terran, PointFromId(1784030729));
                Wait(0.5, c_timeGame);
                UnitRemove(UnitFromId(1975765177));
                Wait(1.0, c_timeGame);
                libNtve_gf_UnitCreateFacingPoint(3, &quot;Wraith&quot;, c_unitCreateIgnorePlacement, 3, PointFromId(806236642), PointFromId(2015602645));
                UnitGroupAddUnitGroup(lv_wraithGRP, UnitLastCreatedGroup());
                UnitGroupLoopBegin(lv_wraithGRP);
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropMovementSpeed, 10.0);
                    UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropHeight, 10.0);
                    UnitSetState(UnitGroupLoopCurrent(), c_unitStateCursorable, false);
                    UnitSetState(UnitGroupLoopCurrent(), c_unitStateSelectable, false);
                    UnitSetState(UnitGroupLoopCurrent(), c_unitStateTargetable, false);
                    UnitSetState(UnitGroupLoopCurrent(), c_unitStateTooltipable, false);
                    UnitSetState(UnitGroupLoopCurrent(), c_unitStateStatusBar, false);
                    UnitSetState(UnitGroupLoopCurrent(), c_unitStateInvulnerable, true);
                }
                UnitGroupLoopEnd();
                while ((UnitGroupCount(lv_wraithGRP, c_unitCountAlive) &gt; 0)) {
                    UnitGroupLoopBegin(lv_wraithGRP);
                    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                        if ((DistanceBetweenPoints(UnitGetPosition(UnitGroupLoopCurrent()), PointFromId(2015602645)) &lt;= 3.0)) {
                            UnitGroupRemove(lv_wraithGRP, UnitGroupLoopCurrent());
                            UnitRemove(UnitGroupLoopCurrent());
                        }
                    }
                    UnitGroupLoopEnd();
                    UnitGroupIssueOrder(lv_wraithGRP, OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), PointFromId(2015602645)), c_orderQueueReplace);
                    Wait(2.0, c_timeGame);
                }
                UnitGroupLoopBegin(UnitGroup(null, gv_moebiusForces, RegionFromId(30), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0));
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand(&quot;attack&quot;, 0), PointFromId(336334111)), c_orderQueueReplace);
                }
                UnitGroupLoopEnd();
                libNtve_gf_CreateActorAtPoint(&quot;CharCrashingDebrisFire&quot;, PointFromId(654392706));
                libNtve_gf_MakeModelFaceAngle(libNtve_gf_ActorLastCreated(), RandomFixed(135.0, 225.0));
                libNtve_gf_PlayAnimation(libNtve_gf_ActorLastCreated(), c_animNameDefault, &quot;Death&quot;, c_animFlagNonLooping, c_animTimeDefault);
                Wait(20.0, c_timeGame);
                ActorSend(libNtve_gf_ActorLastCreated(), &quot;Destroy&quot;);
                libNtve_gf_CreateActorAtPoint(&quot;CharCrashingDebrisFire&quot;, PointFromId(1558449985));
                libNtve_gf_MakeModelFaceAngle(libNtve_gf_ActorLastCreated(), RandomFixed(135.0, 225.0));
                libNtve_gf_PlayAnimation(libNtve_gf_ActorLastCreated(), c_animNameDefault, &quot;Death&quot;, c_animFlagNonLooping, c_animTimeDefault);
                while (true) {
                    Wait(45.0, c_timeGame);
                    ActorSend(libNtve_gf_ActorLastCreated(), &quot;Destroy&quot;);
                    libNtve_gf_CreateActorAtPoint(&quot;CharCrashingDebrisFire&quot;, lv_randomPointDD[RandomInt(1, 3)]);
                    libNtve_gf_MakeModelFaceAngle(libNtve_gf_ActorLastCreated(), RandomFixed(135.0, 225.0));
                    libNtve_gf_PlayAnimation(libNtve_gf_ActorLastCreated(), c_animNameDefault, &quot;Death&quot;, c_animFlagNonLooping, c_animTimeDefault);
                    Wait(10.0, c_timeGame);
                    ActorSend(libNtve_gf_ActorLastCreated(), &quot;Destroy&quot;);
                    libNtve_gf_UnitCreateFacingPoint(3, &quot;Wraith&quot;, c_unitCreateIgnorePlacement, 3, PointFromId(806236642), PointFromId(2015602645));
                    UnitGroupAddUnitGroup(lv_wraithGRP, UnitLastCreatedGroup());
                    UnitGroupLoopBegin(lv_wraithGRP);
                    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                        UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropMovementSpeed, 10.0);
                        UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropHeight, 10.0);
                        UnitSetState(UnitGroupLoopCurrent(), c_unitStateCursorable, false);
                        UnitSetState(UnitGroupLoopCurrent(), c_unitStateSelectable, false);
                        UnitSetState(UnitGroupLoopCurrent(), c_unitStateTargetable, false);
                        UnitSetState(UnitGroupLoopCurrent(), c_unitStateTooltipable, false);
                        UnitSetState(UnitGroupLoopCurrent(), c_unitStateStatusBar, false);
                        UnitSetState(UnitGroupLoopCurrent(), c_unitStateInvulnerable, true);
                    }
                    UnitGroupLoopEnd();
                    while ((UnitGroupCount(lv_wraithGRP, c_unitCountAlive) &gt; 0)) {
                        UnitGroupLoopBegin(lv_wraithGRP);
                        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                            if ((DistanceBetweenPoints(UnitGetPosition(UnitGroupLoopCurrent()), PointFromId(2015602645)) &lt;= 3.0)) {
                                UnitGroupRemove(lv_wraithGRP, UnitGroupLoopCurrent());
                                UnitRemove(UnitGroupLoopCurrent());
                            }
                        }
                        UnitGroupLoopEnd();
                        UnitGroupIssueOrder(lv_wraithGRP, OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), PointFromId(2015602645)), c_orderQueueReplace);
                        Wait(2.0, c_timeGame);
                    }
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_LeftsideEvent_Init () {
                gt_LeftsideEvent = TriggerCreate(&quot;gt_LeftsideEvent_Func&quot;);
                TriggerAddEventUnitRegion(gt_LeftsideEvent, null, RegionFromId(16), true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Leftside Reinforcement
            //--------------------------------------------------------------------------------------------------
            bool gt_LeftsideReinforcement_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                libNtve_gf_UnitCreateFacingPoint(1, &quot;HerculesLanderFlying&quot;, c_unitCreateIgnorePlacement, gv_moebiusForces, PointFromId(440506862), RegionGetCenter(RegionFromId(2)));
                UnitSetPropertyFixed(UnitLastCreated(), c_unitPropMovementSpeed, 5.5);
                UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), PointFromId(226985801)), c_orderQueueReplace);
                UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand(&quot;HerculesLand&quot;, 0), PointFromId(226985801)), c_orderQueueAddToEnd);
                UnitCargoCreate(UnitLastCreated(), &quot;Marauder&quot;, 4);
                UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand(&quot;HerculesTransport&quot;, 2), PointFromId(226985801)), c_orderQueueAddToEnd);
                Wait(17.0, c_timeGame);
                UnitGroupIssueOrder(UnitCargoLastCreatedGroup(), OrderTargetingPoint(AbilityCommand(&quot;attack&quot;, 0), PointFromId(918287645)), c_orderQueueReplace);
                UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand(&quot;HerculesLiftOff&quot;, 0)), c_orderQueueAddToEnd);
                Wait(7.0, c_timeGame);
                UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), PointFromId(440506862)), c_orderQueueAddToEnd);
                Wait(15.0, c_timeGame);
                UnitRemove(UnitLastCreated());
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_LeftsideReinforcement_Init () {
                gt_LeftsideReinforcement = TriggerCreate(&quot;gt_LeftsideReinforcement_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Airlock Event
            //--------------------------------------------------------------------------------------------------
            bool gt_AirlockEvent_Func (bool testConds, bool runActions) {
                // Variable Declarations
                unitgroup lv_herculesUnitGrp;
                // Variable Initialization
                lv_herculesUnitGrp = UnitGroupEmpty();
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                    if (!(((UnitGetOwner(EventUnit()) == gv_pLAYER1) || (UnitGetOwner(EventUnit()) == gv_pLAYER2)))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                UnitGroupLoopBegin(UnitGroup(&quot;Marine&quot;, gv_moebiusForces, RegionFromId(27), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0));
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand(&quot;attack&quot;, 0), PointFromId(1297647008)), c_orderQueueReplace);
                }
                UnitGroupLoopEnd();
                UnitGroupLoopBegin(UnitGroup(&quot;Marine&quot;, gv_moebiusForces, RegionFromId(28), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0));
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand(&quot;attack&quot;, 0), PointFromId(1825846068)), c_orderQueueReplace);
                }
                UnitGroupLoopEnd();
                UnitGroupLoopBegin(UnitGroup(&quot;Marine&quot;, gv_moebiusForces, RegionFromId(29), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0));
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand(&quot;attack&quot;, 0), PointFromId(2052203154)), c_orderQueueReplace);
                }
                UnitGroupLoopEnd();
                Wait(0.5, c_timeGame);
                UnitGroupAdd(lv_herculesUnitGrp, UnitFromId(575368574));
                UnitIssueOrder(UnitFromId(1965419167), Order(AbilityCommand(&quot;HerculesLiftOff&quot;, 0)), c_orderQueueReplace);
                Wait(0.5, c_timeGame);
                UnitGroupAdd(lv_herculesUnitGrp, UnitFromId(1965419167));
                UnitIssueOrder(UnitFromId(575368574), Order(AbilityCommand(&quot;HerculesLiftOff&quot;, 0)), c_orderQueueReplace);
                Wait(0.5, c_timeGame);
                UnitGroupAdd(lv_herculesUnitGrp, UnitFromId(628489392));
                UnitIssueOrder(UnitFromId(628489392), Order(AbilityCommand(&quot;HerculesLiftOff&quot;, 0)), c_orderQueueReplace);
                Wait(7.0, c_timeGame);
                UnitIssueOrder(UnitFromId(575368574), OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), PointFromId(255191793)), c_orderQueueReplace);
                UnitIssueOrder(UnitFromId(1965419167), OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), PointFromId(64230824)), c_orderQueueReplace);
                UnitIssueOrder(UnitFromId(628489392), OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), PointFromId(1624373834)), c_orderQueueReplace);
                Wait(15.0, c_timeGame);
                UnitGroupLoopBegin(lv_herculesUnitGrp);
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    UnitRemove(UnitGroupLoopCurrent());
                }
                UnitGroupLoopEnd();
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_AirlockEvent_Init () {
                gt_AirlockEvent = TriggerCreate(&quot;gt_AirlockEvent_Func&quot;);
                TriggerAddEventUnitRegion(gt_AirlockEvent, null, RegionFromId(17), true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: MainBase Event
            //--------------------------------------------------------------------------------------------------
            bool gt_MainBaseEvent_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                    if (!(((UnitGetOwner(EventUnit()) == gv_pLAYER1) || (UnitGetOwner(EventUnit()) == gv_pLAYER2)))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                GameSetLighting(&quot;MoebiusLabSpace3&quot;, 2.0);
                SoundPlayAtPointForPlayer(SoundLink(&quot;UI_TerranKlaxonAlert&quot;, -1), c_maxPlayers, PlayerGroupAll(), PointFromId(1547673515), 0.0, 200.0, 0.0);
                Wait(3.0, c_timeGame);
                UnitIssueOrder(UnitFromId(1785595607), OrderTargetingPoint(AbilityCommand(&quot;Hyperjump&quot;, 0), PointFromId(1236175504)), c_orderQueueReplace);
                UnitIssueOrder(UnitFromId(1649117586), OrderTargetingPoint(AbilityCommand(&quot;Hyperjump&quot;, 0), PointFromId(1547673515)), c_orderQueueReplace);
                UnitIssueOrder(UnitFromId(1516885846), OrderTargetingPoint(AbilityCommand(&quot;Hyperjump&quot;, 0), PointFromId(778775823)), c_orderQueueReplace);
                Wait(2.0, c_timeGame);
                if ((gv_pRUsed == true)) {
                    GameSetLighting(&quot;MoebiusLabSpace2&quot;, 2.0);
                }
                else {
                    GameSetLighting(&quot;MoebiusLabSpace1&quot;, 2.0);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_MainBaseEvent_Init () {
                gt_MainBaseEvent = TriggerCreate(&quot;gt_MainBaseEvent_Func&quot;);
                TriggerAddEventUnitRegion(gt_MainBaseEvent, null, RegionFromId(19), true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: SAS Event
            //--------------------------------------------------------------------------------------------------
            bool gt_SASEvent_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                    if (!(((UnitGetOwner(EventUnit()) == gv_pLAYER1) || (UnitGetOwner(EventUnit()) == gv_pLAYER2)))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                UnitGroupLoopBegin(UnitGroup(&quot;Marine&quot;, gv_moebiusForces, RegionFromId(31), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0));
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand(&quot;attack&quot;, 0), PointFromId(791174113)), c_orderQueueReplace);
                }
                UnitGroupLoopEnd();
                UnitGroupLoopBegin(UnitGroup(&quot;Scientist&quot;, 0, RegionFromId(21), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0));
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), PointFromId(1002725990)), c_orderQueueReplace);
                }
                UnitGroupLoopEnd();
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_SASEvent_Init () {
                gt_SASEvent = TriggerCreate(&quot;gt_SASEvent_Func&quot;);
                TriggerAddEventUnitRegion(gt_SASEvent, null, RegionFromId(21), true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Bonus Discovering
            //--------------------------------------------------------------------------------------------------
            bool gt_BonusDiscovering_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                    if (!(((UnitGetOwner(EventUnit()) == gv_pLAYER1) || (UnitGetOwner(EventUnit()) == gv_pLAYER2)))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                TriggerExecute(gt_ObjectiveDestroyTheComSatCreate, true, false);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_BonusDiscovering_Init () {
                gt_BonusDiscovering = TriggerCreate(&quot;gt_BonusDiscovering_Func&quot;);
                TriggerAddEventUnitRegion(gt_BonusDiscovering, null, RegionFromId(43), true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Entrance Event
            //--------------------------------------------------------------------------------------------------
            bool gt_EntranceEvent_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                    if (!(((UnitGetOwner(EventUnit()) == gv_pLAYER1) || (UnitGetOwner(EventUnit()) == gv_pLAYER2)))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                Wait(2.0, c_timeGame);
                UnitCreateEffectUnit(UnitFromId(2068248682), &quot;Snipe_BlackOpsSet&quot;, UnitFromId(655026922));
                Wait(0.5, c_timeGame);
                UnitCreateEffectUnit(UnitFromId(2068248682), &quot;Snipe_BlackOpsSet&quot;, UnitFromId(1330463811));
                Wait(0.5, c_timeGame);
                UnitCreateEffectUnit(UnitFromId(2068248682), &quot;Snipe_BlackOpsSet&quot;, UnitFromId(1704719416));
                Wait(0.5, c_timeGame);
                UnitCreateEffectUnit(UnitFromId(2068248682), &quot;Snipe_BlackOpsSet&quot;, UnitFromId(1379991988));
                Wait(1.0, c_timeGame);
                UnitCreateEffectUnit(UnitFromId(2068248682), &quot;Snipe_BlackOpsSet&quot;, UnitFromId(659227976));
                UnitKill(UnitFromId(659227976));
                Wait(0.5, c_timeGame);
                UnitKill(UnitFromId(819118973));
                PlayerCreateEffectPoint(7, &quot;HybridNukeDetonate&quot;, PointFromId(754052417));
                CameraShakeStart(1, c_cameraPositionTarget, c_cameraDirectionZ, 1.0, 2.0, 100.0, 2.5);
                UnitRemove(UnitFromId(2068248682));
                Wait(2.0, c_timeGame);
                GameSetLighting(&quot;MoebiusLabSpace3&quot;, 2.0);
                SoundPlayAtPointForPlayer(SoundLink(&quot;Alert_BaseUnderAttackKlaxon&quot;, -1), c_maxPlayers, PlayerGroupAll(), PointFromId(754052417), 0.0, 200.0, 0.0);
                UnitGroupLoopBegin(UnitGroup(&quot;Scientist&quot;, 0, RegionFromId(18), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0));
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), PointFromId(397072896)), c_orderQueueReplace);
                }
                UnitGroupLoopEnd();
                UnitGroupLoopBegin(UnitGroup(&quot;Marine&quot;, gv_moebiusForces, RegionFromId(32), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0));
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand(&quot;attack&quot;, 0), PointFromId(295102286)), c_orderQueueReplace);
                }
                UnitGroupLoopEnd();
                UnitGroupLoopBegin(UnitGroup(&quot;Firebat&quot;, gv_moebiusForces, RegionFromId(32), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0));
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand(&quot;attack&quot;, 0), PointFromId(295102286)), c_orderQueueReplace);
                }
                UnitGroupLoopEnd();
                UnitGroupLoopBegin(UnitGroup(&quot;Reaper&quot;, gv_moebiusForces, RegionFromId(33), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0));
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand(&quot;attack&quot;, 0), PointFromId(918287645)), c_orderQueueReplace);
                }
                UnitGroupLoopEnd();
                UnitGroupLoopBegin(UnitGroup(&quot;Reaper&quot;, gv_moebiusForces, RegionFromId(34), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0));
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand(&quot;attack&quot;, 0), PointFromId(1825846068)), c_orderQueueReplace);
                }
                UnitGroupLoopEnd();
                UnitGroupLoopBegin(UnitGroup(&quot;Marine&quot;, gv_moebiusForces, RegionFromId(4), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0));
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand(&quot;attack&quot;, 0), PointFromId(408143133)), c_orderQueueReplace);
                }
                UnitGroupLoopEnd();
                UnitGroupLoopBegin(UnitGroup(null, gv_moebiusForces, RegionFromId(38), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0));
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand(&quot;attack&quot;, 0), PointFromId(1481162267)), c_orderQueueReplace);
                }
                UnitGroupLoopEnd();
                Wait(5.0, c_timeGame);
                if ((gv_pRUsed == true)) {
                    GameSetLighting(&quot;MoebiusLabSpace2&quot;, 2.0);
                }
                else {
                    GameSetLighting(&quot;MoebiusLabSpace1&quot;, 2.0);
                }
                Wait(5.0, c_timeGame);
                libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
                libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(&quot;GhostAlternatePortrait&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), SoundLink(&quot;Ac_Dilemma_Timer1&quot;, -1), 0.0, c_transmissionDurationAdd, true);
                libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
                libCOMI_gf_TimerWindowCreate(gv_awakeningTimer, StringExternal(&quot;Param/Value/5443D0A3&quot;), true, false);
                gv_awakeningTimerWindow = TimerWindowLastCreated();
                TriggerExecute(gt_InfoZoneEvent, false, false);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_EntranceEvent_Init () {
                gt_EntranceEvent = TriggerCreate(&quot;gt_EntranceEvent_Func&quot;);
                TriggerAddEventUnitRegion(gt_EntranceEvent, null, RegionFromId(18), true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Event Boss 1
            //--------------------------------------------------------------------------------------------------
            bool gt_EventBoss1_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((UnitFilterMatch(EventUnit(), 1, UnitFilter((1 &lt;&lt; c_targetFilterGround), 0, (1 &lt;&lt; c_targetFilterAir) | (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32)))) == true))) {
                        return false;
                    }
                    if (!((gv_pRUsed == false))) {
                        return false;
                    }
                    if (!(((UnitGetOwner(EventUnit()) == gv_pLAYER1) || (UnitGetOwner(EventUnit()) == gv_pLAYER2)))) {
                        return false;
                    }
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                gv_pRUsed = true;
                SoundPlayForPlayer(SoundLink(&quot;Kor1_StabilizerSecuredStinger&quot;, -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
                libNtve_gf_KillModel(libHots_gf_ActorForUnit(gv_eventBoss1Beacon, 1));
                TextTagDestroy(libHots_gf_TextTagForUnit(gv_eventBoss1Beacon, 1));
                UnitKill(gv_eventBoss1Beacon);
                UnitCreate(1, &quot;AgentPR&quot;, 0, 7, PointFromId(583451386), 45.0);
                UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), PointFromId(1865462713)), c_orderQueueReplace);
                SoundPlayOnUnitForPlayer(SoundLink(&quot;Ghost_CloakOff&quot;, -1), c_maxPlayers, PlayerGroupAll(), EventUnit(), 0.0, 400.0, 0.0);
                gv_eventBoss1Agent = UnitLastCreated();
                libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
                libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(&quot;GhostAlternatePortrait&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), SoundLink(&quot;Ac_Dilemma_Event1&quot;, -1), 0.0, c_transmissionDurationAdd, true);
                libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
                libHots_gf_PlaySoundLinkasMusic(SoundLink(&quot;ACDilemma_Music_Event&quot;, -1), true, false);
                Wait(3.0, c_timeGame);
                UnitSetState(UnitLastCreated(), c_unitStateMoveSuppressed, false);
                UnitSetState(UnitLastCreated(), c_unitStateStunned, true);
                SoundPlayForPlayer(SoundLink(&quot;Lab03_alarm&quot;, -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
                GameSetLighting(&quot;MoebiusLabSpace2&quot;, 2.0);
                TriggerExecute(gt_EventBoss1MarinesReinforcement, true, false);
                Wait(4.0, c_timeGame);
                SoundStop(SoundLastPlayed(), true);
                if ((gv_level &gt;= 1)) {
                    TriggerExecute(gt_EventBoss1DropReinforcement, true, false);
                    if ((gv_level == 2)) {
                        TriggerExecute(gt_EventBoss1DefSystem, true, false);
                    }
                    Wait(15.0, c_timeGame);
                }
                Wait(30.0, c_timeGame);
                TriggerExecute(gt_Boss1Pop, true, false);
                UnitSetState(gv_eventBoss1Agent, c_unitStateInvulnerable, true);
                SoundPlayOnUnitForPlayer(SoundLink(&quot;Ghost_CloakOn&quot;, -1), c_maxPlayers, PlayerGroupAll(), EventUnit(), 0.0, 400.0, 0.0);
                UnitRemove(gv_eventBoss1Agent);
                Wait(10.0, c_timeGame);
                gv_pRUsed = false;
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_EventBoss1_Init () {
                gt_EventBoss1 = TriggerCreate(&quot;gt_EventBoss1_Func&quot;);
                TriggerAddEventUnitRegion(gt_EventBoss1, null, RegionFromId(24), true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Event Boss 1 AgentPR Vanish
            //--------------------------------------------------------------------------------------------------
            bool gt_EventBoss1AgentPRVanish_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((UnitGetPropertyFixed(gv_eventBoss1Agent, c_unitPropLife, c_unitPropCurrent) &lt; 30.0))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                UnitSetState(gv_eventBoss1Agent, c_unitStateInvulnerable, true);
                libHots_gf_StopSoundLinkCurrentlyPlayingasMusic();
                SoundPlayForPlayer(SoundLink(&quot;UI_ObjectiveFailed&quot;, -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
                SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryMusic, false, true);
                SoundPlayOnUnitForPlayer(SoundLink(&quot;Ghost_CloakOn&quot;, -1), c_maxPlayers, PlayerGroupAll(), EventUnit(), 0.0, 400.0, 0.0);
                UnitSetState(gv_eventBoss1Agent, c_unitStateHidden, true);
                Wait(1.0, c_timeGame);
                UnitRemove(gv_eventBoss1Agent);
                TriggerStop(gt_EventBoss1);
                TriggerStop(gt_EventBoss1MarinesReinforcement);
                Wait(10.0, c_timeGame);
                GameSetLighting(&quot;MoebiusLabSpace1&quot;, 2.0);
                libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;Beacon_Nova&quot;, 0, 0, PointFromId(1865462713));
                gv_eventBoss1Beacon = UnitLastCreated();
                libCOMI_gf_AttachReticleEffectAndTextTagOnUnit(libCOMI_ge_CampaginReticleType_TerranMainObjective, libCOMI_ge_CampaginReticleSize_Large, StringExternal(&quot;Param/Value/226488EC&quot;), gv_eventBoss1Beacon, &quot;Ref_Center&quot;);
                libHots_gf_StoreActorForUnit(gv_eventBoss1Beacon, 1, libNtve_gf_ActorLastCreated());
                libHots_gf_StoreTextTagForUnit(gv_eventBoss1Beacon, 1, TextTagLastCreated());
                gv_pRUsed = false;
                TriggerEnable(gt_EventBoss1, true);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_EventBoss1AgentPRVanish_Init () {
                gt_EventBoss1AgentPRVanish = TriggerCreate(&quot;gt_EventBoss1AgentPRVanish_Func&quot;);
                TriggerAddEventUnitDamaged(gt_EventBoss1AgentPRVanish, UnitRefFromVariable(&quot;gv_eventBoss1Agent&quot;), c_unitDamageTypeAny, c_unitDamageEither, null);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Event Boss 1 Marines Reinforcement
            //--------------------------------------------------------------------------------------------------
            bool gt_EventBoss1MarinesReinforcement_Func (bool testConds, bool runActions) {
                int auto5E1AE184_n;
                int auto5E1AE184_i;
                // Actions
                if (!runActions) {
                    return true;
                }
                SoundPlayAtPointForPlayer(SoundLink(&quot;Marine_Attack&quot;, -1), c_maxPlayers, PlayerGroupAll(), PointFromId(648368960), 0.0, 100.0, 0.0);
                auto5E1AE184_n = 15;
                for (auto5E1AE184_i = 1; auto5E1AE184_i &lt;= auto5E1AE184_n; auto5E1AE184_i += 1) {
                    libNtve_gf_UnitCreateFacingPoint(1, &quot;Marine&quot;, 0, gv_moebiusForces, PointFromId(648368960), PointFromId(1865462713));
                    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand(&quot;attack&quot;, 0), PointFromId(1865462713)), c_orderQueueReplace);
                    Wait(2.0, c_timeGame);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_EventBoss1MarinesReinforcement_Init () {
                gt_EventBoss1MarinesReinforcement = TriggerCreate(&quot;gt_EventBoss1MarinesReinforcement_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Event Boss 1 Drop Reinforcement
            //--------------------------------------------------------------------------------------------------
            bool gt_EventBoss1DropReinforcement_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                libNtve_gf_UnitCreateFacingPoint(1, &quot;HerculesLanderFlying&quot;, 0, gv_moebiusForces, PointFromId(440506862), RegionGetCenter(RegionFromId(30)));
                UnitSetPropertyFixed(UnitLastCreated(), c_unitPropMovementSpeed, 5.5);
                UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), RegionGetCenter(RegionFromId(30))), c_orderQueueReplace);
                UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand(&quot;HerculesLand&quot;, 0), RegionGetCenter(RegionFromId(30))), c_orderQueueAddToEnd);
                UnitCargoCreate(UnitLastCreated(), &quot;Goliath&quot;, libNtve_gf_DifficultyValueInt(6, 8, 10, 12));
                UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand(&quot;HerculesTransport&quot;, 2), RegionGetCenter(RegionFromId(30))), c_orderQueueAddToEnd);
                Wait(19.0, c_timeGame);
                UnitGroupIssueOrder(UnitCargoLastCreatedGroup(), OrderTargetingPoint(AbilityCommand(&quot;attack&quot;, 0), PointFromId(1865462713)), c_orderQueueReplace);
                UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand(&quot;HerculesLiftOff&quot;, 0)), c_orderQueueAddToEnd);
                Wait(7.0, c_timeGame);
                UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), PointFromId(440506862)), c_orderQueueAddToEnd);
                Wait(15.0, c_timeGame);
                UnitRemove(UnitLastCreated());
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_EventBoss1DropReinforcement_Init () {
                gt_EventBoss1DropReinforcement = TriggerCreate(&quot;gt_EventBoss1DropReinforcement_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Event Boss 1 Def System
            //--------------------------------------------------------------------------------------------------
            bool gt_EventBoss1DefSystem_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                if (((PlayerDifficulty(1) &gt;= 3) == true)) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;SentryGunUnderground&quot;, c_unitCreateIgnorePlacement, gv_moebiusForces, PointFromId(586862415));
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;SentryGunUnderground&quot;, c_unitCreateIgnorePlacement, gv_moebiusForces, PointFromId(1826653193));
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;SentryGunUnderground&quot;, c_unitCreateIgnorePlacement, gv_moebiusForces, PointFromId(1656624144));
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;SentryGunUnderground&quot;, c_unitCreateIgnorePlacement, gv_moebiusForces, PointFromId(1025458350));
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;SentryGunUnderground&quot;, c_unitCreateIgnorePlacement, gv_moebiusForces, PointFromId(1437506116));
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;SentryGunUnderground&quot;, c_unitCreateIgnorePlacement, gv_moebiusForces, PointFromId(2117751707));
                }
                Wait(15.0, c_timeGame);
                libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;SentryGunUnderground&quot;, c_unitCreateIgnorePlacement, gv_moebiusForces, PointFromId(586862415));
                libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;SentryGunUnderground&quot;, c_unitCreateIgnorePlacement, gv_moebiusForces, PointFromId(1826653193));
                libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;SentryGunUnderground&quot;, c_unitCreateIgnorePlacement, gv_moebiusForces, PointFromId(1656624144));
                libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;SentryGunUnderground&quot;, c_unitCreateIgnorePlacement, gv_moebiusForces, PointFromId(1025458350));
                libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;SentryGunUnderground&quot;, c_unitCreateIgnorePlacement, gv_moebiusForces, PointFromId(1437506116));
                libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;SentryGunUnderground&quot;, c_unitCreateIgnorePlacement, gv_moebiusForces, PointFromId(2117751707));
                Wait(15.0, c_timeGame);
                if (((PlayerDifficulty(1) &gt;= 4) == true)) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;SentryGunUnderground&quot;, c_unitCreateIgnorePlacement, gv_moebiusForces, PointFromId(586862415));
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;SentryGunUnderground&quot;, c_unitCreateIgnorePlacement, gv_moebiusForces, PointFromId(1826653193));
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;SentryGunUnderground&quot;, c_unitCreateIgnorePlacement, gv_moebiusForces, PointFromId(1656624144));
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;SentryGunUnderground&quot;, c_unitCreateIgnorePlacement, gv_moebiusForces, PointFromId(1025458350));
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;SentryGunUnderground&quot;, c_unitCreateIgnorePlacement, gv_moebiusForces, PointFromId(1437506116));
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;SentryGunUnderground&quot;, c_unitCreateIgnorePlacement, gv_moebiusForces, PointFromId(2117751707));
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_EventBoss1DefSystem_Init () {
                gt_EventBoss1DefSystem = TriggerCreate(&quot;gt_EventBoss1DefSystem_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Ping objective 1
            //--------------------------------------------------------------------------------------------------
            bool gt_Pingobjective1_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
                libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(&quot;GhostAlternatePortrait&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), SoundLink(&quot;Ac_Dilemma_Intro4&quot;, -1), 0.0, c_transmissionDurationAdd, false);
                libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
                libCOMI_gf_PingMinimapCampaign(PlayerGroupAll(), UnitGetPosition(UnitFromId(919745099)), 2.0, Color(0.00, 100.00, 0.00));
                libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_Primary, UnitGetPosition(UnitFromId(919745099)), StringExternal(&quot;Param/Value/4668CB74&quot;));
                gv_pingCell1 = PingLastCreated();
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_Pingobjective1_Init () {
                gt_Pingobjective1 = TriggerCreate(&quot;gt_Pingobjective1_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Entering Boss 1 room
            //--------------------------------------------------------------------------------------------------
            bool gt_EnteringBoss1room_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                    if (!((gv_GameOver == false))) {
                        return false;
                    }
                    if (!(((UnitGetOwner(EventUnit()) == gv_pLAYER1) || (UnitGetOwner(EventUnit()) == gv_pLAYER2)))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                TriggerExecute(gt_Pingobjective1, true, false);
                if ((UnitIsAlive(UnitFromId(919745099)) == false)) {
                    return true;
                }
                libCOMI_gf_AttachReticleEffectAndTextTagOnUnit(libCOMI_ge_CampaginReticleType_TerranMainObjective, libCOMI_ge_CampaginReticleSize_Large, StringExternal(&quot;Param/Value/0BA78A59&quot;), gv_eventBoss1Beacon, &quot;Ref_Center&quot;);
                libHots_gf_StoreActorForUnit(gv_eventBoss1Beacon, 1, libNtve_gf_ActorLastCreated());
                libHots_gf_StoreTextTagForUnit(gv_eventBoss1Beacon, 1, TextTagLastCreated());
                libCOMI_gf_PingMinimapCampaign(PlayerGroupAll(), UnitGetPosition(UnitFromId(919745099)), 2.0, Color(100.00, 0.00, 0.00));
                TriggerExecute(gt_EnteringBossRoomTransmission, true, false);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_EnteringBoss1room_Init () {
                gt_EnteringBoss1room = TriggerCreate(&quot;gt_EnteringBoss1room_Func&quot;);
                TriggerAddEventUnitRegion(gt_EnteringBoss1room, null, RegionFromId(13), true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Boss 1 Pop
            //--------------------------------------------------------------------------------------------------
            bool gt_Boss1Pop_Func (bool testConds, bool runActions) {
                string auto0F0C22BE_val;
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                CameraShakeStart(1, c_cameraPositionTarget, c_cameraDirectionZ, 1.0, 2.0, 100.0, 2.5);
                SoundPlayForPlayer(SoundLink(&quot;PUlnar02_Music_HybridStinger2&quot;, -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
                libCOMI_gf_DestroyPingCoop(gv_pingCell1);
                UnitKill(UnitFromId(919745099));
                UnitKill(UnitFromId(1336667759));
                UnitKill(UnitFromId(896524512));
                libHots_gf_PlaySoundLinkasMusic(SoundLink(&quot;ACDilemma_Music_BossBattle&quot;, -1), true, false);
                libNtve_gf_UnitCreateFacingPoint(1, gv_bossType1, 0, gv_superHybrids, RegionGetCenter(RegionFromId(10)), RegionGetCenter(RegionFromId(1)));
                gv_boss1 = UnitLastCreated();
                libNtve_gf_MakeUnitInvulnerable(UnitLastCreated(), true);
                UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), PointFromId(336334111)), c_orderQueueReplace);
                libNtve_gf_PauseUnit(UnitLastCreated(), true);
                TriggerExecute(gt_CheckCells, true, false);
                auto0F0C22BE_val = gv_bossType1;
                if (auto0F0C22BE_val == &quot;Garg&quot;) {
                    libNtve_gf_DisplayBossBar(1, &quot;Assets\\Textures\\hybridzergadvancedportrait_static.dds&quot;, UnitGetName(UnitLastCreated()), 100, gv_humanPG);
                }
                else if (auto0F0C22BE_val == &quot;Fuul&quot;) {
                    libNtve_gf_DisplayBossBar(1, &quot;Assets\\Textures\\hybridprotossportrait_static.dds&quot;, UnitGetName(UnitLastCreated()), 100, gv_humanPG);
                }
                else if (auto0F0C22BE_val == &quot;Cort&quot;) {
                    libNtve_gf_DisplayBossBar(1, &quot;Assets\\Textures\\hybridprotossadvancedportrait_static.dds&quot;, UnitGetName(UnitLastCreated()), 100, gv_humanPG);
                }
                else {
                }
                libNtve_gf_MoveBossBar(1, c_anchorTop, 0, 100);
                libNtve_gf_SetBossBarBoss(1, UnitLastCreated(), true);
                libNtve_gf_SetBossBarRace(1, libNtve_ge_BossBarRace_Protoss, true);
                gf_TrackBossWithPing(UnitLastCreated());
                libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Large, libNtve_ge_ExplosionType_Terran, Point(109.0, 139.0));
                Wait(0.5, c_timeGame);
                libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Large, libNtve_ge_ExplosionType_Terran, Point(108.0, 138.0));
                Wait(0.5, c_timeGame);
                libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Large, libNtve_ge_ExplosionType_Terran, Point(108.0, 140.0));
                Wait(0.5, c_timeGame);
                libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Large, libNtve_ge_ExplosionType_Terran, Point(110.0, 140.0));
                Wait(0.5, c_timeGame);
                libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Large, libNtve_ge_ExplosionType_Terran, Point(110.0, 138.0));
                Wait(0.5, c_timeGame);
                libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Large, libNtve_ge_ExplosionType_Terran, Point(109.0, 139.0));
                Wait(5.0, c_timeGame);
                libNtve_gf_MakeUnitInvulnerable(UnitLastCreated(), false);
                libNtve_gf_PauseUnit(UnitLastCreated(), false);
                Wait(60.0, c_timeGame);
                TriggerExecute(gt_Boss1Wave, true, false);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_Boss1Pop_Init () {
                gt_Boss1Pop = TriggerCreate(&quot;gt_Boss1Pop_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Boss 1 Wave
            //--------------------------------------------------------------------------------------------------
            bool gt_Boss1Wave_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((UnitIsAlive(gv_boss1) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                UnitGroupLoopBegin(UnitGroup(null, 0, RegionFromId(36), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0));
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    UnitKill(UnitGroupLoopCurrent());
                }
                UnitGroupLoopEnd();
                libCOMI_gf_ShareVisionofUnitWithHumansCoop(gv_boss1, true);
                libCOMI_gf_PingMinimapCampaign(PlayerGroupAll(), UnitGetPosition(gv_boss1), 2.0, Color(100.00, 0.00, 0.00));
                SoundPlayForPlayer(SoundLink(&quot;ZEvoMusicStinger&quot;, -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
                libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
                libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(&quot;GhostAlternatePortrait&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), SoundLink(&quot;Ac_Dilemma_Move1&quot;, -1), 0.0, c_transmissionDurationAdd, true);
                libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
                AIAttackWaveSetTargetPoint(gv_superHybrids, PointFromId(1465535020));
                AIAttackWaveUseUnit(gv_superHybrids, gv_boss1);
                AIAttackWaveSend(gv_superHybrids, 0, false);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_Boss1Wave_Init () {
                gt_Boss1Wave = TriggerCreate(&quot;gt_Boss1Wave_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Boss 1 Die
            //--------------------------------------------------------------------------------------------------
            bool gt_Boss1Die_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                GameSetLighting(&quot;MoebiusLabSpace1&quot;, 2.0);
                UnitGroupLoopBegin(UnitGroup(null, 0, RegionFromId(36), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0));
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    UnitKill(UnitGroupLoopCurrent());
                }
                UnitGroupLoopEnd();
                libNtve_gf_ShowHideBossBar(false, 1);
                TriggerExecute(gt_Checkvictory, true, false);
                Wait(10.0, c_timeGame);
                TriggerExecute(gt_Pingobjective2, true, false);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_Boss1Die_Init () {
                gt_Boss1Die = TriggerCreate(&quot;gt_Boss1Die_Func&quot;);
                TriggerAddEventUnitDied(gt_Boss1Die, UnitRefFromVariable(&quot;gv_boss1&quot;));
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Event Boss 2
            //--------------------------------------------------------------------------------------------------
            bool gt_EventBoss2_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((UnitFilterMatch(EventUnit(), 1, UnitFilter((1 &lt;&lt; c_targetFilterGround), 0, (1 &lt;&lt; c_targetFilterAir) | (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32)))) == true))) {
                        return false;
                    }
                    if (!((gv_pRUsed == false))) {
                        return false;
                    }
                    if (!(((UnitGetOwner(EventUnit()) == gv_pLAYER1) || (UnitGetOwner(EventUnit()) == gv_pLAYER2)))) {
                        return false;
                    }
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                gv_pRUsed = true;
                SoundPlayForPlayer(SoundLink(&quot;Kor1_StabilizerSecuredStinger&quot;, -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
                libNtve_gf_KillModel(libHots_gf_ActorForUnit(gv_eventBoss2Beacon, 1));
                TextTagDestroy(libHots_gf_TextTagForUnit(gv_eventBoss2Beacon, 1));
                UnitKill(gv_eventBoss2Beacon);
                UnitCreate(1, &quot;AgentPR&quot;, 0, 7, PointFromId(1840147274), 45.0);
                UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), PointFromId(1803366101)), c_orderQueueReplace);
                SoundPlayOnUnitForPlayer(SoundLink(&quot;Ghost_CloakOff&quot;, -1), c_maxPlayers, PlayerGroupAll(), EventUnit(), 0.0, 400.0, 0.0);
                gv_eventBoss2Agent = UnitLastCreated();
                libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
                libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(&quot;GhostAlternatePortrait&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), SoundLink(&quot;Ac_Dilemma_Event1&quot;, -1), 0.0, c_transmissionDurationAdd, true);
                libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
                libHots_gf_PlaySoundLinkasMusic(SoundLink(&quot;ACDilemma_Music_Event&quot;, -1), true, false);
                Wait(3.0, c_timeGame);
                UnitSetState(UnitLastCreated(), c_unitStateMoveSuppressed, false);
                UnitSetState(UnitLastCreated(), c_unitStateStunned, true);
                SoundPlayForPlayer(SoundLink(&quot;Lab03_alarm&quot;, -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
                GameSetLighting(&quot;MoebiusLabSpace2&quot;, 2.0);
                TriggerExecute(gt_EventBoss2MarinesReinforcement, true, false);
                Wait(4.0, c_timeGame);
                SoundStop(SoundLastPlayed(), true);
                if ((gv_level &gt;= 1)) {
                    TriggerExecute(gt_EventBoss2DropReinforcement, true, false);
                    if ((gv_level == 2)) {
                        TriggerExecute(gt_EventBoss2DefSystem, true, false);
                    }
                    Wait(15.0, c_timeGame);
                }
                Wait(30.0, c_timeGame);
                TriggerExecute(gt_Boss2Pop, true, false);
                UnitSetState(gv_eventBoss2Agent, c_unitStateInvulnerable, true);
                SoundPlayOnUnitForPlayer(SoundLink(&quot;Ghost_CloakOn&quot;, -1), c_maxPlayers, PlayerGroupAll(), EventUnit(), 0.0, 400.0, 0.0);
                UnitRemove(gv_eventBoss2Agent);
                Wait(10.0, c_timeGame);
                gv_pRUsed = false;
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_EventBoss2_Init () {
                gt_EventBoss2 = TriggerCreate(&quot;gt_EventBoss2_Func&quot;);
                TriggerAddEventUnitRegion(gt_EventBoss2, null, RegionFromId(25), true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Event Boss 2 AgentPR Vanish
            //--------------------------------------------------------------------------------------------------
            bool gt_EventBoss2AgentPRVanish_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((UnitGetPropertyFixed(gv_eventBoss2Agent, c_unitPropLife, c_unitPropCurrent) &lt; 30.0))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                UnitSetState(gv_eventBoss2Agent, c_unitStateInvulnerable, true);
                Wait(1.0, c_timeGame);
                libHots_gf_StopSoundLinkCurrentlyPlayingasMusic();
                SoundPlayForPlayer(SoundLink(&quot;UI_ObjectiveFailed&quot;, -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
                SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryMusic, false, true);
                SoundPlayOnUnitForPlayer(SoundLink(&quot;Ghost_CloakOn&quot;, -1), c_maxPlayers, PlayerGroupAll(), EventUnit(), 0.0, 400.0, 0.0);
                UnitSetState(gv_eventBoss2Agent, c_unitStateHidden, true);
                Wait(1.0, c_timeGame);
                UnitRemove(gv_eventBoss2Agent);
                TriggerStop(gt_EventBoss2);
                TriggerStop(gt_EventBoss2MarinesReinforcement);
                Wait(10.0, c_timeGame);
                GameSetLighting(&quot;MoebiusLabSpace1&quot;, 2.0);
                libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;Beacon_Nova&quot;, c_unitCreateIgnorePlacement, 0, PointFromId(1803366101));
                gv_eventBoss2Beacon = UnitLastCreated();
                libCOMI_gf_AttachReticleEffectAndTextTagOnUnit(libCOMI_ge_CampaginReticleType_TerranMainObjective, libCOMI_ge_CampaginReticleSize_Large, StringExternal(&quot;Param/Value/2AAB2076&quot;), gv_eventBoss2Beacon, &quot;Ref_Center&quot;);
                libHots_gf_StoreActorForUnit(gv_eventBoss2Beacon, 1, libNtve_gf_ActorLastCreated());
                libHots_gf_StoreTextTagForUnit(gv_eventBoss2Beacon, 1, TextTagLastCreated());
                gv_pRUsed = false;
                TriggerEnable(gt_EventBoss2, true);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_EventBoss2AgentPRVanish_Init () {
                gt_EventBoss2AgentPRVanish = TriggerCreate(&quot;gt_EventBoss2AgentPRVanish_Func&quot;);
                TriggerAddEventUnitDamaged(gt_EventBoss2AgentPRVanish, UnitRefFromVariable(&quot;gv_eventBoss2Agent&quot;), c_unitDamageTypeAny, c_unitDamageEither, null);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Event Boss 2 Marines Reinforcement
            //--------------------------------------------------------------------------------------------------
            bool gt_EventBoss2MarinesReinforcement_Func (bool testConds, bool runActions) {
                int auto6EEEF41A_n;
                int auto6EEEF41A_i;
                // Actions
                if (!runActions) {
                    return true;
                }
                SoundPlayAtPointForPlayer(SoundLink(&quot;Marine_Attack&quot;, -1), c_maxPlayers, PlayerGroupAll(), PointFromId(1013410692), 0.0, 100.0, 0.0);
                auto6EEEF41A_n = 15;
                for (auto6EEEF41A_i = 1; auto6EEEF41A_i &lt;= auto6EEEF41A_n; auto6EEEF41A_i += 1) {
                    libNtve_gf_UnitCreateFacingPoint(1, &quot;Marine&quot;, 0, gv_moebiusForces, PointFromId(1013410692), PointFromId(1803366101));
                    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand(&quot;attack&quot;, 0), PointFromId(1803366101)), c_orderQueueReplace);
                    Wait(2.0, c_timeGame);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_EventBoss2MarinesReinforcement_Init () {
                gt_EventBoss2MarinesReinforcement = TriggerCreate(&quot;gt_EventBoss2MarinesReinforcement_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Event Boss 2 Drop Reinforcement
            //--------------------------------------------------------------------------------------------------
            bool gt_EventBoss2DropReinforcement_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                libNtve_gf_UnitCreateFacingPoint(1, &quot;HerculesLanderFlying&quot;, 0, gv_moebiusForces, PointFromId(1842854634), RegionGetCenter(RegionFromId(2)));
                UnitSetPropertyFixed(UnitLastCreated(), c_unitPropMovementSpeed, 5.5);
                UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), RegionGetCenter(RegionFromId(2))), c_orderQueueReplace);
                UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand(&quot;HerculesLand&quot;, 0), RegionGetCenter(RegionFromId(2))), c_orderQueueAddToEnd);
                UnitCargoCreate(UnitLastCreated(), &quot;Goliath&quot;, libNtve_gf_DifficultyValueInt(6, 8, 10, 12));
                UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand(&quot;HerculesTransport&quot;, 2), RegionGetCenter(RegionFromId(2))), c_orderQueueAddToEnd);
                Wait(17.0, c_timeGame);
                UnitGroupIssueOrder(UnitCargoLastCreatedGroup(), OrderTargetingPoint(AbilityCommand(&quot;attack&quot;, 0), PointFromId(1803366101)), c_orderQueueReplace);
                UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand(&quot;HerculesLiftOff&quot;, 0)), c_orderQueueAddToEnd);
                Wait(7.0, c_timeGame);
                UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), PointFromId(1842854634)), c_orderQueueAddToEnd);
                Wait(15.0, c_timeGame);
                UnitRemove(UnitLastCreated());
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_EventBoss2DropReinforcement_Init () {
                gt_EventBoss2DropReinforcement = TriggerCreate(&quot;gt_EventBoss2DropReinforcement_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Event Boss 2 Def System
            //--------------------------------------------------------------------------------------------------
            bool gt_EventBoss2DefSystem_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                if (((PlayerDifficulty(1) &gt;= 3) == true)) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;SentryGunUnderground&quot;, c_unitCreateIgnorePlacement, gv_moebiusForces, PointFromId(309208800));
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;SentryGunUnderground&quot;, c_unitCreateIgnorePlacement, gv_moebiusForces, PointFromId(1881955392));
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;SentryGunUnderground&quot;, c_unitCreateIgnorePlacement, gv_moebiusForces, PointFromId(799260883));
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;SentryGunUnderground&quot;, c_unitCreateIgnorePlacement, gv_moebiusForces, PointFromId(1137379734));
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;SentryGunUnderground&quot;, c_unitCreateIgnorePlacement, gv_moebiusForces, PointFromId(1338359692));
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;SentryGunUnderground&quot;, c_unitCreateIgnorePlacement, gv_moebiusForces, PointFromId(169605246));
                }
                Wait(15.0, c_timeGame);
                libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;SentryGunUnderground&quot;, c_unitCreateIgnorePlacement, gv_moebiusForces, PointFromId(309208800));
                libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;SentryGunUnderground&quot;, c_unitCreateIgnorePlacement, gv_moebiusForces, PointFromId(1881955392));
                libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;SentryGunUnderground&quot;, c_unitCreateIgnorePlacement, gv_moebiusForces, PointFromId(799260883));
                libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;SentryGunUnderground&quot;, c_unitCreateIgnorePlacement, gv_moebiusForces, PointFromId(1137379734));
                libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;SentryGunUnderground&quot;, c_unitCreateIgnorePlacement, gv_moebiusForces, PointFromId(1338359692));
                libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;SentryGunUnderground&quot;, c_unitCreateIgnorePlacement, gv_moebiusForces, PointFromId(169605246));
                Wait(15.0, c_timeGame);
                if (((PlayerDifficulty(1) &gt;= 4) == true)) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;SentryGunUnderground&quot;, c_unitCreateIgnorePlacement, gv_moebiusForces, PointFromId(309208800));
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;SentryGunUnderground&quot;, c_unitCreateIgnorePlacement, gv_moebiusForces, PointFromId(1881955392));
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;SentryGunUnderground&quot;, c_unitCreateIgnorePlacement, gv_moebiusForces, PointFromId(799260883));
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;SentryGunUnderground&quot;, c_unitCreateIgnorePlacement, gv_moebiusForces, PointFromId(1137379734));
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;SentryGunUnderground&quot;, c_unitCreateIgnorePlacement, gv_moebiusForces, PointFromId(1338359692));
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;SentryGunUnderground&quot;, c_unitCreateIgnorePlacement, gv_moebiusForces, PointFromId(169605246));
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_EventBoss2DefSystem_Init () {
                gt_EventBoss2DefSystem = TriggerCreate(&quot;gt_EventBoss2DefSystem_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Ping objective 2
            //--------------------------------------------------------------------------------------------------
            bool gt_Pingobjective2_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
                libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(&quot;GhostAlternatePortrait&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), SoundLink(&quot;Ac_Dilemma_Intro4&quot;, -1), 0.0, c_transmissionDurationAdd, false);
                libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
                libCOMI_gf_PingMinimapCampaign(PlayerGroupAll(), UnitGetPosition(UnitFromId(111658737)), 2.0, Color(0.00, 100.00, 0.00));
                libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_Primary, UnitGetPosition(UnitFromId(111658737)), StringExternal(&quot;Param/Value/BC23D933&quot;));
                gv_pingCell2 = PingLastCreated();
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_Pingobjective2_Init () {
                gt_Pingobjective2 = TriggerCreate(&quot;gt_Pingobjective2_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Entering Boss 2 room
            //--------------------------------------------------------------------------------------------------
            bool gt_EnteringBoss2room_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                    if (!((gv_GameOver == false))) {
                        return false;
                    }
                    if (!(((UnitGetOwner(EventUnit()) == gv_pLAYER1) || (UnitGetOwner(EventUnit()) == gv_pLAYER2)))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                TriggerExecute(gt_Pingobjective2, true, false);
                if ((UnitIsAlive(UnitFromId(111658737)) == false)) {
                    return true;
                }
                libCOMI_gf_AttachReticleEffectAndTextTagOnUnit(libCOMI_ge_CampaginReticleType_TerranMainObjective, libCOMI_ge_CampaginReticleSize_Large, StringExternal(&quot;Param/Value/D239F827&quot;), gv_eventBoss2Beacon, &quot;Ref_Center&quot;);
                libHots_gf_StoreActorForUnit(gv_eventBoss2Beacon, 1, libNtve_gf_ActorLastCreated());
                libHots_gf_StoreTextTagForUnit(gv_eventBoss2Beacon, 1, TextTagLastCreated());
                libCOMI_gf_PingMinimapCampaign(PlayerGroupAll(), UnitGetPosition(UnitFromId(111658737)), 2.0, Color(100.00, 0.00, 0.00));
                TriggerExecute(gt_EnteringBossRoomTransmission, true, false);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_EnteringBoss2room_Init () {
                gt_EnteringBoss2room = TriggerCreate(&quot;gt_EnteringBoss2room_Func&quot;);
                TriggerAddEventUnitRegion(gt_EnteringBoss2room, null, RegionFromId(14), true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Boss 2 Pop
            //--------------------------------------------------------------------------------------------------
            bool gt_Boss2Pop_Func (bool testConds, bool runActions) {
                string autoB05307C9_val;
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                CameraShakeStart(1, c_cameraPositionTarget, c_cameraDirectionZ, 1.0, 2.0, 100.0, 2.5);
                UnitKill(UnitFromId(111658737));
                UnitKill(UnitFromId(1325991034));
                UnitKill(UnitFromId(1681449191));
                libCOMI_gf_DestroyPingCoop(gv_pingCell2);
                libNtve_gf_KillModel(libHots_gf_ActorForUnit(UnitFromId(111658737), 1));
                TextTagDestroy(libHots_gf_TextTagForUnit(UnitFromId(111658737), 1));
                libHots_gf_PlaySoundLinkasMusic(SoundLink(&quot;ACDilemma_Music_BossBattle&quot;, -1), true, false);
                libNtve_gf_UnitCreateFacingPoint(1, gv_bossType2, 0, gv_superHybrids, RegionGetCenter(RegionFromId(11)), RegionGetCenter(RegionFromId(2)));
                gv_boss2 = UnitLastCreated();
                libNtve_gf_MakeUnitInvulnerable(UnitLastCreated(), true);
                UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), PointFromId(1654571352)), c_orderQueueReplace);
                libNtve_gf_PauseUnit(UnitLastCreated(), true);
                TriggerExecute(gt_CheckCells, true, false);
                autoB05307C9_val = gv_bossType2;
                if (autoB05307C9_val == &quot;Garg&quot;) {
                    libNtve_gf_DisplayBossBar(2, &quot;Assets\\Textures\\hybridzergadvancedportrait_static.dds&quot;, UnitGetName(UnitLastCreated()), 100, gv_humanPG);
                }
                else if (autoB05307C9_val == &quot;Fuul&quot;) {
                    libNtve_gf_DisplayBossBar(2, &quot;Assets\\Textures\\hybridprotossportrait_static.dds&quot;, UnitGetName(UnitLastCreated()), 100, gv_humanPG);
                }
                else if (autoB05307C9_val == &quot;Cort&quot;) {
                    libNtve_gf_DisplayBossBar(2, &quot;Assets\\Textures\\hybridprotossadvancedportrait_static.dds&quot;, UnitGetName(UnitLastCreated()), 100, gv_humanPG);
                }
                else {
                }
                libNtve_gf_SetBossBarBoss(2, UnitLastCreated(), true);
                libNtve_gf_SetBossBarRace(2, libNtve_ge_BossBarRace_Protoss, true);
                if ((UnitIsAlive(gv_boss1) == true) &amp;&amp; (UnitGetType(gv_boss2) != UnitGetType(gv_boss1))) {
                    libNtve_gf_MoveBossBar(2, c_anchorTop, 0, 200);
                }
                else {
                    libNtve_gf_MoveBossBar(2, c_anchorTop, 0, 100);
                }
                gf_TrackBossWithPing(UnitLastCreated());
                libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Large, libNtve_ge_ExplosionType_Terran, Point(154.5, 85.5));
                Wait(0.5, c_timeGame);
                libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Large, libNtve_ge_ExplosionType_Terran, Point(153.5, 84.5));
                Wait(0.5, c_timeGame);
                libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Large, libNtve_ge_ExplosionType_Terran, Point(153.5, 86.5));
                Wait(0.5, c_timeGame);
                libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Large, libNtve_ge_ExplosionType_Terran, Point(155.5, 86.5));
                Wait(0.5, c_timeGame);
                libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Large, libNtve_ge_ExplosionType_Terran, Point(155.5, 84.5));
                Wait(0.5, c_timeGame);
                libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Large, libNtve_ge_ExplosionType_Terran, Point(154.5, 85.5));
                Wait(5.0, c_timeGame);
                libNtve_gf_MakeUnitInvulnerable(UnitLastCreated(), false);
                libNtve_gf_PauseUnit(UnitLastCreated(), false);
                Wait(60.0, c_timeGame);
                TriggerExecute(gt_Boss2Wave, true, false);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_Boss2Pop_Init () {
                gt_Boss2Pop = TriggerCreate(&quot;gt_Boss2Pop_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Boss 2 Wave
            //--------------------------------------------------------------------------------------------------
            bool gt_Boss2Wave_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((UnitIsAlive(gv_boss2) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                UnitGroupLoopBegin(UnitGroup(null, 0, RegionFromId(37), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0));
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    UnitKill(UnitGroupLoopCurrent());
                }
                UnitGroupLoopEnd();
                libCOMI_gf_ShareVisionofUnitWithHumansCoop(gv_boss2, true);
                libCOMI_gf_PingMinimapCampaign(PlayerGroupAll(), UnitGetPosition(gv_boss2), 2.0, Color(100.00, 0.00, 0.00));
                SoundPlayForPlayer(SoundLink(&quot;ZEvoMusicStinger&quot;, -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
                libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
                libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(&quot;GhostAlternatePortrait&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), SoundLink(&quot;Ac_Dilemma_Move2&quot;, -1), 0.0, c_transmissionDurationAdd, true);
                libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
                AIAttackWaveSetTargetPoint(gv_superHybrids, PointFromId(1465535020));
                AIAttackWaveUseUnit(gv_superHybrids, gv_boss2);
                AIAttackWaveSend(gv_superHybrids, 0, false);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_Boss2Wave_Init () {
                gt_Boss2Wave = TriggerCreate(&quot;gt_Boss2Wave_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Boss 2 Die
            //--------------------------------------------------------------------------------------------------
            bool gt_Boss2Die_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                GameSetLighting(&quot;MoebiusLabSpace1&quot;, 2.0);
                UnitGroupLoopBegin(UnitGroup(null, 0, RegionFromId(37), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0));
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    UnitKill(UnitGroupLoopCurrent());
                }
                UnitGroupLoopEnd();
                libNtve_gf_ShowHideBossBar(false, 2);
                TriggerExecute(gt_Checkvictory, true, false);
                Wait(10.0, c_timeGame);
                TriggerExecute(gt_Pingobjective3, true, false);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_Boss2Die_Init () {
                gt_Boss2Die = TriggerCreate(&quot;gt_Boss2Die_Func&quot;);
                TriggerAddEventUnitDied(gt_Boss2Die, UnitRefFromVariable(&quot;gv_boss2&quot;));
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Event Boss 3
            //--------------------------------------------------------------------------------------------------
            bool gt_EventBoss3_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((UnitFilterMatch(EventUnit(), 1, UnitFilter((1 &lt;&lt; c_targetFilterGround), 0, (1 &lt;&lt; c_targetFilterAir) | (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32)))) == true))) {
                        return false;
                    }
                    if (!((gv_pRUsed == false))) {
                        return false;
                    }
                    if (!(((UnitGetOwner(EventUnit()) == gv_pLAYER1) || (UnitGetOwner(EventUnit()) == gv_pLAYER2)))) {
                        return false;
                    }
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                gv_pRUsed = true;
                SoundPlayForPlayer(SoundLink(&quot;Kor1_StabilizerSecuredStinger&quot;, -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
                libNtve_gf_KillModel(libHots_gf_ActorForUnit(gv_eventBoss3Beacon, 1));
                TextTagDestroy(libHots_gf_TextTagForUnit(gv_eventBoss3Beacon, 1));
                UnitKill(gv_eventBoss3Beacon);
                UnitCreate(1, &quot;AgentPR&quot;, 0, 7, PointFromId(1729007713), 45.0);
                UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), PointFromId(271955616)), c_orderQueueReplace);
                SoundPlayOnUnitForPlayer(SoundLink(&quot;Ghost_CloakOff&quot;, -1), c_maxPlayers, PlayerGroupAll(), EventUnit(), 0.0, 400.0, 0.0);
                gv_eventBoss3Agent = UnitLastCreated();
                libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
                libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(&quot;GhostAlternatePortrait&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), SoundLink(&quot;Ac_Dilemma_Event1&quot;, -1), 0.0, c_transmissionDurationAdd, true);
                libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
                libHots_gf_PlaySoundLinkasMusic(SoundLink(&quot;ACDilemma_Music_Event&quot;, -1), true, false);
                Wait(3.0, c_timeGame);
                UnitSetState(UnitLastCreated(), c_unitStateMoveSuppressed, false);
                UnitSetState(UnitLastCreated(), c_unitStateStunned, true);
                SoundPlayForPlayer(SoundLink(&quot;Lab03_alarm&quot;, -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
                GameSetLighting(&quot;MoebiusLabSpace2&quot;, 2.0);
                TriggerExecute(gt_EventBoss3MarinesReinforcement, true, false);
                Wait(4.0, c_timeGame);
                SoundStop(SoundLastPlayed(), true);
                if ((gv_level &gt;= 1)) {
                    TriggerExecute(gt_EventBoss3DropReinforcement, true, false);
                    if ((gv_level == 2)) {
                        TriggerExecute(gt_EventBoss3DefSystem, true, false);
                    }
                    Wait(15.0, c_timeGame);
                }
                Wait(30.0, c_timeGame);
                TriggerExecute(gt_Boss3Pop, true, false);
                UnitSetState(gv_eventBoss3Agent, c_unitStateInvulnerable, true);
                SoundPlayOnUnitForPlayer(SoundLink(&quot;Ghost_CloakOn&quot;, -1), c_maxPlayers, PlayerGroupAll(), EventUnit(), 0.0, 400.0, 0.0);
                UnitRemove(gv_eventBoss3Agent);
                Wait(10.0, c_timeGame);
                gv_pRUsed = false;
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_EventBoss3_Init () {
                gt_EventBoss3 = TriggerCreate(&quot;gt_EventBoss3_Func&quot;);
                TriggerAddEventUnitRegion(gt_EventBoss3, null, RegionFromId(26), true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Event Boss 3 AgentPR Vanish
            //--------------------------------------------------------------------------------------------------
            bool gt_EventBoss3AgentPRVanish_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((UnitGetPropertyFixed(gv_eventBoss3Agent, c_unitPropLife, c_unitPropCurrent) &lt; 30.0))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                UnitSetState(gv_eventBoss3Agent, c_unitStateInvulnerable, true);
                Wait(1.0, c_timeGame);
                libHots_gf_StopSoundLinkCurrentlyPlayingasMusic();
                SoundPlayForPlayer(SoundLink(&quot;UI_ObjectiveFailed&quot;, -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
                SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryMusic, false, true);
                SoundPlayOnUnitForPlayer(SoundLink(&quot;Ghost_CloakOn&quot;, -1), c_maxPlayers, PlayerGroupAll(), EventUnit(), 0.0, 400.0, 0.0);
                UnitSetState(gv_eventBoss3Agent, c_unitStateHidden, true);
                Wait(1.0, c_timeGame);
                UnitRemove(gv_eventBoss3Agent);
                TriggerStop(gt_EventBoss3);
                TriggerStop(gt_EventBoss3MarinesReinforcement);
                Wait(10.0, c_timeGame);
                GameSetLighting(&quot;MoebiusLabSpace1&quot;, 2.0);
                libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;Beacon_Nova&quot;, c_unitCreateIgnorePlacement, 0, PointFromId(271955616));
                gv_eventBoss3Beacon = UnitLastCreated();
                libCOMI_gf_AttachReticleEffectAndTextTagOnUnit(libCOMI_ge_CampaginReticleType_TerranMainObjective, libCOMI_ge_CampaginReticleSize_Large, StringExternal(&quot;Param/Value/A3710C93&quot;), gv_eventBoss3Beacon, &quot;Ref_Center&quot;);
                libHots_gf_StoreActorForUnit(gv_eventBoss3Beacon, 1, libNtve_gf_ActorLastCreated());
                libHots_gf_StoreTextTagForUnit(gv_eventBoss3Beacon, 1, TextTagLastCreated());
                gv_pRUsed = false;
                TriggerEnable(gt_EventBoss3, true);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_EventBoss3AgentPRVanish_Init () {
                gt_EventBoss3AgentPRVanish = TriggerCreate(&quot;gt_EventBoss3AgentPRVanish_Func&quot;);
                TriggerAddEventUnitDamaged(gt_EventBoss3AgentPRVanish, UnitRefFromVariable(&quot;gv_eventBoss3Agent&quot;), c_unitDamageTypeAny, c_unitDamageEither, null);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Event Boss 3 Marines Reinforcement
            //--------------------------------------------------------------------------------------------------
            bool gt_EventBoss3MarinesReinforcement_Func (bool testConds, bool runActions) {
                int autoD9253102_n;
                int autoD9253102_i;
                // Actions
                if (!runActions) {
                    return true;
                }
                SoundPlayAtPointForPlayer(SoundLink(&quot;Marine_Attack&quot;, -1), c_maxPlayers, PlayerGroupAll(), PointFromId(648368960), 0.0, 100.0, 0.0);
                autoD9253102_n = 15;
                for (autoD9253102_i = 1; autoD9253102_i &lt;= autoD9253102_n; autoD9253102_i += 1) {
                    libNtve_gf_UnitCreateFacingPoint(1, &quot;Reaper&quot;, 0, gv_moebiusForces, PointFromId(529810696), PointFromId(271955616));
                    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand(&quot;attack&quot;, 0), PointFromId(271955616)), c_orderQueueReplace);
                    libNtve_gf_UnitCreateFacingPoint(1, &quot;Reaper&quot;, 0, gv_moebiusForces, PointFromId(536107247), PointFromId(271955616));
                    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand(&quot;attack&quot;, 0), PointFromId(271955616)), c_orderQueueReplace);
                    Wait(2.0, c_timeGame);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_EventBoss3MarinesReinforcement_Init () {
                gt_EventBoss3MarinesReinforcement = TriggerCreate(&quot;gt_EventBoss3MarinesReinforcement_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Event Boss 3 Drop Reinforcement
            //--------------------------------------------------------------------------------------------------
            bool gt_EventBoss3DropReinforcement_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                libNtve_gf_UnitCreateFacingPoint(1, &quot;Battlecruiser&quot;, 0, gv_moebiusForces, PointFromId(1842854634), RegionGetCenter(RegionFromId(2)));
                UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand(&quot;Hyperjump&quot;, 0), PointFromId(1246415280)), c_orderQueueReplace);
                Wait(10.0, c_timeGame);
                libNtve_gf_UnitCreateFacingPoint(1, &quot;Battlecruiser&quot;, 0, gv_moebiusForces, PointFromId(440506862), RegionGetCenter(RegionFromId(2)));
                UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand(&quot;Hyperjump&quot;, 0), PointFromId(1246415280)), c_orderQueueReplace);
                Wait(10.0, c_timeGame);
                libNtve_gf_UnitCreateFacingPoint(1, &quot;Battlecruiser&quot;, 0, gv_moebiusForces, PointFromId(1842854634), RegionGetCenter(RegionFromId(2)));
                UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand(&quot;Hyperjump&quot;, 0), PointFromId(1246415280)), c_orderQueueReplace);
                Wait(1.0, c_timeGame);
                libNtve_gf_UnitCreateFacingPoint(1, &quot;Battlecruiser&quot;, 0, gv_moebiusForces, PointFromId(440506862), RegionGetCenter(RegionFromId(2)));
                UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand(&quot;Hyperjump&quot;, 0), PointFromId(1246415280)), c_orderQueueReplace);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_EventBoss3DropReinforcement_Init () {
                gt_EventBoss3DropReinforcement = TriggerCreate(&quot;gt_EventBoss3DropReinforcement_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Event Boss 3 Def System
            //--------------------------------------------------------------------------------------------------
            bool gt_EventBoss3DefSystem_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                if (((PlayerDifficulty(1) &gt;= 3) == true)) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;SentryGunUnderground&quot;, c_unitCreateIgnorePlacement, gv_moebiusForces, PointFromId(1271823996));
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;SentryGunUnderground&quot;, c_unitCreateIgnorePlacement, gv_moebiusForces, PointFromId(748580395));
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;SentryGunUnderground&quot;, c_unitCreateIgnorePlacement, gv_moebiusForces, PointFromId(616482528));
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;SentryGunUnderground&quot;, c_unitCreateIgnorePlacement, gv_moebiusForces, PointFromId(1415637215));
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;SentryGunUnderground&quot;, c_unitCreateIgnorePlacement, gv_moebiusForces, PointFromId(408602905));
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;SentryGunUnderground&quot;, c_unitCreateIgnorePlacement, gv_moebiusForces, PointFromId(448669837));
                }
                Wait(15.0, c_timeGame);
                libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;SentryGunUnderground&quot;, c_unitCreateIgnorePlacement, gv_moebiusForces, PointFromId(1271823996));
                libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;SentryGunUnderground&quot;, c_unitCreateIgnorePlacement, gv_moebiusForces, PointFromId(748580395));
                libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;SentryGunUnderground&quot;, c_unitCreateIgnorePlacement, gv_moebiusForces, PointFromId(616482528));
                libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;SentryGunUnderground&quot;, c_unitCreateIgnorePlacement, gv_moebiusForces, PointFromId(1415637215));
                libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;SentryGunUnderground&quot;, c_unitCreateIgnorePlacement, gv_moebiusForces, PointFromId(408602905));
                libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;SentryGunUnderground&quot;, c_unitCreateIgnorePlacement, gv_moebiusForces, PointFromId(448669837));
                Wait(15.0, c_timeGame);
                if (((PlayerDifficulty(1) &gt;= 4) == true)) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;SentryGunUnderground&quot;, c_unitCreateIgnorePlacement, gv_moebiusForces, PointFromId(1271823996));
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;SentryGunUnderground&quot;, c_unitCreateIgnorePlacement, gv_moebiusForces, PointFromId(748580395));
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;SentryGunUnderground&quot;, c_unitCreateIgnorePlacement, gv_moebiusForces, PointFromId(616482528));
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;SentryGunUnderground&quot;, c_unitCreateIgnorePlacement, gv_moebiusForces, PointFromId(1415637215));
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;SentryGunUnderground&quot;, c_unitCreateIgnorePlacement, gv_moebiusForces, PointFromId(408602905));
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;SentryGunUnderground&quot;, c_unitCreateIgnorePlacement, gv_moebiusForces, PointFromId(448669837));
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_EventBoss3DefSystem_Init () {
                gt_EventBoss3DefSystem = TriggerCreate(&quot;gt_EventBoss3DefSystem_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Ping objective 3
            //--------------------------------------------------------------------------------------------------
            bool gt_Pingobjective3_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
                libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(&quot;GhostAlternatePortrait&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), SoundLink(&quot;Ac_Dilemma_Intro4&quot;, -1), 0.0, c_transmissionDurationAdd, false);
                libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
                libCOMI_gf_PingMinimapCampaign(PlayerGroupAll(), UnitGetPosition(UnitFromId(1608419654)), 2.0, Color(0.00, 100.00, 0.00));
                libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_Primary, UnitGetPosition(UnitFromId(1608419654)), StringExternal(&quot;Param/Value/D2B38EF3&quot;));
                gv_pingCell3 = PingLastCreated();
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_Pingobjective3_Init () {
                gt_Pingobjective3 = TriggerCreate(&quot;gt_Pingobjective3_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Entering Boss 3 room
            //--------------------------------------------------------------------------------------------------
            bool gt_EnteringBoss3room_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                    if (!((gv_GameOver == false))) {
                        return false;
                    }
                    if (!(((UnitGetOwner(EventUnit()) == gv_pLAYER1) || (UnitGetOwner(EventUnit()) == gv_pLAYER2)))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                TriggerExecute(gt_Pingobjective3, true, false);
                if ((UnitIsAlive(UnitFromId(1608419654)) == false)) {
                    return true;
                }
                libCOMI_gf_AttachReticleEffectAndTextTagOnUnit(libCOMI_ge_CampaginReticleType_TerranMainObjective, libCOMI_ge_CampaginReticleSize_Large, StringExternal(&quot;Param/Value/3147E2D8&quot;), gv_eventBoss3Beacon, &quot;Ref_Center&quot;);
                libHots_gf_StoreActorForUnit(gv_eventBoss3Beacon, 1, libNtve_gf_ActorLastCreated());
                libHots_gf_StoreTextTagForUnit(gv_eventBoss3Beacon, 1, TextTagLastCreated());
                libCOMI_gf_PingMinimapCampaign(PlayerGroupAll(), UnitGetPosition(UnitFromId(1608419654)), 2.0, Color(100.00, 0.00, 0.00));
                TriggerExecute(gt_EnteringBossRoomTransmission, true, false);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_EnteringBoss3room_Init () {
                gt_EnteringBoss3room = TriggerCreate(&quot;gt_EnteringBoss3room_Func&quot;);
                TriggerAddEventUnitRegion(gt_EnteringBoss3room, null, RegionFromId(15), true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Boss 3 Pop
            //--------------------------------------------------------------------------------------------------
            bool gt_Boss3Pop_Func (bool testConds, bool runActions) {
                string autoF0C8684F_val;
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                CameraShakeStart(1, c_cameraPositionTarget, c_cameraDirectionZ, 1.0, 2.0, 100.0, 2.5);
                UnitKill(UnitFromId(1608419654));
                libCOMI_gf_DestroyPingCoop(gv_pingCell3);
                libNtve_gf_KillModel(libHots_gf_ActorForUnit(UnitFromId(1608419654), 1));
                TextTagDestroy(libHots_gf_TextTagForUnit(UnitFromId(1608419654), 1));
                libNtve_gf_UnitCreateFacingPoint(1, gv_bossType3, 0, gv_superHybrids, RegionGetCenter(RegionFromId(12)), RegionGetCenter(RegionFromId(7)));
                gv_boss3 = UnitLastCreated();
                libHots_gf_PlaySoundLinkasMusic(SoundLink(&quot;ACDilemma_Music_BossBattle&quot;, -1), true, false);
                libNtve_gf_MakeUnitInvulnerable(UnitLastCreated(), true);
                UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), PointFromId(1246415280)), c_orderQueueReplace);
                libNtve_gf_PauseUnit(UnitLastCreated(), true);
                TriggerExecute(gt_CheckCells, true, false);
                autoF0C8684F_val = gv_bossType3;
                if (autoF0C8684F_val == &quot;Garg&quot;) {
                    libNtve_gf_DisplayBossBar(3, &quot;Assets\\Textures\\hybridzergadvancedportrait_static.dds&quot;, UnitGetName(UnitLastCreated()), 100, gv_humanPG);
                }
                else if (autoF0C8684F_val == &quot;Fuul&quot;) {
                    libNtve_gf_DisplayBossBar(3, &quot;Assets\\Textures\\hybridprotossportrait_static.dds&quot;, UnitGetName(UnitLastCreated()), 100, gv_humanPG);
                }
                else if (autoF0C8684F_val == &quot;Cort&quot;) {
                    libNtve_gf_DisplayBossBar(3, &quot;Assets\\Textures\\hybridprotossadvancedportrait_static.dds&quot;, UnitGetName(UnitLastCreated()), 100, gv_humanPG);
                }
                else {
                }
                libNtve_gf_SetBossBarBoss(3, UnitLastCreated(), true);
                libNtve_gf_SetBossBarRace(3, libNtve_ge_BossBarRace_Protoss, true);
                if ((UnitIsAlive(gv_boss2) == true) &amp;&amp; (UnitGetType(gv_boss2) != UnitGetType(gv_boss3))) {
                    if ((UnitIsAlive(gv_boss1) == true)) {
                        libNtve_gf_MoveBossBar(3, c_anchorTop, 0, 300);
                    }
                    else {
                        libNtve_gf_MoveBossBar(3, c_anchorTop, 0, 200);
                    }
                }
                else {
                    if ((UnitIsAlive(gv_boss1) == true)) {
                        libNtve_gf_MoveBossBar(3, c_anchorTop, 0, 200);
                    }
                    else {
                        libNtve_gf_MoveBossBar(3, c_anchorTop, 0, 100);
                    }
                }
                gf_TrackBossWithPing(UnitLastCreated());
                libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Large, libNtve_ge_ExplosionType_Terran, Point(186.5, 141.5));
                Wait(0.5, c_timeGame);
                libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Large, libNtve_ge_ExplosionType_Terran, Point(185.5, 140.5));
                Wait(0.5, c_timeGame);
                libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Large, libNtve_ge_ExplosionType_Terran, Point(185.5, 142.5));
                Wait(0.5, c_timeGame);
                UnitGroupLoopBegin(UnitGroup(&quot;Scientist&quot;, 0, RegionFromId(15), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0));
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    UnitKill(UnitGroupLoopCurrent());
                }
                UnitGroupLoopEnd();
                libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Large, libNtve_ge_ExplosionType_Terran, Point(187.5, 142.5));
                Wait(0.5, c_timeGame);
                libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Large, libNtve_ge_ExplosionType_Terran, Point(187.5, 140.5));
                Wait(0.5, c_timeGame);
                libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Large, libNtve_ge_ExplosionType_Terran, Point(186.5, 141.5));
                Wait(5.0, c_timeGame);
                libNtve_gf_MakeUnitInvulnerable(UnitLastCreated(), false);
                libNtve_gf_PauseUnit(UnitLastCreated(), false);
                Wait(60.0, c_timeGame);
                TriggerExecute(gt_Boss3Wave, true, false);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_Boss3Pop_Init () {
                gt_Boss3Pop = TriggerCreate(&quot;gt_Boss3Pop_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Boss 3 Wave
            //--------------------------------------------------------------------------------------------------
            bool gt_Boss3Wave_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((UnitIsAlive(gv_boss3) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                libCOMI_gf_ShareVisionofUnitWithHumansCoop(gv_boss3, true);
                libCOMI_gf_PingMinimapCampaign(PlayerGroupAll(), UnitGetPosition(gv_boss3), 2.0, Color(100.00, 0.00, 0.00));
                SoundPlayForPlayer(SoundLink(&quot;ZEvoMusicStinger&quot;, -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
                libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
                libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(&quot;GhostAlternatePortrait&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), SoundLink(&quot;Ac_Dilemma_Move3&quot;, -1), 0.0, c_transmissionDurationAdd, true);
                libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
                AIAttackWaveSetTargetPoint(gv_superHybrids, PointFromId(1465535020));
                AIAttackWaveUseUnit(gv_superHybrids, gv_boss3);
                AIAttackWaveSend(gv_superHybrids, 0, false);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_Boss3Wave_Init () {
                gt_Boss3Wave = TriggerCreate(&quot;gt_Boss3Wave_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Boss 3 Die
            //--------------------------------------------------------------------------------------------------
            bool gt_Boss3Die_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                GameSetLighting(&quot;MoebiusLabSpace1&quot;, 2.0);
                libNtve_gf_ShowHideBossBar(false, 3);
                TriggerExecute(gt_Checkvictory, true, false);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_Boss3Die_Init () {
                gt_Boss3Die = TriggerCreate(&quot;gt_Boss3Die_Func&quot;);
                TriggerAddEventUnitDied(gt_Boss3Die, UnitRefFromVariable(&quot;gv_boss3&quot;));
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Final Boss Pop
            //--------------------------------------------------------------------------------------------------
            bool gt_FinalBossPop_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                SoundPlayForPlayer(SoundLink(&quot;PUlnar02_Music_HybridStinger2&quot;, -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
                TriggerEnable(gt_EventBoss1, false);
                TriggerEnable(gt_EventBoss2, false);
                TriggerEnable(gt_EventBoss3, false);
                libNtve_gf_KillModel(libHots_gf_ActorForUnit(gv_eventBoss1Beacon, 1));
                TextTagDestroy(libHots_gf_TextTagForUnit(gv_eventBoss1Beacon, 1));
                libNtve_gf_KillModel(libHots_gf_ActorForUnit(gv_eventBoss2Beacon, 1));
                TextTagDestroy(libHots_gf_TextTagForUnit(gv_eventBoss2Beacon, 1));
                libNtve_gf_KillModel(libHots_gf_ActorForUnit(gv_eventBoss3Beacon, 1));
                TextTagDestroy(libHots_gf_TextTagForUnit(gv_eventBoss3Beacon, 1));
                UnitRemove(gv_eventBoss1Beacon);
                UnitRemove(gv_eventBoss2Beacon);
                UnitRemove(gv_eventBoss3Beacon);
                TriggerStop(gt_EventBoss1);
                TriggerStop(gt_EventBoss1AgentPRVanish);
                TriggerStop(gt_EventBoss2);
                TriggerStop(gt_EventBoss2AgentPRVanish);
                TriggerStop(gt_EventBoss3);
                TriggerStop(gt_EventBoss3AgentPRVanish);
                TriggerExecute(gt_Boss1Pop, true, false);
                TriggerExecute(gt_Boss2Pop, true, false);
                TriggerExecute(gt_Boss3Pop, true, false);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_FinalBossPop_Init () {
                gt_FinalBossPop = TriggerCreate(&quot;gt_FinalBossPop_Func&quot;);
                TriggerAddEventTimeElapsed(gt_FinalBossPop, libLotv_gf_DifficultyValueInt2(1800, 1800, 1800, 1500), c_timeGame);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Final Boss Wave
            //--------------------------------------------------------------------------------------------------
            bool gt_FinalBossWave_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                libCOMI_gf_EnableDisableCoopAIWavePings(false);
                TriggerEnable(gt_EnemyAttackingQ, false);
                TriggerExecute(gt_FinalBC, true, false);
                TriggerExecute(gt_FinalSiege, true, false);
                TriggerExecute(gt_FinalSupportwave, true, false);
                while (true) {
                    GameSetLighting(&quot;MoebiusLabSpace3&quot;, 2.0);
                    SoundPlayAtPointForPlayer(SoundLink(&quot;Alert_BaseUnderAttackKlaxon&quot;, -1), c_maxPlayers, PlayerGroupAll(), PointFromId(754052417), 0.0, 200.0, 0.0);
                    Wait(3.0, c_timeReal);
                    GameSetLighting(&quot;MoebiusLabSpace2&quot;, 2.0);
                    Wait(3.0, c_timeReal);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_FinalBossWave_Init () {
                gt_FinalBossWave = TriggerCreate(&quot;gt_FinalBossWave_Func&quot;);
                TriggerAddEventTimeElapsed(gt_FinalBossWave, libLotv_gf_DifficultyValueInt2(1880, 1880, 1880, 1580), c_timeGame);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Final BC
            //--------------------------------------------------------------------------------------------------
            bool gt_FinalBC_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                if (((PlayerDifficulty(1) &gt;= 3) == true)) {
                    while (true) {
                        Wait(30.0, c_timeGame);
                        libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;Battlecruiser&quot;, 0, gv_moebiusForces, PointFromId(1842854634));
                        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand(&quot;Hyperjump&quot;, 0), PointFromId(1508898338)), c_orderQueueReplace);
                        libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;Battlecruiser&quot;, 0, gv_moebiusForces, PointFromId(440506862));
                        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand(&quot;Hyperjump&quot;, 0), PointFromId(865330623)), c_orderQueueReplace);
                    }
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_FinalBC_Init () {
                gt_FinalBC = TriggerCreate(&quot;gt_FinalBC_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Final Siege
            //--------------------------------------------------------------------------------------------------
            bool gt_FinalSiege_Func (bool testConds, bool runActions) {
                int auto20C15DAA_n;
                int auto20C15DAA_i;
                // Actions
                if (!runActions) {
                    return true;
                }
                if (((PlayerDifficulty(1) &gt;= 4) == true)) {
                    auto20C15DAA_n = 10;
                    for (auto20C15DAA_i = 1; auto20C15DAA_i &lt;= auto20C15DAA_n; auto20C15DAA_i += 1) {
                        Wait(30.0, c_timeGame);
                        libNtve_gf_UnitCreateFacingPoint(1, &quot;HerculesLanderFlying&quot;, c_unitCreateIgnorePlacement, gv_moebiusForces, PointFromId(440506862), PointFromId(1474116318));
                        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropMovementSpeed, 5.5);
                        UnitCargoCreate(UnitLastCreated(), &quot;SiegeTankSieged&quot;, 2);
                        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand(&quot;HerculesTransport&quot;, 2), PointFromId(1474116318)), c_orderQueueAddToEnd);
                        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), PointFromId(440506862)), c_orderQueueAddToEnd);
                        Wait(30.0, c_timeGame);
                        libNtve_gf_UnitCreateFacingPoint(1, &quot;HerculesLanderFlying&quot;, c_unitCreateIgnorePlacement, gv_moebiusForces, PointFromId(1842854634), PointFromId(878246025));
                        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropMovementSpeed, 5.5);
                        UnitCargoCreate(UnitLastCreated(), &quot;SiegeTankSieged&quot;, 2);
                        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand(&quot;HerculesTransport&quot;, 2), PointFromId(878246025)), c_orderQueueAddToEnd);
                        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), PointFromId(1842854634)), c_orderQueueAddToEnd);
                    }
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_FinalSiege_Init () {
                gt_FinalSiege = TriggerCreate(&quot;gt_FinalSiege_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Final Support wave
            //--------------------------------------------------------------------------------------------------
            bool gt_FinalSupportwave_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                while (true) {
                    Wait(20.0, c_timeGame);
                    if ((UnitIsAlive(gv_boss1) == true)) {
                        gf_CreateAICommanderPodAttack(gv_amonReinforcements1, libCOMI_ge_CoopAIAttackWaveBuckets__5Large, libCOMI_ge_CoopAITechLevelBuckets__2EarlyMid, UnitGetPosition(gv_boss1), PointFromId(1465535020));
                    }
                    if ((UnitIsAlive(gv_boss2) == true)) {
                        gf_CreateAICommanderPodAttack(gv_amonReinforcements1, libCOMI_ge_CoopAIAttackWaveBuckets__5Large, libCOMI_ge_CoopAITechLevelBuckets__2EarlyMid, UnitGetPosition(gv_boss2), PointFromId(1465535020));
                    }
                    if ((UnitIsAlive(gv_boss3) == true)) {
                        gf_CreateAICommanderPodAttack(gv_amonReinforcements1, libCOMI_ge_CoopAIAttackWaveBuckets__5Large, libCOMI_ge_CoopAITechLevelBuckets__2EarlyMid, UnitGetPosition(gv_boss3), PointFromId(1465535020));
                    }
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_FinalSupportwave_Init () {
                gt_FinalSupportwave = TriggerCreate(&quot;gt_FinalSupportwave_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Mag Respawn
            //--------------------------------------------------------------------------------------------------
            bool gt_MagRespawn_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                    if (!((UnitIsAlive(UnitFromId(908507564)) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((UnitCount(&quot;SJCloakedMine&quot;, gv_moebiusForces, RegionFromId(39), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0) &lt; 1)) {
                    Wait(0.5, c_timeGame);
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;SJCloakedMine&quot;, 0, gv_moebiusForces, RegionGetCenter(RegionFromId(39)));
                    UnitSetState(UnitLastCreated(), c_unitStateInvulnerable, true);
                }
                if ((UnitCount(&quot;SJCloakedMine&quot;, gv_moebiusForces, RegionFromId(40), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0) &lt; 1)) {
                    Wait(0.5, c_timeGame);
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;SJCloakedMine&quot;, 0, gv_moebiusForces, RegionGetCenter(RegionFromId(40)));
                    UnitSetState(UnitLastCreated(), c_unitStateInvulnerable, true);
                }
                if ((UnitCount(&quot;SJCloakedMine&quot;, gv_moebiusForces, RegionFromId(41), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0) &lt; 1)) {
                    Wait(0.5, c_timeGame);
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;SJCloakedMine&quot;, 0, gv_moebiusForces, RegionGetCenter(RegionFromId(41)));
                    UnitSetState(UnitLastCreated(), c_unitStateInvulnerable, true);
                }
                if ((UnitCount(&quot;SJCloakedMine&quot;, gv_moebiusForces, RegionFromId(42), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0) &lt; 1)) {
                    Wait(0.5, c_timeGame);
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;SJCloakedMine&quot;, 0, gv_moebiusForces, RegionGetCenter(RegionFromId(42)));
                    UnitSetState(UnitLastCreated(), c_unitStateInvulnerable, true);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_MagRespawn_Init () {
                gt_MagRespawn = TriggerCreate(&quot;gt_MagRespawn_Func&quot;);
                TriggerAddEventTimePeriodic(gt_MagRespawn, libLotv_gf_DifficultyValueFixed2(20.0, 16.0, 12.0, 10.0), c_timeGame);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Entering Boss Room Transmission
            //--------------------------------------------------------------------------------------------------
            bool gt_EnteringBossRoomTransmission_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                Wait(1.0, c_timeGame);
                libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
                libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(&quot;GhostAlternatePortrait&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), gv_enteringBossRoomTransmission, 0.0, c_transmissionDurationAdd, true);
                libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
                if ((gv_enteringBossRoomTransmission == SoundLink(&quot;Ac_Dilemma_Enter1&quot;, -1))) {
                    gv_enteringBossRoomTransmission = SoundLink(&quot;Ac_Dilemma_Enter2&quot;, -1);
                }
                else {
                    gv_enteringBossRoomTransmission = SoundLink(&quot;Ac_Dilemma_Enter3&quot;, -1);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_EnteringBossRoomTransmission_Init () {
                gt_EnteringBossRoomTransmission = TriggerCreate(&quot;gt_EnteringBossRoomTransmission_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Enemy Attacking Q
            //--------------------------------------------------------------------------------------------------
            bool gt_EnemyAttackingQ_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((libCOMI_gf_GameIsOver() == false))) {
                        return false;
                    }
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                TriggerQueueEnter();
                libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
                libCOMI_gf_SendMissionTransmission(&quot;AttackWave&quot;, true, RandomInt(gv_pLAYER_01_USER, gv_pLAYER_02_USER));
                libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
                TriggerQueueExit();
                Wait(20.0, c_timeAI);
                TriggerEnable(TriggerGetCurrent(), true);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_EnemyAttackingQ_Init () {
                gt_EnemyAttackingQ = TriggerCreate(&quot;gt_EnemyAttackingQ_Func&quot;);
                TriggerAddEventPlayerAIWave(gt_EnemyAttackingQ, gv_amonReinforcements1);
                TriggerAddEventPlayerAIWave(gt_EnemyAttackingQ, gv_amonReinforcements2);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Start AI
            //--------------------------------------------------------------------------------------------------
            bool gt_StartAI_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerExecute(gt_UpgradeAI, true, false);
                cai_start(&quot;aiDA87AEBD&quot;, gv_amonReinforcements1);
                cai_start(&quot;aiDA87AEBD&quot;, gv_amonReinforcements2);
                cai_waves_run(gv_amonReinforcements1, gv_humanPG);
                cai_waves_run(gv_amonReinforcements2, gv_humanPG);
                cai_waves_run(gv_superHybrids, gv_humanPG);
                libCOMI_gf_StartCoopAI(gv_amonReinforcements2, gv_pLAYER1);
                libCOMI_gf_StartCoopAI(gv_amonReinforcements1, gv_pLAYER1);
                AICampaignStart(gv_amonReinforcements2);
                AICampaignStart(gv_superHybrids);
                AICampaignStart(gv_moebiusForces);
                libCOMI_gf_EnableDisableCoopAIWavePings(true);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_StartAI_Init () {
                gt_StartAI = TriggerCreate(&quot;gt_StartAI_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Upgrade AI
            //--------------------------------------------------------------------------------------------------
            bool gt_UpgradeAI_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                Wait(libLotv_gf_DifficultyValueInt2(600, 600, 600, 480), c_timeGame);
                TechTreeUpgradeAddLevel(gv_moebiusForces, &quot;TerranInfantryArmorsLevel1&quot;, 1);
                TechTreeUpgradeAddLevel(gv_moebiusForces, &quot;TerranVehicleAndShipArmorsLevel1&quot;, 1);
                TechTreeUpgradeAddLevel(gv_amonReinforcements1, &quot;TerranInfantryArmorsLevel1&quot;, 1);
                TechTreeUpgradeAddLevel(gv_amonReinforcements1, &quot;TerranVehicleAndShipArmorsLevel1&quot;, 1);
                TechTreeUpgradeAddLevel(gv_amonReinforcements1, &quot;ZergGroundArmorsLevel1&quot;, 1);
                TechTreeUpgradeAddLevel(gv_amonReinforcements1, &quot;ZergFlyerArmorsLevel1&quot;, 1);
                TechTreeUpgradeAddLevel(gv_amonReinforcements1, &quot;ProtossGroundArmorsLevel1&quot;, 1);
                TechTreeUpgradeAddLevel(gv_amonReinforcements1, &quot;ProtossAirArmorsLevel1&quot;, 1);
                TechTreeUpgradeAddLevel(gv_amonReinforcements1, &quot;ProtossShieldsLevel1&quot;, 1);
                TechTreeUpgradeAddLevel(gv_amonReinforcements2, &quot;TerranInfantryArmorsLevel1&quot;, 1);
                TechTreeUpgradeAddLevel(gv_amonReinforcements2, &quot;TerranVehicleAndShipArmorsLevel1&quot;, 1);
                TechTreeUpgradeAddLevel(gv_amonReinforcements2, &quot;ZergGroundArmorsLevel1&quot;, 1);
                TechTreeUpgradeAddLevel(gv_amonReinforcements2, &quot;ZergFlyerArmorsLevel1&quot;, 1);
                TechTreeUpgradeAddLevel(gv_amonReinforcements2, &quot;ProtossGroundArmorsLevel1&quot;, 1);
                TechTreeUpgradeAddLevel(gv_amonReinforcements2, &quot;ProtossAirArmorsLevel1&quot;, 1);
                TechTreeUpgradeAddLevel(gv_amonReinforcements2, &quot;ProtossShieldsLevel1&quot;, 1);
                Wait(libLotv_gf_DifficultyValueInt2(300, 300, 300, 240), c_timeGame);
                TechTreeUpgradeAddLevel(gv_moebiusForces, &quot;TerranInfantryWeaponsLevel1&quot;, 1);
                TechTreeUpgradeAddLevel(gv_moebiusForces, &quot;TerranVehicleAndShipWeaponsLevel1&quot;, 1);
                TechTreeUpgradeAddLevel(gv_amonReinforcements1, &quot;TerranInfantryWeaponsLevel1&quot;, 1);
                TechTreeUpgradeAddLevel(gv_amonReinforcements1, &quot;TerranVehicleAndShipWeaponsLevel1&quot;, 1);
                TechTreeUpgradeAddLevel(gv_amonReinforcements1, &quot;ZergMeleeWeaponsLevel1&quot;, 1);
                TechTreeUpgradeAddLevel(gv_amonReinforcements1, &quot;ZergMissileWeaponsLevel1&quot;, 1);
                TechTreeUpgradeAddLevel(gv_amonReinforcements1, &quot;ZergFlyerWeaponsLevel1&quot;, 1);
                TechTreeUpgradeAddLevel(gv_amonReinforcements1, &quot;ProtossGroundWeaponsLevel1&quot;, 1);
                TechTreeUpgradeAddLevel(gv_amonReinforcements1, &quot;HiddenProtossAirWeaponsLevel1&quot;, 1);
                TechTreeUpgradeAddLevel(gv_amonReinforcements2, &quot;TerranInfantryWeaponsLevel1&quot;, 1);
                TechTreeUpgradeAddLevel(gv_amonReinforcements2, &quot;TerranVehicleAndShipWeaponsLevel1&quot;, 1);
                TechTreeUpgradeAddLevel(gv_amonReinforcements2, &quot;ZergMeleeWeaponsLevel1&quot;, 1);
                TechTreeUpgradeAddLevel(gv_amonReinforcements2, &quot;ZergMissileWeaponsLevel1&quot;, 1);
                TechTreeUpgradeAddLevel(gv_amonReinforcements2, &quot;ZergFlyerWeaponsLevel1&quot;, 1);
                TechTreeUpgradeAddLevel(gv_amonReinforcements2, &quot;ProtossGroundWeaponsLevel1&quot;, 1);
                TechTreeUpgradeAddLevel(gv_amonReinforcements2, &quot;HiddenProtossAirWeaponsLevel1&quot;, 1);
                Wait(libLotv_gf_DifficultyValueInt2(300, 300, 300, 240), c_timeGame);
                TechTreeUpgradeAddLevel(gv_moebiusForces, &quot;TerranInfantryArmorsLevel2&quot;, 1);
                TechTreeUpgradeAddLevel(gv_moebiusForces, &quot;TerranVehicleAndShipArmorsLevel2&quot;, 1);
                TechTreeUpgradeAddLevel(gv_amonReinforcements1, &quot;TerranInfantryArmorsLevel2&quot;, 1);
                TechTreeUpgradeAddLevel(gv_amonReinforcements1, &quot;TerranVehicleAndShipArmorsLevel2&quot;, 1);
                TechTreeUpgradeAddLevel(gv_amonReinforcements1, &quot;ZergGroundArmorsLevel2&quot;, 1);
                TechTreeUpgradeAddLevel(gv_amonReinforcements1, &quot;ZergFlyerArmorsLevel2&quot;, 1);
                TechTreeUpgradeAddLevel(gv_amonReinforcements1, &quot;ProtossGroundArmorsLevel2&quot;, 1);
                TechTreeUpgradeAddLevel(gv_amonReinforcements1, &quot;ProtossAirArmorsLevel2&quot;, 1);
                TechTreeUpgradeAddLevel(gv_amonReinforcements1, &quot;ProtossShieldsLevel2&quot;, 1);
                TechTreeUpgradeAddLevel(gv_amonReinforcements2, &quot;TerranInfantryArmorsLevel2&quot;, 1);
                TechTreeUpgradeAddLevel(gv_amonReinforcements2, &quot;TerranVehicleAndShipArmorsLevel2&quot;, 1);
                TechTreeUpgradeAddLevel(gv_amonReinforcements2, &quot;ZergGroundArmorsLevel2&quot;, 1);
                TechTreeUpgradeAddLevel(gv_amonReinforcements2, &quot;ZergFlyerArmorsLevel2&quot;, 1);
                TechTreeUpgradeAddLevel(gv_amonReinforcements2, &quot;ProtossGroundArmorsLevel2&quot;, 1);
                TechTreeUpgradeAddLevel(gv_amonReinforcements2, &quot;ProtossAirArmorsLevel2&quot;, 1);
                TechTreeUpgradeAddLevel(gv_amonReinforcements2, &quot;ProtossShieldsLevel2&quot;, 1);
                Wait(libLotv_gf_DifficultyValueInt2(300, 300, 300, 240), c_timeGame);
                TechTreeUpgradeAddLevel(gv_moebiusForces, &quot;TerranInfantryWeaponsLevel2&quot;, 1);
                TechTreeUpgradeAddLevel(gv_moebiusForces, &quot;TerranVehicleAndShipWeaponsLevel2&quot;, 1);
                TechTreeUpgradeAddLevel(gv_amonReinforcements1, &quot;TerranInfantryWeaponsLevel2&quot;, 1);
                TechTreeUpgradeAddLevel(gv_amonReinforcements1, &quot;TerranVehicleAndShipWeaponsLevel2&quot;, 1);
                TechTreeUpgradeAddLevel(gv_amonReinforcements1, &quot;ZergMeleeWeaponsLevel2&quot;, 1);
                TechTreeUpgradeAddLevel(gv_amonReinforcements1, &quot;ZergMissileWeaponsLevel2&quot;, 1);
                TechTreeUpgradeAddLevel(gv_amonReinforcements1, &quot;ZergFlyerWeaponsLevel2&quot;, 1);
                TechTreeUpgradeAddLevel(gv_amonReinforcements1, &quot;ProtossGroundWeaponsLevel2&quot;, 1);
                TechTreeUpgradeAddLevel(gv_amonReinforcements1, &quot;ProtossAirWeaponsLevel2&quot;, 1);
                TechTreeUpgradeAddLevel(gv_amonReinforcements2, &quot;TerranInfantryWeaponsLevel2&quot;, 1);
                TechTreeUpgradeAddLevel(gv_amonReinforcements2, &quot;TerranVehicleAndShipWeaponsLevel2&quot;, 1);
                TechTreeUpgradeAddLevel(gv_amonReinforcements2, &quot;ZergMeleeWeaponsLevel2&quot;, 1);
                TechTreeUpgradeAddLevel(gv_amonReinforcements2, &quot;ZergMissileWeaponsLevel2&quot;, 1);
                TechTreeUpgradeAddLevel(gv_amonReinforcements2, &quot;ZergFlyerWeaponsLevel2&quot;, 1);
                TechTreeUpgradeAddLevel(gv_amonReinforcements2, &quot;ProtossGroundWeaponsLevel2&quot;, 1);
                TechTreeUpgradeAddLevel(gv_amonReinforcements2, &quot;ProtossAirWeaponsLevel2&quot;, 1);
                Wait(libLotv_gf_DifficultyValueInt2(300, 300, 300, 240), c_timeGame);
                TechTreeUpgradeAddLevel(gv_moebiusForces, &quot;TerranInfantryArmorsLevel3&quot;, 1);
                TechTreeUpgradeAddLevel(gv_moebiusForces, &quot;TerranVehicleAndShipArmorsLevel3&quot;, 1);
                TechTreeUpgradeAddLevel(gv_amonReinforcements1, &quot;TerranInfantryArmorsLevel3&quot;, 1);
                TechTreeUpgradeAddLevel(gv_amonReinforcements1, &quot;TerranVehicleAndShipArmorsLevel3&quot;, 1);
                TechTreeUpgradeAddLevel(gv_amonReinforcements1, &quot;ZergGroundArmorsLevel3&quot;, 1);
                TechTreeUpgradeAddLevel(gv_amonReinforcements1, &quot;ZergFlyerArmorsLevel3&quot;, 1);
                TechTreeUpgradeAddLevel(gv_amonReinforcements1, &quot;ProtossGroundArmorsLevel3&quot;, 1);
                TechTreeUpgradeAddLevel(gv_amonReinforcements1, &quot;HiddenProtossAirArmorsLevel3&quot;, 1);
                TechTreeUpgradeAddLevel(gv_amonReinforcements1, &quot;ProtossShieldsLevel3&quot;, 1);
                TechTreeUpgradeAddLevel(gv_amonReinforcements2, &quot;TerranInfantryArmorsLevel3&quot;, 1);
                TechTreeUpgradeAddLevel(gv_amonReinforcements2, &quot;TerranVehicleAndShipArmorsLevel3&quot;, 1);
                TechTreeUpgradeAddLevel(gv_amonReinforcements2, &quot;ZergGroundArmorsLevel3&quot;, 1);
                TechTreeUpgradeAddLevel(gv_amonReinforcements2, &quot;ZergFlyerArmorsLevel3&quot;, 1);
                TechTreeUpgradeAddLevel(gv_amonReinforcements2, &quot;ProtossGroundArmorsLevel3&quot;, 1);
                TechTreeUpgradeAddLevel(gv_amonReinforcements2, &quot;HiddenProtossAirArmorsLevel3&quot;, 1);
                TechTreeUpgradeAddLevel(gv_amonReinforcements2, &quot;ProtossShieldsLevel3&quot;, 1);
                Wait(libLotv_gf_DifficultyValueInt2(300, 300, 300, 240), c_timeGame);
                TechTreeUpgradeAddLevel(gv_moebiusForces, &quot;TerranInfantryWeaponsLevel3&quot;, 1);
                TechTreeUpgradeAddLevel(gv_moebiusForces, &quot;TerranVehicleAndShipWeaponsLevel3&quot;, 1);
                TechTreeUpgradeAddLevel(gv_amonReinforcements1, &quot;TerranInfantryWeaponsLevel3&quot;, 1);
                TechTreeUpgradeAddLevel(gv_amonReinforcements1, &quot;TerranVehicleAndShipWeaponsLevel3&quot;, 1);
                TechTreeUpgradeAddLevel(gv_amonReinforcements1, &quot;ZergMeleeWeaponsLevel3&quot;, 1);
                TechTreeUpgradeAddLevel(gv_amonReinforcements1, &quot;ZergMissileWeaponsLevel3&quot;, 1);
                TechTreeUpgradeAddLevel(gv_amonReinforcements1, &quot;ZergFlyerWeaponsLevel3&quot;, 1);
                TechTreeUpgradeAddLevel(gv_amonReinforcements1, &quot;ProtossGroundWeaponsLevel3&quot;, 1);
                TechTreeUpgradeAddLevel(gv_amonReinforcements1, &quot;HiddenProtossAirWeaponsLevel3&quot;, 1);
                TechTreeUpgradeAddLevel(gv_amonReinforcements2, &quot;TerranInfantryWeaponsLevel3&quot;, 1);
                TechTreeUpgradeAddLevel(gv_amonReinforcements2, &quot;TerranVehicleAndShipWeaponsLevel3&quot;, 1);
                TechTreeUpgradeAddLevel(gv_amonReinforcements2, &quot;ZergMeleeWeaponsLevel3&quot;, 1);
                TechTreeUpgradeAddLevel(gv_amonReinforcements2, &quot;ZergMissileWeaponsLevel3&quot;, 1);
                TechTreeUpgradeAddLevel(gv_amonReinforcements2, &quot;ZergFlyerWeaponsLevel3&quot;, 1);
                TechTreeUpgradeAddLevel(gv_amonReinforcements2, &quot;ProtossGroundWeaponsLevel3&quot;, 1);
                TechTreeUpgradeAddLevel(gv_amonReinforcements2, &quot;HiddenProtossAirWeaponsLevel3&quot;, 1);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_UpgradeAI_Init () {
                gt_UpgradeAI = TriggerCreate(&quot;gt_UpgradeAI_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Wave1
            //--------------------------------------------------------------------------------------------------
            bool gt_Wave1_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
                libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(&quot;GhostAlternatePortrait&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), SoundLink(&quot;Ac_Dilemma_Wave1&quot;, -1), 0.0, c_transmissionDurationAdd, true);
                libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
                Wait(15.0, c_timeGame);
                gf_CreateAICommanderPodAttack(gv_amonReinforcements1, libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest, libCOMI_ge_CoopAITechLevelBuckets__1Early, PointFromId(1429415567), PointFromId(1465535020));
                gf_CreateAICommanderPodAttack(gv_amonReinforcements1, libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest, libCOMI_ge_CoopAITechLevelBuckets__1Early, PointFromId(1429415567), PointFromId(600878378));
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_Wave1_Init () {
                gt_Wave1 = TriggerCreate(&quot;gt_Wave1_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Wave2
            //--------------------------------------------------------------------------------------------------
            bool gt_Wave2_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                gf_CreateAICommanderPodAttack(gv_amonReinforcements1, libCOMI_ge_CoopAIAttackWaveBuckets__3Small, libCOMI_ge_CoopAITechLevelBuckets__2EarlyMid, PointFromId(1429415567), PointFromId(1465535020));
                gf_CreateAICommanderPodAttack(gv_amonReinforcements1, libCOMI_ge_CoopAIAttackWaveBuckets__3Small, libCOMI_ge_CoopAITechLevelBuckets__2EarlyMid, PointFromId(1429415567), PointFromId(600878378));
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_Wave2_Init () {
                gt_Wave2 = TriggerCreate(&quot;gt_Wave2_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Wave3
            //--------------------------------------------------------------------------------------------------
            bool gt_Wave3_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                gf_CreateAICommanderPodAttack(gv_amonReinforcements1, libCOMI_ge_CoopAIAttackWaveBuckets__4Medium, libCOMI_ge_CoopAITechLevelBuckets__3Mid, PointFromId(1429415567), PointFromId(1465535020));
                gf_CreateAICommanderPodAttack(gv_amonReinforcements1, libCOMI_ge_CoopAIAttackWaveBuckets__4Medium, libCOMI_ge_CoopAITechLevelBuckets__3Mid, PointFromId(1429415567), PointFromId(600878378));
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_Wave3_Init () {
                gt_Wave3 = TriggerCreate(&quot;gt_Wave3_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Wave4
            //--------------------------------------------------------------------------------------------------
            bool gt_Wave4_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                gf_CreateAICommanderDropAttack(gv_amonReinforcements1, libCOMI_ge_CoopAIAttackWaveBuckets__4Medium, libCOMI_ge_CoopAITechLevelBuckets__3Mid, PointFromId(1622094508), PointFromId(1337656939), PointFromId(1465535020));
                gf_CreateAICommanderDropAttack(gv_amonReinforcements2, libCOMI_ge_CoopAIAttackWaveBuckets__4Medium, libCOMI_ge_CoopAITechLevelBuckets__3Mid, PointFromId(226985801), PointFromId(1503391426), PointFromId(600878378));
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_Wave4_Init () {
                gt_Wave4 = TriggerCreate(&quot;gt_Wave4_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Wave5
            //--------------------------------------------------------------------------------------------------
            bool gt_Wave5_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                gf_CreateAICommanderPodAttack(gv_amonReinforcements1, libCOMI_ge_CoopAIAttackWaveBuckets__5Large, libCOMI_ge_CoopAITechLevelBuckets__4LateMid, PointFromId(478028536), PointFromId(1465535020));
                gf_CreateAICommanderPodAttack(gv_amonReinforcements1, libCOMI_ge_CoopAIAttackWaveBuckets__5Large, libCOMI_ge_CoopAITechLevelBuckets__4LateMid, PointFromId(478028536), PointFromId(600878378));
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_Wave5_Init () {
                gt_Wave5 = TriggerCreate(&quot;gt_Wave5_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Wave6
            //--------------------------------------------------------------------------------------------------
            bool gt_Wave6_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                gf_CreateAICommanderPodAttack(gv_amonReinforcements1, libCOMI_ge_CoopAIAttackWaveBuckets__5Large, libCOMI_ge_CoopAITechLevelBuckets__5Late, PointFromId(478028536), PointFromId(1465535020));
                gf_CreateAICommanderPodAttack(gv_amonReinforcements1, libCOMI_ge_CoopAIAttackWaveBuckets__5Large, libCOMI_ge_CoopAITechLevelBuckets__5Late, PointFromId(478028536), PointFromId(600878378));
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_Wave6_Init () {
                gt_Wave6 = TriggerCreate(&quot;gt_Wave6_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Wave7
            //--------------------------------------------------------------------------------------------------
            bool gt_Wave7_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                gf_CreateAICommanderPodAttack(gv_amonReinforcements1, libCOMI_ge_CoopAIAttackWaveBuckets__6Larger, libCOMI_ge_CoopAITechLevelBuckets_TechLevel06, PointFromId(464025286), PointFromId(1465535020));
                gf_CreateAICommanderDropAttack(gv_amonReinforcements2, libCOMI_ge_CoopAIAttackWaveBuckets__6Larger, libCOMI_ge_CoopAITechLevelBuckets_TechLevel06, PointFromId(226985801), PointFromId(1503391426), PointFromId(600878378));
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_Wave7_Init () {
                gt_Wave7 = TriggerCreate(&quot;gt_Wave7_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Wave8
            //--------------------------------------------------------------------------------------------------
            bool gt_Wave8_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                gf_CreateAICommanderDropAttack(gv_amonReinforcements1, libCOMI_ge_CoopAIAttackWaveBuckets__6Larger, libCOMI_ge_CoopAITechLevelBuckets_TechLevel06, PointFromId(1622094508), PointFromId(1337656939), PointFromId(1465535020));
                gf_CreateAICommanderPodAttack(gv_amonReinforcements2, libCOMI_ge_CoopAIAttackWaveBuckets__6Larger, libCOMI_ge_CoopAITechLevelBuckets_TechLevel06, PointFromId(464025286), PointFromId(600878378));
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_Wave8_Init () {
                gt_Wave8 = TriggerCreate(&quot;gt_Wave8_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Wave9
            //--------------------------------------------------------------------------------------------------
            bool gt_Wave9_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                gf_CreateAICommanderPodAttack(gv_amonReinforcements1, libCOMI_ge_CoopAIAttackWaveBuckets__7Largest, libCOMI_ge_CoopAITechLevelBuckets_TechLevel07, PointFromId(464025286), PointFromId(1465535020));
                gf_CreateAICommanderPodAttack(gv_amonReinforcements1, libCOMI_ge_CoopAIAttackWaveBuckets__7Largest, libCOMI_ge_CoopAITechLevelBuckets_TechLevel07, PointFromId(464025286), PointFromId(600878378));
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_Wave9_Init () {
                gt_Wave9 = TriggerCreate(&quot;gt_Wave9_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Wave10
            //--------------------------------------------------------------------------------------------------
            bool gt_Wave10_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                gf_CreateAICommanderPodAttack(gv_amonReinforcements1, libCOMI_ge_CoopAIAttackWaveBuckets__7Largest, libCOMI_ge_CoopAITechLevelBuckets_TechLevel07, PointFromId(464025286), PointFromId(1465535020));
                gf_CreateAICommanderPodAttack(gv_amonReinforcements1, libCOMI_ge_CoopAIAttackWaveBuckets__7Largest, libCOMI_ge_CoopAITechLevelBuckets_TechLevel07, PointFromId(464025286), PointFromId(600878378));
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_Wave10_Init () {
                gt_Wave10 = TriggerCreate(&quot;gt_Wave10_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Check victory
            //--------------------------------------------------------------------------------------------------
            bool gt_Checkvictory_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((UnitIsAlive(gv_boss1) == false) &amp;&amp; (UnitIsAlive(gv_boss2) == false) &amp;&amp; (UnitIsAlive(gv_boss3) == false)) {
                    TriggerExecute(gt_ObjectiveKillTheBoss03Complete, true, false);
                }
                else {
                    libHots_gf_StopSoundLinkCurrentlyPlayingasMusic();
                    SoundPlayForPlayer(SoundLink(&quot;PShakuras02_ObjectiveStinger&quot;, -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
                    SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryMusic, false, true);
                    TriggerExecute(gt_ObjectiveKillTheBoss02Complete, true, false);
                    TriggerExecute(gt_ObjectiveKillTheBoss01Complete, true, false);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_Checkvictory_Init () {
                gt_Checkvictory = TriggerCreate(&quot;gt_Checkvictory_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Check Cells
            //--------------------------------------------------------------------------------------------------
            bool gt_CheckCells_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((UnitIsAlive(UnitFromId(919745099)) == false) &amp;&amp; (UnitIsAlive(UnitFromId(111658737)) == false) &amp;&amp; (UnitIsAlive(UnitFromId(1608419654)) == false)) {
                    TimerWindowShow(gv_awakeningTimerWindow, PlayerGroupAll(), false);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_CheckCells_Init () {
                gt_CheckCells = TriggerCreate(&quot;gt_CheckCells_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Defeat Base Dead
            //--------------------------------------------------------------------------------------------------
            bool gt_DefeatBaseDead_Func (bool testConds, bool runActions) {
                // Variable Declarations
                point lv_cameraTarget;
                // Variable Initialization
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                    if (!((libCOMI_gf_GameIsOver() == false))) {
                        return false;
                    }
                    if (!(((libNtve_gf_UnitGroupIsDead(UnitGroup(null, gv_pLAYER1, null, UnitFilter((1 &lt;&lt; c_targetFilterPreventDefeat), 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 1)) == true) || (libNtve_gf_UnitGroupIsDead(UnitGroup(null, gv_pLAYER2, null, UnitFilter((1 &lt;&lt; c_targetFilterPreventDefeat), 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 1)) == true)))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                libCOMI_gf_GameOver(libCOMI_ge_CampaignMissionGameResultType_Defeat);
                TransmissionClearAll();
                TriggerQueuePause(true);
                TriggerQueueClear(c_triggerQueueRemove);
                libCOMI_gf_CinematicModeCampaign(true, 1.5, true);
                if ((libNtve_gf_UnitGroupIsDead(UnitGroup(null, gv_pLAYER1, null, UnitFilter((1 &lt;&lt; c_targetFilterPreventDefeat), 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 1)) == true)) {
                    libCOMI_gf_DisplayCampaignMessage(PlayerGroupSingle(gv_pLAYER1), libCOMI_ge_CampaignMessageType_MissionFailed, StringExternal(&quot;Param/Value/5E486C66&quot;), libCOMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
                    libCOMI_gf_DisplayCampaignMessage(PlayerGroupSingle(gv_pLAYER2), libCOMI_ge_CampaignMessageType_MissionFailed, StringExternal(&quot;Param/Value/6AD4C962&quot;), libCOMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
                    lv_cameraTarget = PlayerStartLocation(gv_pLAYER_01_USER);
                }
                else {
                    libCOMI_gf_DisplayCampaignMessage(PlayerGroupSingle(gv_pLAYER2), libCOMI_ge_CampaignMessageType_MissionFailed, StringExternal(&quot;Param/Value/555E324D&quot;), libCOMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
                    libCOMI_gf_DisplayCampaignMessage(PlayerGroupSingle(gv_pLAYER1), libCOMI_ge_CampaignMessageType_MissionFailed, StringExternal(&quot;Param/Value/A5BD04E6&quot;), libCOMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
                    lv_cameraTarget = PlayerStartLocation(gv_pLAYER_02_USER);
                }
                Wait(2.0, c_timeReal);
                UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0));
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    libNtve_gf_MakeUnitInvulnerable(UnitGroupLoopCurrent(), true);
                }
                UnitGroupLoopEnd();
                CameraLockInput(gv_pLAYER1, true);
                CameraLockInput(gv_pLAYER2, true);
                UnitClearSelection(gv_pLAYER1);
                UnitClearSelection(gv_pLAYER2);
                UISetSelectionTypeEnabled(PlayerGroupAll(), c_localSelectionTypeUnknown, false);
                if ((RegionContainsPoint(RegionCircle(lv_cameraTarget, 8.0), CameraGetTarget(gv_pLAYER1)) == false)) {
                    CameraApplyInfo(gv_pLAYER1, CameraInfoDefault(), 2.0, -1, 10.0, false);
                    CameraPan(gv_pLAYER1, lv_cameraTarget, 2.0, -1, 10.0, false);
                }
                if ((RegionContainsPoint(RegionCircle(lv_cameraTarget, 8.0), CameraGetTarget(gv_pLAYER2)) == false)) {
                    CameraApplyInfo(gv_pLAYER2, CameraInfoDefault(), 2.0, -1, 10.0, false);
                    CameraPan(gv_pLAYER2, lv_cameraTarget, 2.0, -1, 10.0, false);
                }
                Wait(4.0, c_timeReal);
                UISetCursorVisible(PlayerGroupAll(), true);
                TriggerExecute(gt_Defeat, true, false);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_DefeatBaseDead_Init () {
                gt_DefeatBaseDead = TriggerCreate(&quot;gt_DefeatBaseDead_Func&quot;);
                TriggerAddEventTimePeriodic(gt_DefeatBaseDead, 1.0, c_timeAI);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Victory
            //--------------------------------------------------------------------------------------------------
            bool gt_Victory_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                libCOMI_gf_EndCampaignMission(c_gameOverVictory);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_Victory_Init () {
                gt_Victory = TriggerCreate(&quot;gt_Victory_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Defeat
            //--------------------------------------------------------------------------------------------------
            bool gt_Defeat_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                libCOMI_gf_EndCampaignMission(c_gameOverDefeat);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_Defeat_Init () {
                gt_Defeat = TriggerCreate(&quot;gt_Defeat_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Objective - Psi Inhibitor Must Survive Create
            //--------------------------------------------------------------------------------------------------
            bool gt_ObjectivePsiInhibitorMustSurviveCreate_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                libCOMI_gf_CreateObjectiveCampaign(&quot;AC_Dilemma_Primary02&quot;);
                gv_objectivePsiInhibitorMustSurvive = ObjectiveLastCreated();
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_ObjectivePsiInhibitorMustSurviveCreate_Init () {
                gt_ObjectivePsiInhibitorMustSurviveCreate = TriggerCreate(&quot;gt_ObjectivePsiInhibitorMustSurviveCreate_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Objective - Psi Inhibitor Must Survive Failed
            //--------------------------------------------------------------------------------------------------
            bool gt_ObjectivePsiInhibitorMustSurviveFailed_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                ObjectiveSetState(gv_objectivePsiInhibitorMustSurvive, c_objectiveStateFailed);
                CameraPan(gv_pLAYER1, PointFromId(2139145783), 2.0, -1, 10.0, false);
                CameraPan(gv_pLAYER2, PointFromId(2139145783), 2.0, -1, 10.0, false);
                Wait(5.0, c_timeGame);
                TriggerExecute(gt_Defeat, true, false);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_ObjectivePsiInhibitorMustSurviveFailed_Init () {
                gt_ObjectivePsiInhibitorMustSurviveFailed = TriggerCreate(&quot;gt_ObjectivePsiInhibitorMustSurviveFailed_Func&quot;);
                TriggerAddEventUnitDied(gt_ObjectivePsiInhibitorMustSurviveFailed, UnitRefFromVariable(&quot;gv_psiInhibitor&quot;));
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Objective - Kill The Boss 01 Create
            //--------------------------------------------------------------------------------------------------
            bool gt_ObjectiveKillTheBoss01Create_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                libCOMI_gf_CreateObjectiveCampaign(&quot;AC_Dilemma_Primary01&quot;);
                gv_objectiveKillTheBoss01 = ObjectiveLastCreated();
                TriggerEnable(gt_ObjectiveKillTheBoss02Complete, false);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_ObjectiveKillTheBoss01Create_Init () {
                gt_ObjectiveKillTheBoss01Create = TriggerCreate(&quot;gt_ObjectiveKillTheBoss01Create_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Objective - Kill The Boss 01 Complete
            //--------------------------------------------------------------------------------------------------
            bool gt_ObjectiveKillTheBoss01Complete_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                libCOMI_gf_SetMissionObjectiveProgress(&quot;AC_Dilemma_Primary01&quot;, 1);
                TechTreeUpgradeAddLevel(gv_superHybrids, &quot;BossPowerUp1&quot;, 1);
                TriggerEnable(gt_ObjectiveKillTheBoss02Complete, true);
                Wait(5.0, c_timeGame);
                libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
                libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(&quot;GhostAlternatePortrait&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), SoundLink(&quot;Ac_Dilemma_Kill1&quot;, -1), 0.0, c_transmissionDurationAdd, true);
                libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_ObjectiveKillTheBoss01Complete_Init () {
                gt_ObjectiveKillTheBoss01Complete = TriggerCreate(&quot;gt_ObjectiveKillTheBoss01Complete_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Objective - Kill The Boss 02 Complete
            //--------------------------------------------------------------------------------------------------
            bool gt_ObjectiveKillTheBoss02Complete_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                libCOMI_gf_SetMissionObjectiveProgress(&quot;AC_Dilemma_Primary01&quot;, 2);
                TechTreeUpgradeAddLevel(gv_superHybrids, &quot;BossPowerUp2&quot;, 1);
                Wait(5.0, c_timeGame);
                libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
                libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(&quot;GhostAlternatePortrait&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), SoundLink(&quot;Ac_Dilemma_Kill2&quot;, -1), 0.0, c_transmissionDurationAdd, true);
                libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_ObjectiveKillTheBoss02Complete_Init () {
                gt_ObjectiveKillTheBoss02Complete = TriggerCreate(&quot;gt_ObjectiveKillTheBoss02Complete_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Objective - Kill The Boss 03 Complete
            //--------------------------------------------------------------------------------------------------
            bool gt_ObjectiveKillTheBoss03Complete_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                Wait(1.0, c_timeGame);
                libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
                libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(&quot;GhostAlternatePortrait&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), SoundLink(&quot;Ac_Dilemma_Kill3&quot;, -1), 0.0, c_transmissionDurationAdd, true);
                libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
                libCOMI_gf_SetMissionObjectiveProgress(&quot;AC_Dilemma_Primary01&quot;, 3);
                ObjectiveSetState(gv_objectiveKillTheBoss01, c_objectiveStateCompleted);
                CameraPan(gv_pLAYER1, UnitGetPosition(gv_boss3), 2.0, -1, 10.0, false);
                CameraPan(gv_pLAYER2, UnitGetPosition(gv_boss3), 2.0, -1, 10.0, false);
                Wait(6.0, c_timeGame);
                TriggerExecute(gt_Victory, true, false);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_ObjectiveKillTheBoss03Complete_Init () {
                gt_ObjectiveKillTheBoss03Complete = TriggerCreate(&quot;gt_ObjectiveKillTheBoss03Complete_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Objective - Destroy The ComSat Create
            //--------------------------------------------------------------------------------------------------
            bool gt_ObjectiveDestroyTheComSatCreate_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                VisRevealArea(1, RegionFromId(43), 0.1, false);
                VisRevealArea(2, RegionFromId(43), 0.1, false);
                libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
                libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(&quot;GhostAlternatePortrait&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), SoundLink(&quot;Ac_Dilemma_Bonus1&quot;, -1), 0.0, c_transmissionDurationAdd, true);
                Wait(0.5, c_timeGame);
                libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(&quot;GhostAlternatePortrait&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), SoundLink(&quot;Ac_Dilemma_Bonus2&quot;, -1), 0.0, c_transmissionDurationAdd, true);
                libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
                libCOMI_gf_CreateObjectiveCampaign(&quot;AC_Dilemma_Bonus01&quot;);
                libCOMI_gf_SetObjectiveTimerCampaign(&quot;AC_Dilemma_Bonus01&quot;, gv_bonusTimer);
                gv_objectiveDestroyTheComSat = ObjectiveLastCreated();
                libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_Secondary, UnitGetPosition(UnitFromId(908507564)), StringExternal(&quot;Param/Value/3C053F0D&quot;));
                gv_bonusPing = PingLastCreated();
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_ObjectiveDestroyTheComSatCreate_Init () {
                gt_ObjectiveDestroyTheComSatCreate = TriggerCreate(&quot;gt_ObjectiveDestroyTheComSatCreate_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Objective - Destroy The ComSat Complete
            //--------------------------------------------------------------------------------------------------
            bool gt_ObjectiveDestroyTheComSatComplete_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                TriggerEnable(gt_ObjectiveDestroyTheComSatFailed, false);
                libCOMI_gf_SetMissionObjectiveProgress(&quot;AC_Dilemma_Bonus01&quot;, 1);
                ObjectiveSetState(gv_objectiveDestroyTheComSat, c_objectiveStateCompleted);
                libCOMI_gf_DestroyPingCoop(gv_bonusPing);
                Wait(5.0, c_timeGame);
                libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
                libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(&quot;GhostAlternatePortrait&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), SoundLink(&quot;Ac_Dilemma_BonusOK&quot;, -1), 0.0, c_transmissionDurationAdd, true);
                libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_ObjectiveDestroyTheComSatComplete_Init () {
                gt_ObjectiveDestroyTheComSatComplete = TriggerCreate(&quot;gt_ObjectiveDestroyTheComSatComplete_Func&quot;);
                TriggerAddEventUnitDied(gt_ObjectiveDestroyTheComSatComplete, UnitRefFromUnit(UnitFromId(908507564)));
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Objective - Destroy The ComSat Failed
            //--------------------------------------------------------------------------------------------------
            bool gt_ObjectiveDestroyTheComSatFailed_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                TriggerEnable(gt_ObjectiveDestroyTheComSatComplete, false);
                ObjectiveSetState(gv_objectivePsiInhibitorMustSurvive, c_objectiveStateFailed);
                Wait(5.0, c_timeGame);
                libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
                libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(&quot;GhostAlternatePortrait&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), SoundLink(&quot;Ac_Dilemma_BonusFA&quot;, -1), 0.0, c_transmissionDurationAdd, true);
                libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
                libCOMI_gf_DestroyPingCoop(gv_bonusPing);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_ObjectiveDestroyTheComSatFailed_Init () {
                gt_ObjectiveDestroyTheComSatFailed = TriggerCreate(&quot;gt_ObjectiveDestroyTheComSatFailed_Func&quot;);
                TriggerAddEventTimer(gt_ObjectiveDestroyTheComSatFailed, gv_bonusTimer);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger Initialization
            //--------------------------------------------------------------------------------------------------
            void InitTriggers2 () {
                gt_Init01LoadData_Init();
                gt_Init02Players_Init();
                gt_Init03LoadingComplete_Init();
                gt_Init04Technology_Init();
                gt_Init05Units_Init();
                gt_Init06MusicSound_Init();
                gt_Init07Environment_Init();
                gt_Init08Difficulties_Init();
                gt_Init09BossPick_Init();
                gt_Init10DevMode_Init();
                gt_StartGameQ_Init();
                gt_LevelUp1_Init();
                gt_LevelUp2_Init();
                gt_LevelUp3_Init();
                gt_BossPowerUp1_Init();
                gt_BossPowerUp2_Init();
                gt_BossPowerUp3_Init();
                gt_RiftReticle_Init();
                gt_InfoZoneEvent_Init();
                gt_IntroEvent_Init();
                gt_LeftsideEvent_Init();
                gt_LeftsideReinforcement_Init();
                gt_AirlockEvent_Init();
                gt_MainBaseEvent_Init();
                gt_SASEvent_Init();
                gt_BonusDiscovering_Init();
                gt_EntranceEvent_Init();
                gt_EventBoss1_Init();
                gt_EventBoss1AgentPRVanish_Init();
                gt_EventBoss1MarinesReinforcement_Init();
                gt_EventBoss1DropReinforcement_Init();
                gt_EventBoss1DefSystem_Init();
                gt_Pingobjective1_Init();
                gt_EnteringBoss1room_Init();
                gt_Boss1Pop_Init();
                gt_Boss1Wave_Init();
                gt_Boss1Die_Init();
                gt_EventBoss2_Init();
                gt_EventBoss2AgentPRVanish_Init();
                gt_EventBoss2MarinesReinforcement_Init();
                gt_EventBoss2DropReinforcement_Init();
                gt_EventBoss2DefSystem_Init();
                gt_Pingobjective2_Init();
                gt_EnteringBoss2room_Init();
                gt_Boss2Pop_Init();
                gt_Boss2Wave_Init();
                gt_Boss2Die_Init();
                gt_EventBoss3_Init();
                gt_EventBoss3AgentPRVanish_Init();
                gt_EventBoss3MarinesReinforcement_Init();
                gt_EventBoss3DropReinforcement_Init();
                gt_EventBoss3DefSystem_Init();
                gt_Pingobjective3_Init();
                gt_EnteringBoss3room_Init();
                gt_Boss3Pop_Init();
                gt_Boss3Wave_Init();
                gt_Boss3Die_Init();
                gt_FinalBossPop_Init();
                gt_FinalBossWave_Init();
                gt_FinalBC_Init();
                gt_FinalSiege_Init();
                gt_FinalSupportwave_Init();
                gt_MagRespawn_Init();
                gt_EnteringBossRoomTransmission_Init();
                gt_EnemyAttackingQ_Init();
                gt_StartAI_Init();
                gt_UpgradeAI_Init();
                gt_Wave1_Init();
                gt_Wave2_Init();
                gt_Wave3_Init();
                gt_Wave4_Init();
                gt_Wave5_Init();
                gt_Wave6_Init();
                gt_Wave7_Init();
                gt_Wave8_Init();
                gt_Wave9_Init();
                gt_Wave10_Init();
                gt_Checkvictory_Init();
                gt_CheckCells_Init();
                gt_DefeatBaseDead_Init();
                gt_Victory_Init();
                gt_Defeat_Init();
                gt_ObjectivePsiInhibitorMustSurviveCreate_Init();
                gt_ObjectivePsiInhibitorMustSurviveFailed_Init();
                gt_ObjectiveKillTheBoss01Create_Init();
                gt_ObjectiveKillTheBoss01Complete_Init();
                gt_ObjectiveKillTheBoss02Complete_Init();
                gt_ObjectiveKillTheBoss03Complete_Init();
                gt_ObjectiveDestroyTheComSatCreate_Init();
                gt_ObjectiveDestroyTheComSatComplete_Init();
                gt_ObjectiveDestroyTheComSatFailed_Init();
            }
            //--------------------------------------------------------------------------------------------------
            // Map Initialization
            //--------------------------------------------------------------------------------------------------
            void run () {
                InitLibs2();
                InitGlobals();
                InitCustomAI();
                InitTriggers2();
            }
        </ScriptCode>
        <InitFunc>run</InitFunc>
    </Element>
    <Element Type="Trigger" Id="47DDF0A2">
        <InitOff/>
        <Event Type="FunctionCall" Id="416E8FD4"/>
        <Action Type="FunctionCall" Id="8865AE46"/>
        <Action Type="FunctionCall" Id="F6989145"/>
        <Action Type="FunctionCall" Id="DFA3CE5B"/>
    </Element>
    <Element Type="FunctionCall" Id="416E8FD4">
        <FunctionDef Type="FunctionDef" Library="Ntve" Id="B1A02C2E"/>
        <Parameter Type="Param" Id="4482898D"/>
    </Element>
    <Element Type="Param" Id="4482898D">
        <ParameterDef Type="ParamDef" Library="Ntve" Id="177B3837"/>
        <Variable Type="Variable" Library="COMI" Id="05F415C7"/>
    </Element>
    <Element Type="FunctionCall" Id="8865AE46">
        <FunctionDef Type="FunctionDef" Library="Ntve" Id="00000242"/>
        <Parameter Type="Param" Id="F9165CBA"/>
        <Parameter Type="Param" Id="1C4798F1"/>
    </Element>
    <Element Type="Param" Id="F9165CBA">
        <ParameterDef Type="ParamDef" Library="Ntve" Id="00000419"/>
        <Value>5.0</Value>
        <ValueType Type="fixed"/>
    </Element>
    <Element Type="Param" Id="1C4798F1">
        <ParameterDef Type="ParamDef" Library="Ntve" Id="00000420"/>
        <Preset Type="PresetValue" Library="Ntve" Id="00000013"/>
    </Element>
    <Element Type="FunctionCall" Id="F6989145">
        <FunctionDef Type="FunctionDef" Library="Ntve" Id="4714FAB1"/>
        <Parameter Type="Param" Id="BD629378"/>
        <Parameter Type="Param" Id="4F9DDEFD"/>
        <Parameter Type="Param" Id="3D7F9A81"/>
    </Element>
    <Element Type="Param" Id="BD629378">
        <ParameterDef Type="ParamDef" Library="Ntve" Id="7AE7D80B"/>
        <FunctionCall Type="FunctionCall" Id="9010E24D"/>
    </Element>
    <Element Type="FunctionCall" Id="9010E24D">
        <FunctionDef Type="FunctionDef" Library="Ntve" Id="83DDFCCA"/>
        <Parameter Type="Param" Id="A62691F6"/>
        <Parameter Type="Param" Id="2170DF67"/>
        <Parameter Type="Param" Id="F632B17B"/>
        <Parameter Type="Param" Id="12E5E8CD"/>
    </Element>
    <Element Type="Param" Id="A62691F6">
        <ParameterDef Type="ParamDef" Library="Ntve" Id="5472A68E"/>
        <Value>60.0</Value>
        <ValueType Type="fixed"/>
    </Element>
    <Element Type="Param" Id="2170DF67">
        <ParameterDef Type="ParamDef" Library="Ntve" Id="489884C8"/>
        <Value>50.0</Value>
        <ValueType Type="fixed"/>
    </Element>
    <Element Type="Param" Id="F632B17B">
        <ParameterDef Type="ParamDef" Library="Ntve" Id="A8FB3DB1"/>
        <Value>40.0</Value>
        <ValueType Type="fixed"/>
    </Element>
    <Element Type="Param" Id="12E5E8CD">
        <ParameterDef Type="ParamDef" Library="Ntve" Id="7B9DBABD"/>
        <Value>30.0</Value>
        <ValueType Type="fixed"/>
    </Element>
    <Element Type="Param" Id="4F9DDEFD">
        <ParameterDef Type="ParamDef" Library="Ntve" Id="316EB9FB"/>
        <FunctionCall Type="FunctionCall" Id="25E09F8C"/>
    </Element>
    <Element Type="FunctionCall" Id="25E09F8C">
        <FunctionDef Type="FunctionDef" Library="Ntve" Id="83DDFCCA"/>
        <Parameter Type="Param" Id="5CD75EB5"/>
        <Parameter Type="Param" Id="FE0639D0"/>
        <Parameter Type="Param" Id="09C2729A"/>
        <Parameter Type="Param" Id="5F80B787"/>
    </Element>
    <Element Type="Param" Id="5CD75EB5">
        <ParameterDef Type="ParamDef" Library="Ntve" Id="5472A68E"/>
        <Value>90.0</Value>
        <ValueType Type="fixed"/>
    </Element>
    <Element Type="Param" Id="FE0639D0">
        <ParameterDef Type="ParamDef" Library="Ntve" Id="489884C8"/>
        <Value>80.0</Value>
        <ValueType Type="fixed"/>
    </Element>
    <Element Type="Param" Id="09C2729A">
        <ParameterDef Type="ParamDef" Library="Ntve" Id="A8FB3DB1"/>
        <Value>70.0</Value>
        <ValueType Type="fixed"/>
    </Element>
    <Element Type="Param" Id="5F80B787">
        <ParameterDef Type="ParamDef" Library="Ntve" Id="7B9DBABD"/>
        <Value>60.0</Value>
        <ValueType Type="fixed"/>
    </Element>
    <Element Type="Param" Id="3D7F9A81">
        <ParameterDef Type="ParamDef" Library="Ntve" Id="4B58C876"/>
        <Value>3</Value>
        <ValueType Type="int"/>
    </Element>
    <Element Type="FunctionCall" Id="DFA3CE5B">
        <FunctionDef Type="FunctionDef" Library="Ntve" Id="5FF15420"/>
        <Parameter Type="Param" Id="F1B13079"/>
        <Parameter Type="Param" Id="AB563E60"/>
        <Parameter Type="Param" Id="B6DD8B72"/>
    </Element>
    <Element Type="Param" Id="F1B13079">
        <ParameterDef Type="ParamDef" Library="Ntve" Id="6B513986"/>
        <Value>3</Value>
        <ValueType Type="int"/>
    </Element>
    <Element Type="Param" Id="AB563E60">
        <ParameterDef Type="ParamDef" Library="Ntve" Id="1F28C6FB"/>
        <Preset Type="PresetValue" Library="Ntve" Id="9F34ED12"/>
    </Element>
    <Element Type="Param" Id="B6DD8B72">
        <ParameterDef Type="ParamDef" Library="Ntve" Id="03495D2E"/>
        <ValueType Type="region"/>
        <ValueId Id="51"/>
    </Element>
</TriggerData>